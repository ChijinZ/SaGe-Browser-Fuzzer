<root root=true> = <lines count=1000>

# !lineguard try { <line> } catch(e) { }

!include common.txt
!include webref_js_helpers.txt
!include webref_js_helpers2.txt

!begin lines

<new GLenum> = <ANGLE_instanced_arrays>.VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE;
<ANGLE_instanced_arrays>.drawArraysInstancedANGLE(<GLenum>,<GLint>,<GLsizei>,<GLsizei>);
<ANGLE_instanced_arrays>.drawElementsInstancedANGLE(<GLenum>,<GLsizei>,<GLenum>,<GLintptr>,<GLsizei>);
<ANGLE_instanced_arrays>.vertexAttribDivisorANGLE(<GLuint>,<GLuint>);
!extends CSPViolationReportBody ReportBody;
<new ReportBody> = <CSPViolationReportBody>;
<new object> = <CSPViolationReportBody>.toJSON();
<new USVString> = <CSPViolationReportBody>.documentURL;
<new USVString> = <CSPViolationReportBody>.referrer;
<new USVString> = <CSPViolationReportBody>.blockedURL;
<new DOMString> = <CSPViolationReportBody>.effectiveDirective;
<new DOMString> = <CSPViolationReportBody>.originalPolicy;
<new USVString> = <CSPViolationReportBody>.sourceFile;
<new DOMString> = <CSPViolationReportBody>.sample;
<new SecurityPolicyViolationEventDisposition> = <CSPViolationReportBody>.disposition;
<new unsigned_short> = <CSPViolationReportBody>.statusCode;
<new unsigned_long> = <CSPViolationReportBody>.lineNumber;
<new unsigned_long> = <CSPViolationReportBody>.columnNumber;
!extends SecurityPolicyViolationEvent Event;
<new Event> = <SecurityPolicyViolationEvent>;
<new SecurityPolicyViolationEvent> = new SecurityPolicyViolationEvent(<DOMString>);
<new SecurityPolicyViolationEvent> = new SecurityPolicyViolationEvent(<DOMString>,<SecurityPolicyViolationEventInit>);
<new USVString> = <SecurityPolicyViolationEvent>.documentURI;
<new USVString> = <SecurityPolicyViolationEvent>.referrer;
<new USVString> = <SecurityPolicyViolationEvent>.blockedURI;
<new DOMString> = <SecurityPolicyViolationEvent>.effectiveDirective;
<new DOMString> = <SecurityPolicyViolationEvent>.violatedDirective;
<new DOMString> = <SecurityPolicyViolationEvent>.originalPolicy;
<new USVString> = <SecurityPolicyViolationEvent>.sourceFile;
<new DOMString> = <SecurityPolicyViolationEvent>.sample;
<new SecurityPolicyViolationEventDisposition> = <SecurityPolicyViolationEvent>.disposition;
<new unsigned_short> = <SecurityPolicyViolationEvent>.statusCode;
<new unsigned_long> = <SecurityPolicyViolationEvent>.lineNumber;
<new unsigned_long> = <SecurityPolicyViolationEvent>.columnNumber;
<new XMLSerializer> = new XMLSerializer();
<new DOMString> = <XMLSerializer>.serializeToString(<Node>);
<new DOMString> = <Element>.outerHTML;
<Element>.outerHTML = <DOMString>;
<Element>.insertAdjacentHTML(<DOMString>,<DOMString>);
<new DocumentFragment> = <Range>.createContextualFragment(<DOMString>);
<new GLenum> = <EXT_blend_minmax>.MIN_EXT;
<new GLenum> = <EXT_blend_minmax>.MAX_EXT;
<new GLenum> = <EXT_clip_cull_distance>.MAX_CLIP_DISTANCES_EXT;
<new GLenum> = <EXT_clip_cull_distance>.MAX_CULL_DISTANCES_EXT;
<new GLenum> = <EXT_clip_cull_distance>.MAX_COMBINED_CLIP_AND_CULL_DISTANCES_EXT;
<new GLenum> = <EXT_clip_cull_distance>.CLIP_DISTANCE0_EXT;
<new GLenum> = <EXT_clip_cull_distance>.CLIP_DISTANCE1_EXT;
<new GLenum> = <EXT_clip_cull_distance>.CLIP_DISTANCE2_EXT;
<new GLenum> = <EXT_clip_cull_distance>.CLIP_DISTANCE3_EXT;
<new GLenum> = <EXT_clip_cull_distance>.CLIP_DISTANCE4_EXT;
<new GLenum> = <EXT_clip_cull_distance>.CLIP_DISTANCE5_EXT;
<new GLenum> = <EXT_clip_cull_distance>.CLIP_DISTANCE6_EXT;
<new GLenum> = <EXT_clip_cull_distance>.CLIP_DISTANCE7_EXT;
<new GLenum> = <EXT_color_buffer_half_float>.RGBA16F_EXT;
<new GLenum> = <EXT_color_buffer_half_float>.RGB16F_EXT;
<new GLenum> = <EXT_color_buffer_half_float>.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT;
<new GLenum> = <EXT_color_buffer_half_float>.UNSIGNED_NORMALIZED_EXT;
!extends WebGLTimerQueryEXT WebGLObject;
<new WebGLObject> = <WebGLTimerQueryEXT>;
<new GLenum> = <EXT_disjoint_timer_query>.QUERY_COUNTER_BITS_EXT;
<new GLenum> = <EXT_disjoint_timer_query>.CURRENT_QUERY_EXT;
<new GLenum> = <EXT_disjoint_timer_query>.QUERY_RESULT_EXT;
<new GLenum> = <EXT_disjoint_timer_query>.QUERY_RESULT_AVAILABLE_EXT;
<new GLenum> = <EXT_disjoint_timer_query>.TIME_ELAPSED_EXT;
<new GLenum> = <EXT_disjoint_timer_query>.TIMESTAMP_EXT;
<new GLenum> = <EXT_disjoint_timer_query>.GPU_DISJOINT_EXT;
<new WebGLTimerQueryEXT> = <EXT_disjoint_timer_query>.createQueryEXT();
<EXT_disjoint_timer_query>.deleteQueryEXT(<WebGLTimerQueryEXT>);
<EXT_disjoint_timer_query>.isQueryEXT(<WebGLTimerQueryEXT>);
<EXT_disjoint_timer_query>.beginQueryEXT(<GLenum>,<WebGLTimerQueryEXT>);
<EXT_disjoint_timer_query>.endQueryEXT(<GLenum>);
<EXT_disjoint_timer_query>.queryCounterEXT(<WebGLTimerQueryEXT>,<GLenum>);
<new any> = <EXT_disjoint_timer_query>.getQueryEXT(<GLenum>,<GLenum>);
<new any> = <EXT_disjoint_timer_query>.getQueryObjectEXT(<WebGLTimerQueryEXT>,<GLenum>);
<new GLenum> = <EXT_disjoint_timer_query_webgl2>.QUERY_COUNTER_BITS_EXT;
<new GLenum> = <EXT_disjoint_timer_query_webgl2>.TIME_ELAPSED_EXT;
<new GLenum> = <EXT_disjoint_timer_query_webgl2>.TIMESTAMP_EXT;
<new GLenum> = <EXT_disjoint_timer_query_webgl2>.GPU_DISJOINT_EXT;
<EXT_disjoint_timer_query_webgl2>.queryCounterEXT(<WebGLQuery>,<GLenum>);
<new GLenum> = <EXT_sRGB>.SRGB_EXT;
<new GLenum> = <EXT_sRGB>.SRGB_ALPHA_EXT;
<new GLenum> = <EXT_sRGB>.SRGB8_ALPHA8_EXT;
<new GLenum> = <EXT_sRGB>.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT;
<new GLenum> = <EXT_texture_compression_bptc>.COMPRESSED_RGBA_BPTC_UNORM_EXT;
<new GLenum> = <EXT_texture_compression_bptc>.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT;
<new GLenum> = <EXT_texture_compression_bptc>.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
<new GLenum> = <EXT_texture_compression_bptc>.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;
<new GLenum> = <EXT_texture_compression_rgtc>.COMPRESSED_RED_RGTC1_EXT;
<new GLenum> = <EXT_texture_compression_rgtc>.COMPRESSED_SIGNED_RED_RGTC1_EXT;
<new GLenum> = <EXT_texture_compression_rgtc>.COMPRESSED_RED_GREEN_RGTC2_EXT;
<new GLenum> = <EXT_texture_compression_rgtc>.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
<new GLenum> = <EXT_texture_filter_anisotropic>.TEXTURE_MAX_ANISOTROPY_EXT;
<new GLenum> = <EXT_texture_filter_anisotropic>.MAX_TEXTURE_MAX_ANISOTROPY_EXT;
<new GLenum> = <EXT_texture_norm16>.R16_EXT;
<new GLenum> = <EXT_texture_norm16>.RG16_EXT;
<new GLenum> = <EXT_texture_norm16>.RGB16_EXT;
<new GLenum> = <EXT_texture_norm16>.RGBA16_EXT;
<new GLenum> = <EXT_texture_norm16>.R16_SNORM_EXT;
<new GLenum> = <EXT_texture_norm16>.RG16_SNORM_EXT;
<new GLenum> = <EXT_texture_norm16>.RGB16_SNORM_EXT;
<new GLenum> = <EXT_texture_norm16>.RGBA16_SNORM_EXT;
!extends IdentityCredential Credential;
<new Credential> = <IdentityCredential>;
<new USVString> = <IdentityCredential>.token;
<new Promise_undefined_> = new Promise(function(x){console.log("ok")});
<new sequence_IdentityCredentialLogoutRPsRequest_> = [<IdentityCredentialLogoutRPsRequest>];
<new IdentityCredentialLogoutRPsRequest> = <sequence_IdentityCredentialLogoutRPsRequest_>[0];
<new Promise_undefined_> = <IdentityCredential>.logoutRPs(<sequence_IdentityCredentialLogoutRPsRequest_>);
<IdentityProvider>.login();
<IdentityProvider>.logout();
<new sequence_BlobPart_> = [<BlobPart>];
<new BlobPart> = <sequence_BlobPart_>[0];
<new Blob> = new Blob();
<new Blob> = new Blob(<sequence_BlobPart_>);
<new Blob> = new Blob(<sequence_BlobPart_>,<BlobPropertyBag>);
<new unsigned_long_long> = <Blob>.size;
<new DOMString> = <Blob>.type;
<new Blob> = <Blob>.slice();
<new Blob> = <Blob>.slice(<long_long>);
<new Blob> = <Blob>.slice(<long_long>,<long_long>);
<new Blob> = <Blob>.slice(<long_long>,<long_long>,<DOMString>);
<new ReadableStream> = <Blob>.stream();
<new Promise_USVString_> = new Promise(function(x){console.log("ok")});
<new Promise_USVString_> = <Blob>.text();
<new Promise_ArrayBuffer_> = new Promise(function(x){console.log("ok")});
<new Promise_ArrayBuffer_> = <Blob>.arrayBuffer();
!extends File Blob;
<new Blob> = <File>;
<new File> = new File(<sequence_BlobPart_>,<USVString>);
<new File> = new File(<sequence_BlobPart_>,<USVString>,<FilePropertyBag>);
<new DOMString> = <File>.name;
<new long_long> = <File>.lastModified;
<new File> = <FileList>.item(<unsigned_long>);
<new unsigned_long> = <FileList>.length;
!extends FileReader EventTarget;
<new EventTarget> = <FileReader>;
<new FileReader> = new FileReader();
<FileReader>.readAsArrayBuffer(<Blob>);
<FileReader>.readAsBinaryString(<Blob>);
<FileReader>.readAsText(<Blob>);
<FileReader>.readAsText(<Blob>,<DOMString>);
<FileReader>.readAsDataURL(<Blob>);
<FileReader>.abort();
<new unsigned_short> = FileReader.EMPTY;
<new unsigned_short> = FileReader.LOADING;
<new unsigned_short> = FileReader.DONE;
<new unsigned_short> = <FileReader>.readyState;
<new union_DOMString1ArrayBuffer_> = <DOMString>;
<new union_DOMString1ArrayBuffer_> = <ArrayBuffer>;
<new union_DOMString1ArrayBuffer_> = <FileReader>.result;
<new DOMException> = <FileReader>.error;
<new EventHandler> = <FileReader>.onloadstart;
<FileReader>.onloadstart = <EventHandler>;
<new EventHandler> = <FileReader>.onprogress;
<FileReader>.onprogress = <EventHandler>;
<new EventHandler> = <FileReader>.onload;
<FileReader>.onload = <EventHandler>;
<new EventHandler> = <FileReader>.onabort;
<FileReader>.onabort = <EventHandler>;
<new EventHandler> = <FileReader>.onerror;
<FileReader>.onerror = <EventHandler>;
<new EventHandler> = <FileReader>.onloadend;
<FileReader>.onloadend = <EventHandler>;
<new FileReaderSync> = new FileReaderSync();
<new ArrayBuffer> = <FileReaderSync>.readAsArrayBuffer(<Blob>);
<new DOMString> = <FileReaderSync>.readAsBinaryString(<Blob>);
<new DOMString> = <FileReaderSync>.readAsText(<Blob>);
<new DOMString> = <FileReaderSync>.readAsText(<Blob>,<DOMString>);
<new DOMString> = <FileReaderSync>.readAsDataURL(<Blob>);
<new union_Blob1MediaSource_> = <Blob>;
<new union_Blob1MediaSource_> = <MediaSource>;
<new DOMString> = <URL>.createObjectURL(<union_Blob1MediaSource_>);
<URL>.revokeObjectURL(<DOMString>);
!extends IDBRequest EventTarget;
<new EventTarget> = <IDBRequest>;
<new any> = <IDBRequest>.result;
<new DOMException> = <IDBRequest>.error;
<new union_IDBObjectStore1IDBIndex1IDBCursor_> = <IDBObjectStore>;
<new union_IDBObjectStore1IDBIndex1IDBCursor_> = <IDBIndex>;
<new union_IDBObjectStore1IDBIndex1IDBCursor_> = <IDBCursor>;
<new union_IDBObjectStore1IDBIndex1IDBCursor_> = <IDBRequest>.source;
<new IDBTransaction> = <IDBRequest>.transaction;
<new IDBRequestReadyState> = <IDBRequest>.readyState;
<new EventHandler> = <IDBRequest>.onsuccess;
<IDBRequest>.onsuccess = <EventHandler>;
<new EventHandler> = <IDBRequest>.onerror;
<IDBRequest>.onerror = <EventHandler>;
!extends IDBOpenDBRequest IDBRequest;
<new IDBRequest> = <IDBOpenDBRequest>;
<new EventHandler> = <IDBOpenDBRequest>.onblocked;
<IDBOpenDBRequest>.onblocked = <EventHandler>;
<new EventHandler> = <IDBOpenDBRequest>.onupgradeneeded;
<IDBOpenDBRequest>.onupgradeneeded = <EventHandler>;
!extends IDBVersionChangeEvent Event;
<new Event> = <IDBVersionChangeEvent>;
<new IDBVersionChangeEvent> = new IDBVersionChangeEvent(<DOMString>);
<new IDBVersionChangeEvent> = new IDBVersionChangeEvent(<DOMString>,<IDBVersionChangeEventInit>);
<new unsigned_long_long> = <IDBVersionChangeEvent>.oldVersion;
<new unsigned_long_long> = <IDBVersionChangeEvent>.newVersion;
<new IDBOpenDBRequest> = <IDBFactory>.open(<DOMString>);
<new IDBOpenDBRequest> = <IDBFactory>.open(<DOMString>,<unsigned_long_long>);
<new IDBOpenDBRequest> = <IDBFactory>.deleteDatabase(<DOMString>);
<new sequence_IDBDatabaseInfo_> = [<IDBDatabaseInfo>];
<new IDBDatabaseInfo> = <sequence_IDBDatabaseInfo_>[0];
<new Promise_sequence_IDBDatabaseInfo__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_IDBDatabaseInfo__> = <IDBFactory>.databases();
<IDBFactory>.cmp(<any>,<any>);
!extends IDBDatabase EventTarget;
<new EventTarget> = <IDBDatabase>;
<new DOMString> = <IDBDatabase>.name;
<new unsigned_long_long> = <IDBDatabase>.version;
<new DOMStringList> = <IDBDatabase>.objectStoreNames;
<new sequence_DOMString_> = [<DOMString>];
<new DOMString> = <sequence_DOMString_>[0];
<new union_DOMString1sequence_DOMString__> = <DOMString>;
<new union_DOMString1sequence_DOMString__> = <sequence_DOMString_>;
<new IDBTransaction> = <IDBDatabase>.transaction(<union_DOMString1sequence_DOMString__>);
<new IDBTransaction> = <IDBDatabase>.transaction(<union_DOMString1sequence_DOMString__>,<IDBTransactionMode>);
<new IDBTransaction> = <IDBDatabase>.transaction(<union_DOMString1sequence_DOMString__>,<IDBTransactionMode>,<IDBTransactionOptions>);
<IDBDatabase>.close();
<new IDBObjectStore> = <IDBDatabase>.createObjectStore(<DOMString>);
<new IDBObjectStore> = <IDBDatabase>.createObjectStore(<DOMString>,<IDBObjectStoreParameters>);
<IDBDatabase>.deleteObjectStore(<DOMString>);
<new EventHandler> = <IDBDatabase>.onabort;
<IDBDatabase>.onabort = <EventHandler>;
<new EventHandler> = <IDBDatabase>.onclose;
<IDBDatabase>.onclose = <EventHandler>;
<new EventHandler> = <IDBDatabase>.onerror;
<IDBDatabase>.onerror = <EventHandler>;
<new EventHandler> = <IDBDatabase>.onversionchange;
<IDBDatabase>.onversionchange = <EventHandler>;
<new DOMString> = <IDBObjectStore>.name;
<IDBObjectStore>.name = <DOMString>;
<new any> = <IDBObjectStore>.keyPath;
<new DOMStringList> = <IDBObjectStore>.indexNames;
<new IDBTransaction> = <IDBObjectStore>.transaction;
<new boolean> = <IDBObjectStore>.autoIncrement;
<new IDBRequest> = <IDBObjectStore>.put(<any>);
<new IDBRequest> = <IDBObjectStore>.put(<any>,<any>);
<new IDBRequest> = <IDBObjectStore>.add(<any>);
<new IDBRequest> = <IDBObjectStore>.add(<any>,<any>);
<new IDBRequest> = <IDBObjectStore>.delete(<any>);
<new IDBRequest> = <IDBObjectStore>.clear();
<new IDBRequest> = <IDBObjectStore>.get(<any>);
<new IDBRequest> = <IDBObjectStore>.getKey(<any>);
<new IDBRequest> = <IDBObjectStore>.getAll();
<new IDBRequest> = <IDBObjectStore>.getAll(<any>);
<new IDBRequest> = <IDBObjectStore>.getAll(<any>,<unsigned_long>);
<new IDBRequest> = <IDBObjectStore>.getAllKeys();
<new IDBRequest> = <IDBObjectStore>.getAllKeys(<any>);
<new IDBRequest> = <IDBObjectStore>.getAllKeys(<any>,<unsigned_long>);
<new IDBRequest> = <IDBObjectStore>.count();
<new IDBRequest> = <IDBObjectStore>.count(<any>);
<new IDBRequest> = <IDBObjectStore>.openCursor();
<new IDBRequest> = <IDBObjectStore>.openCursor(<any>);
<new IDBRequest> = <IDBObjectStore>.openCursor(<any>,<IDBCursorDirection>);
<new IDBRequest> = <IDBObjectStore>.openKeyCursor();
<new IDBRequest> = <IDBObjectStore>.openKeyCursor(<any>);
<new IDBRequest> = <IDBObjectStore>.openKeyCursor(<any>,<IDBCursorDirection>);
<new IDBIndex> = <IDBObjectStore>.index(<DOMString>);
<new IDBIndex> = <IDBObjectStore>.createIndex(<DOMString>,<union_DOMString1sequence_DOMString__>);
<new IDBIndex> = <IDBObjectStore>.createIndex(<DOMString>,<union_DOMString1sequence_DOMString__>,<IDBIndexParameters>);
<IDBObjectStore>.deleteIndex(<DOMString>);
<new DOMString> = <IDBIndex>.name;
<IDBIndex>.name = <DOMString>;
<new IDBObjectStore> = <IDBIndex>.objectStore;
<new any> = <IDBIndex>.keyPath;
<new boolean> = <IDBIndex>.multiEntry;
<new boolean> = <IDBIndex>.unique;
<new IDBRequest> = <IDBIndex>.get(<any>);
<new IDBRequest> = <IDBIndex>.getKey(<any>);
<new IDBRequest> = <IDBIndex>.getAll();
<new IDBRequest> = <IDBIndex>.getAll(<any>);
<new IDBRequest> = <IDBIndex>.getAll(<any>,<unsigned_long>);
<new IDBRequest> = <IDBIndex>.getAllKeys();
<new IDBRequest> = <IDBIndex>.getAllKeys(<any>);
<new IDBRequest> = <IDBIndex>.getAllKeys(<any>,<unsigned_long>);
<new IDBRequest> = <IDBIndex>.count();
<new IDBRequest> = <IDBIndex>.count(<any>);
<new IDBRequest> = <IDBIndex>.openCursor();
<new IDBRequest> = <IDBIndex>.openCursor(<any>);
<new IDBRequest> = <IDBIndex>.openCursor(<any>,<IDBCursorDirection>);
<new IDBRequest> = <IDBIndex>.openKeyCursor();
<new IDBRequest> = <IDBIndex>.openKeyCursor(<any>);
<new IDBRequest> = <IDBIndex>.openKeyCursor(<any>,<IDBCursorDirection>);
<new any> = <IDBKeyRange>.lower;
<new any> = <IDBKeyRange>.upper;
<new boolean> = <IDBKeyRange>.lowerOpen;
<new boolean> = <IDBKeyRange>.upperOpen;
<new IDBKeyRange> = <IDBKeyRange>.only(<any>);
<new IDBKeyRange> = <IDBKeyRange>.lowerBound(<any>);
<new IDBKeyRange> = <IDBKeyRange>.lowerBound(<any>,<boolean>);
<new IDBKeyRange> = <IDBKeyRange>.upperBound(<any>);
<new IDBKeyRange> = <IDBKeyRange>.upperBound(<any>,<boolean>);
<new IDBKeyRange> = <IDBKeyRange>.bound(<any>,<any>);
<new IDBKeyRange> = <IDBKeyRange>.bound(<any>,<any>,<boolean>);
<new IDBKeyRange> = <IDBKeyRange>.bound(<any>,<any>,<boolean>,<boolean>);
<IDBKeyRange>.includes(<any>);
<new union_IDBObjectStore1IDBIndex_> = <IDBObjectStore>;
<new union_IDBObjectStore1IDBIndex_> = <IDBIndex>;
<new union_IDBObjectStore1IDBIndex_> = <IDBCursor>.source;
<new IDBCursorDirection> = <IDBCursor>.direction;
<new any> = <IDBCursor>.key;
<new any> = <IDBCursor>.primaryKey;
<new IDBRequest> = <IDBCursor>.request;
<IDBCursor>.advance(<unsigned_long>);
<IDBCursor>.continue();
<IDBCursor>.continue(<any>);
<IDBCursor>.continuePrimaryKey(<any>,<any>);
<new IDBRequest> = <IDBCursor>.update(<any>);
<new IDBRequest> = <IDBCursor>.delete();
!extends IDBCursorWithValue IDBCursor;
<new IDBCursor> = <IDBCursorWithValue>;
<new any> = <IDBCursorWithValue>.value;
!extends IDBTransaction EventTarget;
<new EventTarget> = <IDBTransaction>;
<new DOMStringList> = <IDBTransaction>.objectStoreNames;
<new IDBTransactionMode> = <IDBTransaction>.mode;
<new IDBTransactionDurability> = <IDBTransaction>.durability;
<new IDBDatabase> = <IDBTransaction>.db;
<new DOMException> = <IDBTransaction>.error;
<new IDBObjectStore> = <IDBTransaction>.objectStore(<DOMString>);
<IDBTransaction>.commit();
<IDBTransaction>.abort();
<new EventHandler> = <IDBTransaction>.onabort;
<IDBTransaction>.onabort = <EventHandler>;
<new EventHandler> = <IDBTransaction>.oncomplete;
<IDBTransaction>.oncomplete = <EventHandler>;
<new EventHandler> = <IDBTransaction>.onerror;
<IDBTransaction>.onerror = <EventHandler>;
<new GLenum> = <KHR_parallel_shader_compile>.COMPLETION_STATUS_KHR;
<OES_draw_buffers_indexed>.enableiOES(<GLenum>,<GLuint>);
<OES_draw_buffers_indexed>.disableiOES(<GLenum>,<GLuint>);
<OES_draw_buffers_indexed>.blendEquationiOES(<GLuint>,<GLenum>);
<OES_draw_buffers_indexed>.blendEquationSeparateiOES(<GLuint>,<GLenum>,<GLenum>);
<OES_draw_buffers_indexed>.blendFunciOES(<GLuint>,<GLenum>,<GLenum>);
<OES_draw_buffers_indexed>.blendFuncSeparateiOES(<GLuint>,<GLenum>,<GLenum>,<GLenum>,<GLenum>);
<OES_draw_buffers_indexed>.colorMaskiOES(<GLuint>,<GLboolean>,<GLboolean>,<GLboolean>,<GLboolean>);
<new GLenum> = <OES_standard_derivatives>.FRAGMENT_SHADER_DERIVATIVE_HINT_OES;
<new GLenum> = <OES_texture_half_float>.HALF_FLOAT_OES;
!extends WebGLVertexArrayObjectOES WebGLObject;
<new WebGLObject> = <WebGLVertexArrayObjectOES>;
<new GLenum> = <OES_vertex_array_object>.VERTEX_ARRAY_BINDING_OES;
<new WebGLVertexArrayObjectOES> = <OES_vertex_array_object>.createVertexArrayOES();
<OES_vertex_array_object>.deleteVertexArrayOES(<WebGLVertexArrayObjectOES>);
<new GLboolean> = <OES_vertex_array_object>.isVertexArrayOES(<WebGLVertexArrayObjectOES>);
<OES_vertex_array_object>.bindVertexArrayOES(<WebGLVertexArrayObjectOES>);
<new GLenum> = <OVR_multiview2>.FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR;
<new GLenum> = <OVR_multiview2>.FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR;
<new GLenum> = <OVR_multiview2>.MAX_VIEWS_OVR;
<new GLenum> = <OVR_multiview2>.FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR;
<OVR_multiview2>.framebufferTextureMultiviewOVR(<GLenum>,<GLenum>,<WebGLTexture>,<GLint>,<GLint>,<GLsizei>);
!extends SVGElement Element;
<new Element> = <SVGElement>;
<new SVGAnimatedString> = <SVGElement>.className;
<new SVGSVGElement> = <SVGElement>.ownerSVGElement;
<new SVGElement> = <SVGElement>.viewportElement;
!extends SVGGraphicsElement SVGElement;
<new SVGElement> = <SVGGraphicsElement>;
<new SVGAnimatedTransformList> = <SVGGraphicsElement>.transform;
<new DOMRect> = <SVGGraphicsElement>.getBBox();
<new DOMRect> = <SVGGraphicsElement>.getBBox(<SVGBoundingBoxOptions>);
<new DOMMatrix> = <SVGGraphicsElement>.getCTM();
<new DOMMatrix> = <SVGGraphicsElement>.getScreenCTM();
!extends SVGGeometryElement SVGGraphicsElement;
<new SVGGraphicsElement> = <SVGGeometryElement>;
<new SVGAnimatedNumber> = <SVGGeometryElement>.pathLength;
<SVGGeometryElement>.isPointInFill();
<SVGGeometryElement>.isPointInFill(<DOMPointInit>);
<SVGGeometryElement>.isPointInStroke();
<SVGGeometryElement>.isPointInStroke(<DOMPointInit>);
<new float> = <SVGGeometryElement>.getTotalLength();
<new DOMPoint> = <SVGGeometryElement>.getPointAtLength(<float>);
<new float> = <SVGNumber>.value;
<SVGNumber>.value = <float>;
<new unsigned_short> = SVGLength.SVG_LENGTHTYPE_UNKNOWN;
<new unsigned_short> = SVGLength.SVG_LENGTHTYPE_NUMBER;
<new unsigned_short> = SVGLength.SVG_LENGTHTYPE_PERCENTAGE;
<new unsigned_short> = SVGLength.SVG_LENGTHTYPE_EMS;
<new unsigned_short> = SVGLength.SVG_LENGTHTYPE_EXS;
<new unsigned_short> = SVGLength.SVG_LENGTHTYPE_PX;
<new unsigned_short> = SVGLength.SVG_LENGTHTYPE_CM;
<new unsigned_short> = SVGLength.SVG_LENGTHTYPE_MM;
<new unsigned_short> = SVGLength.SVG_LENGTHTYPE_IN;
<new unsigned_short> = SVGLength.SVG_LENGTHTYPE_PT;
<new unsigned_short> = SVGLength.SVG_LENGTHTYPE_PC;
<new unsigned_short> = <SVGLength>.unitType;
<new float> = <SVGLength>.value;
<SVGLength>.value = <float>;
<new float> = <SVGLength>.valueInSpecifiedUnits;
<SVGLength>.valueInSpecifiedUnits = <float>;
<new DOMString> = <SVGLength>.valueAsString;
<SVGLength>.valueAsString = <DOMString>;
<SVGLength>.newValueSpecifiedUnits(<unsigned_short>,<float>);
<SVGLength>.convertToSpecifiedUnits(<unsigned_short>);
<new unsigned_short> = SVGAngle.SVG_ANGLETYPE_UNKNOWN;
<new unsigned_short> = SVGAngle.SVG_ANGLETYPE_UNSPECIFIED;
<new unsigned_short> = SVGAngle.SVG_ANGLETYPE_DEG;
<new unsigned_short> = SVGAngle.SVG_ANGLETYPE_RAD;
<new unsigned_short> = SVGAngle.SVG_ANGLETYPE_GRAD;
<new unsigned_short> = <SVGAngle>.unitType;
<new float> = <SVGAngle>.value;
<SVGAngle>.value = <float>;
<new float> = <SVGAngle>.valueInSpecifiedUnits;
<SVGAngle>.valueInSpecifiedUnits = <float>;
<new DOMString> = <SVGAngle>.valueAsString;
<SVGAngle>.valueAsString = <DOMString>;
<SVGAngle>.newValueSpecifiedUnits(<unsigned_short>,<float>);
<SVGAngle>.convertToSpecifiedUnits(<unsigned_short>);
<new unsigned_long> = <SVGNumberList>.length;
<new unsigned_long> = <SVGNumberList>.numberOfItems;
<SVGNumberList>.clear();
<new SVGNumber> = <SVGNumberList>.initialize(<SVGNumber>);
<new SVGNumber> = <SVGNumberList>.getItem(<unsigned_long>);
<new SVGNumber> = <SVGNumberList>.insertItemBefore(<SVGNumber>,<unsigned_long>);
<new SVGNumber> = <SVGNumberList>.replaceItem(<SVGNumber>,<unsigned_long>);
<new SVGNumber> = <SVGNumberList>.removeItem(<unsigned_long>);
<new SVGNumber> = <SVGNumberList>.appendItem(<SVGNumber>);
<SVGNumberList>[<unsigned_long>] = <SVGNumber>;
<new unsigned_long> = <SVGLengthList>.length;
<new unsigned_long> = <SVGLengthList>.numberOfItems;
<SVGLengthList>.clear();
<new SVGLength> = <SVGLengthList>.initialize(<SVGLength>);
<new SVGLength> = <SVGLengthList>.getItem(<unsigned_long>);
<new SVGLength> = <SVGLengthList>.insertItemBefore(<SVGLength>,<unsigned_long>);
<new SVGLength> = <SVGLengthList>.replaceItem(<SVGLength>,<unsigned_long>);
<new SVGLength> = <SVGLengthList>.removeItem(<unsigned_long>);
<new SVGLength> = <SVGLengthList>.appendItem(<SVGLength>);
<SVGLengthList>[<unsigned_long>] = <SVGLength>;
<new unsigned_long> = <SVGStringList>.length;
<new unsigned_long> = <SVGStringList>.numberOfItems;
<SVGStringList>.clear();
<new DOMString> = <SVGStringList>.initialize(<DOMString>);
<new DOMString> = <SVGStringList>.getItem(<unsigned_long>);
<new DOMString> = <SVGStringList>.insertItemBefore(<DOMString>,<unsigned_long>);
<new DOMString> = <SVGStringList>.replaceItem(<DOMString>,<unsigned_long>);
<new DOMString> = <SVGStringList>.removeItem(<unsigned_long>);
<new DOMString> = <SVGStringList>.appendItem(<DOMString>);
<SVGStringList>[<unsigned_long>] = <DOMString>;
<new boolean> = <SVGAnimatedBoolean>.baseVal;
<SVGAnimatedBoolean>.baseVal = <boolean>;
<new boolean> = <SVGAnimatedBoolean>.animVal;
<new unsigned_short> = <SVGAnimatedEnumeration>.baseVal;
<SVGAnimatedEnumeration>.baseVal = <unsigned_short>;
<new unsigned_short> = <SVGAnimatedEnumeration>.animVal;
<new long> = <SVGAnimatedInteger>.baseVal;
<SVGAnimatedInteger>.baseVal = <long>;
<new long> = <SVGAnimatedInteger>.animVal;
<new float> = <SVGAnimatedNumber>.baseVal;
<SVGAnimatedNumber>.baseVal = <float>;
<new float> = <SVGAnimatedNumber>.animVal;
<new SVGLength> = <SVGAnimatedLength>.baseVal;
<new SVGLength> = <SVGAnimatedLength>.animVal;
<new SVGAngle> = <SVGAnimatedAngle>.baseVal;
<new SVGAngle> = <SVGAnimatedAngle>.animVal;
<new DOMString> = <SVGAnimatedString>.baseVal;
<SVGAnimatedString>.baseVal = <DOMString>;
<new DOMString> = <SVGAnimatedString>.animVal;
<new DOMRect> = <SVGAnimatedRect>.baseVal;
<new DOMRectReadOnly> = <SVGAnimatedRect>.animVal;
<new SVGNumberList> = <SVGAnimatedNumberList>.baseVal;
<new SVGNumberList> = <SVGAnimatedNumberList>.animVal;
<new SVGLengthList> = <SVGAnimatedLengthList>.baseVal;
<new SVGLengthList> = <SVGAnimatedLengthList>.animVal;
<new unsigned_short> = SVGUnitTypes.SVG_UNIT_TYPE_UNKNOWN;
<new unsigned_short> = SVGUnitTypes.SVG_UNIT_TYPE_USERSPACEONUSE;
<new unsigned_short> = SVGUnitTypes.SVG_UNIT_TYPE_OBJECTBOUNDINGBOX;
<new SVGSVGElement> = <Document>.rootElement;
!extends SVGSVGElement SVGGraphicsElement;
<new SVGGraphicsElement> = <SVGSVGElement>;
<new SVGAnimatedLength> = <SVGSVGElement>.x;
<new SVGAnimatedLength> = <SVGSVGElement>.y;
<new SVGAnimatedLength> = <SVGSVGElement>.width;
<new SVGAnimatedLength> = <SVGSVGElement>.height;
<new float> = <SVGSVGElement>.currentScale;
<SVGSVGElement>.currentScale = <float>;
<new DOMPointReadOnly> = <SVGSVGElement>.currentTranslate;
<new NodeList> = <SVGSVGElement>.getIntersectionList(<DOMRectReadOnly>,<SVGElement>);
<new NodeList> = <SVGSVGElement>.getEnclosureList(<DOMRectReadOnly>,<SVGElement>);
<SVGSVGElement>.checkIntersection(<SVGElement>,<DOMRectReadOnly>);
<SVGSVGElement>.checkEnclosure(<SVGElement>,<DOMRectReadOnly>);
<SVGSVGElement>.deselectAll();
<new SVGNumber> = <SVGSVGElement>.createSVGNumber();
<new SVGLength> = <SVGSVGElement>.createSVGLength();
<new SVGAngle> = <SVGSVGElement>.createSVGAngle();
<new DOMPoint> = <SVGSVGElement>.createSVGPoint();
<new DOMMatrix> = <SVGSVGElement>.createSVGMatrix();
<new DOMRect> = <SVGSVGElement>.createSVGRect();
<new SVGTransform> = <SVGSVGElement>.createSVGTransform();
<new SVGTransform> = <SVGSVGElement>.createSVGTransformFromMatrix();
<new SVGTransform> = <SVGSVGElement>.createSVGTransformFromMatrix(<DOMMatrix2DInit>);
<new Element> = <SVGSVGElement>.getElementById(<DOMString>);
<new unsigned_long> = <SVGSVGElement>.suspendRedraw(<unsigned_long>);
<SVGSVGElement>.unsuspendRedraw(<unsigned_long>);
<SVGSVGElement>.unsuspendRedrawAll();
<SVGSVGElement>.forceRedraw();
!extends SVGGElement SVGGraphicsElement;
<new SVGGraphicsElement> = <SVGGElement>;
!extends SVGDefsElement SVGGraphicsElement;
<new SVGGraphicsElement> = <SVGDefsElement>;
!extends SVGDescElement SVGElement;
<new SVGElement> = <SVGDescElement>;
!extends SVGMetadataElement SVGElement;
<new SVGElement> = <SVGMetadataElement>;
!extends SVGTitleElement SVGElement;
<new SVGElement> = <SVGTitleElement>;
!extends SVGSymbolElement SVGGraphicsElement;
<new SVGGraphicsElement> = <SVGSymbolElement>;
!extends SVGUseElement SVGGraphicsElement;
<new SVGGraphicsElement> = <SVGUseElement>;
<new SVGAnimatedLength> = <SVGUseElement>.x;
<new SVGAnimatedLength> = <SVGUseElement>.y;
<new SVGAnimatedLength> = <SVGUseElement>.width;
<new SVGAnimatedLength> = <SVGUseElement>.height;
<new SVGElement> = <SVGUseElement>.instanceRoot;
<new SVGElement> = <SVGUseElement>.animatedInstanceRoot;
!extends SVGUseElementShadowRoot ShadowRoot;
<new ShadowRoot> = <SVGUseElementShadowRoot>;
!extends ShadowAnimation Animation;
<new Animation> = <ShadowAnimation>;
<new union_Element1CSSPseudoElement_> = <Element>;
<new union_Element1CSSPseudoElement_> = <CSSPseudoElement>;
<new ShadowAnimation> = new ShadowAnimation(<Animation>,<union_Element1CSSPseudoElement_>);
<new Animation> = <ShadowAnimation>.sourceAnimation;
!extends SVGSwitchElement SVGGraphicsElement;
<new SVGGraphicsElement> = <SVGSwitchElement>;
!extends SVGStyleElement SVGElement;
<new SVGElement> = <SVGStyleElement>;
<new DOMString> = <SVGStyleElement>.type;
<SVGStyleElement>.type = <DOMString>;
<new DOMString> = <SVGStyleElement>.media;
<SVGStyleElement>.media = <DOMString>;
<new DOMString> = <SVGStyleElement>.title;
<SVGStyleElement>.title = <DOMString>;
<new unsigned_short> = SVGTransform.SVG_TRANSFORM_UNKNOWN;
<new unsigned_short> = SVGTransform.SVG_TRANSFORM_MATRIX;
<new unsigned_short> = SVGTransform.SVG_TRANSFORM_TRANSLATE;
<new unsigned_short> = SVGTransform.SVG_TRANSFORM_SCALE;
<new unsigned_short> = SVGTransform.SVG_TRANSFORM_ROTATE;
<new unsigned_short> = SVGTransform.SVG_TRANSFORM_SKEWX;
<new unsigned_short> = SVGTransform.SVG_TRANSFORM_SKEWY;
<new unsigned_short> = <SVGTransform>.type;
<new DOMMatrix> = <SVGTransform>.matrix;
<new float> = <SVGTransform>.angle;
<SVGTransform>.setMatrix();
<SVGTransform>.setMatrix(<DOMMatrix2DInit>);
<SVGTransform>.setTranslate(<float>,<float>);
<SVGTransform>.setScale(<float>,<float>);
<SVGTransform>.setRotate(<float>,<float>,<float>);
<SVGTransform>.setSkewX(<float>);
<SVGTransform>.setSkewY(<float>);
<new unsigned_long> = <SVGTransformList>.length;
<new unsigned_long> = <SVGTransformList>.numberOfItems;
<SVGTransformList>.clear();
<new SVGTransform> = <SVGTransformList>.initialize(<SVGTransform>);
<new SVGTransform> = <SVGTransformList>.getItem(<unsigned_long>);
<new SVGTransform> = <SVGTransformList>.insertItemBefore(<SVGTransform>,<unsigned_long>);
<new SVGTransform> = <SVGTransformList>.replaceItem(<SVGTransform>,<unsigned_long>);
<new SVGTransform> = <SVGTransformList>.removeItem(<unsigned_long>);
<new SVGTransform> = <SVGTransformList>.appendItem(<SVGTransform>);
<SVGTransformList>[<unsigned_long>] = <SVGTransform>;
<new SVGTransform> = <SVGTransformList>.createSVGTransformFromMatrix();
<new SVGTransform> = <SVGTransformList>.createSVGTransformFromMatrix(<DOMMatrix2DInit>);
<new SVGTransform> = <SVGTransformList>.consolidate();
<new SVGTransformList> = <SVGAnimatedTransformList>.baseVal;
<new SVGTransformList> = <SVGAnimatedTransformList>.animVal;
<new unsigned_short> = SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_UNKNOWN;
<new unsigned_short> = SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_NONE;
<new unsigned_short> = SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMINYMIN;
<new unsigned_short> = SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMIDYMIN;
<new unsigned_short> = SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMAXYMIN;
<new unsigned_short> = SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMINYMID;
<new unsigned_short> = SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMIDYMID;
<new unsigned_short> = SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMAXYMID;
<new unsigned_short> = SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMINYMAX;
<new unsigned_short> = SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMIDYMAX;
<new unsigned_short> = SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMAXYMAX;
<new unsigned_short> = SVGPreserveAspectRatio.SVG_MEETORSLICE_UNKNOWN;
<new unsigned_short> = SVGPreserveAspectRatio.SVG_MEETORSLICE_MEET;
<new unsigned_short> = SVGPreserveAspectRatio.SVG_MEETORSLICE_SLICE;
<new unsigned_short> = <SVGPreserveAspectRatio>.align;
<SVGPreserveAspectRatio>.align = <unsigned_short>;
<new unsigned_short> = <SVGPreserveAspectRatio>.meetOrSlice;
<SVGPreserveAspectRatio>.meetOrSlice = <unsigned_short>;
<new SVGPreserveAspectRatio> = <SVGAnimatedPreserveAspectRatio>.baseVal;
<new SVGPreserveAspectRatio> = <SVGAnimatedPreserveAspectRatio>.animVal;
!extends SVGPathElement SVGGeometryElement;
<new SVGGeometryElement> = <SVGPathElement>;
!extends SVGRectElement SVGGeometryElement;
<new SVGGeometryElement> = <SVGRectElement>;
<new SVGAnimatedLength> = <SVGRectElement>.x;
<new SVGAnimatedLength> = <SVGRectElement>.y;
<new SVGAnimatedLength> = <SVGRectElement>.width;
<new SVGAnimatedLength> = <SVGRectElement>.height;
<new SVGAnimatedLength> = <SVGRectElement>.rx;
<new SVGAnimatedLength> = <SVGRectElement>.ry;
!extends SVGCircleElement SVGGeometryElement;
<new SVGGeometryElement> = <SVGCircleElement>;
<new SVGAnimatedLength> = <SVGCircleElement>.cx;
<new SVGAnimatedLength> = <SVGCircleElement>.cy;
<new SVGAnimatedLength> = <SVGCircleElement>.r;
!extends SVGEllipseElement SVGGeometryElement;
<new SVGGeometryElement> = <SVGEllipseElement>;
<new SVGAnimatedLength> = <SVGEllipseElement>.cx;
<new SVGAnimatedLength> = <SVGEllipseElement>.cy;
<new SVGAnimatedLength> = <SVGEllipseElement>.rx;
<new SVGAnimatedLength> = <SVGEllipseElement>.ry;
!extends SVGLineElement SVGGeometryElement;
<new SVGGeometryElement> = <SVGLineElement>;
<new SVGAnimatedLength> = <SVGLineElement>.x1;
<new SVGAnimatedLength> = <SVGLineElement>.y1;
<new SVGAnimatedLength> = <SVGLineElement>.x2;
<new SVGAnimatedLength> = <SVGLineElement>.y2;
<new unsigned_long> = <SVGPointList>.length;
<new unsigned_long> = <SVGPointList>.numberOfItems;
<SVGPointList>.clear();
<new DOMPoint> = <SVGPointList>.initialize(<DOMPoint>);
<new DOMPoint> = <SVGPointList>.getItem(<unsigned_long>);
<new DOMPoint> = <SVGPointList>.insertItemBefore(<DOMPoint>,<unsigned_long>);
<new DOMPoint> = <SVGPointList>.replaceItem(<DOMPoint>,<unsigned_long>);
<new DOMPoint> = <SVGPointList>.removeItem(<unsigned_long>);
<new DOMPoint> = <SVGPointList>.appendItem(<DOMPoint>);
<SVGPointList>[<unsigned_long>] = <DOMPoint>;
!extends SVGPolylineElement SVGGeometryElement;
<new SVGGeometryElement> = <SVGPolylineElement>;
!extends SVGPolygonElement SVGGeometryElement;
<new SVGGeometryElement> = <SVGPolygonElement>;
!extends SVGTextContentElement SVGGraphicsElement;
<new SVGGraphicsElement> = <SVGTextContentElement>;
<new unsigned_short> = SVGTextContentElement.LENGTHADJUST_UNKNOWN;
<new unsigned_short> = SVGTextContentElement.LENGTHADJUST_SPACING;
<new unsigned_short> = SVGTextContentElement.LENGTHADJUST_SPACINGANDGLYPHS;
<new SVGAnimatedLength> = <SVGTextContentElement>.textLength;
<new SVGAnimatedEnumeration> = <SVGTextContentElement>.lengthAdjust;
<SVGTextContentElement>.getNumberOfChars();
<new float> = <SVGTextContentElement>.getComputedTextLength();
<new float> = <SVGTextContentElement>.getSubStringLength(<unsigned_long>,<unsigned_long>);
<new DOMPoint> = <SVGTextContentElement>.getStartPositionOfChar(<unsigned_long>);
<new DOMPoint> = <SVGTextContentElement>.getEndPositionOfChar(<unsigned_long>);
<new DOMRect> = <SVGTextContentElement>.getExtentOfChar(<unsigned_long>);
<new float> = <SVGTextContentElement>.getRotationOfChar(<unsigned_long>);
<SVGTextContentElement>.getCharNumAtPosition();
<SVGTextContentElement>.getCharNumAtPosition(<DOMPointInit>);
<SVGTextContentElement>.selectSubString(<unsigned_long>,<unsigned_long>);
!extends SVGTextPositioningElement SVGTextContentElement;
<new SVGTextContentElement> = <SVGTextPositioningElement>;
<new SVGAnimatedLengthList> = <SVGTextPositioningElement>.x;
<new SVGAnimatedLengthList> = <SVGTextPositioningElement>.y;
<new SVGAnimatedLengthList> = <SVGTextPositioningElement>.dx;
<new SVGAnimatedLengthList> = <SVGTextPositioningElement>.dy;
<new SVGAnimatedNumberList> = <SVGTextPositioningElement>.rotate;
!extends SVGTextElement SVGTextPositioningElement;
<new SVGTextPositioningElement> = <SVGTextElement>;
!extends SVGTSpanElement SVGTextPositioningElement;
<new SVGTextPositioningElement> = <SVGTSpanElement>;
!extends SVGTextPathElement SVGTextContentElement;
<new SVGTextContentElement> = <SVGTextPathElement>;
<new unsigned_short> = SVGTextPathElement.TEXTPATH_METHODTYPE_UNKNOWN;
<new unsigned_short> = SVGTextPathElement.TEXTPATH_METHODTYPE_ALIGN;
<new unsigned_short> = SVGTextPathElement.TEXTPATH_METHODTYPE_STRETCH;
<new unsigned_short> = SVGTextPathElement.TEXTPATH_SPACINGTYPE_UNKNOWN;
<new unsigned_short> = SVGTextPathElement.TEXTPATH_SPACINGTYPE_AUTO;
<new unsigned_short> = SVGTextPathElement.TEXTPATH_SPACINGTYPE_EXACT;
<new SVGAnimatedLength> = <SVGTextPathElement>.startOffset;
<new SVGAnimatedEnumeration> = <SVGTextPathElement>.method;
<new SVGAnimatedEnumeration> = <SVGTextPathElement>.spacing;
!extends SVGImageElement SVGGraphicsElement;
<new SVGGraphicsElement> = <SVGImageElement>;
<new SVGAnimatedLength> = <SVGImageElement>.x;
<new SVGAnimatedLength> = <SVGImageElement>.y;
<new SVGAnimatedLength> = <SVGImageElement>.width;
<new SVGAnimatedLength> = <SVGImageElement>.height;
<new SVGAnimatedPreserveAspectRatio> = <SVGImageElement>.preserveAspectRatio;
<new DOMString> = <SVGImageElement>.crossOrigin;
<SVGImageElement>.crossOrigin = <DOMString>;
<SVGImageElement>.crossOrigin = null;
!extends SVGForeignObjectElement SVGGraphicsElement;
<new SVGGraphicsElement> = <SVGForeignObjectElement>;
<new SVGAnimatedLength> = <SVGForeignObjectElement>.x;
<new SVGAnimatedLength> = <SVGForeignObjectElement>.y;
<new SVGAnimatedLength> = <SVGForeignObjectElement>.width;
<new SVGAnimatedLength> = <SVGForeignObjectElement>.height;
!extends SVGMarkerElement SVGElement;
<new SVGElement> = <SVGMarkerElement>;
<new unsigned_short> = SVGMarkerElement.SVG_MARKERUNITS_UNKNOWN;
<new unsigned_short> = SVGMarkerElement.SVG_MARKERUNITS_USERSPACEONUSE;
<new unsigned_short> = SVGMarkerElement.SVG_MARKERUNITS_STROKEWIDTH;
<new unsigned_short> = SVGMarkerElement.SVG_MARKER_ORIENT_UNKNOWN;
<new unsigned_short> = SVGMarkerElement.SVG_MARKER_ORIENT_AUTO;
<new unsigned_short> = SVGMarkerElement.SVG_MARKER_ORIENT_ANGLE;
<new SVGAnimatedLength> = <SVGMarkerElement>.refX;
<new SVGAnimatedLength> = <SVGMarkerElement>.refY;
<new SVGAnimatedEnumeration> = <SVGMarkerElement>.markerUnits;
<new SVGAnimatedLength> = <SVGMarkerElement>.markerWidth;
<new SVGAnimatedLength> = <SVGMarkerElement>.markerHeight;
<new SVGAnimatedEnumeration> = <SVGMarkerElement>.orientType;
<new SVGAnimatedAngle> = <SVGMarkerElement>.orientAngle;
<new DOMString> = <SVGMarkerElement>.orient;
<SVGMarkerElement>.orient = <DOMString>;
<SVGMarkerElement>.setOrientToAuto();
<SVGMarkerElement>.setOrientToAngle(<SVGAngle>);
!extends SVGGradientElement SVGElement;
<new SVGElement> = <SVGGradientElement>;
<new unsigned_short> = SVGGradientElement.SVG_SPREADMETHOD_UNKNOWN;
<new unsigned_short> = SVGGradientElement.SVG_SPREADMETHOD_PAD;
<new unsigned_short> = SVGGradientElement.SVG_SPREADMETHOD_REFLECT;
<new unsigned_short> = SVGGradientElement.SVG_SPREADMETHOD_REPEAT;
<new SVGAnimatedEnumeration> = <SVGGradientElement>.gradientUnits;
<new SVGAnimatedTransformList> = <SVGGradientElement>.gradientTransform;
<new SVGAnimatedEnumeration> = <SVGGradientElement>.spreadMethod;
!extends SVGLinearGradientElement SVGGradientElement;
<new SVGGradientElement> = <SVGLinearGradientElement>;
<new SVGAnimatedLength> = <SVGLinearGradientElement>.x1;
<new SVGAnimatedLength> = <SVGLinearGradientElement>.y1;
<new SVGAnimatedLength> = <SVGLinearGradientElement>.x2;
<new SVGAnimatedLength> = <SVGLinearGradientElement>.y2;
!extends SVGRadialGradientElement SVGGradientElement;
<new SVGGradientElement> = <SVGRadialGradientElement>;
<new SVGAnimatedLength> = <SVGRadialGradientElement>.cx;
<new SVGAnimatedLength> = <SVGRadialGradientElement>.cy;
<new SVGAnimatedLength> = <SVGRadialGradientElement>.r;
<new SVGAnimatedLength> = <SVGRadialGradientElement>.fx;
<new SVGAnimatedLength> = <SVGRadialGradientElement>.fy;
<new SVGAnimatedLength> = <SVGRadialGradientElement>.fr;
!extends SVGStopElement SVGElement;
<new SVGElement> = <SVGStopElement>;
<new SVGAnimatedNumber> = <SVGStopElement>.offset;
!extends SVGPatternElement SVGElement;
<new SVGElement> = <SVGPatternElement>;
<new SVGAnimatedEnumeration> = <SVGPatternElement>.patternUnits;
<new SVGAnimatedEnumeration> = <SVGPatternElement>.patternContentUnits;
<new SVGAnimatedTransformList> = <SVGPatternElement>.patternTransform;
<new SVGAnimatedLength> = <SVGPatternElement>.x;
<new SVGAnimatedLength> = <SVGPatternElement>.y;
<new SVGAnimatedLength> = <SVGPatternElement>.width;
<new SVGAnimatedLength> = <SVGPatternElement>.height;
!extends SVGScriptElement SVGElement;
<new SVGElement> = <SVGScriptElement>;
<new DOMString> = <SVGScriptElement>.type;
<SVGScriptElement>.type = <DOMString>;
<new DOMString> = <SVGScriptElement>.crossOrigin;
<SVGScriptElement>.crossOrigin = <DOMString>;
<SVGScriptElement>.crossOrigin = null;
!extends SVGAElement SVGGraphicsElement;
<new SVGGraphicsElement> = <SVGAElement>;
<new SVGAnimatedString> = <SVGAElement>.target;
<new DOMString> = <SVGAElement>.download;
<SVGAElement>.download = <DOMString>;
<new USVString> = <SVGAElement>.ping;
<SVGAElement>.ping = <USVString>;
<new DOMString> = <SVGAElement>.rel;
<SVGAElement>.rel = <DOMString>;
<new DOMTokenList> = <SVGAElement>.relList;
<new DOMString> = <SVGAElement>.hreflang;
<SVGAElement>.hreflang = <DOMString>;
<new DOMString> = <SVGAElement>.type;
<SVGAElement>.type = <DOMString>;
<new DOMString> = <SVGAElement>.text;
<SVGAElement>.text = <DOMString>;
<new DOMString> = <SVGAElement>.referrerPolicy;
<SVGAElement>.referrerPolicy = <DOMString>;
<new USVString> = <SVGAElement>.origin;
<new USVString> = <SVGAElement>.protocol;
<SVGAElement>.protocol = <USVString>;
<new USVString> = <SVGAElement>.username;
<SVGAElement>.username = <USVString>;
<new USVString> = <SVGAElement>.password;
<SVGAElement>.password = <USVString>;
<new USVString> = <SVGAElement>.host;
<SVGAElement>.host = <USVString>;
<new USVString> = <SVGAElement>.hostname;
<SVGAElement>.hostname = <USVString>;
<new USVString> = <SVGAElement>.port;
<SVGAElement>.port = <USVString>;
<new USVString> = <SVGAElement>.pathname;
<SVGAElement>.pathname = <USVString>;
<new USVString> = <SVGAElement>.search;
<SVGAElement>.search = <USVString>;
<new USVString> = <SVGAElement>.hash;
<SVGAElement>.hash = <USVString>;
!extends SVGViewElement SVGElement;
<new SVGElement> = <SVGViewElement>;
<new GLenum> = <WEBGL_blend_equation_advanced_coherent>.MULTIPLY;
<new GLenum> = <WEBGL_blend_equation_advanced_coherent>.SCREEN;
<new GLenum> = <WEBGL_blend_equation_advanced_coherent>.OVERLAY;
<new GLenum> = <WEBGL_blend_equation_advanced_coherent>.DARKEN;
<new GLenum> = <WEBGL_blend_equation_advanced_coherent>.LIGHTEN;
<new GLenum> = <WEBGL_blend_equation_advanced_coherent>.COLORDODGE;
<new GLenum> = <WEBGL_blend_equation_advanced_coherent>.COLORBURN;
<new GLenum> = <WEBGL_blend_equation_advanced_coherent>.HARDLIGHT;
<new GLenum> = <WEBGL_blend_equation_advanced_coherent>.SOFTLIGHT;
<new GLenum> = <WEBGL_blend_equation_advanced_coherent>.DIFFERENCE;
<new GLenum> = <WEBGL_blend_equation_advanced_coherent>.EXCLUSION;
<new GLenum> = <WEBGL_blend_equation_advanced_coherent>.HSL_HUE;
<new GLenum> = <WEBGL_blend_equation_advanced_coherent>.HSL_SATURATION;
<new GLenum> = <WEBGL_blend_equation_advanced_coherent>.HSL_COLOR;
<new GLenum> = <WEBGL_blend_equation_advanced_coherent>.HSL_LUMINOSITY;
<new GLenum> = <WEBGL_color_buffer_float>.RGBA32F_EXT;
<new GLenum> = <WEBGL_color_buffer_float>.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT;
<new GLenum> = <WEBGL_color_buffer_float>.UNSIGNED_NORMALIZED_EXT;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_RGBA_ASTC_4x4_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_RGBA_ASTC_5x4_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_RGBA_ASTC_5x5_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_RGBA_ASTC_6x5_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_RGBA_ASTC_6x6_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_RGBA_ASTC_8x5_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_RGBA_ASTC_8x6_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_RGBA_ASTC_8x8_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_RGBA_ASTC_10x5_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_RGBA_ASTC_10x6_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_RGBA_ASTC_10x8_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_RGBA_ASTC_10x10_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_RGBA_ASTC_12x10_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_RGBA_ASTC_12x12_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR;
<new sequence_DOMString_> = <WEBGL_compressed_texture_astc>.getSupportedProfiles();
<new GLenum> = <WEBGL_compressed_texture_etc>.COMPRESSED_R11_EAC;
<new GLenum> = <WEBGL_compressed_texture_etc>.COMPRESSED_SIGNED_R11_EAC;
<new GLenum> = <WEBGL_compressed_texture_etc>.COMPRESSED_RG11_EAC;
<new GLenum> = <WEBGL_compressed_texture_etc>.COMPRESSED_SIGNED_RG11_EAC;
<new GLenum> = <WEBGL_compressed_texture_etc>.COMPRESSED_RGB8_ETC2;
<new GLenum> = <WEBGL_compressed_texture_etc>.COMPRESSED_SRGB8_ETC2;
<new GLenum> = <WEBGL_compressed_texture_etc>.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2;
<new GLenum> = <WEBGL_compressed_texture_etc>.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2;
<new GLenum> = <WEBGL_compressed_texture_etc>.COMPRESSED_RGBA8_ETC2_EAC;
<new GLenum> = <WEBGL_compressed_texture_etc>.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC;
<new GLenum> = <WEBGL_compressed_texture_etc1>.COMPRESSED_RGB_ETC1_WEBGL;
<new GLenum> = <WEBGL_compressed_texture_pvrtc>.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
<new GLenum> = <WEBGL_compressed_texture_pvrtc>.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
<new GLenum> = <WEBGL_compressed_texture_pvrtc>.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
<new GLenum> = <WEBGL_compressed_texture_pvrtc>.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
<new GLenum> = <WEBGL_compressed_texture_s3tc>.COMPRESSED_RGB_S3TC_DXT1_EXT;
<new GLenum> = <WEBGL_compressed_texture_s3tc>.COMPRESSED_RGBA_S3TC_DXT1_EXT;
<new GLenum> = <WEBGL_compressed_texture_s3tc>.COMPRESSED_RGBA_S3TC_DXT3_EXT;
<new GLenum> = <WEBGL_compressed_texture_s3tc>.COMPRESSED_RGBA_S3TC_DXT5_EXT;
<new GLenum> = <WEBGL_compressed_texture_s3tc_srgb>.COMPRESSED_SRGB_S3TC_DXT1_EXT;
<new GLenum> = <WEBGL_compressed_texture_s3tc_srgb>.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
<new GLenum> = <WEBGL_compressed_texture_s3tc_srgb>.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
<new GLenum> = <WEBGL_compressed_texture_s3tc_srgb>.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
<new GLenum> = <WEBGL_debug_renderer_info>.UNMASKED_VENDOR_WEBGL;
<new GLenum> = <WEBGL_debug_renderer_info>.UNMASKED_RENDERER_WEBGL;
<new DOMString> = <WEBGL_debug_shaders>.getTranslatedShaderSource(<WebGLShader>);
<new GLenum> = <WEBGL_depth_texture>.UNSIGNED_INT_24_8_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.COLOR_ATTACHMENT0_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.COLOR_ATTACHMENT1_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.COLOR_ATTACHMENT2_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.COLOR_ATTACHMENT3_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.COLOR_ATTACHMENT4_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.COLOR_ATTACHMENT5_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.COLOR_ATTACHMENT6_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.COLOR_ATTACHMENT7_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.COLOR_ATTACHMENT8_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.COLOR_ATTACHMENT9_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.COLOR_ATTACHMENT10_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.COLOR_ATTACHMENT11_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.COLOR_ATTACHMENT12_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.COLOR_ATTACHMENT13_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.COLOR_ATTACHMENT14_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.COLOR_ATTACHMENT15_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.DRAW_BUFFER0_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.DRAW_BUFFER1_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.DRAW_BUFFER2_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.DRAW_BUFFER3_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.DRAW_BUFFER4_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.DRAW_BUFFER5_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.DRAW_BUFFER6_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.DRAW_BUFFER7_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.DRAW_BUFFER8_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.DRAW_BUFFER9_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.DRAW_BUFFER10_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.DRAW_BUFFER11_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.DRAW_BUFFER12_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.DRAW_BUFFER13_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.DRAW_BUFFER14_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.DRAW_BUFFER15_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.MAX_COLOR_ATTACHMENTS_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.MAX_DRAW_BUFFERS_WEBGL;
<new sequence_GLenum_> = [<GLenum>];
<new GLenum> = <sequence_GLenum_>[0];
<WEBGL_draw_buffers>.drawBuffersWEBGL(<sequence_GLenum_>);
<WEBGL_draw_instanced_base_vertex_base_instance>.drawArraysInstancedBaseInstanceWEBGL(<GLenum>,<GLint>,<GLsizei>,<GLsizei>,<GLuint>);
<WEBGL_draw_instanced_base_vertex_base_instance>.drawElementsInstancedBaseVertexBaseInstanceWEBGL(<GLenum>,<GLsizei>,<GLenum>,<GLintptr>,<GLsizei>,<GLint>,<GLuint>);
<WEBGL_lose_context>.loseContext();
<WEBGL_lose_context>.restoreContext();
<new sequence_GLint_> = [<GLint>];
<new GLint> = <sequence_GLint_>[0];
<new union_Int32Array1sequence_GLint__> = <Int32Array>;
<new union_Int32Array1sequence_GLint__> = <sequence_GLint_>;
<new sequence_GLsizei_> = [<GLsizei>];
<new GLsizei> = <sequence_GLsizei_>[0];
<new union_Int32Array1sequence_GLsizei__> = <Int32Array>;
<new union_Int32Array1sequence_GLsizei__> = <sequence_GLsizei_>;
<WEBGL_multi_draw>.multiDrawArraysWEBGL(<GLenum>,<union_Int32Array1sequence_GLint__>,<GLuint>,<union_Int32Array1sequence_GLsizei__>,<GLuint>,<GLsizei>);
<WEBGL_multi_draw>.multiDrawElementsWEBGL(<GLenum>,<union_Int32Array1sequence_GLsizei__>,<GLuint>,<GLenum>,<union_Int32Array1sequence_GLsizei__>,<GLuint>,<GLsizei>);
<WEBGL_multi_draw>.multiDrawArraysInstancedWEBGL(<GLenum>,<union_Int32Array1sequence_GLint__>,<GLuint>,<union_Int32Array1sequence_GLsizei__>,<GLuint>,<union_Int32Array1sequence_GLsizei__>,<GLuint>,<GLsizei>);
<WEBGL_multi_draw>.multiDrawElementsInstancedWEBGL(<GLenum>,<union_Int32Array1sequence_GLsizei__>,<GLuint>,<GLenum>,<union_Int32Array1sequence_GLsizei__>,<GLuint>,<union_Int32Array1sequence_GLsizei__>,<GLuint>,<GLsizei>);
<new sequence_GLuint_> = [<GLuint>];
<new GLuint> = <sequence_GLuint_>[0];
<new union_Uint32Array1sequence_GLuint__> = <Uint32Array>;
<new union_Uint32Array1sequence_GLuint__> = <sequence_GLuint_>;
<WEBGL_multi_draw_instanced_base_vertex_base_instance>.multiDrawArraysInstancedBaseInstanceWEBGL(<GLenum>,<union_Int32Array1sequence_GLint__>,<GLuint>,<union_Int32Array1sequence_GLsizei__>,<GLuint>,<union_Int32Array1sequence_GLsizei__>,<GLuint>,<union_Uint32Array1sequence_GLuint__>,<GLuint>,<GLsizei>);
<WEBGL_multi_draw_instanced_base_vertex_base_instance>.multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL(<GLenum>,<union_Int32Array1sequence_GLsizei__>,<GLuint>,<GLenum>,<union_Int32Array1sequence_GLsizei__>,<GLuint>,<union_Int32Array1sequence_GLsizei__>,<GLuint>,<union_Int32Array1sequence_GLint__>,<GLuint>,<union_Uint32Array1sequence_GLuint__>,<GLuint>,<GLsizei>);
<new SubtleCrypto> = <Crypto>.subtle;
<new ArrayBufferView> = <Crypto>.getRandomValues(<ArrayBufferView>);
<new DOMString> = <Crypto>.randomUUID();
<new KeyType> = <CryptoKey>.type;
<new boolean> = <CryptoKey>.extractable;
<new object> = <CryptoKey>.algorithm;
<new object> = <CryptoKey>.usages;
<new Promise_any_> = new Promise(function(x){console.log("ok")});
<new Promise_any_> = <SubtleCrypto>.encrypt(<AlgorithmIdentifier>,<CryptoKey>,<BufferSource>);
<new Promise_any_> = <SubtleCrypto>.decrypt(<AlgorithmIdentifier>,<CryptoKey>,<BufferSource>);
<new Promise_any_> = <SubtleCrypto>.sign(<AlgorithmIdentifier>,<CryptoKey>,<BufferSource>);
<new Promise_any_> = <SubtleCrypto>.verify(<AlgorithmIdentifier>,<CryptoKey>,<BufferSource>,<BufferSource>);
<new Promise_any_> = <SubtleCrypto>.digest(<AlgorithmIdentifier>,<BufferSource>);
<new sequence_KeyUsage_> = [<KeyUsage>];
<new KeyUsage> = <sequence_KeyUsage_>[0];
<new Promise_any_> = <SubtleCrypto>.generateKey(<AlgorithmIdentifier>,<boolean>,<sequence_KeyUsage_>);
<new Promise_any_> = <SubtleCrypto>.deriveKey(<AlgorithmIdentifier>,<CryptoKey>,<AlgorithmIdentifier>,<boolean>,<sequence_KeyUsage_>);
<new Promise_ArrayBuffer_> = <SubtleCrypto>.deriveBits(<AlgorithmIdentifier>,<CryptoKey>,<unsigned_long>);
<new Promise_CryptoKey_> = new Promise(function(x){console.log("ok")});
<new union_BufferSource1JsonWebKey_> = <BufferSource>;
<new union_BufferSource1JsonWebKey_> = <JsonWebKey>;
<new Promise_CryptoKey_> = <SubtleCrypto>.importKey(<KeyFormat>,<union_BufferSource1JsonWebKey_>,<AlgorithmIdentifier>,<boolean>,<sequence_KeyUsage_>);
<new Promise_any_> = <SubtleCrypto>.exportKey(<KeyFormat>,<CryptoKey>);
<new Promise_any_> = <SubtleCrypto>.wrapKey(<KeyFormat>,<CryptoKey>,<CryptoKey>,<AlgorithmIdentifier>);
<new Promise_CryptoKey_> = <SubtleCrypto>.unwrapKey(<KeyFormat>,<BufferSource>,<CryptoKey>,<AlgorithmIdentifier>,<AlgorithmIdentifier>,<boolean>,<sequence_KeyUsage_>);
!extends Accelerometer Sensor;
<new Sensor> = <Accelerometer>;
<new Accelerometer> = new Accelerometer();
<new Accelerometer> = new Accelerometer(<AccelerometerSensorOptions>);
<new double> = <Accelerometer>.x;
<new double> = <Accelerometer>.y;
<new double> = <Accelerometer>.z;
!extends LinearAccelerationSensor Accelerometer;
<new Accelerometer> = <LinearAccelerationSensor>;
<new LinearAccelerationSensor> = new LinearAccelerationSensor();
<new LinearAccelerationSensor> = new LinearAccelerationSensor(<AccelerometerSensorOptions>);
!extends GravitySensor Accelerometer;
<new Accelerometer> = <GravitySensor>;
<new GravitySensor> = new GravitySensor();
<new GravitySensor> = new GravitySensor(<AccelerometerSensorOptions>);
!extends AmbientLightSensor Sensor;
<new Sensor> = <AmbientLightSensor>;
<new AmbientLightSensor> = new AmbientLightSensor();
<new AmbientLightSensor> = new AmbientLightSensor(<SensorOptions>);
<new double> = <AmbientLightSensor>.illuminance;
<new XRSpace> = <XRAnchor>.anchorSpace;
<new Promise_DOMString_> = new Promise(function(x){console.log("ok")});
<new Promise_DOMString_> = <XRAnchor>.requestPersistentHandle();
<XRAnchor>.delete();
<new Promise_XRAnchor_> = new Promise(function(x){console.log("ok")});
<new Promise_XRAnchor_> = <XRFrame>.createAnchor(<XRRigidTransform>,<XRSpace>);
<new Promise_XRAnchor_> = <XRSession>.restorePersistentAnchor(<DOMString>);
<new Promise_undefined_> = <XRSession>.deletePersistentAnchor(<DOMString>);
<new Promise_XRAnchor_> = <XRHitTestResult>.createAnchor();
<new XRAnchorSet> = <XRFrame>.trackedAnchors;
<new DOMString> = <HTMLMediaElement>.sinkId;
<new Promise_undefined_> = <HTMLMediaElement>.setSinkId(<DOMString>);
<new Promise_MediaDeviceInfo_> = new Promise(function(x){console.log("ok")});
<new Promise_MediaDeviceInfo_> = <MediaDevices>.selectAudioOutput();
<new Promise_MediaDeviceInfo_> = <MediaDevices>.selectAudioOutput(<AudioOutputOptions>);
<new AutoplayPolicy> = <Navigator>.getAutoplayPolicy(<AutoplayPolicyMediaType>);
<new AutoplayPolicy> = <Navigator>.getAutoplayPolicy(<HTMLMediaElement>);
<new AutoplayPolicy> = <Navigator>.getAutoplayPolicy(<AudioContext>);
<new EventHandler> = <ServiceWorkerGlobalScope>.onbackgroundfetchsuccess;
<ServiceWorkerGlobalScope>.onbackgroundfetchsuccess = <EventHandler>;
<new EventHandler> = <ServiceWorkerGlobalScope>.onbackgroundfetchfail;
<ServiceWorkerGlobalScope>.onbackgroundfetchfail = <EventHandler>;
<new EventHandler> = <ServiceWorkerGlobalScope>.onbackgroundfetchabort;
<ServiceWorkerGlobalScope>.onbackgroundfetchabort = <EventHandler>;
<new EventHandler> = <ServiceWorkerGlobalScope>.onbackgroundfetchclick;
<ServiceWorkerGlobalScope>.onbackgroundfetchclick = <EventHandler>;
<new BackgroundFetchManager> = <ServiceWorkerRegistration>.backgroundFetch;
<new Promise_BackgroundFetchRegistration_> = new Promise(function(x){console.log("ok")});
<new sequence_RequestInfo_> = [<RequestInfo>];
<new RequestInfo> = <sequence_RequestInfo_>[0];
<new union_RequestInfo1sequence_RequestInfo__> = <RequestInfo>;
<new union_RequestInfo1sequence_RequestInfo__> = <sequence_RequestInfo_>;
<new Promise_BackgroundFetchRegistration_> = <BackgroundFetchManager>.fetch(<DOMString>,<union_RequestInfo1sequence_RequestInfo__>);
<new Promise_BackgroundFetchRegistration_> = <BackgroundFetchManager>.fetch(<DOMString>,<union_RequestInfo1sequence_RequestInfo__>,<BackgroundFetchOptions>);
<new Promise_BackgroundFetchRegistration_> = <BackgroundFetchManager>.get(<DOMString>);
<new Promise_sequence_DOMString__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_DOMString__> = <BackgroundFetchManager>.getIds();
!extends BackgroundFetchRegistration EventTarget;
<new EventTarget> = <BackgroundFetchRegistration>;
<new DOMString> = <BackgroundFetchRegistration>.id;
<new unsigned_long_long> = <BackgroundFetchRegistration>.uploadTotal;
<new unsigned_long_long> = <BackgroundFetchRegistration>.uploaded;
<new unsigned_long_long> = <BackgroundFetchRegistration>.downloadTotal;
<new unsigned_long_long> = <BackgroundFetchRegistration>.downloaded;
<new BackgroundFetchResult> = <BackgroundFetchRegistration>.result;
<new BackgroundFetchFailureReason> = <BackgroundFetchRegistration>.failureReason;
<new boolean> = <BackgroundFetchRegistration>.recordsAvailable;
<new EventHandler> = <BackgroundFetchRegistration>.onprogress;
<BackgroundFetchRegistration>.onprogress = <EventHandler>;
<new Promise_boolean_> = new Promise(function(x){console.log("ok")});
<new Promise_boolean_> = <BackgroundFetchRegistration>.abort();
<new Promise_BackgroundFetchRecord_> = new Promise(function(x){console.log("ok")});
<new Promise_BackgroundFetchRecord_> = <BackgroundFetchRegistration>.match(<RequestInfo>);
<new Promise_BackgroundFetchRecord_> = <BackgroundFetchRegistration>.match(<RequestInfo>,<CacheQueryOptions>);
<new sequence_BackgroundFetchRecord_> = [<BackgroundFetchRecord>];
<new BackgroundFetchRecord> = <sequence_BackgroundFetchRecord_>[0];
<new Promise_sequence_BackgroundFetchRecord__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_BackgroundFetchRecord__> = <BackgroundFetchRegistration>.matchAll();
<new Promise_sequence_BackgroundFetchRecord__> = <BackgroundFetchRegistration>.matchAll(<RequestInfo>);
<new Promise_sequence_BackgroundFetchRecord__> = <BackgroundFetchRegistration>.matchAll(<RequestInfo>,<CacheQueryOptions>);
<new Request> = <BackgroundFetchRecord>.request;
<new Promise_Response_> = new Promise(function(x){console.log("ok")});
<new Promise_Response_> = <BackgroundFetchRecord>.responseReady;
!extends BackgroundFetchEvent ExtendableEvent;
<new ExtendableEvent> = <BackgroundFetchEvent>;
<new BackgroundFetchEvent> = new BackgroundFetchEvent(<DOMString>,<BackgroundFetchEventInit>);
<new BackgroundFetchRegistration> = <BackgroundFetchEvent>.registration;
!extends BackgroundFetchUpdateUIEvent BackgroundFetchEvent;
<new BackgroundFetchEvent> = <BackgroundFetchUpdateUIEvent>;
<new BackgroundFetchUpdateUIEvent> = new BackgroundFetchUpdateUIEvent(<DOMString>,<BackgroundFetchEventInit>);
<new Promise_undefined_> = <BackgroundFetchUpdateUIEvent>.updateUI();
<new Promise_undefined_> = <BackgroundFetchUpdateUIEvent>.updateUI(<BackgroundFetchUIOptions>);
<new SyncManager> = <ServiceWorkerRegistration>.sync;
<new Promise_undefined_> = <SyncManager>.register(<DOMString>);
<new Promise_sequence_DOMString__> = <SyncManager>.getTags();
<new EventHandler> = <ServiceWorkerGlobalScope>.onsync;
<ServiceWorkerGlobalScope>.onsync = <EventHandler>;
!extends SyncEvent ExtendableEvent;
<new ExtendableEvent> = <SyncEvent>;
<new SyncEvent> = new SyncEvent(<DOMString>,<SyncEventInit>);
<new DOMString> = <SyncEvent>.tag;
<new boolean> = <SyncEvent>.lastChance;
<new Promise_undefined_> = <Navigator>.setClientBadge();
<new Promise_undefined_> = <Navigator>.setClientBadge(<unsigned_long_long>);
<new Promise_undefined_> = <Navigator>.clearClientBadge();
<new Promise_BatteryManager_> = new Promise(function(x){console.log("ok")});
<new Promise_BatteryManager_> = <Navigator>.getBattery();
!extends BatteryManager EventTarget;
<new EventTarget> = <BatteryManager>;
<new boolean> = <BatteryManager>.charging;
<new unrestricted_double> = <BatteryManager>.chargingTime;
<new unrestricted_double> = <BatteryManager>.dischargingTime;
<new double> = <BatteryManager>.level;
<new EventHandler> = <BatteryManager>.onchargingchange;
<BatteryManager>.onchargingchange = <EventHandler>;
<new EventHandler> = <BatteryManager>.onchargingtimechange;
<BatteryManager>.onchargingtimechange = <EventHandler>;
<new EventHandler> = <BatteryManager>.ondischargingtimechange;
<BatteryManager>.ondischargingtimechange = <EventHandler>;
<new EventHandler> = <BatteryManager>.onlevelchange;
<BatteryManager>.onlevelchange = <EventHandler>;
<Navigator>.sendBeacon(<USVString>);
<Navigator>.sendBeacon(<USVString>,<BodyInit>);
<MediaDevices>.setCaptureHandleConfig();
<MediaDevices>.setCaptureHandleConfig(<CaptureHandleConfig>);
<new CaptureHandle> = <MediaStreamTrack>.getCaptureHandle();
<new EventHandler> = <MediaStreamTrack>.oncapturehandlechange;
<MediaStreamTrack>.oncapturehandlechange = <EventHandler>;
!extends ClipboardEvent Event;
<new Event> = <ClipboardEvent>;
<new ClipboardEvent> = new ClipboardEvent(<DOMString>);
<new ClipboardEvent> = new ClipboardEvent(<DOMString>,<ClipboardEventInit>);
<new DataTransfer> = <ClipboardEvent>.clipboardData;
<new Clipboard> = <Navigator>.clipboard;
<new record_DOMString1ClipboardItemData_> = {a: <ClipboardItemData>};
<new ClipboardItemData> = <record_DOMString1ClipboardItemData_>[<DOMString>];
<new ClipboardItem> = new ClipboardItem(<record_DOMString1ClipboardItemData_>);
<new ClipboardItem> = new ClipboardItem(<record_DOMString1ClipboardItemData_>,<ClipboardItemOptions>);
<new PresentationStyle> = <ClipboardItem>.presentationStyle;
<new FrozenArray_DOMString_> = [<DOMString>];
<new DOMString> = <FrozenArray_DOMString_>[0];
<new FrozenArray_DOMString_> = <ClipboardItem>.types;
<new Promise_Blob_> = new Promise(function(x){console.log("ok")});
<new Promise_Blob_> = <ClipboardItem>.getType(<DOMString>);
!extends Clipboard EventTarget;
<new EventTarget> = <Clipboard>;
<new Promise_ClipboardItems_> = new Promise(function(x){console.log("ok")});
<new Promise_ClipboardItems_> = <Clipboard>.read();
<new Promise_DOMString_> = <Clipboard>.readText();
<new Promise_undefined_> = <Clipboard>.write(<ClipboardItems>);
<new Promise_undefined_> = <Clipboard>.writeText(<DOMString>);
!extends CloseWatcher EventTarget;
<new EventTarget> = <CloseWatcher>;
<new CloseWatcher> = new CloseWatcher();
<new CloseWatcher> = new CloseWatcher(<CloseWatcherOptions>);
<CloseWatcher>.destroy();
<CloseWatcher>.close();
<new EventHandler> = <CloseWatcher>.oncancel;
<CloseWatcher>.oncancel = <EventHandler>;
<new EventHandler> = <CloseWatcher>.onclose;
<CloseWatcher>.onclose = <EventHandler>;
<new short> = <Window>.orientation;
<new EventHandler> = <Window>.onorientationchange;
<Window>.onorientationchange = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.onorientationchange;
<HTMLBodyElement>.onorientationchange = <EventHandler>;
<new CompressionStream> = new CompressionStream(<DOMString>);
<new DecompressionStream> = new DecompressionStream(<DOMString>);
<new PressureObserver> = new PressureObserver(<PressureUpdateCallback>);
<new PressureObserver> = new PressureObserver(<PressureUpdateCallback>,<PressureObserverOptions>);
<new Promise_undefined_> = <PressureObserver>.observe(<PressureSource>);
<PressureObserver>.unobserve(<PressureSource>);
<PressureObserver>.disconnect();
<new sequence_PressureRecord_> = [<PressureRecord>];
<new PressureRecord> = <sequence_PressureRecord_>[0];
<new sequence_PressureRecord_> = <PressureObserver>.takeRecords();
<new FrozenArray_PressureSource_> = [<PressureSource>];
<new PressureSource> = <FrozenArray_PressureSource_>[0];
<new FrozenArray_PressureSource_> = <PressureObserver>.supportedSources;
<new PressureSource> = <PressureRecord>.source;
<new PressureState> = <PressureRecord>.state;
<new FrozenArray_PressureFactor_> = [<PressureFactor>];
<new PressureFactor> = <FrozenArray_PressureFactor_>[0];
<new FrozenArray_PressureFactor_> = <PressureRecord>.factors;
<new DOMHighResTimeStamp> = <PressureRecord>.time;
<new object> = <PressureRecord>.toJSON();
<new ContactsManager> = <Navigator>.contacts;
<new object> = <ContactAddress>.toJSON();
<new DOMString> = <ContactAddress>.city;
<new DOMString> = <ContactAddress>.country;
<new DOMString> = <ContactAddress>.dependentLocality;
<new DOMString> = <ContactAddress>.organization;
<new DOMString> = <ContactAddress>.phone;
<new DOMString> = <ContactAddress>.postalCode;
<new DOMString> = <ContactAddress>.recipient;
<new DOMString> = <ContactAddress>.region;
<new DOMString> = <ContactAddress>.sortingCode;
<new FrozenArray_DOMString_> = <ContactAddress>.addressLine;
<new sequence_ContactProperty_> = [<ContactProperty>];
<new ContactProperty> = <sequence_ContactProperty_>[0];
<new Promise_sequence_ContactProperty__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_ContactProperty__> = <ContactsManager>.getProperties();
<new sequence_ContactInfo_> = [<ContactInfo>];
<new ContactInfo> = <sequence_ContactInfo_>[0];
<new Promise_sequence_ContactInfo__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_ContactInfo__> = <ContactsManager>.select(<sequence_ContactProperty_>);
<new Promise_sequence_ContactInfo__> = <ContactsManager>.select(<sequence_ContactProperty_>,<ContactsSelectOptions>);
<new EventHandler> = <ServiceWorkerGlobalScope>.oncontentdelete;
<ServiceWorkerGlobalScope>.oncontentdelete = <EventHandler>;
<new ContentIndex> = <ServiceWorkerRegistration>.index;
<new Promise_undefined_> = <ContentIndex>.add(<ContentDescription>);
<new Promise_undefined_> = <ContentIndex>.delete(<DOMString>);
<new sequence_ContentDescription_> = [<ContentDescription>];
<new ContentDescription> = <sequence_ContentDescription_>[0];
<new Promise_sequence_ContentDescription__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_ContentDescription__> = <ContentIndex>.getAll();
!extends ContentIndexEvent ExtendableEvent;
<new ExtendableEvent> = <ContentIndexEvent>;
<new ContentIndexEvent> = new ContentIndexEvent(<DOMString>,<ContentIndexEventInit>);
<new DOMString> = <ContentIndexEvent>.id;
!extends CookieStore EventTarget;
<new EventTarget> = <CookieStore>;
<new Promise_CookieListItem_> = new Promise(function(x){console.log("ok")});
<new Promise_CookieListItem_> = <CookieStore>.get(<USVString>);
<new Promise_CookieListItem_> = <CookieStore>.get();
<new Promise_CookieListItem_> = <CookieStore>.get(<CookieStoreGetOptions>);
<new Promise_CookieList_> = new Promise(function(x){console.log("ok")});
<new Promise_CookieList_> = <CookieStore>.getAll(<USVString>);
<new Promise_CookieList_> = <CookieStore>.getAll();
<new Promise_CookieList_> = <CookieStore>.getAll(<CookieStoreGetOptions>);
<new Promise_undefined_> = <CookieStore>.set(<USVString>,<USVString>);
<new Promise_undefined_> = <CookieStore>.set(<CookieInit>);
<new Promise_undefined_> = <CookieStore>.delete(<USVString>);
<new Promise_undefined_> = <CookieStore>.delete(<CookieStoreDeleteOptions>);
<new EventHandler> = <CookieStore>.onchange;
<CookieStore>.onchange = <EventHandler>;
<new sequence_CookieStoreGetOptions_> = [<CookieStoreGetOptions>];
<new CookieStoreGetOptions> = <sequence_CookieStoreGetOptions_>[0];
<new Promise_undefined_> = <CookieStoreManager>.subscribe(<sequence_CookieStoreGetOptions_>);
<new Promise_sequence_CookieStoreGetOptions__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_CookieStoreGetOptions__> = <CookieStoreManager>.getSubscriptions();
<new Promise_undefined_> = <CookieStoreManager>.unsubscribe(<sequence_CookieStoreGetOptions_>);
<new CookieStoreManager> = <ServiceWorkerRegistration>.cookies;
!extends CookieChangeEvent Event;
<new Event> = <CookieChangeEvent>;
<new CookieChangeEvent> = new CookieChangeEvent(<DOMString>);
<new CookieChangeEvent> = new CookieChangeEvent(<DOMString>,<CookieChangeEventInit>);
<new FrozenArray_CookieListItem_> = [<CookieListItem>];
<new CookieListItem> = <FrozenArray_CookieListItem_>[0];
<new FrozenArray_CookieListItem_> = <CookieChangeEvent>.changed;
<new FrozenArray_CookieListItem_> = <CookieChangeEvent>.deleted;
!extends ExtendableCookieChangeEvent ExtendableEvent;
<new ExtendableEvent> = <ExtendableCookieChangeEvent>;
<new ExtendableCookieChangeEvent> = new ExtendableCookieChangeEvent(<DOMString>);
<new ExtendableCookieChangeEvent> = new ExtendableCookieChangeEvent(<DOMString>,<ExtendableCookieChangeEventInit>);
<new FrozenArray_CookieListItem_> = <ExtendableCookieChangeEvent>.changed;
<new FrozenArray_CookieListItem_> = <ExtendableCookieChangeEvent>.deleted;
<new CookieStore> = <Window>.cookieStore;
<new CookieStore> = <ServiceWorkerGlobalScope>.cookieStore;
<new EventHandler> = <ServiceWorkerGlobalScope>.oncookiechange;
<ServiceWorkerGlobalScope>.oncookiechange = <EventHandler>;
!extends CrashReportBody ReportBody;
<new ReportBody> = <CrashReportBody>;
<new object> = <CrashReportBody>.toJSON();
<new DOMString> = <CrashReportBody>.reason;
<new USVString> = <Credential>.id;
<new DOMString> = <Credential>.type;
<new Promise_boolean_> = <Credential>.isConditionalMediationAvailable();
<new CredentialsContainer> = <Navigator>.credentials;
<new Promise_Credential_> = new Promise(function(x){console.log("ok")});
<new Promise_Credential_> = <CredentialsContainer>.get();
<new Promise_Credential_> = <CredentialsContainer>.get(<CredentialRequestOptions>);
<new Promise_Credential_> = <CredentialsContainer>.store(<Credential>);
<new Promise_Credential_> = <CredentialsContainer>.create();
<new Promise_Credential_> = <CredentialsContainer>.create(<CredentialCreationOptions>);
<new Promise_undefined_> = <CredentialsContainer>.preventSilentAccess();
!extends PasswordCredential Credential;
<new Credential> = <PasswordCredential>;
<new PasswordCredential> = new PasswordCredential(<HTMLFormElement>);
<new PasswordCredential> = new PasswordCredential(<PasswordCredentialData>);
<new USVString> = <PasswordCredential>.password;
!extends FederatedCredential Credential;
<new Credential> = <FederatedCredential>;
<new FederatedCredential> = new FederatedCredential(<FederatedCredentialInit>);
<new USVString> = <FederatedCredential>.provider;
<new DOMString> = <FederatedCredential>.protocol;
<new DOMString> = <HTMLIFrameElement>.csp;
<HTMLIFrameElement>.csp = <DOMString>;
!extends ScriptingPolicyReportBody ReportBody;
<new ReportBody> = <ScriptingPolicyReportBody>;
<new object> = <ScriptingPolicyReportBody>.toJSON();
<new DOMString> = <ScriptingPolicyReportBody>.violationType;
<new USVString> = <ScriptingPolicyReportBody>.violationURL;
<new USVString> = <ScriptingPolicyReportBody>.violationSample;
<new unsigned_long> = <ScriptingPolicyReportBody>.lineno;
<new unsigned_long> = <ScriptingPolicyReportBody>.colno;
!extends AnimationWorkletGlobalScope WorkletGlobalScope;
<new WorkletGlobalScope> = <AnimationWorkletGlobalScope>;
<AnimationWorkletGlobalScope>.registerAnimator(<DOMString>,<AnimatorInstanceConstructor>);
<new EffectTiming> = <WorkletAnimationEffect>.getTiming();
<new ComputedEffectTiming> = <WorkletAnimationEffect>.getComputedTiming();
<new double> = <WorkletAnimationEffect>.localTime;
<WorkletAnimationEffect>.localTime = <double>;
<WorkletAnimationEffect>.localTime = null;
!extends WorkletAnimation Animation;
<new Animation> = <WorkletAnimation>;
<new sequence_AnimationEffect_> = [<AnimationEffect>];
<new AnimationEffect> = <sequence_AnimationEffect_>[0];
<new union_AnimationEffect1sequence_AnimationEffect__> = <AnimationEffect>;
<new union_AnimationEffect1sequence_AnimationEffect__> = <sequence_AnimationEffect_>;
<new WorkletAnimation> = new WorkletAnimation(<DOMString>);
<new WorkletAnimation> = new WorkletAnimation(<DOMString>,<union_AnimationEffect1sequence_AnimationEffect__>);
<new WorkletAnimation> = new WorkletAnimation(<DOMString>,<union_AnimationEffect1sequence_AnimationEffect__>,<AnimationTimeline>);
<new WorkletAnimation> = new WorkletAnimation(<DOMString>,<union_AnimationEffect1sequence_AnimationEffect__>,<AnimationTimeline>,<any>);
<new DOMString> = <WorkletAnimation>.animatorName;
<new sequence_WorkletAnimationEffect_> = [<WorkletAnimationEffect>];
<new WorkletAnimationEffect> = <sequence_WorkletAnimationEffect_>[0];
<new sequence_WorkletAnimationEffect_> = <WorkletGroupEffect>.getChildren();
!extends CSSAnimation Animation;
<new Animation> = <CSSAnimation>;
<new CSSOMString> = <CSSAnimation>.animationName;
!extends AnimationEvent Event;
<new Event> = <AnimationEvent>;
<new AnimationEvent> = new AnimationEvent(<CSSOMString>);
<new AnimationEvent> = new AnimationEvent(<CSSOMString>,<AnimationEventInit>);
<new CSSOMString> = <AnimationEvent>.animationName;
<new double> = <AnimationEvent>.elapsedTime;
<new CSSOMString> = <AnimationEvent>.pseudoElement;
<new unsigned_short> = CSSRule.KEYFRAMES_RULE;
<new unsigned_short> = CSSRule.KEYFRAME_RULE;
!extends CSSKeyframeRule CSSRule;
<new CSSRule> = <CSSKeyframeRule>;
<new CSSOMString> = <CSSKeyframeRule>.keyText;
<CSSKeyframeRule>.keyText = <CSSOMString>;
<new CSSStyleDeclaration> = <CSSKeyframeRule>.style;
!extends CSSKeyframesRule CSSRule;
<new CSSRule> = <CSSKeyframesRule>;
<new CSSOMString> = <CSSKeyframesRule>.name;
<CSSKeyframesRule>.name = <CSSOMString>;
<new CSSRuleList> = <CSSKeyframesRule>.cssRules;
<new unsigned_long> = <CSSKeyframesRule>.length;
<new CSSKeyframeRule> = <CSSKeyframesRule>[<unsigned_long>];
<CSSKeyframesRule>.appendRule(<CSSOMString>);
<CSSKeyframesRule>.deleteRule(<CSSOMString>);
<new CSSKeyframeRule> = <CSSKeyframesRule>.findRule(<CSSOMString>);
<new CSSOMString> = <CSSImportRule>.layerName;
!extends CSSLayerBlockRule CSSGroupingRule;
<new CSSGroupingRule> = <CSSLayerBlockRule>;
<new CSSOMString> = <CSSLayerBlockRule>.name;
!extends CSSLayerStatementRule CSSRule;
<new CSSRule> = <CSSLayerStatementRule>;
<new FrozenArray_CSSOMString_> = [<CSSOMString>];
<new CSSOMString> = <FrozenArray_CSSOMString_>[0];
<new FrozenArray_CSSOMString_> = <CSSLayerStatementRule>.nameList;
!extends CSSColorProfileRule CSSRule;
<new CSSRule> = <CSSColorProfileRule>;
<new CSSOMString> = <CSSColorProfileRule>.name;
<new CSSOMString> = <CSSColorProfileRule>.src;
<new CSSOMString> = <CSSColorProfileRule>.renderingIntent;
<new CSSOMString> = <CSSColorProfileRule>.components;
<new unsigned_short> = CSSRule.SUPPORTS_RULE;
!extends CSSConditionRule CSSGroupingRule;
<new CSSGroupingRule> = <CSSConditionRule>;
<new CSSOMString> = <CSSConditionRule>.conditionText;
!extends CSSMediaRule CSSConditionRule;
<new CSSConditionRule> = <CSSMediaRule>;
<new MediaList> = <CSSMediaRule>.media;
!extends CSSSupportsRule CSSConditionRule;
<new CSSConditionRule> = <CSSSupportsRule>;
!extends CSSContainerRule CSSConditionRule;
<new CSSConditionRule> = <CSSContainerRule>;
<new CSSOMString> = <CSSContainerRule>.containerName;
<new CSSOMString> = <CSSContainerRule>.containerQuery;
!extends ContentVisibilityAutoStateChangedEvent Event;
<new Event> = <ContentVisibilityAutoStateChangedEvent>;
<new ContentVisibilityAutoStateChangedEvent> = new ContentVisibilityAutoStateChangedEvent(<DOMString>);
<new ContentVisibilityAutoStateChangedEvent> = new ContentVisibilityAutoStateChangedEvent(<DOMString>,<ContentVisibilityAutoStateChangedEventInit>);
<new boolean> = <ContentVisibilityAutoStateChangedEvent>.skipped;
<new unsigned_short> = CSSRule.COUNTER_STYLE_RULE;
!extends CSSCounterStyleRule CSSRule;
<new CSSRule> = <CSSCounterStyleRule>;
<new CSSOMString> = <CSSCounterStyleRule>.name;
<CSSCounterStyleRule>.name = <CSSOMString>;
<new CSSOMString> = <CSSCounterStyleRule>.system;
<CSSCounterStyleRule>.system = <CSSOMString>;
<new CSSOMString> = <CSSCounterStyleRule>.symbols;
<CSSCounterStyleRule>.symbols = <CSSOMString>;
<new CSSOMString> = <CSSCounterStyleRule>.additiveSymbols;
<CSSCounterStyleRule>.additiveSymbols = <CSSOMString>;
<new CSSOMString> = <CSSCounterStyleRule>.negative;
<CSSCounterStyleRule>.negative = <CSSOMString>;
<new CSSOMString> = <CSSCounterStyleRule>.prefix;
<CSSCounterStyleRule>.prefix = <CSSOMString>;
<new CSSOMString> = <CSSCounterStyleRule>.suffix;
<CSSCounterStyleRule>.suffix = <CSSOMString>;
<new CSSOMString> = <CSSCounterStyleRule>.range;
<CSSCounterStyleRule>.range = <CSSOMString>;
<new CSSOMString> = <CSSCounterStyleRule>.pad;
<CSSCounterStyleRule>.pad = <CSSOMString>;
<new CSSOMString> = <CSSCounterStyleRule>.speakAs;
<CSSCounterStyleRule>.speakAs = <CSSOMString>;
<new CSSOMString> = <CSSCounterStyleRule>.fallback;
<CSSCounterStyleRule>.fallback = <CSSOMString>;
<new union_CSSOMString1BinaryData_> = <CSSOMString>;
<new union_CSSOMString1BinaryData_> = <BinaryData>;
<new FontFace> = new FontFace(<CSSOMString>,<union_CSSOMString1BinaryData_>);
<new FontFace> = new FontFace(<CSSOMString>,<union_CSSOMString1BinaryData_>,<FontFaceDescriptors>);
<new CSSOMString> = <FontFace>.family;
<FontFace>.family = <CSSOMString>;
<new CSSOMString> = <FontFace>.style;
<FontFace>.style = <CSSOMString>;
<new CSSOMString> = <FontFace>.weight;
<FontFace>.weight = <CSSOMString>;
<new CSSOMString> = <FontFace>.stretch;
<FontFace>.stretch = <CSSOMString>;
<new CSSOMString> = <FontFace>.unicodeRange;
<FontFace>.unicodeRange = <CSSOMString>;
<new CSSOMString> = <FontFace>.variant;
<FontFace>.variant = <CSSOMString>;
<new CSSOMString> = <FontFace>.featureSettings;
<FontFace>.featureSettings = <CSSOMString>;
<new CSSOMString> = <FontFace>.variationSettings;
<FontFace>.variationSettings = <CSSOMString>;
<new CSSOMString> = <FontFace>.display;
<FontFace>.display = <CSSOMString>;
<new CSSOMString> = <FontFace>.ascentOverride;
<FontFace>.ascentOverride = <CSSOMString>;
<new CSSOMString> = <FontFace>.descentOverride;
<FontFace>.descentOverride = <CSSOMString>;
<new CSSOMString> = <FontFace>.lineGapOverride;
<FontFace>.lineGapOverride = <CSSOMString>;
<new FontFaceLoadStatus> = <FontFace>.status;
<new Promise_FontFace_> = new Promise(function(x){console.log("ok")});
<new Promise_FontFace_> = <FontFace>.load();
<new Promise_FontFace_> = <FontFace>.loaded;
<new DOMString> = <FontFaceVariationAxis>.name;
<new DOMString> = <FontFaceVariationAxis>.axisTag;
<new double> = <FontFaceVariationAxis>.minimumValue;
<new double> = <FontFaceVariationAxis>.maximumValue;
<new double> = <FontFaceVariationAxis>.defaultValue;
<new unsigned_long> = <FontFacePalette>.length;
<new DOMString> = <FontFacePalette>[<unsigned_long>];
<new boolean> = <FontFacePalette>.usableWithLightBackground;
<new boolean> = <FontFacePalette>.usableWithDarkBackground;
<new unsigned_long> = <FontFacePalettes>.length;
<new FontFacePalette> = <FontFacePalettes>[<unsigned_long>];
<new FontFaceFeatures> = <FontFace>.features;
<new FontFaceVariations> = <FontFace>.variations;
<new FontFacePalettes> = <FontFace>.palettes;
!extends FontFaceSetLoadEvent Event;
<new Event> = <FontFaceSetLoadEvent>;
<new FontFaceSetLoadEvent> = new FontFaceSetLoadEvent(<CSSOMString>);
<new FontFaceSetLoadEvent> = new FontFaceSetLoadEvent(<CSSOMString>,<FontFaceSetLoadEventInit>);
<new FrozenArray_FontFace_> = [<FontFace>];
<new FontFace> = <FrozenArray_FontFace_>[0];
<new FrozenArray_FontFace_> = <FontFaceSetLoadEvent>.fontfaces;
!extends FontFaceSet EventTarget;
<new EventTarget> = <FontFaceSet>;
<new sequence_FontFace_> = [<FontFace>];
<new FontFace> = <sequence_FontFace_>[0];
<new FontFaceSet> = new FontFaceSet(<sequence_FontFace_>);
<new FontFaceSet> = <FontFaceSet>.add(<FontFace>);
<FontFaceSet>.delete(<FontFace>);
<FontFaceSet>.clear();
<new EventHandler> = <FontFaceSet>.onloading;
<FontFaceSet>.onloading = <EventHandler>;
<new EventHandler> = <FontFaceSet>.onloadingdone;
<FontFaceSet>.onloadingdone = <EventHandler>;
<new EventHandler> = <FontFaceSet>.onloadingerror;
<FontFaceSet>.onloadingerror = <EventHandler>;
<new Promise_sequence_FontFace__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_FontFace__> = <FontFaceSet>.load(<CSSOMString>);
<new Promise_sequence_FontFace__> = <FontFaceSet>.load(<CSSOMString>,<CSSOMString>);
<FontFaceSet>.check(<CSSOMString>);
<FontFaceSet>.check(<CSSOMString>,<CSSOMString>);
<new Promise_FontFaceSet_> = new Promise(function(x){console.log("ok")});
<new Promise_FontFaceSet_> = <FontFaceSet>.ready;
<new FontFaceSetLoadStatus> = <FontFaceSet>.status;
!extends CSSFontFaceRule CSSRule;
<new CSSRule> = <CSSFontFaceRule>;
<new CSSStyleDeclaration> = <CSSFontFaceRule>.style;
<new unsigned_short> = CSSRule.FONT_FEATURE_VALUES_RULE;
!extends CSSFontFeatureValuesRule CSSRule;
<new CSSRule> = <CSSFontFeatureValuesRule>;
<new CSSOMString> = <CSSFontFeatureValuesRule>.fontFamily;
<CSSFontFeatureValuesRule>.fontFamily = <CSSOMString>;
<new CSSFontFeatureValuesMap> = <CSSFontFeatureValuesRule>.annotation;
<new CSSFontFeatureValuesMap> = <CSSFontFeatureValuesRule>.ornaments;
<new CSSFontFeatureValuesMap> = <CSSFontFeatureValuesRule>.stylistic;
<new CSSFontFeatureValuesMap> = <CSSFontFeatureValuesRule>.swash;
<new CSSFontFeatureValuesMap> = <CSSFontFeatureValuesRule>.characterVariant;
<new CSSFontFeatureValuesMap> = <CSSFontFeatureValuesRule>.styleset;
<new sequence_unsigned_long_> = [<unsigned_long>];
<new unsigned_long> = <sequence_unsigned_long_>[0];
<new union_unsigned_long1sequence_unsigned_long__> = <unsigned_long>;
<new union_unsigned_long1sequence_unsigned_long__> = <sequence_unsigned_long_>;
<CSSFontFeatureValuesMap>.set(<CSSOMString>,<union_unsigned_long1sequence_unsigned_long__>);
!extends CSSFontPaletteValuesRule CSSRule;
<new CSSRule> = <CSSFontPaletteValuesRule>;
<new CSSOMString> = <CSSFontPaletteValuesRule>.name;
<new CSSOMString> = <CSSFontPaletteValuesRule>.fontFamily;
<new CSSOMString> = <CSSFontPaletteValuesRule>.basePalette;
<new CSSOMString> = <CSSFontPaletteValuesRule>.overrideColors;
<new Highlight> = new Highlight();
<new Highlight> = new Highlight(<AbstractRange>);
<new long> = <Highlight>.priority;
<Highlight>.priority = <long>;
<new HighlightType> = <Highlight>.type;
<Highlight>.type = <HighlightType>;
!extends LayoutWorkletGlobalScope WorkletGlobalScope;
<new WorkletGlobalScope> = <LayoutWorkletGlobalScope>;
<LayoutWorkletGlobalScope>.registerLayout(<DOMString>,<VoidFunction>);
<new StylePropertyMapReadOnly> = <LayoutChild>.styleMap;
<new Promise_IntrinsicSizes_> = new Promise(function(x){console.log("ok")});
<new Promise_IntrinsicSizes_> = <LayoutChild>.intrinsicSizes();
<new Promise_LayoutFragment_> = new Promise(function(x){console.log("ok")});
<new Promise_LayoutFragment_> = <LayoutChild>.layoutNextFragment(<LayoutConstraintsOptions>,<ChildBreakToken>);
<new double> = <LayoutFragment>.inlineSize;
<new double> = <LayoutFragment>.blockSize;
<new double> = <LayoutFragment>.inlineOffset;
<LayoutFragment>.inlineOffset = <double>;
<new double> = <LayoutFragment>.blockOffset;
<LayoutFragment>.blockOffset = <double>;
<new any> = <LayoutFragment>.data;
<new ChildBreakToken> = <LayoutFragment>.breakToken;
<new double> = <IntrinsicSizes>.minContentSize;
<new double> = <IntrinsicSizes>.maxContentSize;
<new double> = <LayoutConstraints>.availableInlineSize;
<new double> = <LayoutConstraints>.availableBlockSize;
<new double> = <LayoutConstraints>.fixedInlineSize;
<new double> = <LayoutConstraints>.fixedBlockSize;
<new double> = <LayoutConstraints>.percentageInlineSize;
<new double> = <LayoutConstraints>.percentageBlockSize;
<new double> = <LayoutConstraints>.blockFragmentationOffset;
<new BlockFragmentationType> = <LayoutConstraints>.blockFragmentationType;
<new any> = <LayoutConstraints>.data;
<new BreakType> = <ChildBreakToken>.breakType;
<new LayoutChild> = <ChildBreakToken>.child;
<new FrozenArray_ChildBreakToken_> = [<ChildBreakToken>];
<new ChildBreakToken> = <FrozenArray_ChildBreakToken_>[0];
<new FrozenArray_ChildBreakToken_> = <BreakToken>.childBreakTokens;
<new any> = <BreakToken>.data;
<new double> = <LayoutEdges>.inlineStart;
<new double> = <LayoutEdges>.inlineEnd;
<new double> = <LayoutEdges>.blockStart;
<new double> = <LayoutEdges>.blockEnd;
<new double> = <LayoutEdges>.inline;
<new double> = <LayoutEdges>.block;
<new FragmentResult> = new FragmentResult();
<new FragmentResult> = new FragmentResult(<FragmentResultOptions>);
<new double> = <FragmentResult>.inlineSize;
<new double> = <FragmentResult>.blockSize;
!extends SVGClipPathElement SVGElement;
<new SVGElement> = <SVGClipPathElement>;
<new SVGAnimatedEnumeration> = <SVGClipPathElement>.clipPathUnits;
<new SVGAnimatedTransformList> = <SVGClipPathElement>.transform;
!extends SVGMaskElement SVGElement;
<new SVGElement> = <SVGMaskElement>;
<new SVGAnimatedEnumeration> = <SVGMaskElement>.maskUnits;
<new SVGAnimatedEnumeration> = <SVGMaskElement>.maskContentUnits;
<new SVGAnimatedLength> = <SVGMaskElement>.x;
<new SVGAnimatedLength> = <SVGMaskElement>.y;
<new SVGAnimatedLength> = <SVGMaskElement>.width;
<new SVGAnimatedLength> = <SVGMaskElement>.height;
<Window>.navigate(<SpatialNavigationDirection>);
<new Node> = <Element>.getSpatialNavigationContainer();
<new sequence_Node_> = [<Node>];
<new Node> = <sequence_Node_>[0];
<new sequence_Node_> = <Element>.focusableAreas();
<new sequence_Node_> = <Element>.focusableAreas(<FocusableAreasOption>);
<new Node> = <Element>.spatialNavigationSearch(<SpatialNavigationDirection>);
<new Node> = <Element>.spatialNavigationSearch(<SpatialNavigationDirection>,<SpatialNavigationSearchOptions>);
!extends NavigationEvent UIEvent;
<new UIEvent> = <NavigationEvent>;
<new NavigationEvent> = new NavigationEvent(<DOMString>);
<new NavigationEvent> = new NavigationEvent(<DOMString>,<NavigationEventInit>);
<new SpatialNavigationDirection> = <NavigationEvent>.dir;
<new EventTarget> = <NavigationEvent>.relatedTarget;
<new CSSRuleList> = <CSSStyleRule>.cssRules;
<new unsigned_long> = <CSSStyleRule>.insertRule(<CSSOMString>);
<new unsigned_long> = <CSSStyleRule>.insertRule(<CSSOMString>,<unsigned_long>);
<CSSStyleRule>.deleteRule(<unsigned_long>);
!extends PaintWorkletGlobalScope WorkletGlobalScope;
<new WorkletGlobalScope> = <PaintWorkletGlobalScope>;
<PaintWorkletGlobalScope>.registerPaint(<DOMString>,<VoidFunction>);
<new unrestricted_double> = <PaintWorkletGlobalScope>.devicePixelRatio;
<new double> = <PaintSize>.width;
<new double> = <PaintSize>.height;
!extends CSSParserAtRule CSSParserRule;
<new CSSParserRule> = <CSSParserAtRule>;
<new sequence_CSSToken_> = [<CSSToken>];
<new CSSToken> = <sequence_CSSToken_>[0];
<new sequence_CSSParserRule_> = [<CSSParserRule>];
<new CSSParserRule> = <sequence_CSSParserRule_>[0];
<new CSSParserAtRule> = new CSSParserAtRule(<DOMString>,<sequence_CSSToken_>);
<new CSSParserAtRule> = new CSSParserAtRule(<DOMString>,<sequence_CSSToken_>,<sequence_CSSParserRule_>);
<new DOMString> = <CSSParserAtRule>.name;
<new FrozenArray_CSSParserValue_> = [<CSSParserValue>];
<new CSSParserValue> = <FrozenArray_CSSParserValue_>[0];
<new FrozenArray_CSSParserValue_> = <CSSParserAtRule>.prelude;
<new FrozenArray_CSSParserRule_> = [<CSSParserRule>];
<new CSSParserRule> = <FrozenArray_CSSParserRule_>[0];
<new FrozenArray_CSSParserRule_> = <CSSParserAtRule>.body;
!extends CSSParserQualifiedRule CSSParserRule;
<new CSSParserRule> = <CSSParserQualifiedRule>;
<new CSSParserQualifiedRule> = new CSSParserQualifiedRule(<sequence_CSSToken_>);
<new CSSParserQualifiedRule> = new CSSParserQualifiedRule(<sequence_CSSToken_>,<sequence_CSSParserRule_>);
<new FrozenArray_CSSParserValue_> = <CSSParserQualifiedRule>.prelude;
<new FrozenArray_CSSParserRule_> = <CSSParserQualifiedRule>.body;
!extends CSSParserDeclaration CSSParserRule;
<new CSSParserRule> = <CSSParserDeclaration>;
<new CSSParserDeclaration> = new CSSParserDeclaration(<DOMString>);
<new CSSParserDeclaration> = new CSSParserDeclaration(<DOMString>,<sequence_CSSParserRule_>);
<new DOMString> = <CSSParserDeclaration>.name;
<new FrozenArray_CSSParserValue_> = <CSSParserDeclaration>.body;
!extends CSSParserBlock CSSParserValue;
<new CSSParserValue> = <CSSParserBlock>;
<new sequence_CSSParserValue_> = [<CSSParserValue>];
<new CSSParserValue> = <sequence_CSSParserValue_>[0];
<new CSSParserBlock> = new CSSParserBlock(<DOMString>,<sequence_CSSParserValue_>);
<new DOMString> = <CSSParserBlock>.name;
<new FrozenArray_CSSParserValue_> = <CSSParserBlock>.body;
!extends CSSParserFunction CSSParserValue;
<new CSSParserValue> = <CSSParserFunction>;
<new sequence_sequence_CSSParserValue__> = [<sequence_CSSParserValue_>];
<new sequence_CSSParserValue_> = <sequence_sequence_CSSParserValue__>[0];
<new CSSParserFunction> = new CSSParserFunction(<DOMString>,<sequence_sequence_CSSParserValue__>);
<new DOMString> = <CSSParserFunction>.name;
<new FrozenArray_FrozenArray_CSSParserValue__> = [<FrozenArray_CSSParserValue_>];
<new FrozenArray_CSSParserValue_> = <FrozenArray_FrozenArray_CSSParserValue__>[0];
<new FrozenArray_FrozenArray_CSSParserValue__> = <CSSParserFunction>.args;
!extends CSSPropertyRule CSSRule;
<new CSSRule> = <CSSPropertyRule>;
<new CSSOMString> = <CSSPropertyRule>.name;
<new CSSOMString> = <CSSPropertyRule>.syntax;
<new boolean> = <CSSPropertyRule>.inherits;
<new CSSOMString> = <CSSPropertyRule>.initialValue;
!extends CSSPseudoElement EventTarget;
<new EventTarget> = <CSSPseudoElement>;
<new CSSOMString> = <CSSPseudoElement>.type;
<new Element> = <CSSPseudoElement>.element;
<new union_Element1CSSPseudoElement_> = <CSSPseudoElement>.parent;
<new CSSPseudoElement> = <CSSPseudoElement>.pseudo(<CSSOMString>);
<new CSSPseudoElement> = <Element>.pseudo(<CSSOMString>);
<new NamedFlowMap> = <Document>.namedFlows;
!extends NamedFlow EventTarget;
<new EventTarget> = <NamedFlow>;
<new CSSOMString> = <NamedFlow>.name;
<new boolean> = <NamedFlow>.overset;
<new sequence_Element_> = [<Element>];
<new Element> = <sequence_Element_>[0];
<new sequence_Element_> = <NamedFlow>.getRegions();
<new short> = <NamedFlow>.firstEmptyRegionIndex;
<new sequence_Node_> = <NamedFlow>.getContent();
<new sequence_Element_> = <NamedFlow>.getRegionsByContent(<Node>);
<new DOMTokenList> = <Element>.part;
!extends CSSTransition Animation;
<new Animation> = <CSSTransition>;
<new CSSOMString> = <CSSTransition>.transitionProperty;
!extends TransitionEvent Event;
<new Event> = <TransitionEvent>;
<new TransitionEvent> = new TransitionEvent(<CSSOMString>);
<new TransitionEvent> = new TransitionEvent(<CSSOMString>,<TransitionEventInit>);
<new CSSOMString> = <TransitionEvent>.propertyName;
<new double> = <TransitionEvent>.elapsedTime;
<new CSSOMString> = <TransitionEvent>.pseudoElement;
<new CSSStyleValue> = <CSSStyleValue>.parse(<USVString>,<USVString>);
<new sequence_CSSStyleValue_> = [<CSSStyleValue>];
<new CSSStyleValue> = <sequence_CSSStyleValue_>[0];
<new sequence_CSSStyleValue_> = <CSSStyleValue>.parseAll(<USVString>,<USVString>);
<new any> = <StylePropertyMapReadOnly>.get(<USVString>);
<new sequence_CSSStyleValue_> = <StylePropertyMapReadOnly>.getAll(<USVString>);
<StylePropertyMapReadOnly>.has(<USVString>);
<new unsigned_long> = <StylePropertyMapReadOnly>.size;
!extends StylePropertyMap StylePropertyMapReadOnly;
<new StylePropertyMapReadOnly> = <StylePropertyMap>;
<new union_CSSStyleValue1USVString_> = <CSSStyleValue>;
<new union_CSSStyleValue1USVString_> = <USVString>;
<StylePropertyMap>.set(<USVString>);
<StylePropertyMap>.set(<USVString>,<union_CSSStyleValue1USVString_>);
<StylePropertyMap>.append(<USVString>);
<StylePropertyMap>.append(<USVString>,<union_CSSStyleValue1USVString_>);
<StylePropertyMap>.delete(<USVString>);
<StylePropertyMap>.clear();
<new StylePropertyMapReadOnly> = <Element>.computedStyleMap();
<new StylePropertyMap> = <CSSStyleRule>.styleMap;
!extends CSSUnparsedValue CSSStyleValue;
<new CSSStyleValue> = <CSSUnparsedValue>;
<new sequence_CSSUnparsedSegment_> = [<CSSUnparsedSegment>];
<new CSSUnparsedSegment> = <sequence_CSSUnparsedSegment_>[0];
<new CSSUnparsedValue> = new CSSUnparsedValue(<sequence_CSSUnparsedSegment_>);
<new unsigned_long> = <CSSUnparsedValue>.length;
<new CSSUnparsedSegment> = <CSSUnparsedValue>[<unsigned_long>];
<CSSUnparsedValue>[<unsigned_long>] = <CSSUnparsedSegment>;
<new CSSVariableReferenceValue> = new CSSVariableReferenceValue(<USVString>);
<new CSSVariableReferenceValue> = new CSSVariableReferenceValue(<USVString>,<CSSUnparsedValue>);
<new USVString> = <CSSVariableReferenceValue>.variable;
<CSSVariableReferenceValue>.variable = <USVString>;
<new CSSUnparsedValue> = <CSSVariableReferenceValue>.fallback;
!extends CSSKeywordValue CSSStyleValue;
<new CSSStyleValue> = <CSSKeywordValue>;
<new CSSKeywordValue> = new CSSKeywordValue(<USVString>);
<new USVString> = <CSSKeywordValue>.value;
<CSSKeywordValue>.value = <USVString>;
!extends CSSNumericValue CSSStyleValue;
<new CSSStyleValue> = <CSSNumericValue>;
<new CSSNumericValue> = <CSSNumericValue>.add();
<new CSSNumericValue> = <CSSNumericValue>.add(<CSSNumberish>);
<new CSSNumericValue> = <CSSNumericValue>.sub();
<new CSSNumericValue> = <CSSNumericValue>.sub(<CSSNumberish>);
<new CSSNumericValue> = <CSSNumericValue>.mul();
<new CSSNumericValue> = <CSSNumericValue>.mul(<CSSNumberish>);
<new CSSNumericValue> = <CSSNumericValue>.div();
<new CSSNumericValue> = <CSSNumericValue>.div(<CSSNumberish>);
<new CSSNumericValue> = <CSSNumericValue>.min();
<new CSSNumericValue> = <CSSNumericValue>.min(<CSSNumberish>);
<new CSSNumericValue> = <CSSNumericValue>.max();
<new CSSNumericValue> = <CSSNumericValue>.max(<CSSNumberish>);
<CSSNumericValue>.equals();
<CSSNumericValue>.equals(<CSSNumberish>);
<new CSSUnitValue> = <CSSNumericValue>.to(<USVString>);
<new CSSMathSum> = <CSSNumericValue>.toSum();
<new CSSMathSum> = <CSSNumericValue>.toSum(<USVString>);
<new CSSNumericType> = <CSSNumericValue>.type();
<new CSSNumericValue> = <CSSNumericValue>.parse(<USVString>);
!extends CSSUnitValue CSSNumericValue;
<new CSSNumericValue> = <CSSUnitValue>;
<new CSSUnitValue> = new CSSUnitValue(<double>,<USVString>);
<new double> = <CSSUnitValue>.value;
<CSSUnitValue>.value = <double>;
<new USVString> = <CSSUnitValue>.unit;
!extends CSSMathValue CSSNumericValue;
<new CSSNumericValue> = <CSSMathValue>;
<new CSSMathOperator> = <CSSMathValue>.operator;
!extends CSSMathSum CSSMathValue;
<new CSSMathValue> = <CSSMathSum>;
<new CSSMathSum> = new CSSMathSum();
<new CSSMathSum> = new CSSMathSum(<CSSNumberish>);
<new CSSNumericArray> = <CSSMathSum>.values;
!extends CSSMathProduct CSSMathValue;
<new CSSMathValue> = <CSSMathProduct>;
<new CSSMathProduct> = new CSSMathProduct();
<new CSSMathProduct> = new CSSMathProduct(<CSSNumberish>);
<new CSSNumericArray> = <CSSMathProduct>.values;
!extends CSSMathNegate CSSMathValue;
<new CSSMathValue> = <CSSMathNegate>;
<new CSSMathNegate> = new CSSMathNegate(<CSSNumberish>);
<new CSSNumericValue> = <CSSMathNegate>.value;
!extends CSSMathInvert CSSMathValue;
<new CSSMathValue> = <CSSMathInvert>;
<new CSSMathInvert> = new CSSMathInvert(<CSSNumberish>);
<new CSSNumericValue> = <CSSMathInvert>.value;
!extends CSSMathMin CSSMathValue;
<new CSSMathValue> = <CSSMathMin>;
<new CSSMathMin> = new CSSMathMin();
<new CSSMathMin> = new CSSMathMin(<CSSNumberish>);
<new CSSNumericArray> = <CSSMathMin>.values;
!extends CSSMathMax CSSMathValue;
<new CSSMathValue> = <CSSMathMax>;
<new CSSMathMax> = new CSSMathMax();
<new CSSMathMax> = new CSSMathMax(<CSSNumberish>);
<new CSSNumericArray> = <CSSMathMax>.values;
!extends CSSMathClamp CSSMathValue;
<new CSSMathValue> = <CSSMathClamp>;
<new CSSMathClamp> = new CSSMathClamp(<CSSNumberish>,<CSSNumberish>,<CSSNumberish>);
<new CSSNumericValue> = <CSSMathClamp>.lower;
<new CSSNumericValue> = <CSSMathClamp>.value;
<new CSSNumericValue> = <CSSMathClamp>.upper;
<new unsigned_long> = <CSSNumericArray>.length;
<new CSSNumericValue> = <CSSNumericArray>[<unsigned_long>];
!extends CSSTransformValue CSSStyleValue;
<new CSSStyleValue> = <CSSTransformValue>;
<new sequence_CSSTransformComponent_> = [<CSSTransformComponent>];
<new CSSTransformComponent> = <sequence_CSSTransformComponent_>[0];
<new CSSTransformValue> = new CSSTransformValue(<sequence_CSSTransformComponent_>);
<new unsigned_long> = <CSSTransformValue>.length;
<new CSSTransformComponent> = <CSSTransformValue>[<unsigned_long>];
<CSSTransformValue>[<unsigned_long>] = <CSSTransformComponent>;
<new boolean> = <CSSTransformValue>.is2D;
<new DOMMatrix> = <CSSTransformValue>.toMatrix();
<new boolean> = <CSSTransformComponent>.is2D;
<CSSTransformComponent>.is2D = <boolean>;
<new DOMMatrix> = <CSSTransformComponent>.toMatrix();
!extends CSSTranslate CSSTransformComponent;
<new CSSTransformComponent> = <CSSTranslate>;
<new CSSTranslate> = new CSSTranslate(<CSSNumericValue>,<CSSNumericValue>);
<new CSSTranslate> = new CSSTranslate(<CSSNumericValue>,<CSSNumericValue>,<CSSNumericValue>);
<new CSSNumericValue> = <CSSTranslate>.x;
<CSSTranslate>.x = <CSSNumericValue>;
<new CSSNumericValue> = <CSSTranslate>.y;
<CSSTranslate>.y = <CSSNumericValue>;
<new CSSNumericValue> = <CSSTranslate>.z;
<CSSTranslate>.z = <CSSNumericValue>;
!extends CSSRotate CSSTransformComponent;
<new CSSTransformComponent> = <CSSRotate>;
<new CSSRotate> = new CSSRotate(<CSSNumericValue>);
<new CSSRotate> = new CSSRotate(<CSSNumberish>,<CSSNumberish>,<CSSNumberish>,<CSSNumericValue>);
<new CSSNumberish> = <CSSRotate>.x;
<CSSRotate>.x = <CSSNumberish>;
<new CSSNumberish> = <CSSRotate>.y;
<CSSRotate>.y = <CSSNumberish>;
<new CSSNumberish> = <CSSRotate>.z;
<CSSRotate>.z = <CSSNumberish>;
<new CSSNumericValue> = <CSSRotate>.angle;
<CSSRotate>.angle = <CSSNumericValue>;
!extends CSSScale CSSTransformComponent;
<new CSSTransformComponent> = <CSSScale>;
<new CSSScale> = new CSSScale(<CSSNumberish>,<CSSNumberish>);
<new CSSScale> = new CSSScale(<CSSNumberish>,<CSSNumberish>,<CSSNumberish>);
<new CSSNumberish> = <CSSScale>.x;
<CSSScale>.x = <CSSNumberish>;
<new CSSNumberish> = <CSSScale>.y;
<CSSScale>.y = <CSSNumberish>;
<new CSSNumberish> = <CSSScale>.z;
<CSSScale>.z = <CSSNumberish>;
!extends CSSSkew CSSTransformComponent;
<new CSSTransformComponent> = <CSSSkew>;
<new CSSSkew> = new CSSSkew(<CSSNumericValue>,<CSSNumericValue>);
<new CSSNumericValue> = <CSSSkew>.ax;
<CSSSkew>.ax = <CSSNumericValue>;
<new CSSNumericValue> = <CSSSkew>.ay;
<CSSSkew>.ay = <CSSNumericValue>;
!extends CSSSkewX CSSTransformComponent;
<new CSSTransformComponent> = <CSSSkewX>;
<new CSSSkewX> = new CSSSkewX(<CSSNumericValue>);
<new CSSNumericValue> = <CSSSkewX>.ax;
<CSSSkewX>.ax = <CSSNumericValue>;
!extends CSSSkewY CSSTransformComponent;
<new CSSTransformComponent> = <CSSSkewY>;
<new CSSSkewY> = new CSSSkewY(<CSSNumericValue>);
<new CSSNumericValue> = <CSSSkewY>.ay;
<CSSSkewY>.ay = <CSSNumericValue>;
!extends CSSPerspective CSSTransformComponent;
<new CSSTransformComponent> = <CSSPerspective>;
<new CSSPerspective> = new CSSPerspective(<CSSPerspectiveValue>);
<new CSSPerspectiveValue> = <CSSPerspective>.length;
<CSSPerspective>.length = <CSSPerspectiveValue>;
!extends CSSMatrixComponent CSSTransformComponent;
<new CSSTransformComponent> = <CSSMatrixComponent>;
<new CSSMatrixComponent> = new CSSMatrixComponent(<DOMMatrixReadOnly>);
<new CSSMatrixComponent> = new CSSMatrixComponent(<DOMMatrixReadOnly>,<CSSMatrixComponentOptions>);
<new DOMMatrix> = <CSSMatrixComponent>.matrix;
<CSSMatrixComponent>.matrix = <DOMMatrix>;
!extends CSSImageValue CSSStyleValue;
<new CSSStyleValue> = <CSSImageValue>;
!extends CSSColorValue CSSStyleValue;
<new CSSStyleValue> = <CSSColorValue>;
<new union_CSSColorValue1CSSStyleValue_> = <CSSColorValue>;
<new union_CSSColorValue1CSSStyleValue_> = <CSSStyleValue>;
<new union_CSSColorValue1CSSStyleValue_> = <CSSColorValue>.parse(<USVString>);
!extends CSSRGB CSSColorValue;
<new CSSColorValue> = <CSSRGB>;
<new CSSRGB> = new CSSRGB(<CSSColorRGBComp>,<CSSColorRGBComp>,<CSSColorRGBComp>);
<new CSSRGB> = new CSSRGB(<CSSColorRGBComp>,<CSSColorRGBComp>,<CSSColorRGBComp>,<CSSColorPercent>);
<new CSSColorRGBComp> = <CSSRGB>.r;
<CSSRGB>.r = <CSSColorRGBComp>;
<new CSSColorRGBComp> = <CSSRGB>.g;
<CSSRGB>.g = <CSSColorRGBComp>;
<new CSSColorRGBComp> = <CSSRGB>.b;
<CSSRGB>.b = <CSSColorRGBComp>;
<new CSSColorPercent> = <CSSRGB>.alpha;
<CSSRGB>.alpha = <CSSColorPercent>;
!extends CSSHSL CSSColorValue;
<new CSSColorValue> = <CSSHSL>;
<new CSSHSL> = new CSSHSL(<CSSColorAngle>,<CSSColorPercent>,<CSSColorPercent>);
<new CSSHSL> = new CSSHSL(<CSSColorAngle>,<CSSColorPercent>,<CSSColorPercent>,<CSSColorPercent>);
<new CSSColorAngle> = <CSSHSL>.h;
<CSSHSL>.h = <CSSColorAngle>;
<new CSSColorPercent> = <CSSHSL>.s;
<CSSHSL>.s = <CSSColorPercent>;
<new CSSColorPercent> = <CSSHSL>.l;
<CSSHSL>.l = <CSSColorPercent>;
<new CSSColorPercent> = <CSSHSL>.alpha;
<CSSHSL>.alpha = <CSSColorPercent>;
!extends CSSHWB CSSColorValue;
<new CSSColorValue> = <CSSHWB>;
<new CSSHWB> = new CSSHWB(<CSSNumericValue>,<CSSNumberish>,<CSSNumberish>);
<new CSSHWB> = new CSSHWB(<CSSNumericValue>,<CSSNumberish>,<CSSNumberish>,<CSSNumberish>);
<new CSSNumericValue> = <CSSHWB>.h;
<CSSHWB>.h = <CSSNumericValue>;
<new CSSNumberish> = <CSSHWB>.w;
<CSSHWB>.w = <CSSNumberish>;
<new CSSNumberish> = <CSSHWB>.b;
<CSSHWB>.b = <CSSNumberish>;
<new CSSNumberish> = <CSSHWB>.alpha;
<CSSHWB>.alpha = <CSSNumberish>;
!extends CSSLab CSSColorValue;
<new CSSColorValue> = <CSSLab>;
<new CSSLab> = new CSSLab(<CSSColorPercent>,<CSSColorNumber>,<CSSColorNumber>);
<new CSSLab> = new CSSLab(<CSSColorPercent>,<CSSColorNumber>,<CSSColorNumber>,<CSSColorPercent>);
<new CSSColorPercent> = <CSSLab>.l;
<CSSLab>.l = <CSSColorPercent>;
<new CSSColorNumber> = <CSSLab>.a;
<CSSLab>.a = <CSSColorNumber>;
<new CSSColorNumber> = <CSSLab>.b;
<CSSLab>.b = <CSSColorNumber>;
<new CSSColorPercent> = <CSSLab>.alpha;
<CSSLab>.alpha = <CSSColorPercent>;
!extends CSSColor CSSColorValue;
<new CSSColorValue> = <CSSColor>;
<new sequence_CSSColorPercent_> = [<CSSColorPercent>];
<new CSSColorPercent> = <sequence_CSSColorPercent_>[0];
<new CSSColor> = new CSSColor(<CSSKeywordish>,<sequence_CSSColorPercent_>);
<new CSSColor> = new CSSColor(<CSSKeywordish>,<sequence_CSSColorPercent_>,<CSSNumberish>);
<new CSSKeywordish> = <CSSColor>.colorSpace;
<CSSColor>.colorSpace = <CSSKeywordish>;
!extends CSSRGB CSSColorValue;
<new CSSColorValue> = <CSSRGB>;
<new CSSRGB> = new CSSRGB(<CSSColorRGBComp>,<CSSColorRGBComp>,<CSSColorRGBComp>);
<new CSSRGB> = new CSSRGB(<CSSColorRGBComp>,<CSSColorRGBComp>,<CSSColorRGBComp>,<CSSColorPercent>);
<new CSSColorRGBComp> = <CSSRGB>.r;
<CSSRGB>.r = <CSSColorRGBComp>;
<new CSSColorRGBComp> = <CSSRGB>.g;
<CSSRGB>.g = <CSSColorRGBComp>;
<new CSSColorRGBComp> = <CSSRGB>.b;
<CSSRGB>.b = <CSSColorRGBComp>;
<new CSSColorPercent> = <CSSRGB>.alpha;
<CSSRGB>.alpha = <CSSColorPercent>;
!extends CSSHSL CSSColorValue;
<new CSSColorValue> = <CSSHSL>;
<new CSSHSL> = new CSSHSL(<CSSColorAngle>,<CSSColorPercent>,<CSSColorPercent>);
<new CSSHSL> = new CSSHSL(<CSSColorAngle>,<CSSColorPercent>,<CSSColorPercent>,<CSSColorPercent>);
<new CSSColorAngle> = <CSSHSL>.h;
<CSSHSL>.h = <CSSColorAngle>;
<new CSSColorPercent> = <CSSHSL>.s;
<CSSHSL>.s = <CSSColorPercent>;
<new CSSColorPercent> = <CSSHSL>.l;
<CSSHSL>.l = <CSSColorPercent>;
<new CSSColorPercent> = <CSSHSL>.alpha;
<CSSHSL>.alpha = <CSSColorPercent>;
!extends CSSHWB CSSColorValue;
<new CSSColorValue> = <CSSHWB>;
<new CSSHWB> = new CSSHWB(<CSSNumericValue>,<CSSNumberish>,<CSSNumberish>);
<new CSSHWB> = new CSSHWB(<CSSNumericValue>,<CSSNumberish>,<CSSNumberish>,<CSSNumberish>);
<new CSSNumericValue> = <CSSHWB>.h;
<CSSHWB>.h = <CSSNumericValue>;
<new CSSNumberish> = <CSSHWB>.w;
<CSSHWB>.w = <CSSNumberish>;
<new CSSNumberish> = <CSSHWB>.b;
<CSSHWB>.b = <CSSNumberish>;
<new CSSNumberish> = <CSSHWB>.alpha;
<CSSHWB>.alpha = <CSSNumberish>;
!extends CSSLab CSSColorValue;
<new CSSColorValue> = <CSSLab>;
<new CSSLab> = new CSSLab(<CSSColorPercent>,<CSSColorNumber>,<CSSColorNumber>);
<new CSSLab> = new CSSLab(<CSSColorPercent>,<CSSColorNumber>,<CSSColorNumber>,<CSSColorPercent>);
<new CSSColorPercent> = <CSSLab>.l;
<CSSLab>.l = <CSSColorPercent>;
<new CSSColorNumber> = <CSSLab>.a;
<CSSLab>.a = <CSSColorNumber>;
<new CSSColorNumber> = <CSSLab>.b;
<CSSLab>.b = <CSSColorNumber>;
<new CSSColorPercent> = <CSSLab>.alpha;
<CSSLab>.alpha = <CSSColorPercent>;
!extends CSSColor CSSColorValue;
<new CSSColorValue> = <CSSColor>;
<new sequence_CSSColorPercent_> = [<CSSColorPercent>];
<new CSSColorPercent> = <sequence_CSSColorPercent_>[0];
<new CSSColor> = new CSSColor(<CSSKeywordish>,<sequence_CSSColorPercent_>);
<new CSSColor> = new CSSColor(<CSSKeywordish>,<sequence_CSSColorPercent_>,<CSSNumberish>);
<new CSSKeywordish> = <CSSColor>.colorSpace;
<CSSColor>.colorSpace = <CSSKeywordish>;
!extends CSSRGB CSSColorValue;
<new CSSColorValue> = <CSSRGB>;
<new CSSRGB> = new CSSRGB(<CSSColorRGBComp>,<CSSColorRGBComp>,<CSSColorRGBComp>);
<new CSSRGB> = new CSSRGB(<CSSColorRGBComp>,<CSSColorRGBComp>,<CSSColorRGBComp>,<CSSColorPercent>);
<new CSSColorRGBComp> = <CSSRGB>.r;
<CSSRGB>.r = <CSSColorRGBComp>;
<new CSSColorRGBComp> = <CSSRGB>.g;
<CSSRGB>.g = <CSSColorRGBComp>;
<new CSSColorRGBComp> = <CSSRGB>.b;
<CSSRGB>.b = <CSSColorRGBComp>;
<new CSSColorPercent> = <CSSRGB>.alpha;
<CSSRGB>.alpha = <CSSColorPercent>;
!extends CSSHSL CSSColorValue;
<new CSSColorValue> = <CSSHSL>;
<new CSSHSL> = new CSSHSL(<CSSColorAngle>,<CSSColorPercent>,<CSSColorPercent>);
<new CSSHSL> = new CSSHSL(<CSSColorAngle>,<CSSColorPercent>,<CSSColorPercent>,<CSSColorPercent>);
<new CSSColorAngle> = <CSSHSL>.h;
<CSSHSL>.h = <CSSColorAngle>;
<new CSSColorPercent> = <CSSHSL>.s;
<CSSHSL>.s = <CSSColorPercent>;
<new CSSColorPercent> = <CSSHSL>.l;
<CSSHSL>.l = <CSSColorPercent>;
<new CSSColorPercent> = <CSSHSL>.alpha;
<CSSHSL>.alpha = <CSSColorPercent>;
!extends CSSHWB CSSColorValue;
<new CSSColorValue> = <CSSHWB>;
<new CSSHWB> = new CSSHWB(<CSSNumericValue>,<CSSNumberish>,<CSSNumberish>);
<new CSSHWB> = new CSSHWB(<CSSNumericValue>,<CSSNumberish>,<CSSNumberish>,<CSSNumberish>);
<new CSSNumericValue> = <CSSHWB>.h;
<CSSHWB>.h = <CSSNumericValue>;
<new CSSNumberish> = <CSSHWB>.w;
<CSSHWB>.w = <CSSNumberish>;
<new CSSNumberish> = <CSSHWB>.b;
<CSSHWB>.b = <CSSNumberish>;
<new CSSNumberish> = <CSSHWB>.alpha;
<CSSHWB>.alpha = <CSSNumberish>;
!extends CSSLab CSSColorValue;
<new CSSColorValue> = <CSSLab>;
<new CSSLab> = new CSSLab(<CSSColorPercent>,<CSSColorNumber>,<CSSColorNumber>);
<new CSSLab> = new CSSLab(<CSSColorPercent>,<CSSColorNumber>,<CSSColorNumber>,<CSSColorPercent>);
<new CSSColorPercent> = <CSSLab>.l;
<CSSLab>.l = <CSSColorPercent>;
<new CSSColorNumber> = <CSSLab>.a;
<CSSLab>.a = <CSSColorNumber>;
<new CSSColorNumber> = <CSSLab>.b;
<CSSLab>.b = <CSSColorNumber>;
<new CSSColorPercent> = <CSSLab>.alpha;
<CSSLab>.alpha = <CSSColorPercent>;
!extends CSSLCH CSSColorValue;
<new CSSColorValue> = <CSSLCH>;
!extends CSSColor CSSColorValue;
<new CSSColorValue> = <CSSColor>;
<new sequence_CSSColorPercent_> = [<CSSColorPercent>];
<new CSSColorPercent> = <sequence_CSSColorPercent_>[0];
<new CSSColor> = new CSSColor(<CSSKeywordish>,<sequence_CSSColorPercent_>);
<new CSSColor> = new CSSColor(<CSSKeywordish>,<sequence_CSSColorPercent_>,<CSSNumberish>);
<new CSSKeywordish> = <CSSColor>.colorSpace;
<CSSColor>.colorSpace = <CSSKeywordish>;
!extends CSSRGB CSSColorValue;
<new CSSColorValue> = <CSSRGB>;
<new CSSRGB> = new CSSRGB(<CSSColorRGBComp>,<CSSColorRGBComp>,<CSSColorRGBComp>);
<new CSSRGB> = new CSSRGB(<CSSColorRGBComp>,<CSSColorRGBComp>,<CSSColorRGBComp>,<CSSColorPercent>);
<new CSSColorRGBComp> = <CSSRGB>.r;
<CSSRGB>.r = <CSSColorRGBComp>;
<new CSSColorRGBComp> = <CSSRGB>.g;
<CSSRGB>.g = <CSSColorRGBComp>;
<new CSSColorRGBComp> = <CSSRGB>.b;
<CSSRGB>.b = <CSSColorRGBComp>;
<new CSSColorPercent> = <CSSRGB>.alpha;
<CSSRGB>.alpha = <CSSColorPercent>;
!extends CSSHSL CSSColorValue;
<new CSSColorValue> = <CSSHSL>;
<new CSSHSL> = new CSSHSL(<CSSColorAngle>,<CSSColorPercent>,<CSSColorPercent>);
<new CSSHSL> = new CSSHSL(<CSSColorAngle>,<CSSColorPercent>,<CSSColorPercent>,<CSSColorPercent>);
<new CSSColorAngle> = <CSSHSL>.h;
<CSSHSL>.h = <CSSColorAngle>;
<new CSSColorPercent> = <CSSHSL>.s;
<CSSHSL>.s = <CSSColorPercent>;
<new CSSColorPercent> = <CSSHSL>.l;
<CSSHSL>.l = <CSSColorPercent>;
<new CSSColorPercent> = <CSSHSL>.alpha;
<CSSHSL>.alpha = <CSSColorPercent>;
!extends CSSHWB CSSColorValue;
<new CSSColorValue> = <CSSHWB>;
<new CSSHWB> = new CSSHWB(<CSSNumericValue>,<CSSNumberish>,<CSSNumberish>);
<new CSSHWB> = new CSSHWB(<CSSNumericValue>,<CSSNumberish>,<CSSNumberish>,<CSSNumberish>);
<new CSSNumericValue> = <CSSHWB>.h;
<CSSHWB>.h = <CSSNumericValue>;
<new CSSNumberish> = <CSSHWB>.w;
<CSSHWB>.w = <CSSNumberish>;
<new CSSNumberish> = <CSSHWB>.b;
<CSSHWB>.b = <CSSNumberish>;
<new CSSNumberish> = <CSSHWB>.alpha;
<CSSHWB>.alpha = <CSSNumberish>;
!extends CSSLab CSSColorValue;
<new CSSColorValue> = <CSSLab>;
<new CSSLab> = new CSSLab(<CSSColorPercent>,<CSSColorNumber>,<CSSColorNumber>);
<new CSSLab> = new CSSLab(<CSSColorPercent>,<CSSColorNumber>,<CSSColorNumber>,<CSSColorPercent>);
<new CSSColorPercent> = <CSSLab>.l;
<CSSLab>.l = <CSSColorPercent>;
<new CSSColorNumber> = <CSSLab>.a;
<CSSLab>.a = <CSSColorNumber>;
<new CSSColorNumber> = <CSSLab>.b;
<CSSLab>.b = <CSSColorNumber>;
<new CSSColorPercent> = <CSSLab>.alpha;
<CSSLab>.alpha = <CSSColorPercent>;
<new CSSColorPercent> = <CSSOKLCH>.c;
<CSSOKLCH>.c = <CSSColorPercent>;
<new CSSColorAngle> = <CSSOKLCH>.h;
<CSSOKLCH>.h = <CSSColorAngle>;
<new CSSColorPercent> = <CSSOKLCH>.alpha;
<CSSOKLCH>.alpha = <CSSColorPercent>;
!extends CSSColor CSSColorValue;
<new CSSColorValue> = <CSSColor>;
<new sequence_CSSColorPercent_> = [<CSSColorPercent>];
<new CSSColorPercent> = <sequence_CSSColorPercent_>[0];
<new CSSColor> = new CSSColor(<CSSKeywordish>,<sequence_CSSColorPercent_>);
<new CSSColor> = new CSSColor(<CSSKeywordish>,<sequence_CSSColorPercent_>,<CSSNumberish>);
<new CSSKeywordish> = <CSSColor>.colorSpace;
<CSSColor>.colorSpace = <CSSKeywordish>;
!extends CSSRGB CSSColorValue;
<new CSSColorValue> = <CSSRGB>;
<new CSSRGB> = new CSSRGB(<CSSColorRGBComp>,<CSSColorRGBComp>,<CSSColorRGBComp>);
<new CSSRGB> = new CSSRGB(<CSSColorRGBComp>,<CSSColorRGBComp>,<CSSColorRGBComp>,<CSSColorPercent>);
<new CSSColorRGBComp> = <CSSRGB>.r;
<CSSRGB>.r = <CSSColorRGBComp>;
<new CSSColorRGBComp> = <CSSRGB>.g;
<CSSRGB>.g = <CSSColorRGBComp>;
<new CSSColorRGBComp> = <CSSRGB>.b;
<CSSRGB>.b = <CSSColorRGBComp>;
<new CSSColorPercent> = <CSSRGB>.alpha;
<CSSRGB>.alpha = <CSSColorPercent>;
!extends CSSHSL CSSColorValue;
<new CSSColorValue> = <CSSHSL>;
<new CSSHSL> = new CSSHSL(<CSSColorAngle>,<CSSColorPercent>,<CSSColorPercent>);
<new CSSHSL> = new CSSHSL(<CSSColorAngle>,<CSSColorPercent>,<CSSColorPercent>,<CSSColorPercent>);
<new CSSColorAngle> = <CSSHSL>.h;
<CSSHSL>.h = <CSSColorAngle>;
<new CSSColorPercent> = <CSSHSL>.s;
<CSSHSL>.s = <CSSColorPercent>;
<new CSSColorPercent> = <CSSHSL>.l;
<CSSHSL>.l = <CSSColorPercent>;
<new CSSColorPercent> = <CSSHSL>.alpha;
<CSSHSL>.alpha = <CSSColorPercent>;
!extends CSSHWB CSSColorValue;
<new CSSColorValue> = <CSSHWB>;
<new CSSHWB> = new CSSHWB(<CSSNumericValue>,<CSSNumberish>,<CSSNumberish>);
<new CSSHWB> = new CSSHWB(<CSSNumericValue>,<CSSNumberish>,<CSSNumberish>,<CSSNumberish>);
<new CSSNumericValue> = <CSSHWB>.h;
<CSSHWB>.h = <CSSNumericValue>;
<new CSSNumberish> = <CSSHWB>.w;
<CSSHWB>.w = <CSSNumberish>;
<new CSSNumberish> = <CSSHWB>.b;
<CSSHWB>.b = <CSSNumberish>;
<new CSSNumberish> = <CSSHWB>.alpha;
<CSSHWB>.alpha = <CSSNumberish>;
!extends CSSLab CSSColorValue;
<new CSSColorValue> = <CSSLab>;
<new CSSLab> = new CSSLab(<CSSColorPercent>,<CSSColorNumber>,<CSSColorNumber>);
<new CSSLab> = new CSSLab(<CSSColorPercent>,<CSSColorNumber>,<CSSColorNumber>,<CSSColorPercent>);
<new CSSColorPercent> = <CSSLab>.l;
<CSSLab>.l = <CSSColorPercent>;
<new CSSColorNumber> = <CSSLab>.a;
<CSSLab>.a = <CSSColorNumber>;
<new CSSColorNumber> = <CSSLab>.b;
<CSSLab>.b = <CSSColorNumber>;
<new CSSColorPercent> = <CSSLab>.alpha;
<CSSLab>.alpha = <CSSColorPercent>;
!extends CSSColor CSSColorValue;
<new CSSColorValue> = <CSSColor>;
<new sequence_CSSColorPercent_> = [<CSSColorPercent>];
<new CSSColorPercent> = <sequence_CSSColorPercent_>[0];
<new CSSColor> = new CSSColor(<CSSKeywordish>,<sequence_CSSColorPercent_>);
<new CSSColor> = new CSSColor(<CSSKeywordish>,<sequence_CSSColorPercent_>,<CSSNumberish>);
<new CSSKeywordish> = <CSSColor>.colorSpace;
<CSSColor>.colorSpace = <CSSKeywordish>;
!extends CSSRGB CSSColorValue;
<new CSSColorValue> = <CSSRGB>;
<new CSSRGB> = new CSSRGB(<CSSColorRGBComp>,<CSSColorRGBComp>,<CSSColorRGBComp>);
<new CSSRGB> = new CSSRGB(<CSSColorRGBComp>,<CSSColorRGBComp>,<CSSColorRGBComp>,<CSSColorPercent>);
<new CSSColorRGBComp> = <CSSRGB>.r;
<CSSRGB>.r = <CSSColorRGBComp>;
<new CSSColorRGBComp> = <CSSRGB>.g;
<CSSRGB>.g = <CSSColorRGBComp>;
<new CSSColorRGBComp> = <CSSRGB>.b;
<CSSRGB>.b = <CSSColorRGBComp>;
<new CSSColorPercent> = <CSSRGB>.alpha;
<CSSRGB>.alpha = <CSSColorPercent>;
!extends CSSHSL CSSColorValue;
<new CSSColorValue> = <CSSHSL>;
<new CSSHSL> = new CSSHSL(<CSSColorAngle>,<CSSColorPercent>,<CSSColorPercent>);
<new CSSHSL> = new CSSHSL(<CSSColorAngle>,<CSSColorPercent>,<CSSColorPercent>,<CSSColorPercent>);
<new CSSColorAngle> = <CSSHSL>.h;
<CSSHSL>.h = <CSSColorAngle>;
<new CSSColorPercent> = <CSSHSL>.s;
<CSSHSL>.s = <CSSColorPercent>;
<new CSSColorPercent> = <CSSHSL>.l;
<CSSHSL>.l = <CSSColorPercent>;
<new CSSColorPercent> = <CSSHSL>.alpha;
<CSSHSL>.alpha = <CSSColorPercent>;
!extends CSSHWB CSSColorValue;
<new CSSColorValue> = <CSSHWB>;
<new CSSHWB> = new CSSHWB(<CSSNumericValue>,<CSSNumberish>,<CSSNumberish>);
<new CSSHWB> = new CSSHWB(<CSSNumericValue>,<CSSNumberish>,<CSSNumberish>,<CSSNumberish>);
<new CSSNumericValue> = <CSSHWB>.h;
<CSSHWB>.h = <CSSNumericValue>;
<new CSSNumberish> = <CSSHWB>.w;
<CSSHWB>.w = <CSSNumberish>;
<new CSSNumberish> = <CSSHWB>.b;
<CSSHWB>.b = <CSSNumberish>;
<new CSSNumberish> = <CSSHWB>.alpha;
<CSSHWB>.alpha = <CSSNumberish>;
!extends CSSLab CSSColorValue;
<new CSSColorValue> = <CSSLab>;
<new CSSLab> = new CSSLab(<CSSColorPercent>,<CSSColorNumber>,<CSSColorNumber>);
<new CSSLab> = new CSSLab(<CSSColorPercent>,<CSSColorNumber>,<CSSColorNumber>,<CSSColorPercent>);
<new CSSColorPercent> = <CSSLab>.l;
<CSSLab>.l = <CSSColorPercent>;
<new CSSColorNumber> = <CSSLab>.a;
<CSSLab>.a = <CSSColorNumber>;
<new CSSColorNumber> = <CSSLab>.b;
<CSSLab>.b = <CSSColorNumber>;
<new CSSColorPercent> = <CSSLab>.alpha;
<CSSLab>.alpha = <CSSColorPercent>;
!extends CSSColor CSSColorValue;
<new CSSColorValue> = <CSSColor>;
<new sequence_CSSColorPercent_> = [<CSSColorPercent>];
<new CSSColorPercent> = <sequence_CSSColorPercent_>[0];
<new CSSColor> = new CSSColor(<CSSKeywordish>,<sequence_CSSColorPercent_>);
<new CSSColor> = new CSSColor(<CSSKeywordish>,<sequence_CSSColorPercent_>,<CSSNumberish>);
<new CSSKeywordish> = <CSSColor>.colorSpace;
<CSSColor>.colorSpace = <CSSKeywordish>;
!extends CSSRGB CSSColorValue;
<new CSSColorValue> = <CSSRGB>;
<new CSSRGB> = new CSSRGB(<CSSColorRGBComp>,<CSSColorRGBComp>,<CSSColorRGBComp>);
<new CSSRGB> = new CSSRGB(<CSSColorRGBComp>,<CSSColorRGBComp>,<CSSColorRGBComp>,<CSSColorPercent>);
<new CSSColorRGBComp> = <CSSRGB>.r;
<CSSRGB>.r = <CSSColorRGBComp>;
<new CSSColorRGBComp> = <CSSRGB>.g;
<CSSRGB>.g = <CSSColorRGBComp>;
<new CSSColorRGBComp> = <CSSRGB>.b;
<CSSRGB>.b = <CSSColorRGBComp>;
<new CSSColorPercent> = <CSSRGB>.alpha;
<CSSRGB>.alpha = <CSSColorPercent>;
!extends CSSHSL CSSColorValue;
<new CSSColorValue> = <CSSHSL>;
<new CSSHSL> = new CSSHSL(<CSSColorAngle>,<CSSColorPercent>,<CSSColorPercent>);
<new CSSHSL> = new CSSHSL(<CSSColorAngle>,<CSSColorPercent>,<CSSColorPercent>,<CSSColorPercent>);
<new CSSColorAngle> = <CSSHSL>.h;
<CSSHSL>.h = <CSSColorAngle>;
<new CSSColorPercent> = <CSSHSL>.s;
<CSSHSL>.s = <CSSColorPercent>;
<new CSSColorPercent> = <CSSHSL>.l;
<CSSHSL>.l = <CSSColorPercent>;
<new CSSColorPercent> = <CSSHSL>.alpha;
<CSSHSL>.alpha = <CSSColorPercent>;
!extends CSSHWB CSSColorValue;
<new CSSColorValue> = <CSSHWB>;
<new CSSHWB> = new CSSHWB(<CSSNumericValue>,<CSSNumberish>,<CSSNumberish>);
<new CSSHWB> = new CSSHWB(<CSSNumericValue>,<CSSNumberish>,<CSSNumberish>,<CSSNumberish>);
<new CSSNumericValue> = <CSSHWB>.h;
<CSSHWB>.h = <CSSNumericValue>;
<new CSSNumberish> = <CSSHWB>.w;
<CSSHWB>.w = <CSSNumberish>;
<new CSSNumberish> = <CSSHWB>.b;
<CSSHWB>.b = <CSSNumberish>;
<new CSSNumberish> = <CSSHWB>.alpha;
<CSSHWB>.alpha = <CSSNumberish>;
!extends CSSLab CSSColorValue;
<new CSSColorValue> = <CSSLab>;
<new CSSLab> = new CSSLab(<CSSColorPercent>,<CSSColorNumber>,<CSSColorNumber>);
<new CSSLab> = new CSSLab(<CSSColorPercent>,<CSSColorNumber>,<CSSColorNumber>,<CSSColorPercent>);
<new CSSColorPercent> = <CSSLab>.l;
<CSSLab>.l = <CSSColorPercent>;
<new CSSColorNumber> = <CSSLab>.a;
<CSSLab>.a = <CSSColorNumber>;
<new CSSColorNumber> = <CSSLab>.b;
<CSSLab>.b = <CSSColorNumber>;
<new CSSColorPercent> = <CSSLab>.alpha;
<CSSLab>.alpha = <CSSColorPercent>;
!extends CSSColor CSSColorValue;
<new CSSColorValue> = <CSSColor>;
<new sequence_CSSColorPercent_> = [<CSSColorPercent>];
<new CSSColorPercent> = <sequence_CSSColorPercent_>[0];
<new CSSColor> = new CSSColor(<CSSKeywordish>,<sequence_CSSColorPercent_>);
<new CSSColor> = new CSSColor(<CSSKeywordish>,<sequence_CSSColorPercent_>,<CSSNumberish>);
<new CSSKeywordish> = <CSSColor>.colorSpace;
<CSSColor>.colorSpace = <CSSKeywordish>;
!extends CSSRGB CSSColorValue;
<new CSSColorValue> = <CSSRGB>;
<new CSSRGB> = new CSSRGB(<CSSColorRGBComp>,<CSSColorRGBComp>,<CSSColorRGBComp>);
<new CSSRGB> = new CSSRGB(<CSSColorRGBComp>,<CSSColorRGBComp>,<CSSColorRGBComp>,<CSSColorPercent>);
<new CSSColorRGBComp> = <CSSRGB>.r;
<CSSRGB>.r = <CSSColorRGBComp>;
<new CSSColorRGBComp> = <CSSRGB>.g;
<CSSRGB>.g = <CSSColorRGBComp>;
<new CSSColorRGBComp> = <CSSRGB>.b;
<CSSRGB>.b = <CSSColorRGBComp>;
<new CSSColorPercent> = <CSSRGB>.alpha;
<CSSRGB>.alpha = <CSSColorPercent>;
!extends CSSHSL CSSColorValue;
<new CSSColorValue> = <CSSHSL>;
<new CSSHSL> = new CSSHSL(<CSSColorAngle>,<CSSColorPercent>,<CSSColorPercent>);
<new CSSHSL> = new CSSHSL(<CSSColorAngle>,<CSSColorPercent>,<CSSColorPercent>,<CSSColorPercent>);
<new CSSColorAngle> = <CSSHSL>.h;
<CSSHSL>.h = <CSSColorAngle>;
<new CSSColorPercent> = <CSSHSL>.s;
<CSSHSL>.s = <CSSColorPercent>;
<new CSSColorPercent> = <CSSHSL>.l;
<CSSHSL>.l = <CSSColorPercent>;
<new CSSColorPercent> = <CSSHSL>.alpha;
<CSSHSL>.alpha = <CSSColorPercent>;
!extends CSSHWB CSSColorValue;
<new CSSColorValue> = <CSSHWB>;
<new CSSHWB> = new CSSHWB(<CSSNumericValue>,<CSSNumberish>,<CSSNumberish>);
<new CSSHWB> = new CSSHWB(<CSSNumericValue>,<CSSNumberish>,<CSSNumberish>,<CSSNumberish>);
<new CSSNumericValue> = <CSSHWB>.h;
<CSSHWB>.h = <CSSNumericValue>;
<new CSSNumberish> = <CSSHWB>.w;
<CSSHWB>.w = <CSSNumberish>;
<new CSSNumberish> = <CSSHWB>.b;
<CSSHWB>.b = <CSSNumberish>;
<new CSSNumberish> = <CSSHWB>.alpha;
<CSSHWB>.alpha = <CSSNumberish>;
!extends CSSLab CSSColorValue;
<new CSSColorValue> = <CSSLab>;
<new CSSLab> = new CSSLab(<CSSColorPercent>,<CSSColorNumber>,<CSSColorNumber>);
<new CSSLab> = new CSSLab(<CSSColorPercent>,<CSSColorNumber>,<CSSColorNumber>,<CSSColorPercent>);
<new CSSColorPercent> = <CSSLab>.l;
<CSSLab>.l = <CSSColorPercent>;
<new CSSColorNumber> = <CSSLab>.a;
<CSSLab>.a = <CSSColorNumber>;
<new CSSColorNumber> = <CSSLab>.b;
<CSSLab>.b = <CSSColorNumber>;
<new CSSColorPercent> = <CSSLab>.alpha;
<CSSLab>.alpha = <CSSColorPercent>;
!extends CSSColor CSSColorValue;
<new CSSColorValue> = <CSSColor>;
<new sequence_CSSColorPercent_> = [<CSSColorPercent>];
<new CSSColorPercent> = <sequence_CSSColorPercent_>[0];
<new CSSColor> = new CSSColor(<CSSKeywordish>,<sequence_CSSColorPercent_>);
<new CSSColor> = new CSSColor(<CSSKeywordish>,<sequence_CSSColorPercent_>,<CSSNumberish>);
<new CSSKeywordish> = <CSSColor>.colorSpace;
<CSSColor>.colorSpace = <CSSKeywordish>;
!extends CSSRGB CSSColorValue;
<new CSSColorValue> = <CSSRGB>;
<new CSSRGB> = new CSSRGB(<CSSColorRGBComp>,<CSSColorRGBComp>,<CSSColorRGBComp>);
<new CSSRGB> = new CSSRGB(<CSSColorRGBComp>,<CSSColorRGBComp>,<CSSColorRGBComp>,<CSSColorPercent>);
<new CSSColorRGBComp> = <CSSRGB>.r;
<CSSRGB>.r = <CSSColorRGBComp>;
<new CSSColorRGBComp> = <CSSRGB>.g;
<CSSRGB>.g = <CSSColorRGBComp>;
<new CSSColorRGBComp> = <CSSRGB>.b;
<CSSRGB>.b = <CSSColorRGBComp>;
<new CSSColorPercent> = <CSSRGB>.alpha;
<CSSRGB>.alpha = <CSSColorPercent>;
!extends CSSHSL CSSColorValue;
<new CSSColorValue> = <CSSHSL>;
<new CSSHSL> = new CSSHSL(<CSSColorAngle>,<CSSColorPercent>,<CSSColorPercent>);
<new CSSHSL> = new CSSHSL(<CSSColorAngle>,<CSSColorPercent>,<CSSColorPercent>,<CSSColorPercent>);
<new CSSColorAngle> = <CSSHSL>.h;
<CSSHSL>.h = <CSSColorAngle>;
<new CSSColorPercent> = <CSSHSL>.s;
<CSSHSL>.s = <CSSColorPercent>;
<new CSSColorPercent> = <CSSHSL>.l;
<CSSHSL>.l = <CSSColorPercent>;
<new CSSColorPercent> = <CSSHSL>.alpha;
<CSSHSL>.alpha = <CSSColorPercent>;
!extends CSSHWB CSSColorValue;
<new CSSColorValue> = <CSSHWB>;
<new CSSHWB> = new CSSHWB(<CSSNumericValue>,<CSSNumberish>,<CSSNumberish>);
<new CSSHWB> = new CSSHWB(<CSSNumericValue>,<CSSNumberish>,<CSSNumberish>,<CSSNumberish>);
<new CSSNumericValue> = <CSSHWB>.h;
<CSSHWB>.h = <CSSNumericValue>;
<new CSSNumberish> = <CSSHWB>.w;
<CSSHWB>.w = <CSSNumberish>;
<new CSSNumberish> = <CSSHWB>.b;
<CSSHWB>.b = <CSSNumberish>;
<new CSSNumberish> = <CSSHWB>.alpha;
<CSSHWB>.alpha = <CSSNumberish>;
!extends CSSLab CSSColorValue;
<new CSSColorValue> = <CSSLab>;
<new CSSLab> = new CSSLab(<CSSColorPercent>,<CSSColorNumber>,<CSSColorNumber>);
<new CSSLab> = new CSSLab(<CSSColorPercent>,<CSSColorNumber>,<CSSColorNumber>,<CSSColorPercent>);
<new CSSColorPercent> = <CSSLab>.l;
<CSSLab>.l = <CSSColorPercent>;
<new CSSColorNumber> = <CSSLab>.a;
<CSSLab>.a = <CSSColorNumber>;
<new CSSColorNumber> = <CSSLab>.b;
<CSSLab>.b = <CSSColorNumber>;
<new CSSColorPercent> = <CSSLab>.alpha;
<CSSLab>.alpha = <CSSColorPercent>;
!extends CSSColor CSSColorValue;
<new CSSColorValue> = <CSSColor>;
<new sequence_CSSColorPercent_> = [<CSSColorPercent>];
<new CSSColorPercent> = <sequence_CSSColorPercent_>[0];
<new CSSColor> = new CSSColor(<CSSKeywordish>,<sequence_CSSColorPercent_>);
<new CSSColor> = new CSSColor(<CSSKeywordish>,<sequence_CSSColorPercent_>,<CSSNumberish>);
<new CSSKeywordish> = <CSSColor>.colorSpace;
<CSSColor>.colorSpace = <CSSKeywordish>;
!extends CSSRGB CSSColorValue;
<new CSSColorValue> = <CSSRGB>;
<new CSSRGB> = new CSSRGB(<CSSColorRGBComp>,<CSSColorRGBComp>,<CSSColorRGBComp>);
<new CSSRGB> = new CSSRGB(<CSSColorRGBComp>,<CSSColorRGBComp>,<CSSColorRGBComp>,<CSSColorPercent>);
<new CSSColorRGBComp> = <CSSRGB>.r;
<CSSRGB>.r = <CSSColorRGBComp>;
<new CSSColorRGBComp> = <CSSRGB>.g;
<CSSRGB>.g = <CSSColorRGBComp>;
<new CSSColorRGBComp> = <CSSRGB>.b;
<CSSRGB>.b = <CSSColorRGBComp>;
<new CSSColorPercent> = <CSSRGB>.alpha;
<CSSRGB>.alpha = <CSSColorPercent>;
!extends CSSHSL CSSColorValue;
<new CSSColorValue> = <CSSHSL>;
<new CSSHSL> = new CSSHSL(<CSSColorAngle>,<CSSColorPercent>,<CSSColorPercent>);
<new CSSHSL> = new CSSHSL(<CSSColorAngle>,<CSSColorPercent>,<CSSColorPercent>,<CSSColorPercent>);
<new CSSColorAngle> = <CSSHSL>.h;
<CSSHSL>.h = <CSSColorAngle>;
<new CSSColorPercent> = <CSSHSL>.s;
<CSSHSL>.s = <CSSColorPercent>;
<new CSSColorPercent> = <CSSHSL>.l;
<CSSHSL>.l = <CSSColorPercent>;
<new CSSColorPercent> = <CSSHSL>.alpha;
<CSSHSL>.alpha = <CSSColorPercent>;
!extends CSSHWB CSSColorValue;
<new CSSColorValue> = <CSSHWB>;
<new CSSHWB> = new CSSHWB(<CSSNumericValue>,<CSSNumberish>,<CSSNumberish>);
<new CSSHWB> = new CSSHWB(<CSSNumericValue>,<CSSNumberish>,<CSSNumberish>,<CSSNumberish>);
<new CSSNumericValue> = <CSSHWB>.h;
<CSSHWB>.h = <CSSNumericValue>;
<new CSSNumberish> = <CSSHWB>.w;
<CSSHWB>.w = <CSSNumberish>;
<new CSSNumberish> = <CSSHWB>.b;
<CSSHWB>.b = <CSSNumberish>;
<new CSSNumberish> = <CSSHWB>.alpha;
<CSSHWB>.alpha = <CSSNumberish>;
!extends CSSLab CSSColorValue;
<new CSSColorValue> = <CSSLab>;
<new CSSLab> = new CSSLab(<CSSColorPercent>,<CSSColorNumber>,<CSSColorNumber>);
<new CSSLab> = new CSSLab(<CSSColorPercent>,<CSSColorNumber>,<CSSColorNumber>,<CSSColorPercent>);
<new CSSColorPercent> = <CSSLab>.l;
<CSSLab>.l = <CSSColorPercent>;
<new CSSColorNumber> = <CSSLab>.a;
<CSSLab>.a = <CSSColorNumber>;
<new CSSColorNumber> = <CSSLab>.b;
<CSSLab>.b = <CSSColorNumber>;
<new CSSColorPercent> = <CSSLab>.alpha;
<CSSLab>.alpha = <CSSColorPercent>;
!extends CSSColor CSSColorValue;
<new CSSColorValue> = <CSSColor>;
<new sequence_CSSColorPercent_> = [<CSSColorPercent>];
<new CSSColorPercent> = <sequence_CSSColorPercent_>[0];
<new CSSColor> = new CSSColor(<CSSKeywordish>,<sequence_CSSColorPercent_>);
<new CSSColor> = new CSSColor(<CSSKeywordish>,<sequence_CSSColorPercent_>,<CSSNumberish>);
<new CSSKeywordish> = <CSSColor>.colorSpace;
<CSSColor>.colorSpace = <CSSKeywordish>;
!extends CSSRGB CSSColorValue;
<new CSSColorValue> = <CSSRGB>;
<new CSSRGB> = new CSSRGB(<CSSColorRGBComp>,<CSSColorRGBComp>,<CSSColorRGBComp>);
<new CSSRGB> = new CSSRGB(<CSSColorRGBComp>,<CSSColorRGBComp>,<CSSColorRGBComp>,<CSSColorPercent>);
<new CSSColorRGBComp> = <CSSRGB>.r;
<CSSRGB>.r = <CSSColorRGBComp>;
<new CSSColorRGBComp> = <CSSRGB>.g;
<CSSRGB>.g = <CSSColorRGBComp>;
<new CSSColorRGBComp> = <CSSRGB>.b;
<CSSRGB>.b = <CSSColorRGBComp>;
<new CSSColorPercent> = <CSSRGB>.alpha;
<CSSRGB>.alpha = <CSSColorPercent>;
!extends CSSHSL CSSColorValue;
<new CSSColorValue> = <CSSHSL>;
<new CSSHSL> = new CSSHSL(<CSSColorAngle>,<CSSColorPercent>,<CSSColorPercent>);
<new CSSHSL> = new CSSHSL(<CSSColorAngle>,<CSSColorPercent>,<CSSColorPercent>,<CSSColorPercent>);
<new CSSColorAngle> = <CSSHSL>.h;
<CSSHSL>.h = <CSSColorAngle>;
<new CSSColorPercent> = <CSSHSL>.s;
<CSSHSL>.s = <CSSColorPercent>;
<new CSSColorPercent> = <CSSHSL>.l;
<CSSHSL>.l = <CSSColorPercent>;
<new CSSColorPercent> = <CSSHSL>.alpha;
<CSSHSL>.alpha = <CSSColorPercent>;
!extends CSSHWB CSSColorValue;
<new CSSColorValue> = <CSSHWB>;
<new CSSHWB> = new CSSHWB(<CSSNumericValue>,<CSSNumberish>,<CSSNumberish>);
<new CSSHWB> = new CSSHWB(<CSSNumericValue>,<CSSNumberish>,<CSSNumberish>,<CSSNumberish>);
<new CSSNumericValue> = <CSSHWB>.h;
<CSSHWB>.h = <CSSNumericValue>;
<new CSSNumberish> = <CSSHWB>.w;
<CSSHWB>.w = <CSSNumberish>;
<new CSSNumberish> = <CSSHWB>.b;
<CSSHWB>.b = <CSSNumberish>;
<new CSSNumberish> = <CSSHWB>.alpha;
<CSSHWB>.alpha = <CSSNumberish>;
!extends CSSLab CSSColorValue;
<new CSSColorValue> = <CSSLab>;
<new CSSLab> = new CSSLab(<CSSColorPercent>,<CSSColorNumber>,<CSSColorNumber>);
<new CSSLab> = new CSSLab(<CSSColorPercent>,<CSSColorNumber>,<CSSColorNumber>,<CSSColorPercent>);
<new CSSColorPercent> = <CSSLab>.l;
<CSSLab>.l = <CSSColorPercent>;
<new CSSColorNumber> = <CSSLab>.a;
<CSSLab>.a = <CSSColorNumber>;
<new CSSColorNumber> = <CSSLab>.b;
<CSSLab>.b = <CSSColorNumber>;
<new CSSColorPercent> = <CSSLab>.alpha;
<CSSLab>.alpha = <CSSColorPercent>;
!extends CSSColor CSSColorValue;
<new CSSColorValue> = <CSSColor>;
<new sequence_CSSColorPercent_> = [<CSSColorPercent>];
<new CSSColorPercent> = <sequence_CSSColorPercent_>[0];
<new CSSColor> = new CSSColor(<CSSKeywordish>,<sequence_CSSColorPercent_>);
<new CSSColor> = new CSSColor(<CSSKeywordish>,<sequence_CSSColorPercent_>,<CSSNumberish>);
<new CSSKeywordish> = <CSSColor>.colorSpace;
<CSSColor>.colorSpace = <CSSKeywordish>;
<new ObservableArray_CSSColorPercent_> = [<CSSColorPercent>];
<new CSSColorPercent> = <ObservableArray_CSSColorPercent_>[0];
<new ObservableArray_CSSColorPercent_> = <CSSColor>.channels;
<CSSColor>.channels = <ObservableArray_CSSColorPercent_>;
<new CSSNumberish> = <CSSColor>.alpha;
<CSSColor>.alpha = <CSSNumberish>;
<new ViewTransition> = <Document>.startViewTransition();
<new ViewTransition> = <Document>.startViewTransition(<UpdateCallback>);
<ViewTransition>.skipTransition();
<new Promise_undefined_> = <ViewTransition>.finished;
<new Promise_undefined_> = <ViewTransition>.ready;
<new Promise_undefined_> = <ViewTransition>.updateCallbackDone;
<new MediaQueryList> = <Window>.matchMedia(<CSSOMString>);
<new Screen> = <Window>.screen;
<new VisualViewport> = <Window>.visualViewport;
<Window>.moveTo(<long>,<long>);
<Window>.moveBy(<long>,<long>);
<Window>.resizeTo(<long>,<long>);
<Window>.resizeBy(<long>,<long>);
<new long> = <Window>.innerWidth;
<new long> = <Window>.innerHeight;
<new double> = <Window>.scrollX;
<new double> = <Window>.pageXOffset;
<new double> = <Window>.scrollY;
<new double> = <Window>.pageYOffset;
<Window>.scroll();
<Window>.scroll(<ScrollToOptions>);
<Window>.scroll(<unrestricted_double>,<unrestricted_double>);
<Window>.scrollTo();
<Window>.scrollTo(<ScrollToOptions>);
<Window>.scrollTo(<unrestricted_double>,<unrestricted_double>);
<Window>.scrollBy();
<Window>.scrollBy(<ScrollToOptions>);
<Window>.scrollBy(<unrestricted_double>,<unrestricted_double>);
<new long> = <Window>.screenX;
<new long> = <Window>.screenLeft;
<new long> = <Window>.screenY;
<new long> = <Window>.screenTop;
<new long> = <Window>.outerWidth;
<new long> = <Window>.outerHeight;
<new double> = <Window>.devicePixelRatio;
!extends MediaQueryList EventTarget;
<new EventTarget> = <MediaQueryList>;
<new CSSOMString> = <MediaQueryList>.media;
<new boolean> = <MediaQueryList>.matches;
<MediaQueryList>.addListener(<EventListener>);
<MediaQueryList>.removeListener(<EventListener>);
<new EventHandler> = <MediaQueryList>.onchange;
<MediaQueryList>.onchange = <EventHandler>;
!extends MediaQueryListEvent Event;
<new Event> = <MediaQueryListEvent>;
<new MediaQueryListEvent> = new MediaQueryListEvent(<CSSOMString>);
<new MediaQueryListEvent> = new MediaQueryListEvent(<CSSOMString>,<MediaQueryListEventInit>);
<new CSSOMString> = <MediaQueryListEvent>.media;
<new boolean> = <MediaQueryListEvent>.matches;
<new long> = <Screen>.availWidth;
<new long> = <Screen>.availHeight;
<new long> = <Screen>.width;
<new long> = <Screen>.height;
<new unsigned_long> = <Screen>.colorDepth;
<new unsigned_long> = <Screen>.pixelDepth;
<new Element> = <Document>.elementFromPoint(<double>,<double>);
<new sequence_Element_> = <Document>.elementsFromPoint(<double>,<double>);
<new CaretPosition> = <Document>.caretPositionFromPoint(<double>,<double>);
<new Element> = <Document>.scrollingElement;
<new Node> = <CaretPosition>.offsetNode;
<new unsigned_long> = <CaretPosition>.offset;
<new DOMRect> = <CaretPosition>.getClientRect();
<new DOMRectList> = <Element>.getClientRects();
<new DOMRect> = <Element>.getBoundingClientRect();
<Element>.checkVisibility();
<Element>.checkVisibility(<CheckVisibilityOptions>);
<new union_boolean1ScrollIntoViewOptions_> = <boolean>;
<new union_boolean1ScrollIntoViewOptions_> = <ScrollIntoViewOptions>;
<Element>.scrollIntoView();
<Element>.scrollIntoView(<union_boolean1ScrollIntoViewOptions_>);
<Element>.scroll();
<Element>.scroll(<ScrollToOptions>);
<Element>.scroll(<unrestricted_double>,<unrestricted_double>);
<Element>.scrollTo();
<Element>.scrollTo(<ScrollToOptions>);
<Element>.scrollTo(<unrestricted_double>,<unrestricted_double>);
<Element>.scrollBy();
<Element>.scrollBy(<ScrollToOptions>);
<Element>.scrollBy(<unrestricted_double>,<unrestricted_double>);
<new unrestricted_double> = <Element>.scrollTop;
<Element>.scrollTop = <unrestricted_double>;
<new unrestricted_double> = <Element>.scrollLeft;
<Element>.scrollLeft = <unrestricted_double>;
<new long> = <Element>.scrollWidth;
<new long> = <Element>.scrollHeight;
<new long> = <Element>.clientTop;
<new long> = <Element>.clientLeft;
<new long> = <Element>.clientWidth;
<new long> = <Element>.clientHeight;
<new Element> = <HTMLElement>.offsetParent;
<new long> = <HTMLElement>.offsetTop;
<new long> = <HTMLElement>.offsetLeft;
<new long> = <HTMLElement>.offsetWidth;
<new long> = <HTMLElement>.offsetHeight;
<new long> = <HTMLImageElement>.x;
<new long> = <HTMLImageElement>.y;
<new DOMRectList> = <Range>.getClientRects();
<new DOMRect> = <Range>.getBoundingClientRect();
<new double> = <MouseEvent>.pageX;
<new double> = <MouseEvent>.pageY;
<new double> = <MouseEvent>.x;
<new double> = <MouseEvent>.y;
<new double> = <MouseEvent>.offsetX;
<new double> = <MouseEvent>.offsetY;
!extends VisualViewport EventTarget;
<new EventTarget> = <VisualViewport>;
<new double> = <VisualViewport>.offsetLeft;
<new double> = <VisualViewport>.offsetTop;
<new double> = <VisualViewport>.pageLeft;
<new double> = <VisualViewport>.pageTop;
<new double> = <VisualViewport>.width;
<new double> = <VisualViewport>.height;
<new double> = <VisualViewport>.scale;
<new EventHandler> = <VisualViewport>.onresize;
<VisualViewport>.onresize = <EventHandler>;
<new EventHandler> = <VisualViewport>.onscroll;
<VisualViewport>.onscroll = <EventHandler>;
<new EventHandler> = <VisualViewport>.onscrollend;
<VisualViewport>.onscrollend = <EventHandler>;
<new CSSOMString> = <MediaList>.mediaText;
<MediaList>.mediaText = <CSSOMString>;
<new unsigned_long> = <MediaList>.length;
<new CSSOMString> = <MediaList>.item(<unsigned_long>);
<MediaList>.appendMedium(<CSSOMString>);
<MediaList>.deleteMedium(<CSSOMString>);
<new CSSOMString> = <StyleSheet>.type;
<new USVString> = <StyleSheet>.href;
<new union_Element1ProcessingInstruction_> = <Element>;
<new union_Element1ProcessingInstruction_> = <ProcessingInstruction>;
<new union_Element1ProcessingInstruction_> = <StyleSheet>.ownerNode;
<new CSSStyleSheet> = <StyleSheet>.parentStyleSheet;
<new DOMString> = <StyleSheet>.title;
<new MediaList> = <StyleSheet>.media;
<new boolean> = <StyleSheet>.disabled;
<StyleSheet>.disabled = <boolean>;
!extends CSSStyleSheet StyleSheet;
<new StyleSheet> = <CSSStyleSheet>;
<new CSSStyleSheet> = new CSSStyleSheet();
<new CSSStyleSheet> = new CSSStyleSheet(<CSSStyleSheetInit>);
<new CSSRule> = <CSSStyleSheet>.ownerRule;
<new CSSRuleList> = <CSSStyleSheet>.cssRules;
<new unsigned_long> = <CSSStyleSheet>.insertRule(<CSSOMString>);
<new unsigned_long> = <CSSStyleSheet>.insertRule(<CSSOMString>,<unsigned_long>);
<CSSStyleSheet>.deleteRule(<unsigned_long>);
<new Promise_CSSStyleSheet_> = new Promise(function(x){console.log("ok")});
<new Promise_CSSStyleSheet_> = <CSSStyleSheet>.replace(<USVString>);
<CSSStyleSheet>.replaceSync(<USVString>);
<new CSSRuleList> = <CSSStyleSheet>.rules;
<CSSStyleSheet>.addRule();
<CSSStyleSheet>.addRule(<DOMString>);
<CSSStyleSheet>.addRule(<DOMString>,<DOMString>);
<CSSStyleSheet>.addRule(<DOMString>,<DOMString>,<unsigned_long>);
<CSSStyleSheet>.removeRule();
<CSSStyleSheet>.removeRule(<unsigned_long>);
<new CSSStyleSheet> = <StyleSheetList>.item(<unsigned_long>);
<new unsigned_long> = <StyleSheetList>.length;
<new CSSRule> = <CSSRuleList>.item(<unsigned_long>);
<new unsigned_long> = <CSSRuleList>.length;
<new CSSOMString> = <CSSRule>.cssText;
<CSSRule>.cssText = <CSSOMString>;
<new CSSRule> = <CSSRule>.parentRule;
<new CSSStyleSheet> = <CSSRule>.parentStyleSheet;
<new unsigned_short> = <CSSRule>.type;
<new unsigned_short> = CSSRule.STYLE_RULE;
<new unsigned_short> = CSSRule.CHARSET_RULE;
<new unsigned_short> = CSSRule.IMPORT_RULE;
<new unsigned_short> = CSSRule.MEDIA_RULE;
<new unsigned_short> = CSSRule.FONT_FACE_RULE;
<new unsigned_short> = CSSRule.PAGE_RULE;
<new unsigned_short> = CSSRule.MARGIN_RULE;
<new unsigned_short> = CSSRule.NAMESPACE_RULE;
!extends CSSStyleRule CSSRule;
<new CSSRule> = <CSSStyleRule>;
<new CSSOMString> = <CSSStyleRule>.selectorText;
<CSSStyleRule>.selectorText = <CSSOMString>;
<new CSSStyleDeclaration> = <CSSStyleRule>.style;
!extends CSSImportRule CSSRule;
<new CSSRule> = <CSSImportRule>;
<new USVString> = <CSSImportRule>.href;
<new MediaList> = <CSSImportRule>.media;
<new CSSStyleSheet> = <CSSImportRule>.styleSheet;
!extends CSSGroupingRule CSSRule;
<new CSSRule> = <CSSGroupingRule>;
<new CSSRuleList> = <CSSGroupingRule>.cssRules;
<new unsigned_long> = <CSSGroupingRule>.insertRule(<CSSOMString>);
<new unsigned_long> = <CSSGroupingRule>.insertRule(<CSSOMString>,<unsigned_long>);
<CSSGroupingRule>.deleteRule(<unsigned_long>);
!extends CSSPageRule CSSGroupingRule;
<new CSSGroupingRule> = <CSSPageRule>;
<new CSSOMString> = <CSSPageRule>.selectorText;
<CSSPageRule>.selectorText = <CSSOMString>;
<new CSSStyleDeclaration> = <CSSPageRule>.style;
!extends CSSMarginRule CSSRule;
<new CSSRule> = <CSSMarginRule>;
<new CSSOMString> = <CSSMarginRule>.name;
<new CSSStyleDeclaration> = <CSSMarginRule>.style;
!extends CSSNamespaceRule CSSRule;
<new CSSRule> = <CSSNamespaceRule>;
<new CSSOMString> = <CSSNamespaceRule>.namespaceURI;
<new CSSOMString> = <CSSNamespaceRule>.prefix;
<new CSSOMString> = <CSSStyleDeclaration>.cssText;
<CSSStyleDeclaration>.cssText = <CSSOMString>;
<new unsigned_long> = <CSSStyleDeclaration>.length;
<new CSSOMString> = <CSSStyleDeclaration>.item(<unsigned_long>);
<new CSSOMString> = <CSSStyleDeclaration>.getPropertyValue(<CSSOMString>);
<new CSSOMString> = <CSSStyleDeclaration>.getPropertyPriority(<CSSOMString>);
<CSSStyleDeclaration>.setProperty(<CSSOMString>,<CSSOMString>);
<CSSStyleDeclaration>.setProperty(<CSSOMString>,<CSSOMString>,<CSSOMString>);
<new CSSOMString> = <CSSStyleDeclaration>.removeProperty(<CSSOMString>);
<new CSSRule> = <CSSStyleDeclaration>.parentRule;
<new CSSOMString> = <CSSStyleDeclaration>.cssFloat;
<CSSStyleDeclaration>.cssFloat = <CSSOMString>;
<new CSSStyleDeclaration> = <Window>.getComputedStyle(<Element>);
<new CSSStyleDeclaration> = <Window>.getComputedStyle(<Element>,<CSSOMString>);
<new CustomStateSet> = <ElementInternals>.states;
<CustomStateSet>.add(<DOMString>);
!extends DataCue TextTrackCue;
<new TextTrackCue> = <DataCue>;
<new DataCue> = new DataCue(<double>,<unrestricted_double>,<any>);
<new DataCue> = new DataCue(<double>,<unrestricted_double>,<any>,<DOMString>);
<new any> = <DataCue>.value;
<DataCue>.value = <any>;
<new DOMString> = <DataCue>.type;
!extends DeprecationReportBody ReportBody;
<new ReportBody> = <DeprecationReportBody>;
<new object> = <DeprecationReportBody>.toJSON();
<new DOMString> = <DeprecationReportBody>.id;
<new object> = <DeprecationReportBody>.anticipatedRemoval;
<new DOMString> = <DeprecationReportBody>.message;
<new DOMString> = <DeprecationReportBody>.sourceFile;
<new unsigned_long> = <DeprecationReportBody>.lineNumber;
<new unsigned_long> = <DeprecationReportBody>.columnNumber;
<new DevicePosture> = <Navigator>.devicePosture;
!extends DevicePosture EventTarget;
<new EventTarget> = <DevicePosture>;
<new DevicePostureType> = <DevicePosture>.type;
<new EventHandler> = <DevicePosture>.onchange;
<DevicePosture>.onchange = <EventHandler>;
<new Promise_DigitalGoodsService_> = new Promise(function(x){console.log("ok")});
<new Promise_DigitalGoodsService_> = <Window>.getDigitalGoodsService(<DOMString>);
<new sequence_ItemDetails_> = [<ItemDetails>];
<new ItemDetails> = <sequence_ItemDetails_>[0];
<new Promise_sequence_ItemDetails__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_ItemDetails__> = <DigitalGoodsService>.getDetails(<sequence_DOMString_>);
<new sequence_PurchaseDetails_> = [<PurchaseDetails>];
<new PurchaseDetails> = <sequence_PurchaseDetails_>[0];
<new Promise_sequence_PurchaseDetails__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_PurchaseDetails__> = <DigitalGoodsService>.listPurchases();
<new Promise_sequence_PurchaseDetails__> = <DigitalGoodsService>.listPurchaseHistory();
<new Promise_undefined_> = <DigitalGoodsService>.consume(<DOMString>);
<new Event> = new Event(<DOMString>);
<new Event> = new Event(<DOMString>,<EventInit>);
<new DOMString> = <Event>.type;
<new EventTarget> = <Event>.target;
<new EventTarget> = <Event>.srcElement;
<new EventTarget> = <Event>.currentTarget;
<new sequence_EventTarget_> = [<EventTarget>];
<new EventTarget> = <sequence_EventTarget_>[0];
<new sequence_EventTarget_> = <Event>.composedPath();
<new unsigned_short> = Event.NONE;
<new unsigned_short> = Event.CAPTURING_PHASE;
<new unsigned_short> = Event.AT_TARGET;
<new unsigned_short> = Event.BUBBLING_PHASE;
<new unsigned_short> = <Event>.eventPhase;
<Event>.stopPropagation();
<new boolean> = <Event>.cancelBubble;
<Event>.cancelBubble = <boolean>;
<Event>.stopImmediatePropagation();
<new boolean> = <Event>.bubbles;
<new boolean> = <Event>.cancelable;
<new boolean> = <Event>.returnValue;
<Event>.returnValue = <boolean>;
<Event>.preventDefault();
<new boolean> = <Event>.defaultPrevented;
<new boolean> = <Event>.composed;
<new boolean> = <Event>.isTrusted;
<new DOMHighResTimeStamp> = <Event>.timeStamp;
<Event>.initEvent(<DOMString>);
<Event>.initEvent(<DOMString>,<boolean>);
<Event>.initEvent(<DOMString>,<boolean>,<boolean>);
<new union_Event1undefined_> = <Event>;
<new union_Event1undefined_> = <undefined>;
<new union_Event1undefined_> = <Window>.event;
!extends CustomEvent Event;
<new Event> = <CustomEvent>;
<new CustomEvent> = new CustomEvent(<DOMString>);
<new CustomEvent> = new CustomEvent(<DOMString>,<CustomEventInit>);
<new any> = <CustomEvent>.detail;
<CustomEvent>.initCustomEvent(<DOMString>);
<CustomEvent>.initCustomEvent(<DOMString>,<boolean>);
<CustomEvent>.initCustomEvent(<DOMString>,<boolean>,<boolean>);
<CustomEvent>.initCustomEvent(<DOMString>,<boolean>,<boolean>,<any>);
<new EventTarget> = new EventTarget();
<new union_AddEventListenerOptions1boolean_> = <AddEventListenerOptions>;
<new union_AddEventListenerOptions1boolean_> = <boolean>;
<EventTarget>.addEventListener(<DOMString>,<EventListener>);
<EventTarget>.addEventListener(<DOMString>,<EventListener>,<union_AddEventListenerOptions1boolean_>);
<new union_EventListenerOptions1boolean_> = <EventListenerOptions>;
<new union_EventListenerOptions1boolean_> = <boolean>;
<EventTarget>.removeEventListener(<DOMString>,<EventListener>);
<EventTarget>.removeEventListener(<DOMString>,<EventListener>,<union_EventListenerOptions1boolean_>);
<EventTarget>.dispatchEvent(<Event>);
<new AbortController> = new AbortController();
<new AbortSignal> = <AbortController>.signal;
<AbortController>.abort();
<AbortController>.abort(<any>);
!extends AbortSignal EventTarget;
<new EventTarget> = <AbortSignal>;
<new AbortSignal> = <AbortSignal>.abort();
<new AbortSignal> = <AbortSignal>.abort(<any>);
<new AbortSignal> = <AbortSignal>.timeout(<unsigned_long_long>);
<new boolean> = <AbortSignal>.aborted;
<new any> = <AbortSignal>.reason;
<AbortSignal>.throwIfAborted();
<new EventHandler> = <AbortSignal>.onabort;
<AbortSignal>.onabort = <EventHandler>;
<new Node> = <NodeList>.item(<unsigned_long>);
<new unsigned_long> = <NodeList>.length;
<new unsigned_long> = <HTMLCollection>.length;
<new Element> = <HTMLCollection>.item(<unsigned_long>);
<new Element> = <HTMLCollection>.namedItem(<DOMString>);
<new MutationObserver> = new MutationObserver(<MutationCallback>);
<MutationObserver>.observe(<Node>);
<MutationObserver>.observe(<Node>,<MutationObserverInit>);
<MutationObserver>.disconnect();
<new sequence_MutationRecord_> = [<MutationRecord>];
<new MutationRecord> = <sequence_MutationRecord_>[0];
<new sequence_MutationRecord_> = <MutationObserver>.takeRecords();
<new DOMString> = <MutationRecord>.type;
<new Node> = <MutationRecord>.target;
<new NodeList> = <MutationRecord>.addedNodes;
<new NodeList> = <MutationRecord>.removedNodes;
<new Node> = <MutationRecord>.previousSibling;
<new Node> = <MutationRecord>.nextSibling;
<new DOMString> = <MutationRecord>.attributeName;
<new DOMString> = <MutationRecord>.attributeNamespace;
<new DOMString> = <MutationRecord>.oldValue;
!extends Node EventTarget;
<new EventTarget> = <Node>;
<new unsigned_short> = Node.ELEMENT_NODE;
<new unsigned_short> = Node.ATTRIBUTE_NODE;
<new unsigned_short> = Node.TEXT_NODE;
<new unsigned_short> = Node.CDATA_SECTION_NODE;
<new unsigned_short> = Node.ENTITY_REFERENCE_NODE;
<new unsigned_short> = Node.ENTITY_NODE;
<new unsigned_short> = Node.PROCESSING_INSTRUCTION_NODE;
<new unsigned_short> = Node.COMMENT_NODE;
<new unsigned_short> = Node.DOCUMENT_NODE;
<new unsigned_short> = Node.DOCUMENT_TYPE_NODE;
<new unsigned_short> = Node.DOCUMENT_FRAGMENT_NODE;
<new unsigned_short> = Node.NOTATION_NODE;
<new unsigned_short> = <Node>.nodeType;
<new DOMString> = <Node>.nodeName;
<new USVString> = <Node>.baseURI;
<new boolean> = <Node>.isConnected;
<new Document> = <Node>.ownerDocument;
<new Node> = <Node>.getRootNode();
<new Node> = <Node>.getRootNode(<GetRootNodeOptions>);
<new Node> = <Node>.parentNode;
<new Element> = <Node>.parentElement;
<Node>.hasChildNodes();
<new NodeList> = <Node>.childNodes;
<new Node> = <Node>.firstChild;
<new Node> = <Node>.lastChild;
<new Node> = <Node>.previousSibling;
<new Node> = <Node>.nextSibling;
<new DOMString> = <Node>.nodeValue;
<Node>.nodeValue = <DOMString>;
<Node>.nodeValue = null;
<new DOMString> = <Node>.textContent;
<Node>.textContent = <DOMString>;
<Node>.textContent = null;
<Node>.normalize();
<new Node> = <Node>.cloneNode();
<new Node> = <Node>.cloneNode(<boolean>);
<Node>.isEqualNode(<Node>);
<Node>.isSameNode(<Node>);
<new unsigned_short> = Node.DOCUMENT_POSITION_DISCONNECTED;
<new unsigned_short> = Node.DOCUMENT_POSITION_PRECEDING;
<new unsigned_short> = Node.DOCUMENT_POSITION_FOLLOWING;
<new unsigned_short> = Node.DOCUMENT_POSITION_CONTAINS;
<new unsigned_short> = Node.DOCUMENT_POSITION_CONTAINED_BY;
<new unsigned_short> = Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC;
<new unsigned_short> = <Node>.compareDocumentPosition(<Node>);
<Node>.contains(<Node>);
<new DOMString> = <Node>.lookupPrefix(<DOMString>);
<new DOMString> = <Node>.lookupNamespaceURI(<DOMString>);
<Node>.isDefaultNamespace(<DOMString>);
<new Node> = <Node>.insertBefore(<Node>,<Node>);
<new Node> = <Node>.appendChild(<Node>);
<new Node> = <Node>.replaceChild(<Node>,<Node>);
<new Node> = <Node>.removeChild(<Node>);
!extends Document Node;
<new Node> = <Document>;
<new Document> = new Document();
<new DOMImplementation> = <Document>.implementation;
<new USVString> = <Document>.URL;
<new USVString> = <Document>.documentURI;
<new DOMString> = <Document>.compatMode;
<new DOMString> = <Document>.characterSet;
<new DOMString> = <Document>.charset;
<new DOMString> = <Document>.inputEncoding;
<new DOMString> = <Document>.contentType;
<new DocumentType> = <Document>.doctype;
<new Element> = <Document>.documentElement;
<new HTMLCollection> = <Document>.getElementsByTagName(<DOMString>);
<new HTMLCollection> = <Document>.getElementsByTagNameNS(<DOMString>,<DOMString>);
<new HTMLCollection> = <Document>.getElementsByClassName(<DOMString>);
<new union_DOMString1ElementCreationOptions_> = <DOMString>;
<new union_DOMString1ElementCreationOptions_> = <ElementCreationOptions>;
<new Element> = <Document>.createElement(<DOMString>);
<new Element> = <Document>.createElement(<DOMString>,<union_DOMString1ElementCreationOptions_>);
<new Element> = <Document>.createElementNS(<DOMString>,<DOMString>);
<new Element> = <Document>.createElementNS(<DOMString>,<DOMString>,<union_DOMString1ElementCreationOptions_>);
<new DocumentFragment> = <Document>.createDocumentFragment();
<new Text> = <Document>.createTextNode(<DOMString>);
<new CDATASection> = <Document>.createCDATASection(<DOMString>);
<new Comment> = <Document>.createComment(<DOMString>);
<new ProcessingInstruction> = <Document>.createProcessingInstruction(<DOMString>,<DOMString>);
<new Node> = <Document>.importNode(<Node>);
<new Node> = <Document>.importNode(<Node>,<boolean>);
<new Node> = <Document>.adoptNode(<Node>);
<new Attr> = <Document>.createAttribute(<DOMString>);
<new Attr> = <Document>.createAttributeNS(<DOMString>,<DOMString>);
<new Event> = <Document>.createEvent(<DOMString>);
<new Range> = <Document>.createRange();
<new NodeIterator> = <Document>.createNodeIterator(<Node>);
<new NodeIterator> = <Document>.createNodeIterator(<Node>,<unsigned_long>);
<new NodeIterator> = <Document>.createNodeIterator(<Node>,<unsigned_long>,<NodeFilter>);
<new TreeWalker> = <Document>.createTreeWalker(<Node>);
<new TreeWalker> = <Document>.createTreeWalker(<Node>,<unsigned_long>);
<new TreeWalker> = <Document>.createTreeWalker(<Node>,<unsigned_long>,<NodeFilter>);
!extends XMLDocument Document;
<new Document> = <XMLDocument>;
<new DocumentType> = <DOMImplementation>.createDocumentType(<DOMString>,<DOMString>,<DOMString>);
<new XMLDocument> = <DOMImplementation>.createDocument(<DOMString>,<DOMString>);
<new XMLDocument> = <DOMImplementation>.createDocument(<DOMString>,<DOMString>,<DocumentType>);
<new Document> = <DOMImplementation>.createHTMLDocument();
<new Document> = <DOMImplementation>.createHTMLDocument(<DOMString>);
<DOMImplementation>.hasFeature();
!extends DocumentType Node;
<new Node> = <DocumentType>;
<new DOMString> = <DocumentType>.name;
<new DOMString> = <DocumentType>.publicId;
<new DOMString> = <DocumentType>.systemId;
!extends DocumentFragment Node;
<new Node> = <DocumentFragment>;
<new DocumentFragment> = new DocumentFragment();
!extends ShadowRoot DocumentFragment;
<new DocumentFragment> = <ShadowRoot>;
<new ShadowRootMode> = <ShadowRoot>.mode;
<new boolean> = <ShadowRoot>.delegatesFocus;
<new SlotAssignmentMode> = <ShadowRoot>.slotAssignment;
<new Element> = <ShadowRoot>.host;
<new EventHandler> = <ShadowRoot>.onslotchange;
<ShadowRoot>.onslotchange = <EventHandler>;
!extends Element Node;
<new Node> = <Element>;
<new DOMString> = <Element>.namespaceURI;
<new DOMString> = <Element>.prefix;
<new DOMString> = <Element>.localName;
<new DOMString> = <Element>.tagName;
<new DOMString> = <Element>.id;
<Element>.id = <DOMString>;
<new DOMString> = <Element>.className;
<Element>.className = <DOMString>;
<new DOMTokenList> = <Element>.classList;
<new DOMString> = <Element>.slot;
<Element>.slot = <DOMString>;
<Element>.hasAttributes();
<new NamedNodeMap> = <Element>.attributes;
<new sequence_DOMString_> = <Element>.getAttributeNames();
<new DOMString> = <Element>.getAttribute(<DOMString>);
<new DOMString> = <Element>.getAttributeNS(<DOMString>,<DOMString>);
<Element>.setAttribute(<DOMString>,<DOMString>);
<Element>.setAttributeNS(<DOMString>,<DOMString>,<DOMString>);
<Element>.removeAttribute(<DOMString>);
<Element>.removeAttributeNS(<DOMString>,<DOMString>);
<Element>.toggleAttribute(<DOMString>);
<Element>.toggleAttribute(<DOMString>,<boolean>);
<Element>.hasAttribute(<DOMString>);
<Element>.hasAttributeNS(<DOMString>,<DOMString>);
<new Attr> = <Element>.getAttributeNode(<DOMString>);
<new Attr> = <Element>.getAttributeNodeNS(<DOMString>,<DOMString>);
<new Attr> = <Element>.setAttributeNode(<Attr>);
<new Attr> = <Element>.setAttributeNodeNS(<Attr>);
<new Attr> = <Element>.removeAttributeNode(<Attr>);
<new ShadowRoot> = <Element>.attachShadow(<ShadowRootInit>);
<new ShadowRoot> = <Element>.shadowRoot;
<new Element> = <Element>.closest(<DOMString>);
<Element>.matches(<DOMString>);
<Element>.webkitMatchesSelector(<DOMString>);
<new HTMLCollection> = <Element>.getElementsByTagName(<DOMString>);
<new HTMLCollection> = <Element>.getElementsByTagNameNS(<DOMString>,<DOMString>);
<new HTMLCollection> = <Element>.getElementsByClassName(<DOMString>);
<new Element> = <Element>.insertAdjacentElement(<DOMString>,<Element>);
<Element>.insertAdjacentText(<DOMString>,<DOMString>);
<new unsigned_long> = <NamedNodeMap>.length;
<new Attr> = <NamedNodeMap>.item(<unsigned_long>);
<new Attr> = <NamedNodeMap>.getNamedItem(<DOMString>);
<new Attr> = <NamedNodeMap>.getNamedItemNS(<DOMString>,<DOMString>);
<new Attr> = <NamedNodeMap>.setNamedItem(<Attr>);
<new Attr> = <NamedNodeMap>.setNamedItemNS(<Attr>);
<new Attr> = <NamedNodeMap>.removeNamedItem(<DOMString>);
<new Attr> = <NamedNodeMap>.removeNamedItemNS(<DOMString>,<DOMString>);
!extends Attr Node;
<new Node> = <Attr>;
<new DOMString> = <Attr>.namespaceURI;
<new DOMString> = <Attr>.prefix;
<new DOMString> = <Attr>.localName;
<new DOMString> = <Attr>.name;
<new DOMString> = <Attr>.value;
<Attr>.value = <DOMString>;
<new Element> = <Attr>.ownerElement;
<new boolean> = <Attr>.specified;
!extends CharacterData Node;
<new Node> = <CharacterData>;
<new DOMString> = <CharacterData>.data;
<CharacterData>.data = <DOMString>;
<new unsigned_long> = <CharacterData>.length;
<new DOMString> = <CharacterData>.substringData(<unsigned_long>,<unsigned_long>);
<CharacterData>.appendData(<DOMString>);
<CharacterData>.insertData(<unsigned_long>,<DOMString>);
<CharacterData>.deleteData(<unsigned_long>,<unsigned_long>);
<CharacterData>.replaceData(<unsigned_long>,<unsigned_long>,<DOMString>);
!extends Text CharacterData;
<new CharacterData> = <Text>;
<new Text> = new Text();
<new Text> = new Text(<DOMString>);
<new Text> = <Text>.splitText(<unsigned_long>);
<new DOMString> = <Text>.wholeText;
!extends CDATASection Text;
<new Text> = <CDATASection>;
!extends ProcessingInstruction CharacterData;
<new CharacterData> = <ProcessingInstruction>;
<new DOMString> = <ProcessingInstruction>.target;
!extends Comment CharacterData;
<new CharacterData> = <Comment>;
<new Comment> = new Comment();
<new Comment> = new Comment(<DOMString>);
<new Node> = <AbstractRange>.startContainer;
<new unsigned_long> = <AbstractRange>.startOffset;
<new Node> = <AbstractRange>.endContainer;
<new unsigned_long> = <AbstractRange>.endOffset;
<new boolean> = <AbstractRange>.collapsed;
!extends StaticRange AbstractRange;
<new AbstractRange> = <StaticRange>;
<new StaticRange> = new StaticRange(<StaticRangeInit>);
!extends Range AbstractRange;
<new AbstractRange> = <Range>;
<new Range> = new Range();
<new Node> = <Range>.commonAncestorContainer;
<Range>.setStart(<Node>,<unsigned_long>);
<Range>.setEnd(<Node>,<unsigned_long>);
<Range>.setStartBefore(<Node>);
<Range>.setStartAfter(<Node>);
<Range>.setEndBefore(<Node>);
<Range>.setEndAfter(<Node>);
<Range>.collapse();
<Range>.collapse(<boolean>);
<Range>.selectNode(<Node>);
<Range>.selectNodeContents(<Node>);
<new unsigned_short> = Range.START_TO_START;
<new unsigned_short> = Range.START_TO_END;
<new unsigned_short> = Range.END_TO_END;
<new unsigned_short> = Range.END_TO_START;
<Range>.compareBoundaryPoints(<unsigned_short>,<Range>);
<Range>.deleteContents();
<new DocumentFragment> = <Range>.extractContents();
<new DocumentFragment> = <Range>.cloneContents();
<Range>.insertNode(<Node>);
<Range>.surroundContents(<Node>);
<new Range> = <Range>.cloneRange();
<Range>.detach();
<Range>.isPointInRange(<Node>,<unsigned_long>);
<Range>.comparePoint(<Node>,<unsigned_long>);
<Range>.intersectsNode(<Node>);
<new Node> = <NodeIterator>.root;
<new Node> = <NodeIterator>.referenceNode;
<new boolean> = <NodeIterator>.pointerBeforeReferenceNode;
<new unsigned_long> = <NodeIterator>.whatToShow;
<new NodeFilter> = <NodeIterator>.filter;
<new Node> = <NodeIterator>.nextNode();
<new Node> = <NodeIterator>.previousNode();
<NodeIterator>.detach();
<new Node> = <TreeWalker>.root;
<new unsigned_long> = <TreeWalker>.whatToShow;
<new NodeFilter> = <TreeWalker>.filter;
<new Node> = <TreeWalker>.currentNode;
<TreeWalker>.currentNode = <Node>;
<new Node> = <TreeWalker>.parentNode();
<new Node> = <TreeWalker>.firstChild();
<new Node> = <TreeWalker>.lastChild();
<new Node> = <TreeWalker>.previousSibling();
<new Node> = <TreeWalker>.nextSibling();
<new Node> = <TreeWalker>.previousNode();
<new Node> = <TreeWalker>.nextNode();
<new unsigned_long> = <DOMTokenList>.length;
<new DOMString> = <DOMTokenList>.item(<unsigned_long>);
<DOMTokenList>.contains(<DOMString>);
<DOMTokenList>.add();
<DOMTokenList>.add(<DOMString>);
<DOMTokenList>.remove();
<DOMTokenList>.remove(<DOMString>);
<DOMTokenList>.toggle(<DOMString>);
<DOMTokenList>.toggle(<DOMString>,<boolean>);
<DOMTokenList>.replace(<DOMString>,<DOMString>);
<DOMTokenList>.supports(<DOMString>);
<new DOMString> = <DOMTokenList>.value;
<DOMTokenList>.value = <DOMString>;
<new unsigned_short> = XPathResult.ANY_TYPE;
<new unsigned_short> = XPathResult.NUMBER_TYPE;
<new unsigned_short> = XPathResult.STRING_TYPE;
<new unsigned_short> = XPathResult.BOOLEAN_TYPE;
<new unsigned_short> = XPathResult.UNORDERED_NODE_ITERATOR_TYPE;
<new unsigned_short> = XPathResult.ORDERED_NODE_ITERATOR_TYPE;
<new unsigned_short> = XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE;
<new unsigned_short> = XPathResult.ORDERED_NODE_SNAPSHOT_TYPE;
<new unsigned_short> = XPathResult.ANY_UNORDERED_NODE_TYPE;
<new unsigned_short> = XPathResult.FIRST_ORDERED_NODE_TYPE;
<new unsigned_short> = <XPathResult>.resultType;
<new unrestricted_double> = <XPathResult>.numberValue;
<new DOMString> = <XPathResult>.stringValue;
<new boolean> = <XPathResult>.booleanValue;
<new Node> = <XPathResult>.singleNodeValue;
<new boolean> = <XPathResult>.invalidIteratorState;
<new unsigned_long> = <XPathResult>.snapshotLength;
<new Node> = <XPathResult>.iterateNext();
<new Node> = <XPathResult>.snapshotItem(<unsigned_long>);
<new XPathResult> = <XPathExpression>.evaluate(<Node>);
<new XPathResult> = <XPathExpression>.evaluate(<Node>,<unsigned_short>);
<new XPathResult> = <XPathExpression>.evaluate(<Node>,<unsigned_short>,<XPathResult>);
<new XPathEvaluator> = new XPathEvaluator();
<new XSLTProcessor> = new XSLTProcessor();
<XSLTProcessor>.importStylesheet(<Node>);
<new DocumentFragment> = <XSLTProcessor>.transformToFragment(<Node>,<Document>);
<new Document> = <XSLTProcessor>.transformToDocument(<Node>);
<XSLTProcessor>.setParameter(<DOMString>,<DOMString>,<any>);
<new any> = <XSLTProcessor>.getParameter(<DOMString>,<DOMString>);
<XSLTProcessor>.removeParameter(<DOMString>,<DOMString>);
<XSLTProcessor>.clearParameters();
<XSLTProcessor>.reset();
<new EditContext> = <Element>.editContext;
<Element>.editContext = <EditContext>;
<Element>.editContext = null;
!extends EditContext EventTarget;
<new EventTarget> = <EditContext>;
<new EditContext> = new EditContext();
<new EditContext> = new EditContext(<EditContextInit>);
<EditContext>.updateText(<unsigned_long>,<unsigned_long>,<DOMString>);
<EditContext>.updateSelection(<unsigned_long>,<unsigned_long>);
<EditContext>.updateControlBound(<DOMRect>);
<EditContext>.updateSelectionBound(<DOMRect>);
<new sequence_DOMRect_> = [<DOMRect>];
<new DOMRect> = <sequence_DOMRect_>[0];
<EditContext>.updateCharacterBounds(<unsigned_long>,<sequence_DOMRect_>);
<new sequence_Element_> = <EditContext>.attachedElements();
<new DOMString> = <EditContext>.text;
<new unsigned_long> = <EditContext>.selectionStart;
<new unsigned_long> = <EditContext>.selectionEnd;
<new unsigned_long> = <EditContext>.compositionRangeStart;
<new unsigned_long> = <EditContext>.compositionRangeEnd;
<new boolean> = <EditContext>.isInComposition;
<new DOMRect> = <EditContext>.controlBound;
<new DOMRect> = <EditContext>.selectionBound;
<new unsigned_long> = <EditContext>.characterBoundsRangeStart;
<new sequence_DOMRect_> = <EditContext>.characterBounds();
<new EventHandler> = <EditContext>.ontextupdate;
<EditContext>.ontextupdate = <EventHandler>;
<new EventHandler> = <EditContext>.ontextformatupdate;
<EditContext>.ontextformatupdate = <EventHandler>;
<new EventHandler> = <EditContext>.oncharacterboundsupdate;
<EditContext>.oncharacterboundsupdate = <EventHandler>;
<new EventHandler> = <EditContext>.oncompositionstart;
<EditContext>.oncompositionstart = <EventHandler>;
<new EventHandler> = <EditContext>.oncompositionend;
<EditContext>.oncompositionend = <EventHandler>;
!extends TextUpdateEvent Event;
<new Event> = <TextUpdateEvent>;
<new TextUpdateEvent> = new TextUpdateEvent();
<new TextUpdateEvent> = new TextUpdateEvent(<TextUpdateEventInit>);
<new unsigned_long> = <TextUpdateEvent>.updateRangeStart;
<new unsigned_long> = <TextUpdateEvent>.updateRangeEnd;
<new DOMString> = <TextUpdateEvent>.text;
<new unsigned_long> = <TextUpdateEvent>.selectionStart;
<new unsigned_long> = <TextUpdateEvent>.selectionEnd;
<new unsigned_long> = <TextUpdateEvent>.compositionStart;
<new unsigned_long> = <TextUpdateEvent>.compositionEnd;
<new TextFormat> = new TextFormat();
<new TextFormat> = new TextFormat(<TextFormatInit>);
<new unsigned_long> = <TextFormat>.rangeStart;
<TextFormat>.rangeStart = <unsigned_long>;
<new unsigned_long> = <TextFormat>.rangeEnd;
<TextFormat>.rangeEnd = <unsigned_long>;
<new DOMString> = <TextFormat>.textColor;
<TextFormat>.textColor = <DOMString>;
<new DOMString> = <TextFormat>.backgroundColor;
<TextFormat>.backgroundColor = <DOMString>;
<new DOMString> = <TextFormat>.underlineStyle;
<TextFormat>.underlineStyle = <DOMString>;
<new DOMString> = <TextFormat>.underlineThickness;
<TextFormat>.underlineThickness = <DOMString>;
<new DOMString> = <TextFormat>.underlineColor;
<TextFormat>.underlineColor = <DOMString>;
!extends TextFormatUpdateEvent Event;
<new Event> = <TextFormatUpdateEvent>;
<new TextFormatUpdateEvent> = new TextFormatUpdateEvent();
<new TextFormatUpdateEvent> = new TextFormatUpdateEvent(<TextFormatUpdateEventInit>);
<new sequence_TextFormat_> = [<TextFormat>];
<new TextFormat> = <sequence_TextFormat_>[0];
<new sequence_TextFormat_> = <TextFormatUpdateEvent>.getTextFormats();
!extends CharacterBoundsUpdateEvent Event;
<new Event> = <CharacterBoundsUpdateEvent>;
<new CharacterBoundsUpdateEvent> = new CharacterBoundsUpdateEvent();
<new CharacterBoundsUpdateEvent> = new CharacterBoundsUpdateEvent(<CharacterBoundsUpdateEventInit>);
<new unsigned_long> = <CharacterBoundsUpdateEvent>.rangeStart;
<new unsigned_long> = <CharacterBoundsUpdateEvent>.rangeEnd;
!extends PerformanceElementTiming PerformanceEntry;
<new PerformanceEntry> = <PerformanceElementTiming>;
<new DOMHighResTimeStamp> = <PerformanceElementTiming>.renderTime;
<new DOMHighResTimeStamp> = <PerformanceElementTiming>.loadTime;
<new DOMRectReadOnly> = <PerformanceElementTiming>.intersectionRect;
<new DOMString> = <PerformanceElementTiming>.identifier;
<new unsigned_long> = <PerformanceElementTiming>.naturalWidth;
<new unsigned_long> = <PerformanceElementTiming>.naturalHeight;
<new DOMString> = <PerformanceElementTiming>.id;
<new Element> = <PerformanceElementTiming>.element;
<new DOMString> = <PerformanceElementTiming>.url;
<new object> = <PerformanceElementTiming>.toJSON();
<new DOMString> = <Element>.elementTiming;
<Element>.elementTiming = <DOMString>;
<new TextDecoder> = new TextDecoder();
<new TextDecoder> = new TextDecoder(<DOMString>);
<new TextDecoder> = new TextDecoder(<DOMString>,<TextDecoderOptions>);
<new USVString> = <TextDecoder>.decode();
<new USVString> = <TextDecoder>.decode(<BufferSource>);
<new USVString> = <TextDecoder>.decode(<BufferSource>,<TextDecodeOptions>);
<new TextEncoder> = new TextEncoder();
<new Uint8Array> = <TextEncoder>.encode();
<new Uint8Array> = <TextEncoder>.encode(<USVString>);
<new TextEncoderEncodeIntoResult> = <TextEncoder>.encodeInto(<USVString>,<Uint8Array>);
<new TextDecoderStream> = new TextDecoderStream();
<new TextDecoderStream> = new TextDecoderStream(<DOMString>);
<new TextDecoderStream> = new TextDecoderStream(<DOMString>,<TextDecoderOptions>);
<new TextEncoderStream> = new TextEncoderStream();
<new Promise_MediaKeySystemAccess_> = new Promise(function(x){console.log("ok")});
<new sequence_MediaKeySystemConfiguration_> = [<MediaKeySystemConfiguration>];
<new MediaKeySystemConfiguration> = <sequence_MediaKeySystemConfiguration_>[0];
<new Promise_MediaKeySystemAccess_> = <Navigator>.requestMediaKeySystemAccess(<DOMString>,<sequence_MediaKeySystemConfiguration_>);
<new DOMString> = <MediaKeySystemAccess>.keySystem;
<new MediaKeySystemConfiguration> = <MediaKeySystemAccess>.getConfiguration();
<new Promise_MediaKeys_> = new Promise(function(x){console.log("ok")});
<new Promise_MediaKeys_> = <MediaKeySystemAccess>.createMediaKeys();
<new MediaKeySession> = <MediaKeys>.createSession();
<new MediaKeySession> = <MediaKeys>.createSession(<MediaKeySessionType>);
<new Promise_boolean_> = <MediaKeys>.setServerCertificate(<BufferSource>);
!extends MediaKeySession EventTarget;
<new EventTarget> = <MediaKeySession>;
<new DOMString> = <MediaKeySession>.sessionId;
<new unrestricted_double> = <MediaKeySession>.expiration;
<new Promise_MediaKeySessionClosedReason_> = new Promise(function(x){console.log("ok")});
<new Promise_MediaKeySessionClosedReason_> = <MediaKeySession>.closed;
<new MediaKeyStatusMap> = <MediaKeySession>.keyStatuses;
<new EventHandler> = <MediaKeySession>.onkeystatuseschange;
<MediaKeySession>.onkeystatuseschange = <EventHandler>;
<new EventHandler> = <MediaKeySession>.onmessage;
<MediaKeySession>.onmessage = <EventHandler>;
<new Promise_undefined_> = <MediaKeySession>.generateRequest(<DOMString>,<BufferSource>);
<new Promise_boolean_> = <MediaKeySession>.load(<DOMString>);
<new Promise_undefined_> = <MediaKeySession>.update(<BufferSource>);
<new Promise_undefined_> = <MediaKeySession>.close();
<new Promise_undefined_> = <MediaKeySession>.remove();
<new unsigned_long> = <MediaKeyStatusMap>.size;
<MediaKeyStatusMap>.has(<BufferSource>);
<new union_MediaKeyStatus1undefined_> = <MediaKeyStatus>;
<new union_MediaKeyStatus1undefined_> = <undefined>;
<new union_MediaKeyStatus1undefined_> = <MediaKeyStatusMap>.get(<BufferSource>);
!extends MediaKeyMessageEvent Event;
<new Event> = <MediaKeyMessageEvent>;
<new MediaKeyMessageEvent> = new MediaKeyMessageEvent(<DOMString>,<MediaKeyMessageEventInit>);
<new MediaKeyMessageType> = <MediaKeyMessageEvent>.messageType;
<new ArrayBuffer> = <MediaKeyMessageEvent>.message;
<new MediaKeys> = <HTMLMediaElement>.mediaKeys;
<new EventHandler> = <HTMLMediaElement>.onencrypted;
<HTMLMediaElement>.onencrypted = <EventHandler>;
<new EventHandler> = <HTMLMediaElement>.onwaitingforkey;
<HTMLMediaElement>.onwaitingforkey = <EventHandler>;
<new Promise_undefined_> = <HTMLMediaElement>.setMediaKeys(<MediaKeys>);
!extends MediaEncryptedEvent Event;
<new Event> = <MediaEncryptedEvent>;
<new MediaEncryptedEvent> = new MediaEncryptedEvent(<DOMString>);
<new MediaEncryptedEvent> = new MediaEncryptedEvent(<DOMString>,<MediaEncryptedEventInit>);
<new DOMString> = <MediaEncryptedEvent>.initDataType;
<new ArrayBuffer> = <MediaEncryptedEvent>.initData;
<new USVString> = <File>.webkitRelativePath;
<new boolean> = <HTMLInputElement>.webkitdirectory;
<HTMLInputElement>.webkitdirectory = <boolean>;
<new FrozenArray_FileSystemEntry_> = [<FileSystemEntry>];
<new FileSystemEntry> = <FrozenArray_FileSystemEntry_>[0];
<new FrozenArray_FileSystemEntry_> = <HTMLInputElement>.webkitEntries;
<new FileSystemEntry> = <DataTransferItem>.webkitGetAsEntry();
<new boolean> = <FileSystemEntry>.isFile;
<new boolean> = <FileSystemEntry>.isDirectory;
<new USVString> = <FileSystemEntry>.name;
<new USVString> = <FileSystemEntry>.fullPath;
<new FileSystem> = <FileSystemEntry>.filesystem;
<FileSystemEntry>.getParent();
<FileSystemEntry>.getParent(<FileSystemEntryCallback>);
<FileSystemEntry>.getParent(<FileSystemEntryCallback>,<ErrorCallback>);
!extends FileSystemDirectoryEntry FileSystemEntry;
<new FileSystemEntry> = <FileSystemDirectoryEntry>;
<new FileSystemDirectoryReader> = <FileSystemDirectoryEntry>.createReader();
<FileSystemDirectoryEntry>.getFile();
<FileSystemDirectoryEntry>.getFile(<USVString>);
<FileSystemDirectoryEntry>.getFile(<USVString>,<FileSystemFlags>);
<FileSystemDirectoryEntry>.getFile(<USVString>,<FileSystemFlags>,<FileSystemEntryCallback>);
<FileSystemDirectoryEntry>.getFile(<USVString>,<FileSystemFlags>,<FileSystemEntryCallback>,<ErrorCallback>);
<FileSystemDirectoryEntry>.getDirectory();
<FileSystemDirectoryEntry>.getDirectory(<USVString>);
<FileSystemDirectoryEntry>.getDirectory(<USVString>,<FileSystemFlags>);
<FileSystemDirectoryEntry>.getDirectory(<USVString>,<FileSystemFlags>,<FileSystemEntryCallback>);
<FileSystemDirectoryEntry>.getDirectory(<USVString>,<FileSystemFlags>,<FileSystemEntryCallback>,<ErrorCallback>);
<FileSystemDirectoryReader>.readEntries(<FileSystemEntriesCallback>);
<FileSystemDirectoryReader>.readEntries(<FileSystemEntriesCallback>,<ErrorCallback>);
!extends FileSystemFileEntry FileSystemEntry;
<new FileSystemEntry> = <FileSystemFileEntry>;
<FileSystemFileEntry>.file(<FileCallback>);
<FileSystemFileEntry>.file(<FileCallback>,<ErrorCallback>);
<new USVString> = <FileSystem>.name;
<new FileSystemDirectoryEntry> = <FileSystem>.root;
!extends PerformanceEventTiming PerformanceEntry;
<new PerformanceEntry> = <PerformanceEventTiming>;
<new DOMHighResTimeStamp> = <PerformanceEventTiming>.processingStart;
<new DOMHighResTimeStamp> = <PerformanceEventTiming>.processingEnd;
<new boolean> = <PerformanceEventTiming>.cancelable;
<new Node> = <PerformanceEventTiming>.target;
<new unsigned_long_long> = <PerformanceEventTiming>.interactionId;
<new object> = <PerformanceEventTiming>.toJSON();
<new EventCounts> = <Performance>.eventCounts;
<new unsigned_long_long> = <Performance>.interactionCount;
<new EyeDropper> = new EyeDropper();
<new Promise_ColorSelectionResult_> = new Promise(function(x){console.log("ok")});
<new Promise_ColorSelectionResult_> = <EyeDropper>.open();
<new Promise_ColorSelectionResult_> = <EyeDropper>.open(<ColorSelectionOptions>);
<new Headers> = new Headers();
<new Headers> = new Headers(<HeadersInit>);
<Headers>.append(<ByteString>,<ByteString>);
<Headers>.delete(<ByteString>);
<new ByteString> = <Headers>.get(<ByteString>);
<Headers>.has(<ByteString>);
<Headers>.set(<ByteString>,<ByteString>);
<new Request> = new Request(<RequestInfo>);
<new Request> = new Request(<RequestInfo>,<RequestInit>);
<new ByteString> = <Request>.method;
<new USVString> = <Request>.url;
<new Headers> = <Request>.headers;
<new RequestDestination> = <Request>.destination;
<new USVString> = <Request>.referrer;
<new ReferrerPolicy> = <Request>.referrerPolicy;
<new RequestMode> = <Request>.mode;
<new RequestCredentials> = <Request>.credentials;
<new RequestCache> = <Request>.cache;
<new RequestRedirect> = <Request>.redirect;
<new DOMString> = <Request>.integrity;
<new boolean> = <Request>.keepalive;
<new boolean> = <Request>.isReloadNavigation;
<new boolean> = <Request>.isHistoryNavigation;
<new AbortSignal> = <Request>.signal;
<new RequestDuplex> = <Request>.duplex;
<new Request> = <Request>.clone();
<new Response> = new Response();
<new Response> = new Response(<BodyInit>);
<new Response> = new Response(<BodyInit>,<ResponseInit>);
<new Response> = <Response>.error();
<new Response> = <Response>.redirect(<USVString>);
<new Response> = <Response>.redirect(<USVString>,<unsigned_short>);
<new Response> = <Response>.json(<any>);
<new Response> = <Response>.json(<any>,<ResponseInit>);
<new ResponseType> = <Response>.type;
<new USVString> = <Response>.url;
<new boolean> = <Response>.redirected;
<new unsigned_short> = <Response>.status;
<new boolean> = <Response>.ok;
<new ByteString> = <Response>.statusText;
<new Headers> = <Response>.headers;
<new Response> = <Response>.clone();
<new Promise_PermissionState_> = new Promise(function(x){console.log("ok")});
<new Promise_PermissionState_> = <FileSystemHandle>.queryPermission();
<new Promise_PermissionState_> = <FileSystemHandle>.queryPermission(<FileSystemHandlePermissionDescriptor>);
<new Promise_PermissionState_> = <FileSystemHandle>.requestPermission();
<new Promise_PermissionState_> = <FileSystemHandle>.requestPermission(<FileSystemHandlePermissionDescriptor>);
<new sequence_FileSystemFileHandle_> = [<FileSystemFileHandle>];
<new FileSystemFileHandle> = <sequence_FileSystemFileHandle_>[0];
<new Promise_sequence_FileSystemFileHandle__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_FileSystemFileHandle__> = <Window>.showOpenFilePicker();
<new Promise_sequence_FileSystemFileHandle__> = <Window>.showOpenFilePicker(<OpenFilePickerOptions>);
<new Promise_FileSystemFileHandle_> = new Promise(function(x){console.log("ok")});
<new Promise_FileSystemFileHandle_> = <Window>.showSaveFilePicker();
<new Promise_FileSystemFileHandle_> = <Window>.showSaveFilePicker(<SaveFilePickerOptions>);
<new Promise_FileSystemDirectoryHandle_> = new Promise(function(x){console.log("ok")});
<new Promise_FileSystemDirectoryHandle_> = <Window>.showDirectoryPicker();
<new Promise_FileSystemDirectoryHandle_> = <Window>.showDirectoryPicker(<DirectoryPickerOptions>);
<new Promise_FileSystemHandle_> = new Promise(function(x){console.log("ok")});
<new Promise_FileSystemHandle_> = <DataTransferItem>.getAsFileSystemHandle();
!extends SVGFilterElement SVGElement;
<new SVGElement> = <SVGFilterElement>;
<new SVGAnimatedEnumeration> = <SVGFilterElement>.filterUnits;
<new SVGAnimatedEnumeration> = <SVGFilterElement>.primitiveUnits;
<new SVGAnimatedLength> = <SVGFilterElement>.x;
<new SVGAnimatedLength> = <SVGFilterElement>.y;
<new SVGAnimatedLength> = <SVGFilterElement>.width;
<new SVGAnimatedLength> = <SVGFilterElement>.height;
!extends SVGFEBlendElement SVGElement;
<new SVGElement> = <SVGFEBlendElement>;
<new unsigned_short> = SVGFEBlendElement.SVG_FEBLEND_MODE_UNKNOWN;
<new unsigned_short> = SVGFEBlendElement.SVG_FEBLEND_MODE_NORMAL;
<new unsigned_short> = SVGFEBlendElement.SVG_FEBLEND_MODE_MULTIPLY;
<new unsigned_short> = SVGFEBlendElement.SVG_FEBLEND_MODE_SCREEN;
<new unsigned_short> = SVGFEBlendElement.SVG_FEBLEND_MODE_DARKEN;
<new unsigned_short> = SVGFEBlendElement.SVG_FEBLEND_MODE_LIGHTEN;
<new unsigned_short> = SVGFEBlendElement.SVG_FEBLEND_MODE_OVERLAY;
<new unsigned_short> = SVGFEBlendElement.SVG_FEBLEND_MODE_COLOR_DODGE;
<new unsigned_short> = SVGFEBlendElement.SVG_FEBLEND_MODE_COLOR_BURN;
<new unsigned_short> = SVGFEBlendElement.SVG_FEBLEND_MODE_HARD_LIGHT;
<new unsigned_short> = SVGFEBlendElement.SVG_FEBLEND_MODE_SOFT_LIGHT;
<new unsigned_short> = SVGFEBlendElement.SVG_FEBLEND_MODE_DIFFERENCE;
<new unsigned_short> = SVGFEBlendElement.SVG_FEBLEND_MODE_EXCLUSION;
<new unsigned_short> = SVGFEBlendElement.SVG_FEBLEND_MODE_HUE;
<new unsigned_short> = SVGFEBlendElement.SVG_FEBLEND_MODE_SATURATION;
<new unsigned_short> = SVGFEBlendElement.SVG_FEBLEND_MODE_COLOR;
<new unsigned_short> = SVGFEBlendElement.SVG_FEBLEND_MODE_LUMINOSITY;
<new SVGAnimatedString> = <SVGFEBlendElement>.in1;
<new SVGAnimatedString> = <SVGFEBlendElement>.in2;
<new SVGAnimatedEnumeration> = <SVGFEBlendElement>.mode;
!extends SVGFEColorMatrixElement SVGElement;
<new SVGElement> = <SVGFEColorMatrixElement>;
<new unsigned_short> = SVGFEColorMatrixElement.SVG_FECOLORMATRIX_TYPE_UNKNOWN;
<new unsigned_short> = SVGFEColorMatrixElement.SVG_FECOLORMATRIX_TYPE_MATRIX;
<new unsigned_short> = SVGFEColorMatrixElement.SVG_FECOLORMATRIX_TYPE_SATURATE;
<new unsigned_short> = SVGFEColorMatrixElement.SVG_FECOLORMATRIX_TYPE_HUEROTATE;
<new unsigned_short> = SVGFEColorMatrixElement.SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA;
<new SVGAnimatedString> = <SVGFEColorMatrixElement>.in1;
<new SVGAnimatedEnumeration> = <SVGFEColorMatrixElement>.type;
<new SVGAnimatedNumberList> = <SVGFEColorMatrixElement>.values;
!extends SVGFEComponentTransferElement SVGElement;
<new SVGElement> = <SVGFEComponentTransferElement>;
<new SVGAnimatedString> = <SVGFEComponentTransferElement>.in1;
!extends SVGComponentTransferFunctionElement SVGElement;
<new SVGElement> = <SVGComponentTransferFunctionElement>;
<new unsigned_short> = SVGComponentTransferFunctionElement.SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN;
<new unsigned_short> = SVGComponentTransferFunctionElement.SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY;
<new unsigned_short> = SVGComponentTransferFunctionElement.SVG_FECOMPONENTTRANSFER_TYPE_TABLE;
<new unsigned_short> = SVGComponentTransferFunctionElement.SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE;
<new unsigned_short> = SVGComponentTransferFunctionElement.SVG_FECOMPONENTTRANSFER_TYPE_LINEAR;
<new unsigned_short> = SVGComponentTransferFunctionElement.SVG_FECOMPONENTTRANSFER_TYPE_GAMMA;
<new SVGAnimatedEnumeration> = <SVGComponentTransferFunctionElement>.type;
<new SVGAnimatedNumberList> = <SVGComponentTransferFunctionElement>.tableValues;
<new SVGAnimatedNumber> = <SVGComponentTransferFunctionElement>.slope;
<new SVGAnimatedNumber> = <SVGComponentTransferFunctionElement>.intercept;
<new SVGAnimatedNumber> = <SVGComponentTransferFunctionElement>.amplitude;
<new SVGAnimatedNumber> = <SVGComponentTransferFunctionElement>.exponent;
<new SVGAnimatedNumber> = <SVGComponentTransferFunctionElement>.offset;
!extends SVGFEFuncRElement SVGComponentTransferFunctionElement;
<new SVGComponentTransferFunctionElement> = <SVGFEFuncRElement>;
!extends SVGFEFuncGElement SVGComponentTransferFunctionElement;
<new SVGComponentTransferFunctionElement> = <SVGFEFuncGElement>;
!extends SVGFEFuncBElement SVGComponentTransferFunctionElement;
<new SVGComponentTransferFunctionElement> = <SVGFEFuncBElement>;
!extends SVGFEFuncAElement SVGComponentTransferFunctionElement;
<new SVGComponentTransferFunctionElement> = <SVGFEFuncAElement>;
!extends SVGFECompositeElement SVGElement;
<new SVGElement> = <SVGFECompositeElement>;
<new unsigned_short> = SVGFECompositeElement.SVG_FECOMPOSITE_OPERATOR_UNKNOWN;
<new unsigned_short> = SVGFECompositeElement.SVG_FECOMPOSITE_OPERATOR_OVER;
<new unsigned_short> = SVGFECompositeElement.SVG_FECOMPOSITE_OPERATOR_IN;
<new unsigned_short> = SVGFECompositeElement.SVG_FECOMPOSITE_OPERATOR_OUT;
<new unsigned_short> = SVGFECompositeElement.SVG_FECOMPOSITE_OPERATOR_ATOP;
<new unsigned_short> = SVGFECompositeElement.SVG_FECOMPOSITE_OPERATOR_XOR;
<new unsigned_short> = SVGFECompositeElement.SVG_FECOMPOSITE_OPERATOR_ARITHMETIC;
<new SVGAnimatedString> = <SVGFECompositeElement>.in1;
<new SVGAnimatedString> = <SVGFECompositeElement>.in2;
<new SVGAnimatedEnumeration> = <SVGFECompositeElement>.operator;
<new SVGAnimatedNumber> = <SVGFECompositeElement>.k1;
<new SVGAnimatedNumber> = <SVGFECompositeElement>.k2;
<new SVGAnimatedNumber> = <SVGFECompositeElement>.k3;
<new SVGAnimatedNumber> = <SVGFECompositeElement>.k4;
!extends SVGFEConvolveMatrixElement SVGElement;
<new SVGElement> = <SVGFEConvolveMatrixElement>;
<new unsigned_short> = SVGFEConvolveMatrixElement.SVG_EDGEMODE_UNKNOWN;
<new unsigned_short> = SVGFEConvolveMatrixElement.SVG_EDGEMODE_DUPLICATE;
<new unsigned_short> = SVGFEConvolveMatrixElement.SVG_EDGEMODE_WRAP;
<new unsigned_short> = SVGFEConvolveMatrixElement.SVG_EDGEMODE_NONE;
<new SVGAnimatedString> = <SVGFEConvolveMatrixElement>.in1;
<new SVGAnimatedInteger> = <SVGFEConvolveMatrixElement>.orderX;
<new SVGAnimatedInteger> = <SVGFEConvolveMatrixElement>.orderY;
<new SVGAnimatedNumberList> = <SVGFEConvolveMatrixElement>.kernelMatrix;
<new SVGAnimatedNumber> = <SVGFEConvolveMatrixElement>.divisor;
<new SVGAnimatedNumber> = <SVGFEConvolveMatrixElement>.bias;
<new SVGAnimatedInteger> = <SVGFEConvolveMatrixElement>.targetX;
<new SVGAnimatedInteger> = <SVGFEConvolveMatrixElement>.targetY;
<new SVGAnimatedEnumeration> = <SVGFEConvolveMatrixElement>.edgeMode;
<new SVGAnimatedNumber> = <SVGFEConvolveMatrixElement>.kernelUnitLengthX;
<new SVGAnimatedNumber> = <SVGFEConvolveMatrixElement>.kernelUnitLengthY;
<new SVGAnimatedBoolean> = <SVGFEConvolveMatrixElement>.preserveAlpha;
!extends SVGFEDiffuseLightingElement SVGElement;
<new SVGElement> = <SVGFEDiffuseLightingElement>;
<new SVGAnimatedString> = <SVGFEDiffuseLightingElement>.in1;
<new SVGAnimatedNumber> = <SVGFEDiffuseLightingElement>.surfaceScale;
<new SVGAnimatedNumber> = <SVGFEDiffuseLightingElement>.diffuseConstant;
<new SVGAnimatedNumber> = <SVGFEDiffuseLightingElement>.kernelUnitLengthX;
<new SVGAnimatedNumber> = <SVGFEDiffuseLightingElement>.kernelUnitLengthY;
!extends SVGFEDistantLightElement SVGElement;
<new SVGElement> = <SVGFEDistantLightElement>;
<new SVGAnimatedNumber> = <SVGFEDistantLightElement>.azimuth;
<new SVGAnimatedNumber> = <SVGFEDistantLightElement>.elevation;
!extends SVGFEPointLightElement SVGElement;
<new SVGElement> = <SVGFEPointLightElement>;
<new SVGAnimatedNumber> = <SVGFEPointLightElement>.x;
<new SVGAnimatedNumber> = <SVGFEPointLightElement>.y;
<new SVGAnimatedNumber> = <SVGFEPointLightElement>.z;
!extends SVGFESpotLightElement SVGElement;
<new SVGElement> = <SVGFESpotLightElement>;
<new SVGAnimatedNumber> = <SVGFESpotLightElement>.x;
<new SVGAnimatedNumber> = <SVGFESpotLightElement>.y;
<new SVGAnimatedNumber> = <SVGFESpotLightElement>.z;
<new SVGAnimatedNumber> = <SVGFESpotLightElement>.pointsAtX;
<new SVGAnimatedNumber> = <SVGFESpotLightElement>.pointsAtY;
<new SVGAnimatedNumber> = <SVGFESpotLightElement>.pointsAtZ;
<new SVGAnimatedNumber> = <SVGFESpotLightElement>.specularExponent;
<new SVGAnimatedNumber> = <SVGFESpotLightElement>.limitingConeAngle;
!extends SVGFEDisplacementMapElement SVGElement;
<new SVGElement> = <SVGFEDisplacementMapElement>;
<new unsigned_short> = SVGFEDisplacementMapElement.SVG_CHANNEL_UNKNOWN;
<new unsigned_short> = SVGFEDisplacementMapElement.SVG_CHANNEL_R;
<new unsigned_short> = SVGFEDisplacementMapElement.SVG_CHANNEL_G;
<new unsigned_short> = SVGFEDisplacementMapElement.SVG_CHANNEL_B;
<new unsigned_short> = SVGFEDisplacementMapElement.SVG_CHANNEL_A;
<new SVGAnimatedString> = <SVGFEDisplacementMapElement>.in1;
<new SVGAnimatedString> = <SVGFEDisplacementMapElement>.in2;
<new SVGAnimatedNumber> = <SVGFEDisplacementMapElement>.scale;
<new SVGAnimatedEnumeration> = <SVGFEDisplacementMapElement>.xChannelSelector;
<new SVGAnimatedEnumeration> = <SVGFEDisplacementMapElement>.yChannelSelector;
!extends SVGFEDropShadowElement SVGElement;
<new SVGElement> = <SVGFEDropShadowElement>;
<new SVGAnimatedString> = <SVGFEDropShadowElement>.in1;
<new SVGAnimatedNumber> = <SVGFEDropShadowElement>.dx;
<new SVGAnimatedNumber> = <SVGFEDropShadowElement>.dy;
<new SVGAnimatedNumber> = <SVGFEDropShadowElement>.stdDeviationX;
<new SVGAnimatedNumber> = <SVGFEDropShadowElement>.stdDeviationY;
<SVGFEDropShadowElement>.setStdDeviation(<float>,<float>);
!extends SVGFEFloodElement SVGElement;
<new SVGElement> = <SVGFEFloodElement>;
!extends SVGFEGaussianBlurElement SVGElement;
<new SVGElement> = <SVGFEGaussianBlurElement>;
<new unsigned_short> = SVGFEGaussianBlurElement.SVG_EDGEMODE_UNKNOWN;
<new unsigned_short> = SVGFEGaussianBlurElement.SVG_EDGEMODE_DUPLICATE;
<new unsigned_short> = SVGFEGaussianBlurElement.SVG_EDGEMODE_WRAP;
<new unsigned_short> = SVGFEGaussianBlurElement.SVG_EDGEMODE_NONE;
<new SVGAnimatedString> = <SVGFEGaussianBlurElement>.in1;
<new SVGAnimatedNumber> = <SVGFEGaussianBlurElement>.stdDeviationX;
<new SVGAnimatedNumber> = <SVGFEGaussianBlurElement>.stdDeviationY;
<new SVGAnimatedEnumeration> = <SVGFEGaussianBlurElement>.edgeMode;
<SVGFEGaussianBlurElement>.setStdDeviation(<float>,<float>);
!extends SVGFEImageElement SVGElement;
<new SVGElement> = <SVGFEImageElement>;
<new SVGAnimatedPreserveAspectRatio> = <SVGFEImageElement>.preserveAspectRatio;
<new SVGAnimatedString> = <SVGFEImageElement>.crossOrigin;
!extends SVGFEMergeElement SVGElement;
<new SVGElement> = <SVGFEMergeElement>;
!extends SVGFEMergeNodeElement SVGElement;
<new SVGElement> = <SVGFEMergeNodeElement>;
<new SVGAnimatedString> = <SVGFEMergeNodeElement>.in1;
!extends SVGFEMorphologyElement SVGElement;
<new SVGElement> = <SVGFEMorphologyElement>;
<new unsigned_short> = SVGFEMorphologyElement.SVG_MORPHOLOGY_OPERATOR_UNKNOWN;
<new unsigned_short> = SVGFEMorphologyElement.SVG_MORPHOLOGY_OPERATOR_ERODE;
<new unsigned_short> = SVGFEMorphologyElement.SVG_MORPHOLOGY_OPERATOR_DILATE;
<new SVGAnimatedString> = <SVGFEMorphologyElement>.in1;
<new SVGAnimatedEnumeration> = <SVGFEMorphologyElement>.operator;
<new SVGAnimatedNumber> = <SVGFEMorphologyElement>.radiusX;
<new SVGAnimatedNumber> = <SVGFEMorphologyElement>.radiusY;
!extends SVGFEOffsetElement SVGElement;
<new SVGElement> = <SVGFEOffsetElement>;
<new SVGAnimatedString> = <SVGFEOffsetElement>.in1;
<new SVGAnimatedNumber> = <SVGFEOffsetElement>.dx;
<new SVGAnimatedNumber> = <SVGFEOffsetElement>.dy;
!extends SVGFESpecularLightingElement SVGElement;
<new SVGElement> = <SVGFESpecularLightingElement>;
<new SVGAnimatedString> = <SVGFESpecularLightingElement>.in1;
<new SVGAnimatedNumber> = <SVGFESpecularLightingElement>.surfaceScale;
<new SVGAnimatedNumber> = <SVGFESpecularLightingElement>.specularConstant;
<new SVGAnimatedNumber> = <SVGFESpecularLightingElement>.specularExponent;
<new SVGAnimatedNumber> = <SVGFESpecularLightingElement>.kernelUnitLengthX;
<new SVGAnimatedNumber> = <SVGFESpecularLightingElement>.kernelUnitLengthY;
!extends SVGFETileElement SVGElement;
<new SVGElement> = <SVGFETileElement>;
<new SVGAnimatedString> = <SVGFETileElement>.in1;
!extends SVGFETurbulenceElement SVGElement;
<new SVGElement> = <SVGFETurbulenceElement>;
<new unsigned_short> = SVGFETurbulenceElement.SVG_TURBULENCE_TYPE_UNKNOWN;
<new unsigned_short> = SVGFETurbulenceElement.SVG_TURBULENCE_TYPE_FRACTALNOISE;
<new unsigned_short> = SVGFETurbulenceElement.SVG_TURBULENCE_TYPE_TURBULENCE;
<new unsigned_short> = SVGFETurbulenceElement.SVG_STITCHTYPE_UNKNOWN;
<new unsigned_short> = SVGFETurbulenceElement.SVG_STITCHTYPE_STITCH;
<new unsigned_short> = SVGFETurbulenceElement.SVG_STITCHTYPE_NOSTITCH;
<new SVGAnimatedNumber> = <SVGFETurbulenceElement>.baseFrequencyX;
<new SVGAnimatedNumber> = <SVGFETurbulenceElement>.baseFrequencyY;
<new SVGAnimatedInteger> = <SVGFETurbulenceElement>.numOctaves;
<new SVGAnimatedNumber> = <SVGFETurbulenceElement>.seed;
<new SVGAnimatedEnumeration> = <SVGFETurbulenceElement>.stitchTiles;
<new SVGAnimatedEnumeration> = <SVGFETurbulenceElement>.type;
<new FontMetrics> = <Document>.measureElement(<Element>);
<new FontMetrics> = <Document>.measureText(<DOMString>,<StylePropertyMapReadOnly>);
<new double> = <FontMetrics>.width;
<new FrozenArray_double_> = [<double>];
<new double> = <FrozenArray_double_>[0];
<new FrozenArray_double_> = <FontMetrics>.advances;
<new double> = <FontMetrics>.boundingBoxLeft;
<new double> = <FontMetrics>.boundingBoxRight;
<new double> = <FontMetrics>.height;
<new double> = <FontMetrics>.emHeightAscent;
<new double> = <FontMetrics>.emHeightDescent;
<new double> = <FontMetrics>.boundingBoxAscent;
<new double> = <FontMetrics>.boundingBoxDescent;
<new double> = <FontMetrics>.fontBoundingBoxAscent;
<new double> = <FontMetrics>.fontBoundingBoxDescent;
<new Baseline> = <FontMetrics>.dominantBaseline;
<new FrozenArray_Baseline_> = [<Baseline>];
<new Baseline> = <FrozenArray_Baseline_>[0];
<new FrozenArray_Baseline_> = <FontMetrics>.baselines;
<new FrozenArray_Font_> = [<Font>];
<new Font> = <FrozenArray_Font_>[0];
<new FrozenArray_Font_> = <FontMetrics>.fonts;
<new DOMString> = <Baseline>.name;
<new double> = <Baseline>.value;
<new DOMString> = <Font>.name;
<new unsigned_long> = <Font>.glyphsRendered;
<new FileSystemHandleKind> = <FileSystemHandle>.kind;
<new USVString> = <FileSystemHandle>.name;
<new Promise_boolean_> = <FileSystemHandle>.isSameEntry(<FileSystemHandle>);
!extends FileSystemFileHandle FileSystemHandle;
<new FileSystemHandle> = <FileSystemFileHandle>;
<new Promise_File_> = new Promise(function(x){console.log("ok")});
<new Promise_File_> = <FileSystemFileHandle>.getFile();
<new Promise_FileSystemWritableFileStream_> = new Promise(function(x){console.log("ok")});
<new Promise_FileSystemWritableFileStream_> = <FileSystemFileHandle>.createWritable();
<new Promise_FileSystemWritableFileStream_> = <FileSystemFileHandle>.createWritable(<FileSystemCreateWritableOptions>);
<new Promise_FileSystemSyncAccessHandle_> = new Promise(function(x){console.log("ok")});
<new Promise_FileSystemSyncAccessHandle_> = <FileSystemFileHandle>.createSyncAccessHandle();
!extends FileSystemDirectoryHandle FileSystemHandle;
<new FileSystemHandle> = <FileSystemDirectoryHandle>;
<new Promise_FileSystemFileHandle_> = <FileSystemDirectoryHandle>.getFileHandle(<USVString>);
<new Promise_FileSystemFileHandle_> = <FileSystemDirectoryHandle>.getFileHandle(<USVString>,<FileSystemGetFileOptions>);
<new Promise_FileSystemDirectoryHandle_> = <FileSystemDirectoryHandle>.getDirectoryHandle(<USVString>);
<new Promise_FileSystemDirectoryHandle_> = <FileSystemDirectoryHandle>.getDirectoryHandle(<USVString>,<FileSystemGetDirectoryOptions>);
<new Promise_undefined_> = <FileSystemDirectoryHandle>.removeEntry(<USVString>);
<new Promise_undefined_> = <FileSystemDirectoryHandle>.removeEntry(<USVString>,<FileSystemRemoveOptions>);
<new sequence_USVString_> = [<USVString>];
<new USVString> = <sequence_USVString_>[0];
<new Promise_sequence_USVString__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_USVString__> = <FileSystemDirectoryHandle>.resolve(<FileSystemHandle>);
!extends FileSystemWritableFileStream WritableStream;
<new WritableStream> = <FileSystemWritableFileStream>;
<new Promise_undefined_> = <FileSystemWritableFileStream>.write(<FileSystemWriteChunkType>);
<new Promise_undefined_> = <FileSystemWritableFileStream>.seek(<unsigned_long_long>);
<new Promise_undefined_> = <FileSystemWritableFileStream>.truncate(<unsigned_long_long>);
<new unsigned_long_long> = <FileSystemSyncAccessHandle>.read(<BufferSource>);
<new unsigned_long_long> = <FileSystemSyncAccessHandle>.read(<BufferSource>,<FileSystemReadWriteOptions>);
<new unsigned_long_long> = <FileSystemSyncAccessHandle>.write(<BufferSource>);
<new unsigned_long_long> = <FileSystemSyncAccessHandle>.write(<BufferSource>,<FileSystemReadWriteOptions>);
<FileSystemSyncAccessHandle>.truncate(<unsigned_long_long>);
<new unsigned_long_long> = <FileSystemSyncAccessHandle>.getSize();
<FileSystemSyncAccessHandle>.flush();
<FileSystemSyncAccessHandle>.close();
<new Promise_FileSystemDirectoryHandle_> = <StorageManager>.getDirectory();
<new Promise_undefined_> = <Element>.requestFullscreen();
<new Promise_undefined_> = <Element>.requestFullscreen(<FullscreenOptions>);
<new EventHandler> = <Element>.onfullscreenchange;
<Element>.onfullscreenchange = <EventHandler>;
<new EventHandler> = <Element>.onfullscreenerror;
<Element>.onfullscreenerror = <EventHandler>;
<new boolean> = <Document>.fullscreenEnabled;
<new boolean> = <Document>.fullscreen;
<new Promise_undefined_> = <Document>.exitFullscreen();
<new EventHandler> = <Document>.onfullscreenchange;
<Document>.onfullscreenchange = <EventHandler>;
<new EventHandler> = <Document>.onfullscreenerror;
<Document>.onfullscreenerror = <EventHandler>;
<new GamepadHapticActuatorType> = <GamepadHapticActuator>.type;
<GamepadHapticActuator>.canPlayEffectType(<GamepadHapticEffectType>);
<new Promise_GamepadHapticsResult_> = new Promise(function(x){console.log("ok")});
<new Promise_GamepadHapticsResult_> = <GamepadHapticActuator>.playEffect(<GamepadHapticEffectType>);
<new Promise_GamepadHapticsResult_> = <GamepadHapticActuator>.playEffect(<GamepadHapticEffectType>,<GamepadEffectParameters>);
<new Promise_boolean_> = <GamepadHapticActuator>.pulse(<double>,<double>);
<new Promise_GamepadHapticsResult_> = <GamepadHapticActuator>.reset();
<new boolean> = <GamepadPose>.hasOrientation;
<new boolean> = <GamepadPose>.hasPosition;
<new Float32Array> = <GamepadPose>.position;
<new Float32Array> = <GamepadPose>.linearVelocity;
<new Float32Array> = <GamepadPose>.linearAcceleration;
<new Float32Array> = <GamepadPose>.orientation;
<new Float32Array> = <GamepadPose>.angularVelocity;
<new Float32Array> = <GamepadPose>.angularAcceleration;
<new unsigned_long> = <GamepadTouch>.touchId;
<new octet> = <GamepadTouch>.surfaceId;
<new Float32Array> = <GamepadTouch>.position;
<new Uint32Array> = <GamepadTouch>.surfaceDimensions;
<new GamepadHand> = <Gamepad>.hand;
<new FrozenArray_GamepadHapticActuator_> = [<GamepadHapticActuator>];
<new GamepadHapticActuator> = <FrozenArray_GamepadHapticActuator_>[0];
<new FrozenArray_GamepadHapticActuator_> = <Gamepad>.hapticActuators;
<new GamepadPose> = <Gamepad>.pose;
<new FrozenArray_GamepadTouch_> = [<GamepadTouch>];
<new GamepadTouch> = <FrozenArray_GamepadTouch_>[0];
<new FrozenArray_GamepadTouch_> = <Gamepad>.touchEvents;
<new GamepadHapticActuator> = <Gamepad>.vibrationActuator;
<new DOMString> = <Gamepad>.id;
<new long> = <Gamepad>.index;
<new boolean> = <Gamepad>.connected;
<new DOMHighResTimeStamp> = <Gamepad>.timestamp;
<new GamepadMappingType> = <Gamepad>.mapping;
<new FrozenArray_double_> = <Gamepad>.axes;
<new FrozenArray_GamepadButton_> = [<GamepadButton>];
<new GamepadButton> = <FrozenArray_GamepadButton_>[0];
<new FrozenArray_GamepadButton_> = <Gamepad>.buttons;
<new boolean> = <GamepadButton>.pressed;
<new boolean> = <GamepadButton>.touched;
<new double> = <GamepadButton>.value;
<new sequence_Gamepad_> = [<Gamepad>];
<new Gamepad> = <sequence_Gamepad_>[0];
<new sequence_Gamepad_> = <Navigator>.getGamepads();
!extends GamepadEvent Event;
<new Event> = <GamepadEvent>;
<new GamepadEvent> = new GamepadEvent(<DOMString>,<GamepadEventInit>);
<new Gamepad> = <GamepadEvent>.gamepad;
!extends Sensor EventTarget;
<new EventTarget> = <Sensor>;
<new boolean> = <Sensor>.activated;
<new boolean> = <Sensor>.hasReading;
<new DOMHighResTimeStamp> = <Sensor>.timestamp;
<Sensor>.start();
<Sensor>.stop();
<new EventHandler> = <Sensor>.onreading;
<Sensor>.onreading = <EventHandler>;
<new EventHandler> = <Sensor>.onactivate;
<Sensor>.onactivate = <EventHandler>;
<new EventHandler> = <Sensor>.onerror;
<Sensor>.onerror = <EventHandler>;
!extends SensorErrorEvent Event;
<new Event> = <SensorErrorEvent>;
<new SensorErrorEvent> = new SensorErrorEvent(<DOMString>,<SensorErrorEventInit>);
<new DOMException> = <SensorErrorEvent>.error;
!extends GeolocationSensor Sensor;
<new Sensor> = <GeolocationSensor>;
<new GeolocationSensor> = new GeolocationSensor();
<new GeolocationSensor> = new GeolocationSensor(<GeolocationSensorOptions>);
<new Promise_GeolocationSensorReading_> = new Promise(function(x){console.log("ok")});
<new Promise_GeolocationSensorReading_> = <GeolocationSensor>.read();
<new Promise_GeolocationSensorReading_> = <GeolocationSensor>.read(<ReadOptions>);
<new unrestricted_double> = <GeolocationSensor>.latitude;
<new unrestricted_double> = <GeolocationSensor>.longitude;
<new unrestricted_double> = <GeolocationSensor>.altitude;
<new unrestricted_double> = <GeolocationSensor>.accuracy;
<new unrestricted_double> = <GeolocationSensor>.altitudeAccuracy;
<new unrestricted_double> = <GeolocationSensor>.heading;
<new unrestricted_double> = <GeolocationSensor>.speed;
<new Geolocation> = <Navigator>.geolocation;
<Geolocation>.getCurrentPosition(<PositionCallback>);
<Geolocation>.getCurrentPosition(<PositionCallback>,<PositionErrorCallback>);
<Geolocation>.getCurrentPosition(<PositionCallback>,<PositionErrorCallback>,<PositionOptions>);
<Geolocation>.watchPosition(<PositionCallback>);
<Geolocation>.watchPosition(<PositionCallback>,<PositionErrorCallback>);
<Geolocation>.watchPosition(<PositionCallback>,<PositionErrorCallback>,<PositionOptions>);
<Geolocation>.clearWatch(<long>);
<new GeolocationCoordinates> = <GeolocationPosition>.coords;
<new EpochTimeStamp> = <GeolocationPosition>.timestamp;
<new double> = <GeolocationCoordinates>.accuracy;
<new double> = <GeolocationCoordinates>.latitude;
<new double> = <GeolocationCoordinates>.longitude;
<new double> = <GeolocationCoordinates>.altitude;
<new double> = <GeolocationCoordinates>.altitudeAccuracy;
<new double> = <GeolocationCoordinates>.heading;
<new double> = <GeolocationCoordinates>.speed;
<new unsigned_short> = GeolocationPositionError.PERMISSION_DENIED;
<new unsigned_short> = GeolocationPositionError.POSITION_UNAVAILABLE;
<new unsigned_short> = GeolocationPositionError.TIMEOUT;
<new unsigned_short> = <GeolocationPositionError>.code;
<new DOMString> = <GeolocationPositionError>.message;
<new DOMPointReadOnly> = new DOMPointReadOnly();
<new DOMPointReadOnly> = new DOMPointReadOnly(<unrestricted_double>);
<new DOMPointReadOnly> = new DOMPointReadOnly(<unrestricted_double>,<unrestricted_double>);
<new DOMPointReadOnly> = new DOMPointReadOnly(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<new DOMPointReadOnly> = new DOMPointReadOnly(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<new DOMPointReadOnly> = <DOMPointReadOnly>.fromPoint();
<new DOMPointReadOnly> = <DOMPointReadOnly>.fromPoint(<DOMPointInit>);
<new unrestricted_double> = <DOMPointReadOnly>.x;
<new unrestricted_double> = <DOMPointReadOnly>.y;
<new unrestricted_double> = <DOMPointReadOnly>.z;
<new unrestricted_double> = <DOMPointReadOnly>.w;
<new DOMPoint> = <DOMPointReadOnly>.matrixTransform();
<new DOMPoint> = <DOMPointReadOnly>.matrixTransform(<DOMMatrixInit>);
<new object> = <DOMPointReadOnly>.toJSON();
!extends DOMPoint DOMPointReadOnly;
<new DOMPointReadOnly> = <DOMPoint>;
<new DOMPoint> = new DOMPoint();
<new DOMPoint> = new DOMPoint(<unrestricted_double>);
<new DOMPoint> = new DOMPoint(<unrestricted_double>,<unrestricted_double>);
<new DOMPoint> = new DOMPoint(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<new DOMPoint> = new DOMPoint(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<new DOMPoint> = <DOMPoint>.fromPoint();
<new DOMPoint> = <DOMPoint>.fromPoint(<DOMPointInit>);
<new unrestricted_double> = <DOMPoint>.x;
<DOMPoint>.x = <unrestricted_double>;
<new unrestricted_double> = <DOMPoint>.y;
<DOMPoint>.y = <unrestricted_double>;
<new unrestricted_double> = <DOMPoint>.z;
<DOMPoint>.z = <unrestricted_double>;
<new unrestricted_double> = <DOMPoint>.w;
<DOMPoint>.w = <unrestricted_double>;
<new DOMRectReadOnly> = new DOMRectReadOnly();
<new DOMRectReadOnly> = new DOMRectReadOnly(<unrestricted_double>);
<new DOMRectReadOnly> = new DOMRectReadOnly(<unrestricted_double>,<unrestricted_double>);
<new DOMRectReadOnly> = new DOMRectReadOnly(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<new DOMRectReadOnly> = new DOMRectReadOnly(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<new DOMRectReadOnly> = <DOMRectReadOnly>.fromRect();
<new DOMRectReadOnly> = <DOMRectReadOnly>.fromRect(<DOMRectInit>);
<new unrestricted_double> = <DOMRectReadOnly>.x;
<new unrestricted_double> = <DOMRectReadOnly>.y;
<new unrestricted_double> = <DOMRectReadOnly>.width;
<new unrestricted_double> = <DOMRectReadOnly>.height;
<new unrestricted_double> = <DOMRectReadOnly>.top;
<new unrestricted_double> = <DOMRectReadOnly>.right;
<new unrestricted_double> = <DOMRectReadOnly>.bottom;
<new unrestricted_double> = <DOMRectReadOnly>.left;
<new object> = <DOMRectReadOnly>.toJSON();
!extends DOMRect DOMRectReadOnly;
<new DOMRectReadOnly> = <DOMRect>;
<new DOMRect> = new DOMRect();
<new DOMRect> = new DOMRect(<unrestricted_double>);
<new DOMRect> = new DOMRect(<unrestricted_double>,<unrestricted_double>);
<new DOMRect> = new DOMRect(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<new DOMRect> = new DOMRect(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<new DOMRect> = <DOMRect>.fromRect();
<new DOMRect> = <DOMRect>.fromRect(<DOMRectInit>);
<new unrestricted_double> = <DOMRect>.x;
<DOMRect>.x = <unrestricted_double>;
<new unrestricted_double> = <DOMRect>.y;
<DOMRect>.y = <unrestricted_double>;
<new unrestricted_double> = <DOMRect>.width;
<DOMRect>.width = <unrestricted_double>;
<new unrestricted_double> = <DOMRect>.height;
<DOMRect>.height = <unrestricted_double>;
<new unsigned_long> = <DOMRectList>.length;
<new DOMRect> = <DOMRectList>.item(<unsigned_long>);
<new DOMQuad> = new DOMQuad();
<new DOMQuad> = new DOMQuad(<DOMPointInit>);
<new DOMQuad> = new DOMQuad(<DOMPointInit>,<DOMPointInit>);
<new DOMQuad> = new DOMQuad(<DOMPointInit>,<DOMPointInit>,<DOMPointInit>);
<new DOMQuad> = new DOMQuad(<DOMPointInit>,<DOMPointInit>,<DOMPointInit>,<DOMPointInit>);
<new DOMQuad> = <DOMQuad>.fromRect();
<new DOMQuad> = <DOMQuad>.fromRect(<DOMRectInit>);
<new DOMQuad> = <DOMQuad>.fromQuad();
<new DOMQuad> = <DOMQuad>.fromQuad(<DOMQuadInit>);
<new DOMPoint> = <DOMQuad>.p1;
<new DOMPoint> = <DOMQuad>.p2;
<new DOMPoint> = <DOMQuad>.p3;
<new DOMPoint> = <DOMQuad>.p4;
<new DOMRect> = <DOMQuad>.getBounds();
<new object> = <DOMQuad>.toJSON();
<new sequence_unrestricted_double_> = [<unrestricted_double>];
<new unrestricted_double> = <sequence_unrestricted_double_>[0];
<new union_DOMString1sequence_unrestricted_double__> = <DOMString>;
<new union_DOMString1sequence_unrestricted_double__> = <sequence_unrestricted_double_>;
<new DOMMatrixReadOnly> = new DOMMatrixReadOnly();
<new DOMMatrixReadOnly> = new DOMMatrixReadOnly(<union_DOMString1sequence_unrestricted_double__>);
<new DOMMatrixReadOnly> = <DOMMatrixReadOnly>.fromMatrix();
<new DOMMatrixReadOnly> = <DOMMatrixReadOnly>.fromMatrix(<DOMMatrixInit>);
<new DOMMatrixReadOnly> = <DOMMatrixReadOnly>.fromFloat32Array(<Float32Array>);
<new DOMMatrixReadOnly> = <DOMMatrixReadOnly>.fromFloat64Array(<Float64Array>);
<new unrestricted_double> = <DOMMatrixReadOnly>.a;
<new unrestricted_double> = <DOMMatrixReadOnly>.b;
<new unrestricted_double> = <DOMMatrixReadOnly>.c;
<new unrestricted_double> = <DOMMatrixReadOnly>.d;
<new unrestricted_double> = <DOMMatrixReadOnly>.e;
<new unrestricted_double> = <DOMMatrixReadOnly>.f;
<new unrestricted_double> = <DOMMatrixReadOnly>.m11;
<new unrestricted_double> = <DOMMatrixReadOnly>.m12;
<new unrestricted_double> = <DOMMatrixReadOnly>.m13;
<new unrestricted_double> = <DOMMatrixReadOnly>.m14;
<new unrestricted_double> = <DOMMatrixReadOnly>.m21;
<new unrestricted_double> = <DOMMatrixReadOnly>.m22;
<new unrestricted_double> = <DOMMatrixReadOnly>.m23;
<new unrestricted_double> = <DOMMatrixReadOnly>.m24;
<new unrestricted_double> = <DOMMatrixReadOnly>.m31;
<new unrestricted_double> = <DOMMatrixReadOnly>.m32;
<new unrestricted_double> = <DOMMatrixReadOnly>.m33;
<new unrestricted_double> = <DOMMatrixReadOnly>.m34;
<new unrestricted_double> = <DOMMatrixReadOnly>.m41;
<new unrestricted_double> = <DOMMatrixReadOnly>.m42;
<new unrestricted_double> = <DOMMatrixReadOnly>.m43;
<new unrestricted_double> = <DOMMatrixReadOnly>.m44;
<new boolean> = <DOMMatrixReadOnly>.is2D;
<new boolean> = <DOMMatrixReadOnly>.isIdentity;
<new DOMMatrix> = <DOMMatrixReadOnly>.translate();
<new DOMMatrix> = <DOMMatrixReadOnly>.translate(<unrestricted_double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.translate(<unrestricted_double>,<unrestricted_double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.translate(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.scale();
<new DOMMatrix> = <DOMMatrixReadOnly>.scale(<unrestricted_double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.scale(<unrestricted_double>,<unrestricted_double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.scale(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.scale(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.scale(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.scale(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.scaleNonUniform();
<new DOMMatrix> = <DOMMatrixReadOnly>.scaleNonUniform(<unrestricted_double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.scaleNonUniform(<unrestricted_double>,<unrestricted_double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.scale3d();
<new DOMMatrix> = <DOMMatrixReadOnly>.scale3d(<unrestricted_double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.scale3d(<unrestricted_double>,<unrestricted_double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.scale3d(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.scale3d(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.rotate();
<new DOMMatrix> = <DOMMatrixReadOnly>.rotate(<unrestricted_double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.rotate(<unrestricted_double>,<unrestricted_double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.rotate(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.rotateFromVector();
<new DOMMatrix> = <DOMMatrixReadOnly>.rotateFromVector(<unrestricted_double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.rotateFromVector(<unrestricted_double>,<unrestricted_double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.rotateAxisAngle();
<new DOMMatrix> = <DOMMatrixReadOnly>.rotateAxisAngle(<unrestricted_double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.rotateAxisAngle(<unrestricted_double>,<unrestricted_double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.rotateAxisAngle(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.rotateAxisAngle(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.skewX();
<new DOMMatrix> = <DOMMatrixReadOnly>.skewX(<unrestricted_double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.skewY();
<new DOMMatrix> = <DOMMatrixReadOnly>.skewY(<unrestricted_double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.multiply();
<new DOMMatrix> = <DOMMatrixReadOnly>.multiply(<DOMMatrixInit>);
<new DOMMatrix> = <DOMMatrixReadOnly>.flipX();
<new DOMMatrix> = <DOMMatrixReadOnly>.flipY();
<new DOMMatrix> = <DOMMatrixReadOnly>.inverse();
<new DOMPoint> = <DOMMatrixReadOnly>.transformPoint();
<new DOMPoint> = <DOMMatrixReadOnly>.transformPoint(<DOMPointInit>);
<new Float32Array> = <DOMMatrixReadOnly>.toFloat32Array();
<new Float64Array> = <DOMMatrixReadOnly>.toFloat64Array();
<new object> = <DOMMatrixReadOnly>.toJSON();
!extends DOMMatrix DOMMatrixReadOnly;
<new DOMMatrixReadOnly> = <DOMMatrix>;
<new DOMMatrix> = new DOMMatrix();
<new DOMMatrix> = new DOMMatrix(<union_DOMString1sequence_unrestricted_double__>);
<new DOMMatrix> = <DOMMatrix>.fromMatrix();
<new DOMMatrix> = <DOMMatrix>.fromMatrix(<DOMMatrixInit>);
<new DOMMatrix> = <DOMMatrix>.fromFloat32Array(<Float32Array>);
<new DOMMatrix> = <DOMMatrix>.fromFloat64Array(<Float64Array>);
<new unrestricted_double> = <DOMMatrix>.a;
<DOMMatrix>.a = <unrestricted_double>;
<new unrestricted_double> = <DOMMatrix>.b;
<DOMMatrix>.b = <unrestricted_double>;
<new unrestricted_double> = <DOMMatrix>.c;
<DOMMatrix>.c = <unrestricted_double>;
<new unrestricted_double> = <DOMMatrix>.d;
<DOMMatrix>.d = <unrestricted_double>;
<new unrestricted_double> = <DOMMatrix>.e;
<DOMMatrix>.e = <unrestricted_double>;
<new unrestricted_double> = <DOMMatrix>.f;
<DOMMatrix>.f = <unrestricted_double>;
<new unrestricted_double> = <DOMMatrix>.m11;
<DOMMatrix>.m11 = <unrestricted_double>;
<new unrestricted_double> = <DOMMatrix>.m12;
<DOMMatrix>.m12 = <unrestricted_double>;
<new unrestricted_double> = <DOMMatrix>.m13;
<DOMMatrix>.m13 = <unrestricted_double>;
<new unrestricted_double> = <DOMMatrix>.m14;
<DOMMatrix>.m14 = <unrestricted_double>;
<new unrestricted_double> = <DOMMatrix>.m21;
<DOMMatrix>.m21 = <unrestricted_double>;
<new unrestricted_double> = <DOMMatrix>.m22;
<DOMMatrix>.m22 = <unrestricted_double>;
<new unrestricted_double> = <DOMMatrix>.m23;
<DOMMatrix>.m23 = <unrestricted_double>;
<new unrestricted_double> = <DOMMatrix>.m24;
<DOMMatrix>.m24 = <unrestricted_double>;
<new unrestricted_double> = <DOMMatrix>.m31;
<DOMMatrix>.m31 = <unrestricted_double>;
<new unrestricted_double> = <DOMMatrix>.m32;
<DOMMatrix>.m32 = <unrestricted_double>;
<new unrestricted_double> = <DOMMatrix>.m33;
<DOMMatrix>.m33 = <unrestricted_double>;
<new unrestricted_double> = <DOMMatrix>.m34;
<DOMMatrix>.m34 = <unrestricted_double>;
<new unrestricted_double> = <DOMMatrix>.m41;
<DOMMatrix>.m41 = <unrestricted_double>;
<new unrestricted_double> = <DOMMatrix>.m42;
<DOMMatrix>.m42 = <unrestricted_double>;
<new unrestricted_double> = <DOMMatrix>.m43;
<DOMMatrix>.m43 = <unrestricted_double>;
<new unrestricted_double> = <DOMMatrix>.m44;
<DOMMatrix>.m44 = <unrestricted_double>;
<new DOMMatrix> = <DOMMatrix>.multiplySelf();
<new DOMMatrix> = <DOMMatrix>.multiplySelf(<DOMMatrixInit>);
<new DOMMatrix> = <DOMMatrix>.preMultiplySelf();
<new DOMMatrix> = <DOMMatrix>.preMultiplySelf(<DOMMatrixInit>);
<new DOMMatrix> = <DOMMatrix>.translateSelf();
<new DOMMatrix> = <DOMMatrix>.translateSelf(<unrestricted_double>);
<new DOMMatrix> = <DOMMatrix>.translateSelf(<unrestricted_double>,<unrestricted_double>);
<new DOMMatrix> = <DOMMatrix>.translateSelf(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<new DOMMatrix> = <DOMMatrix>.scaleSelf();
<new DOMMatrix> = <DOMMatrix>.scaleSelf(<unrestricted_double>);
<new DOMMatrix> = <DOMMatrix>.scaleSelf(<unrestricted_double>,<unrestricted_double>);
<new DOMMatrix> = <DOMMatrix>.scaleSelf(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<new DOMMatrix> = <DOMMatrix>.scaleSelf(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<new DOMMatrix> = <DOMMatrix>.scaleSelf(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<new DOMMatrix> = <DOMMatrix>.scaleSelf(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<new DOMMatrix> = <DOMMatrix>.scale3dSelf();
<new DOMMatrix> = <DOMMatrix>.scale3dSelf(<unrestricted_double>);
<new DOMMatrix> = <DOMMatrix>.scale3dSelf(<unrestricted_double>,<unrestricted_double>);
<new DOMMatrix> = <DOMMatrix>.scale3dSelf(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<new DOMMatrix> = <DOMMatrix>.scale3dSelf(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<new DOMMatrix> = <DOMMatrix>.rotateSelf();
<new DOMMatrix> = <DOMMatrix>.rotateSelf(<unrestricted_double>);
<new DOMMatrix> = <DOMMatrix>.rotateSelf(<unrestricted_double>,<unrestricted_double>);
<new DOMMatrix> = <DOMMatrix>.rotateSelf(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<new DOMMatrix> = <DOMMatrix>.rotateFromVectorSelf();
<new DOMMatrix> = <DOMMatrix>.rotateFromVectorSelf(<unrestricted_double>);
<new DOMMatrix> = <DOMMatrix>.rotateFromVectorSelf(<unrestricted_double>,<unrestricted_double>);
<new DOMMatrix> = <DOMMatrix>.rotateAxisAngleSelf();
<new DOMMatrix> = <DOMMatrix>.rotateAxisAngleSelf(<unrestricted_double>);
<new DOMMatrix> = <DOMMatrix>.rotateAxisAngleSelf(<unrestricted_double>,<unrestricted_double>);
<new DOMMatrix> = <DOMMatrix>.rotateAxisAngleSelf(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<new DOMMatrix> = <DOMMatrix>.rotateAxisAngleSelf(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<new DOMMatrix> = <DOMMatrix>.skewXSelf();
<new DOMMatrix> = <DOMMatrix>.skewXSelf(<unrestricted_double>);
<new DOMMatrix> = <DOMMatrix>.skewYSelf();
<new DOMMatrix> = <DOMMatrix>.skewYSelf(<unrestricted_double>);
<new DOMMatrix> = <DOMMatrix>.invertSelf();
<new DOMMatrix> = <DOMMatrix>.setMatrixValue(<DOMString>);
<new sequence_RelatedApplication_> = [<RelatedApplication>];
<new RelatedApplication> = <sequence_RelatedApplication_>[0];
<new Promise_sequence_RelatedApplication__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_RelatedApplication__> = <Navigator>.getInstalledRelatedApps();
!extends Gyroscope Sensor;
<new Sensor> = <Gyroscope>;
<new Gyroscope> = new Gyroscope();
<new Gyroscope> = new Gyroscope(<GyroscopeSensorOptions>);
<new double> = <Gyroscope>.x;
<new double> = <Gyroscope>.y;
<new double> = <Gyroscope>.z;
!extends Performance EventTarget;
<new EventTarget> = <Performance>;
<new DOMHighResTimeStamp> = <Performance>.now();
<new DOMHighResTimeStamp> = <Performance>.timeOrigin;
<new object> = <Performance>.toJSON();
<new DOMString> = <HTMLInputElement>.capture;
<HTMLInputElement>.capture = <DOMString>;
<new unsigned_long> = <HTMLAllCollection>.length;
<new Element> = <HTMLAllCollection>[<unsigned_long>];
<new union_HTMLCollection1Element_> = <HTMLCollection>;
<new union_HTMLCollection1Element_> = <Element>;
<new union_HTMLCollection1Element_> = <HTMLAllCollection>.namedItem(<DOMString>);
<new union_HTMLCollection1Element_> = <HTMLAllCollection>.item();
<new union_HTMLCollection1Element_> = <HTMLAllCollection>.item(<DOMString>);
!extends HTMLFormControlsCollection HTMLCollection;
<new HTMLCollection> = <HTMLFormControlsCollection>;
<new union_RadioNodeList1Element_> = <RadioNodeList>;
<new union_RadioNodeList1Element_> = <Element>;
<new union_RadioNodeList1Element_> = <HTMLFormControlsCollection>.namedItem(<DOMString>);
!extends RadioNodeList NodeList;
<new NodeList> = <RadioNodeList>;
<new DOMString> = <RadioNodeList>.value;
<RadioNodeList>.value = <DOMString>;
!extends HTMLOptionsCollection HTMLCollection;
<new HTMLCollection> = <HTMLOptionsCollection>;
<new unsigned_long> = <HTMLOptionsCollection>.length;
<HTMLOptionsCollection>.length = <unsigned_long>;
<HTMLOptionsCollection>[<unsigned_long>] = <HTMLOptionElement>;
<new union_HTMLOptionElement1HTMLOptGroupElement_> = <HTMLOptionElement>;
<new union_HTMLOptionElement1HTMLOptGroupElement_> = <HTMLOptGroupElement>;
<new union_HTMLElement1long_> = <HTMLElement>;
<new union_HTMLElement1long_> = <long>;
<HTMLOptionsCollection>.add(<union_HTMLOptionElement1HTMLOptGroupElement_>);
<HTMLOptionsCollection>.add(<union_HTMLOptionElement1HTMLOptGroupElement_>,<union_HTMLElement1long_>);
<HTMLOptionsCollection>.remove(<long>);
<new long> = <HTMLOptionsCollection>.selectedIndex;
<HTMLOptionsCollection>.selectedIndex = <long>;
<new unsigned_long> = <DOMStringList>.length;
<new DOMString> = <DOMStringList>.item(<unsigned_long>);
<DOMStringList>.contains(<DOMString>);
<new Location> = <Document>.location;
<new USVString> = <Document>.domain;
<Document>.domain = <USVString>;
<new USVString> = <Document>.referrer;
<new USVString> = <Document>.cookie;
<Document>.cookie = <USVString>;
<new DOMString> = <Document>.lastModified;
<new DocumentReadyState> = <Document>.readyState;
<new object> = <Document>[<DOMString>];
<new DOMString> = <Document>.title;
<Document>.title = <DOMString>;
<new DOMString> = <Document>.dir;
<Document>.dir = <DOMString>;
<new HTMLElement> = <Document>.body;
<Document>.body = <HTMLElement>;
<Document>.body = null;
<new HTMLHeadElement> = <Document>.head;
<new HTMLCollection> = <Document>.images;
<new HTMLCollection> = <Document>.embeds;
<new HTMLCollection> = <Document>.plugins;
<new HTMLCollection> = <Document>.links;
<new HTMLCollection> = <Document>.forms;
<new HTMLCollection> = <Document>.scripts;
<new NodeList> = <Document>.getElementsByName(<DOMString>);
<new HTMLOrSVGScriptElement> = <Document>.currentScript;
<new Document> = <Document>.open();
<new Document> = <Document>.open(<DOMString>);
<new Document> = <Document>.open(<DOMString>,<DOMString>);
<new WindowProxy> = <Document>.open(<USVString>,<DOMString>,<DOMString>);
# <Document>.close();
<Document>.write();
<Document>.write(<DOMString>);
<Document>.writeln();
<Document>.writeln(<DOMString>);
<new WindowProxy> = <Document>.defaultView;
<Document>.hasFocus();
<new DOMString> = <Document>.designMode;
<Document>.designMode = <DOMString>;
<Document>.execCommand(<DOMString>);
<Document>.execCommand(<DOMString>,<boolean>);
<Document>.execCommand(<DOMString>,<boolean>,<DOMString>);
<Document>.queryCommandEnabled(<DOMString>);
<Document>.queryCommandIndeterm(<DOMString>);
<Document>.queryCommandState(<DOMString>);
<Document>.queryCommandSupported(<DOMString>);
<new DOMString> = <Document>.queryCommandValue(<DOMString>);
<new boolean> = <Document>.hidden;
<new DocumentVisibilityState> = <Document>.visibilityState;
<new EventHandler> = <Document>.onreadystatechange;
<Document>.onreadystatechange = <EventHandler>;
<new EventHandler> = <Document>.onvisibilitychange;
<Document>.onvisibilitychange = <EventHandler>;
!extends HTMLElement Element;
<new Element> = <HTMLElement>;
<new DOMString> = <HTMLElement>.title;
<HTMLElement>.title = <DOMString>;
<new DOMString> = <HTMLElement>.lang;
<HTMLElement>.lang = <DOMString>;
<new boolean> = <HTMLElement>.translate;
<HTMLElement>.translate = <boolean>;
<new DOMString> = <HTMLElement>.dir;
<HTMLElement>.dir = <DOMString>;
<new union_boolean1unrestricted_double1DOMString_> = <boolean>;
<new union_boolean1unrestricted_double1DOMString_> = <unrestricted_double>;
<new union_boolean1unrestricted_double1DOMString_> = <DOMString>;
<new union_boolean1unrestricted_double1DOMString_> = <HTMLElement>.hidden;
<HTMLElement>.hidden = <union_boolean1unrestricted_double1DOMString_>;
<HTMLElement>.hidden = null;
<new boolean> = <HTMLElement>.inert;
<HTMLElement>.inert = <boolean>;
<HTMLElement>.click();
<new DOMString> = <HTMLElement>.accessKey;
<HTMLElement>.accessKey = <DOMString>;
<new DOMString> = <HTMLElement>.accessKeyLabel;
<new boolean> = <HTMLElement>.draggable;
<HTMLElement>.draggable = <boolean>;
<new boolean> = <HTMLElement>.spellcheck;
<HTMLElement>.spellcheck = <boolean>;
<new DOMString> = <HTMLElement>.autocapitalize;
<HTMLElement>.autocapitalize = <DOMString>;
<new DOMString> = <HTMLElement>.innerText;
<HTMLElement>.innerText = <DOMString>;
<new DOMString> = <HTMLElement>.outerText;
<HTMLElement>.outerText = <DOMString>;
<new ElementInternals> = <HTMLElement>.attachInternals();
!extends HTMLUnknownElement HTMLElement;
<new HTMLElement> = <HTMLUnknownElement>;
<new DOMString> = <DOMStringMap>[<DOMString>];
<DOMStringMap>[<DOMString>] = <DOMString>;
!extends HTMLHtmlElement HTMLElement;
<new HTMLElement> = <HTMLHtmlElement>;
!extends HTMLHeadElement HTMLElement;
<new HTMLElement> = <HTMLHeadElement>;
!extends HTMLTitleElement HTMLElement;
<new HTMLElement> = <HTMLTitleElement>;
<new DOMString> = <HTMLTitleElement>.text;
<HTMLTitleElement>.text = <DOMString>;
!extends HTMLBaseElement HTMLElement;
<new HTMLElement> = <HTMLBaseElement>;
<new USVString> = <HTMLBaseElement>.href;
<HTMLBaseElement>.href = <USVString>;
<new DOMString> = <HTMLBaseElement>.target;
<HTMLBaseElement>.target = <DOMString>;
!extends HTMLLinkElement HTMLElement;
<new HTMLElement> = <HTMLLinkElement>;
<new USVString> = <HTMLLinkElement>.href;
<HTMLLinkElement>.href = <USVString>;
<new DOMString> = <HTMLLinkElement>.crossOrigin;
<HTMLLinkElement>.crossOrigin = <DOMString>;
<HTMLLinkElement>.crossOrigin = null;
<new DOMString> = <HTMLLinkElement>.rel;
<HTMLLinkElement>.rel = <DOMString>;
<new DOMString> = <HTMLLinkElement>.as;
<HTMLLinkElement>.as = <DOMString>;
<new DOMTokenList> = <HTMLLinkElement>.relList;
<new DOMString> = <HTMLLinkElement>.media;
<HTMLLinkElement>.media = <DOMString>;
<new DOMString> = <HTMLLinkElement>.integrity;
<HTMLLinkElement>.integrity = <DOMString>;
<new DOMString> = <HTMLLinkElement>.hreflang;
<HTMLLinkElement>.hreflang = <DOMString>;
<new DOMString> = <HTMLLinkElement>.type;
<HTMLLinkElement>.type = <DOMString>;
<new DOMTokenList> = <HTMLLinkElement>.sizes;
<new USVString> = <HTMLLinkElement>.imageSrcset;
<HTMLLinkElement>.imageSrcset = <USVString>;
<new DOMString> = <HTMLLinkElement>.imageSizes;
<HTMLLinkElement>.imageSizes = <DOMString>;
<new DOMString> = <HTMLLinkElement>.referrerPolicy;
<HTMLLinkElement>.referrerPolicy = <DOMString>;
<new DOMTokenList> = <HTMLLinkElement>.blocking;
<new boolean> = <HTMLLinkElement>.disabled;
<HTMLLinkElement>.disabled = <boolean>;
!extends HTMLMetaElement HTMLElement;
<new HTMLElement> = <HTMLMetaElement>;
<new DOMString> = <HTMLMetaElement>.name;
<HTMLMetaElement>.name = <DOMString>;
<new DOMString> = <HTMLMetaElement>.httpEquiv;
<HTMLMetaElement>.httpEquiv = <DOMString>;
<new DOMString> = <HTMLMetaElement>.content;
<HTMLMetaElement>.content = <DOMString>;
<new DOMString> = <HTMLMetaElement>.media;
<HTMLMetaElement>.media = <DOMString>;
!extends HTMLStyleElement HTMLElement;
<new HTMLElement> = <HTMLStyleElement>;
<new boolean> = <HTMLStyleElement>.disabled;
<HTMLStyleElement>.disabled = <boolean>;
<new DOMString> = <HTMLStyleElement>.media;
<HTMLStyleElement>.media = <DOMString>;
<new DOMTokenList> = <HTMLStyleElement>.blocking;
!extends HTMLBodyElement HTMLElement;
<new HTMLElement> = <HTMLBodyElement>;
!extends HTMLHeadingElement HTMLElement;
<new HTMLElement> = <HTMLHeadingElement>;
!extends HTMLParagraphElement HTMLElement;
<new HTMLElement> = <HTMLParagraphElement>;
!extends HTMLHRElement HTMLElement;
<new HTMLElement> = <HTMLHRElement>;
!extends HTMLPreElement HTMLElement;
<new HTMLElement> = <HTMLPreElement>;
!extends HTMLQuoteElement HTMLElement;
<new HTMLElement> = <HTMLQuoteElement>;
<new USVString> = <HTMLQuoteElement>.cite;
<HTMLQuoteElement>.cite = <USVString>;
!extends HTMLOListElement HTMLElement;
<new HTMLElement> = <HTMLOListElement>;
<new boolean> = <HTMLOListElement>.reversed;
<HTMLOListElement>.reversed = <boolean>;
<new long> = <HTMLOListElement>.start;
<HTMLOListElement>.start = <long>;
<new DOMString> = <HTMLOListElement>.type;
<HTMLOListElement>.type = <DOMString>;
!extends HTMLUListElement HTMLElement;
<new HTMLElement> = <HTMLUListElement>;
!extends HTMLMenuElement HTMLElement;
<new HTMLElement> = <HTMLMenuElement>;
!extends HTMLLIElement HTMLElement;
<new HTMLElement> = <HTMLLIElement>;
<new long> = <HTMLLIElement>.value;
<HTMLLIElement>.value = <long>;
!extends HTMLDListElement HTMLElement;
<new HTMLElement> = <HTMLDListElement>;
!extends HTMLDivElement HTMLElement;
<new HTMLElement> = <HTMLDivElement>;
!extends HTMLAnchorElement HTMLElement;
<new HTMLElement> = <HTMLAnchorElement>;
<new DOMString> = <HTMLAnchorElement>.target;
<HTMLAnchorElement>.target = <DOMString>;
<new DOMString> = <HTMLAnchorElement>.download;
<HTMLAnchorElement>.download = <DOMString>;
<new USVString> = <HTMLAnchorElement>.ping;
<HTMLAnchorElement>.ping = <USVString>;
<new DOMString> = <HTMLAnchorElement>.rel;
<HTMLAnchorElement>.rel = <DOMString>;
<new DOMTokenList> = <HTMLAnchorElement>.relList;
<new DOMString> = <HTMLAnchorElement>.hreflang;
<HTMLAnchorElement>.hreflang = <DOMString>;
<new DOMString> = <HTMLAnchorElement>.type;
<HTMLAnchorElement>.type = <DOMString>;
<new DOMString> = <HTMLAnchorElement>.text;
<HTMLAnchorElement>.text = <DOMString>;
<new DOMString> = <HTMLAnchorElement>.referrerPolicy;
<HTMLAnchorElement>.referrerPolicy = <DOMString>;
!extends HTMLDataElement HTMLElement;
<new HTMLElement> = <HTMLDataElement>;
<new DOMString> = <HTMLDataElement>.value;
<HTMLDataElement>.value = <DOMString>;
!extends HTMLTimeElement HTMLElement;
<new HTMLElement> = <HTMLTimeElement>;
<new DOMString> = <HTMLTimeElement>.dateTime;
<HTMLTimeElement>.dateTime = <DOMString>;
!extends HTMLSpanElement HTMLElement;
<new HTMLElement> = <HTMLSpanElement>;
!extends HTMLBRElement HTMLElement;
<new HTMLElement> = <HTMLBRElement>;
!extends HTMLModElement HTMLElement;
<new HTMLElement> = <HTMLModElement>;
<new USVString> = <HTMLModElement>.cite;
<HTMLModElement>.cite = <USVString>;
<new DOMString> = <HTMLModElement>.dateTime;
<HTMLModElement>.dateTime = <DOMString>;
!extends HTMLPictureElement HTMLElement;
<new HTMLElement> = <HTMLPictureElement>;
!extends HTMLSourceElement HTMLElement;
<new HTMLElement> = <HTMLSourceElement>;
<new USVString> = <HTMLSourceElement>.src;
<HTMLSourceElement>.src = <USVString>;
<new DOMString> = <HTMLSourceElement>.type;
<HTMLSourceElement>.type = <DOMString>;
<new USVString> = <HTMLSourceElement>.srcset;
<HTMLSourceElement>.srcset = <USVString>;
<new DOMString> = <HTMLSourceElement>.sizes;
<HTMLSourceElement>.sizes = <DOMString>;
<new DOMString> = <HTMLSourceElement>.media;
<HTMLSourceElement>.media = <DOMString>;
<new unsigned_long> = <HTMLSourceElement>.width;
<HTMLSourceElement>.width = <unsigned_long>;
<new unsigned_long> = <HTMLSourceElement>.height;
<HTMLSourceElement>.height = <unsigned_long>;
!extends HTMLImageElement HTMLElement;
<new HTMLElement> = <HTMLImageElement>;
<new DOMString> = <HTMLImageElement>.alt;
<HTMLImageElement>.alt = <DOMString>;
<new USVString> = <HTMLImageElement>.src;
<HTMLImageElement>.src = <USVString>;
<new USVString> = <HTMLImageElement>.srcset;
<HTMLImageElement>.srcset = <USVString>;
<new DOMString> = <HTMLImageElement>.sizes;
<HTMLImageElement>.sizes = <DOMString>;
<new DOMString> = <HTMLImageElement>.crossOrigin;
<HTMLImageElement>.crossOrigin = <DOMString>;
<HTMLImageElement>.crossOrigin = null;
<new DOMString> = <HTMLImageElement>.useMap;
<HTMLImageElement>.useMap = <DOMString>;
<new boolean> = <HTMLImageElement>.isMap;
<HTMLImageElement>.isMap = <boolean>;
<new unsigned_long> = <HTMLImageElement>.width;
<HTMLImageElement>.width = <unsigned_long>;
<new unsigned_long> = <HTMLImageElement>.height;
<HTMLImageElement>.height = <unsigned_long>;
<new unsigned_long> = <HTMLImageElement>.naturalWidth;
<new unsigned_long> = <HTMLImageElement>.naturalHeight;
<new boolean> = <HTMLImageElement>.complete;
<new USVString> = <HTMLImageElement>.currentSrc;
<new DOMString> = <HTMLImageElement>.referrerPolicy;
<HTMLImageElement>.referrerPolicy = <DOMString>;
<new DOMString> = <HTMLImageElement>.decoding;
<HTMLImageElement>.decoding = <DOMString>;
<new DOMString> = <HTMLImageElement>.loading;
<HTMLImageElement>.loading = <DOMString>;
<new Promise_undefined_> = <HTMLImageElement>.decode();
!extends HTMLIFrameElement HTMLElement;
<new HTMLElement> = <HTMLIFrameElement>;
<new USVString> = <HTMLIFrameElement>.src;
<HTMLIFrameElement>.src = <USVString>;
<new DOMString> = <HTMLIFrameElement>.srcdoc;
<HTMLIFrameElement>.srcdoc = <DOMString>;
<new DOMString> = <HTMLIFrameElement>.name;
<HTMLIFrameElement>.name = <DOMString>;
<new DOMTokenList> = <HTMLIFrameElement>.sandbox;
<new DOMString> = <HTMLIFrameElement>.allow;
<HTMLIFrameElement>.allow = <DOMString>;
<new boolean> = <HTMLIFrameElement>.allowFullscreen;
<HTMLIFrameElement>.allowFullscreen = <boolean>;
<new DOMString> = <HTMLIFrameElement>.width;
<HTMLIFrameElement>.width = <DOMString>;
<new DOMString> = <HTMLIFrameElement>.height;
<HTMLIFrameElement>.height = <DOMString>;
<new DOMString> = <HTMLIFrameElement>.referrerPolicy;
<HTMLIFrameElement>.referrerPolicy = <DOMString>;
<new DOMString> = <HTMLIFrameElement>.loading;
<HTMLIFrameElement>.loading = <DOMString>;
<new Document> = <HTMLIFrameElement>.contentDocument;
<new WindowProxy> = <HTMLIFrameElement>.contentWindow;
<new Document> = <HTMLIFrameElement>.getSVGDocument();
!extends HTMLEmbedElement HTMLElement;
<new HTMLElement> = <HTMLEmbedElement>;
<new USVString> = <HTMLEmbedElement>.src;
<HTMLEmbedElement>.src = <USVString>;
<new DOMString> = <HTMLEmbedElement>.type;
<HTMLEmbedElement>.type = <DOMString>;
<new DOMString> = <HTMLEmbedElement>.width;
<HTMLEmbedElement>.width = <DOMString>;
<new DOMString> = <HTMLEmbedElement>.height;
<HTMLEmbedElement>.height = <DOMString>;
<new Document> = <HTMLEmbedElement>.getSVGDocument();
!extends HTMLObjectElement HTMLElement;
<new HTMLElement> = <HTMLObjectElement>;
<new USVString> = <HTMLObjectElement>.data;
<HTMLObjectElement>.data = <USVString>;
<new DOMString> = <HTMLObjectElement>.type;
<HTMLObjectElement>.type = <DOMString>;
<new DOMString> = <HTMLObjectElement>.name;
<HTMLObjectElement>.name = <DOMString>;
<new HTMLFormElement> = <HTMLObjectElement>.form;
<new DOMString> = <HTMLObjectElement>.width;
<HTMLObjectElement>.width = <DOMString>;
<new DOMString> = <HTMLObjectElement>.height;
<HTMLObjectElement>.height = <DOMString>;
<new Document> = <HTMLObjectElement>.contentDocument;
<new WindowProxy> = <HTMLObjectElement>.contentWindow;
<new Document> = <HTMLObjectElement>.getSVGDocument();
<new boolean> = <HTMLObjectElement>.willValidate;
<new ValidityState> = <HTMLObjectElement>.validity;
<new DOMString> = <HTMLObjectElement>.validationMessage;
<HTMLObjectElement>.checkValidity();
<HTMLObjectElement>.reportValidity();
<HTMLObjectElement>.setCustomValidity(<DOMString>);
!extends HTMLVideoElement HTMLMediaElement;
<new HTMLMediaElement> = <HTMLVideoElement>;
<new unsigned_long> = <HTMLVideoElement>.width;
<HTMLVideoElement>.width = <unsigned_long>;
<new unsigned_long> = <HTMLVideoElement>.height;
<HTMLVideoElement>.height = <unsigned_long>;
<new unsigned_long> = <HTMLVideoElement>.videoWidth;
<new unsigned_long> = <HTMLVideoElement>.videoHeight;
<new USVString> = <HTMLVideoElement>.poster;
<HTMLVideoElement>.poster = <USVString>;
<new boolean> = <HTMLVideoElement>.playsInline;
<HTMLVideoElement>.playsInline = <boolean>;
!extends HTMLAudioElement HTMLMediaElement;
<new HTMLMediaElement> = <HTMLAudioElement>;
!extends HTMLTrackElement HTMLElement;
<new HTMLElement> = <HTMLTrackElement>;
<new DOMString> = <HTMLTrackElement>.kind;
<HTMLTrackElement>.kind = <DOMString>;
<new USVString> = <HTMLTrackElement>.src;
<HTMLTrackElement>.src = <USVString>;
<new DOMString> = <HTMLTrackElement>.srclang;
<HTMLTrackElement>.srclang = <DOMString>;
<new DOMString> = <HTMLTrackElement>.label;
<HTMLTrackElement>.label = <DOMString>;
<new boolean> = <HTMLTrackElement>.default;
<HTMLTrackElement>.default = <boolean>;
<new unsigned_short> = HTMLTrackElement.NONE;
<new unsigned_short> = HTMLTrackElement.LOADING;
<new unsigned_short> = HTMLTrackElement.LOADED;
<new unsigned_short> = HTMLTrackElement.ERROR;
<new unsigned_short> = <HTMLTrackElement>.readyState;
<new TextTrack> = <HTMLTrackElement>.track;
!extends HTMLMediaElement HTMLElement;
<new HTMLElement> = <HTMLMediaElement>;
<new MediaError> = <HTMLMediaElement>.error;
<new USVString> = <HTMLMediaElement>.src;
<HTMLMediaElement>.src = <USVString>;
<new MediaProvider> = <HTMLMediaElement>.srcObject;
<HTMLMediaElement>.srcObject = <MediaProvider>;
<HTMLMediaElement>.srcObject = null;
<new USVString> = <HTMLMediaElement>.currentSrc;
<new DOMString> = <HTMLMediaElement>.crossOrigin;
<HTMLMediaElement>.crossOrigin = <DOMString>;
<HTMLMediaElement>.crossOrigin = null;
<new unsigned_short> = HTMLMediaElement.NETWORK_EMPTY;
<new unsigned_short> = HTMLMediaElement.NETWORK_IDLE;
<new unsigned_short> = HTMLMediaElement.NETWORK_LOADING;
<new unsigned_short> = HTMLMediaElement.NETWORK_NO_SOURCE;
<new unsigned_short> = <HTMLMediaElement>.networkState;
<new DOMString> = <HTMLMediaElement>.preload;
<HTMLMediaElement>.preload = <DOMString>;
<new TimeRanges> = <HTMLMediaElement>.buffered;
<HTMLMediaElement>.load();
<new CanPlayTypeResult> = <HTMLMediaElement>.canPlayType(<DOMString>);
<new unsigned_short> = HTMLMediaElement.HAVE_NOTHING;
<new unsigned_short> = HTMLMediaElement.HAVE_METADATA;
<new unsigned_short> = HTMLMediaElement.HAVE_CURRENT_DATA;
<new unsigned_short> = HTMLMediaElement.HAVE_FUTURE_DATA;
<new unsigned_short> = HTMLMediaElement.HAVE_ENOUGH_DATA;
<new unsigned_short> = <HTMLMediaElement>.readyState;
<new boolean> = <HTMLMediaElement>.seeking;
<new double> = <HTMLMediaElement>.currentTime;
<HTMLMediaElement>.currentTime = <double>;
<HTMLMediaElement>.fastSeek(<double>);
<new unrestricted_double> = <HTMLMediaElement>.duration;
<new object> = <HTMLMediaElement>.getStartDate();
<new boolean> = <HTMLMediaElement>.paused;
<new double> = <HTMLMediaElement>.defaultPlaybackRate;
<HTMLMediaElement>.defaultPlaybackRate = <double>;
<new double> = <HTMLMediaElement>.playbackRate;
<HTMLMediaElement>.playbackRate = <double>;
<new boolean> = <HTMLMediaElement>.preservesPitch;
<HTMLMediaElement>.preservesPitch = <boolean>;
<new TimeRanges> = <HTMLMediaElement>.played;
<new TimeRanges> = <HTMLMediaElement>.seekable;
<new boolean> = <HTMLMediaElement>.ended;
<new boolean> = <HTMLMediaElement>.autoplay;
<HTMLMediaElement>.autoplay = <boolean>;
<new boolean> = <HTMLMediaElement>.loop;
<HTMLMediaElement>.loop = <boolean>;
<new Promise_undefined_> = <HTMLMediaElement>.play();
<HTMLMediaElement>.pause();
<new boolean> = <HTMLMediaElement>.controls;
<HTMLMediaElement>.controls = <boolean>;
<new double> = <HTMLMediaElement>.volume;
<HTMLMediaElement>.volume = <double>;
<new boolean> = <HTMLMediaElement>.muted;
<HTMLMediaElement>.muted = <boolean>;
<new boolean> = <HTMLMediaElement>.defaultMuted;
<HTMLMediaElement>.defaultMuted = <boolean>;
<new AudioTrackList> = <HTMLMediaElement>.audioTracks;
<new VideoTrackList> = <HTMLMediaElement>.videoTracks;
<new TextTrackList> = <HTMLMediaElement>.textTracks;
<new TextTrack> = <HTMLMediaElement>.addTextTrack(<TextTrackKind>);
<new TextTrack> = <HTMLMediaElement>.addTextTrack(<TextTrackKind>,<DOMString>);
<new TextTrack> = <HTMLMediaElement>.addTextTrack(<TextTrackKind>,<DOMString>,<DOMString>);
<new unsigned_short> = MediaError.MEDIA_ERR_ABORTED;
<new unsigned_short> = MediaError.MEDIA_ERR_NETWORK;
<new unsigned_short> = MediaError.MEDIA_ERR_DECODE;
<new unsigned_short> = MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED;
<new unsigned_short> = <MediaError>.code;
<new DOMString> = <MediaError>.message;
!extends AudioTrackList EventTarget;
<new EventTarget> = <AudioTrackList>;
<new unsigned_long> = <AudioTrackList>.length;
<new AudioTrack> = <AudioTrackList>[<unsigned_long>];
<new AudioTrack> = <AudioTrackList>.getTrackById(<DOMString>);
<new EventHandler> = <AudioTrackList>.onchange;
<AudioTrackList>.onchange = <EventHandler>;
<new EventHandler> = <AudioTrackList>.onaddtrack;
<AudioTrackList>.onaddtrack = <EventHandler>;
<new EventHandler> = <AudioTrackList>.onremovetrack;
<AudioTrackList>.onremovetrack = <EventHandler>;
<new DOMString> = <AudioTrack>.id;
<new DOMString> = <AudioTrack>.kind;
<new DOMString> = <AudioTrack>.label;
<new DOMString> = <AudioTrack>.language;
<new boolean> = <AudioTrack>.enabled;
<AudioTrack>.enabled = <boolean>;
!extends VideoTrackList EventTarget;
<new EventTarget> = <VideoTrackList>;
<new unsigned_long> = <VideoTrackList>.length;
<new VideoTrack> = <VideoTrackList>[<unsigned_long>];
<new VideoTrack> = <VideoTrackList>.getTrackById(<DOMString>);
<new long> = <VideoTrackList>.selectedIndex;
<new EventHandler> = <VideoTrackList>.onchange;
<VideoTrackList>.onchange = <EventHandler>;
<new EventHandler> = <VideoTrackList>.onaddtrack;
<VideoTrackList>.onaddtrack = <EventHandler>;
<new EventHandler> = <VideoTrackList>.onremovetrack;
<VideoTrackList>.onremovetrack = <EventHandler>;
<new DOMString> = <VideoTrack>.id;
<new DOMString> = <VideoTrack>.kind;
<new DOMString> = <VideoTrack>.label;
<new DOMString> = <VideoTrack>.language;
<new boolean> = <VideoTrack>.selected;
<VideoTrack>.selected = <boolean>;
!extends TextTrackList EventTarget;
<new EventTarget> = <TextTrackList>;
<new unsigned_long> = <TextTrackList>.length;
<new TextTrack> = <TextTrackList>[<unsigned_long>];
<new TextTrack> = <TextTrackList>.getTrackById(<DOMString>);
<new EventHandler> = <TextTrackList>.onchange;
<TextTrackList>.onchange = <EventHandler>;
<new EventHandler> = <TextTrackList>.onaddtrack;
<TextTrackList>.onaddtrack = <EventHandler>;
<new EventHandler> = <TextTrackList>.onremovetrack;
<TextTrackList>.onremovetrack = <EventHandler>;
!extends TextTrack EventTarget;
<new EventTarget> = <TextTrack>;
<new TextTrackKind> = <TextTrack>.kind;
<new DOMString> = <TextTrack>.label;
<new DOMString> = <TextTrack>.language;
<new DOMString> = <TextTrack>.id;
<new DOMString> = <TextTrack>.inBandMetadataTrackDispatchType;
<new TextTrackMode> = <TextTrack>.mode;
<TextTrack>.mode = <TextTrackMode>;
<new TextTrackCueList> = <TextTrack>.cues;
<new TextTrackCueList> = <TextTrack>.activeCues;
<TextTrack>.addCue(<TextTrackCue>);
<TextTrack>.removeCue(<TextTrackCue>);
<new EventHandler> = <TextTrack>.oncuechange;
<TextTrack>.oncuechange = <EventHandler>;
<new unsigned_long> = <TextTrackCueList>.length;
<new TextTrackCue> = <TextTrackCueList>[<unsigned_long>];
<new TextTrackCue> = <TextTrackCueList>.getCueById(<DOMString>);
!extends TextTrackCue EventTarget;
<new EventTarget> = <TextTrackCue>;
<new TextTrack> = <TextTrackCue>.track;
<new DOMString> = <TextTrackCue>.id;
<TextTrackCue>.id = <DOMString>;
<new double> = <TextTrackCue>.startTime;
<TextTrackCue>.startTime = <double>;
<new unrestricted_double> = <TextTrackCue>.endTime;
<TextTrackCue>.endTime = <unrestricted_double>;
<new boolean> = <TextTrackCue>.pauseOnExit;
<TextTrackCue>.pauseOnExit = <boolean>;
<new EventHandler> = <TextTrackCue>.onenter;
<TextTrackCue>.onenter = <EventHandler>;
<new EventHandler> = <TextTrackCue>.onexit;
<TextTrackCue>.onexit = <EventHandler>;
<new unsigned_long> = <TimeRanges>.length;
<new double> = <TimeRanges>.start(<unsigned_long>);
<new double> = <TimeRanges>.end(<unsigned_long>);
!extends TrackEvent Event;
<new Event> = <TrackEvent>;
<new TrackEvent> = new TrackEvent(<DOMString>);
<new TrackEvent> = new TrackEvent(<DOMString>,<TrackEventInit>);
<new union_VideoTrack1AudioTrack1TextTrack_> = <VideoTrack>;
<new union_VideoTrack1AudioTrack1TextTrack_> = <AudioTrack>;
<new union_VideoTrack1AudioTrack1TextTrack_> = <TextTrack>;
<new union_VideoTrack1AudioTrack1TextTrack_> = <TrackEvent>.track;
!extends HTMLMapElement HTMLElement;
<new HTMLElement> = <HTMLMapElement>;
<new DOMString> = <HTMLMapElement>.name;
<HTMLMapElement>.name = <DOMString>;
<new HTMLCollection> = <HTMLMapElement>.areas;
!extends HTMLAreaElement HTMLElement;
<new HTMLElement> = <HTMLAreaElement>;
<new DOMString> = <HTMLAreaElement>.alt;
<HTMLAreaElement>.alt = <DOMString>;
<new DOMString> = <HTMLAreaElement>.coords;
<HTMLAreaElement>.coords = <DOMString>;
<new DOMString> = <HTMLAreaElement>.shape;
<HTMLAreaElement>.shape = <DOMString>;
<new DOMString> = <HTMLAreaElement>.target;
<HTMLAreaElement>.target = <DOMString>;
<new DOMString> = <HTMLAreaElement>.download;
<HTMLAreaElement>.download = <DOMString>;
<new USVString> = <HTMLAreaElement>.ping;
<HTMLAreaElement>.ping = <USVString>;
<new DOMString> = <HTMLAreaElement>.rel;
<HTMLAreaElement>.rel = <DOMString>;
<new DOMTokenList> = <HTMLAreaElement>.relList;
<new DOMString> = <HTMLAreaElement>.referrerPolicy;
<HTMLAreaElement>.referrerPolicy = <DOMString>;
!extends HTMLTableElement HTMLElement;
<new HTMLElement> = <HTMLTableElement>;
<new HTMLTableCaptionElement> = <HTMLTableElement>.caption;
<HTMLTableElement>.caption = <HTMLTableCaptionElement>;
<HTMLTableElement>.caption = null;
<new HTMLTableCaptionElement> = <HTMLTableElement>.createCaption();
<HTMLTableElement>.deleteCaption();
<new HTMLTableSectionElement> = <HTMLTableElement>.tHead;
<HTMLTableElement>.tHead = <HTMLTableSectionElement>;
<HTMLTableElement>.tHead = null;
<new HTMLTableSectionElement> = <HTMLTableElement>.createTHead();
<HTMLTableElement>.deleteTHead();
<new HTMLTableSectionElement> = <HTMLTableElement>.tFoot;
<HTMLTableElement>.tFoot = <HTMLTableSectionElement>;
<HTMLTableElement>.tFoot = null;
<new HTMLTableSectionElement> = <HTMLTableElement>.createTFoot();
<HTMLTableElement>.deleteTFoot();
<new HTMLCollection> = <HTMLTableElement>.tBodies;
<new HTMLTableSectionElement> = <HTMLTableElement>.createTBody();
<new HTMLCollection> = <HTMLTableElement>.rows;
<new HTMLTableRowElement> = <HTMLTableElement>.insertRow();
<new HTMLTableRowElement> = <HTMLTableElement>.insertRow(<long>);
<HTMLTableElement>.deleteRow(<long>);
!extends HTMLTableCaptionElement HTMLElement;
<new HTMLElement> = <HTMLTableCaptionElement>;
!extends HTMLTableColElement HTMLElement;
<new HTMLElement> = <HTMLTableColElement>;
<new unsigned_long> = <HTMLTableColElement>.span;
<HTMLTableColElement>.span = <unsigned_long>;
!extends HTMLTableSectionElement HTMLElement;
<new HTMLElement> = <HTMLTableSectionElement>;
<new HTMLCollection> = <HTMLTableSectionElement>.rows;
<new HTMLTableRowElement> = <HTMLTableSectionElement>.insertRow();
<new HTMLTableRowElement> = <HTMLTableSectionElement>.insertRow(<long>);
<HTMLTableSectionElement>.deleteRow(<long>);
!extends HTMLTableRowElement HTMLElement;
<new HTMLElement> = <HTMLTableRowElement>;
<new long> = <HTMLTableRowElement>.rowIndex;
<new long> = <HTMLTableRowElement>.sectionRowIndex;
<new HTMLCollection> = <HTMLTableRowElement>.cells;
<new HTMLTableCellElement> = <HTMLTableRowElement>.insertCell();
<new HTMLTableCellElement> = <HTMLTableRowElement>.insertCell(<long>);
<HTMLTableRowElement>.deleteCell(<long>);
!extends HTMLTableCellElement HTMLElement;
<new HTMLElement> = <HTMLTableCellElement>;
<new unsigned_long> = <HTMLTableCellElement>.colSpan;
<HTMLTableCellElement>.colSpan = <unsigned_long>;
<new unsigned_long> = <HTMLTableCellElement>.rowSpan;
<HTMLTableCellElement>.rowSpan = <unsigned_long>;
<new DOMString> = <HTMLTableCellElement>.headers;
<HTMLTableCellElement>.headers = <DOMString>;
<new long> = <HTMLTableCellElement>.cellIndex;
<new DOMString> = <HTMLTableCellElement>.scope;
<HTMLTableCellElement>.scope = <DOMString>;
<new DOMString> = <HTMLTableCellElement>.abbr;
<HTMLTableCellElement>.abbr = <DOMString>;
!extends HTMLFormElement HTMLElement;
<new HTMLElement> = <HTMLFormElement>;
<new DOMString> = <HTMLFormElement>.acceptCharset;
<HTMLFormElement>.acceptCharset = <DOMString>;
<new USVString> = <HTMLFormElement>.action;
<HTMLFormElement>.action = <USVString>;
<new DOMString> = <HTMLFormElement>.autocomplete;
<HTMLFormElement>.autocomplete = <DOMString>;
<new DOMString> = <HTMLFormElement>.enctype;
<HTMLFormElement>.enctype = <DOMString>;
<new DOMString> = <HTMLFormElement>.encoding;
<HTMLFormElement>.encoding = <DOMString>;
<new DOMString> = <HTMLFormElement>.method;
<HTMLFormElement>.method = <DOMString>;
<new DOMString> = <HTMLFormElement>.name;
<HTMLFormElement>.name = <DOMString>;
<new boolean> = <HTMLFormElement>.noValidate;
<HTMLFormElement>.noValidate = <boolean>;
<new DOMString> = <HTMLFormElement>.target;
<HTMLFormElement>.target = <DOMString>;
<new DOMString> = <HTMLFormElement>.rel;
<HTMLFormElement>.rel = <DOMString>;
<new DOMTokenList> = <HTMLFormElement>.relList;
<new HTMLFormControlsCollection> = <HTMLFormElement>.elements;
<new unsigned_long> = <HTMLFormElement>.length;
<new Element> = <HTMLFormElement>[<unsigned_long>];
<new union_RadioNodeList1Element_> = <HTMLFormElement>[<DOMString>];
<HTMLFormElement>.submit();
<HTMLFormElement>.requestSubmit();
<HTMLFormElement>.requestSubmit(<HTMLElement>);
<HTMLFormElement>.reset();
<HTMLFormElement>.checkValidity();
<HTMLFormElement>.reportValidity();
!extends HTMLLabelElement HTMLElement;
<new HTMLElement> = <HTMLLabelElement>;
<new HTMLFormElement> = <HTMLLabelElement>.form;
<new DOMString> = <HTMLLabelElement>.htmlFor;
<HTMLLabelElement>.htmlFor = <DOMString>;
<new HTMLElement> = <HTMLLabelElement>.control;
!extends HTMLInputElement HTMLElement;
<new HTMLElement> = <HTMLInputElement>;
<new DOMString> = <HTMLInputElement>.accept;
<HTMLInputElement>.accept = <DOMString>;
<new DOMString> = <HTMLInputElement>.alt;
<HTMLInputElement>.alt = <DOMString>;
<new DOMString> = <HTMLInputElement>.autocomplete;
<HTMLInputElement>.autocomplete = <DOMString>;
<new boolean> = <HTMLInputElement>.defaultChecked;
<HTMLInputElement>.defaultChecked = <boolean>;
<new boolean> = <HTMLInputElement>.checked;
<HTMLInputElement>.checked = <boolean>;
<new DOMString> = <HTMLInputElement>.dirName;
<HTMLInputElement>.dirName = <DOMString>;
<new boolean> = <HTMLInputElement>.disabled;
<HTMLInputElement>.disabled = <boolean>;
<new HTMLFormElement> = <HTMLInputElement>.form;
<new FileList> = <HTMLInputElement>.files;
<HTMLInputElement>.files = <FileList>;
<HTMLInputElement>.files = null;
<new USVString> = <HTMLInputElement>.formAction;
<HTMLInputElement>.formAction = <USVString>;
<new DOMString> = <HTMLInputElement>.formEnctype;
<HTMLInputElement>.formEnctype = <DOMString>;
<new DOMString> = <HTMLInputElement>.formMethod;
<HTMLInputElement>.formMethod = <DOMString>;
<new boolean> = <HTMLInputElement>.formNoValidate;
<HTMLInputElement>.formNoValidate = <boolean>;
<new DOMString> = <HTMLInputElement>.formTarget;
<HTMLInputElement>.formTarget = <DOMString>;
<new unsigned_long> = <HTMLInputElement>.height;
<HTMLInputElement>.height = <unsigned_long>;
<new boolean> = <HTMLInputElement>.indeterminate;
<HTMLInputElement>.indeterminate = <boolean>;
<new HTMLDataListElement> = <HTMLInputElement>.list;
<new DOMString> = <HTMLInputElement>.max;
<HTMLInputElement>.max = <DOMString>;
<new long> = <HTMLInputElement>.maxLength;
<HTMLInputElement>.maxLength = <long>;
<new DOMString> = <HTMLInputElement>.min;
<HTMLInputElement>.min = <DOMString>;
<new long> = <HTMLInputElement>.minLength;
<HTMLInputElement>.minLength = <long>;
<new boolean> = <HTMLInputElement>.multiple;
<HTMLInputElement>.multiple = <boolean>;
<new DOMString> = <HTMLInputElement>.name;
<HTMLInputElement>.name = <DOMString>;
<new DOMString> = <HTMLInputElement>.pattern;
<HTMLInputElement>.pattern = <DOMString>;
<new DOMString> = <HTMLInputElement>.placeholder;
<HTMLInputElement>.placeholder = <DOMString>;
<new boolean> = <HTMLInputElement>.readOnly;
<HTMLInputElement>.readOnly = <boolean>;
<new boolean> = <HTMLInputElement>.required;
<HTMLInputElement>.required = <boolean>;
<new unsigned_long> = <HTMLInputElement>.size;
<HTMLInputElement>.size = <unsigned_long>;
<new USVString> = <HTMLInputElement>.src;
<HTMLInputElement>.src = <USVString>;
<new DOMString> = <HTMLInputElement>.step;
<HTMLInputElement>.step = <DOMString>;
<new DOMString> = <HTMLInputElement>.type;
<HTMLInputElement>.type = <DOMString>;
<new DOMString> = <HTMLInputElement>.defaultValue;
<HTMLInputElement>.defaultValue = <DOMString>;
<new DOMString> = <HTMLInputElement>.value;
<HTMLInputElement>.value = <DOMString>;
<new object> = <HTMLInputElement>.valueAsDate;
<HTMLInputElement>.valueAsDate = <object>;
<HTMLInputElement>.valueAsDate = null;
<new unrestricted_double> = <HTMLInputElement>.valueAsNumber;
<HTMLInputElement>.valueAsNumber = <unrestricted_double>;
<new unsigned_long> = <HTMLInputElement>.width;
<HTMLInputElement>.width = <unsigned_long>;
<HTMLInputElement>.stepUp();
<HTMLInputElement>.stepUp(<long>);
<HTMLInputElement>.stepDown();
<HTMLInputElement>.stepDown(<long>);
<new boolean> = <HTMLInputElement>.willValidate;
<new ValidityState> = <HTMLInputElement>.validity;
<new DOMString> = <HTMLInputElement>.validationMessage;
<HTMLInputElement>.checkValidity();
<HTMLInputElement>.reportValidity();
<HTMLInputElement>.setCustomValidity(<DOMString>);
<new NodeList> = <HTMLInputElement>.labels;
<HTMLInputElement>.select();
<new unsigned_long> = <HTMLInputElement>.selectionStart;
<HTMLInputElement>.selectionStart = <unsigned_long>;
<HTMLInputElement>.selectionStart = null;
<new unsigned_long> = <HTMLInputElement>.selectionEnd;
<HTMLInputElement>.selectionEnd = <unsigned_long>;
<HTMLInputElement>.selectionEnd = null;
<new DOMString> = <HTMLInputElement>.selectionDirection;
<HTMLInputElement>.selectionDirection = <DOMString>;
<HTMLInputElement>.selectionDirection = null;
<HTMLInputElement>.setRangeText(<DOMString>);
<HTMLInputElement>.setRangeText(<DOMString>,<unsigned_long>,<unsigned_long>);
<HTMLInputElement>.setRangeText(<DOMString>,<unsigned_long>,<unsigned_long>,<SelectionMode>);
<HTMLInputElement>.setSelectionRange(<unsigned_long>,<unsigned_long>);
<HTMLInputElement>.setSelectionRange(<unsigned_long>,<unsigned_long>,<DOMString>);
<HTMLInputElement>.showPicker();
!extends HTMLButtonElement HTMLElement;
<new HTMLElement> = <HTMLButtonElement>;
<new boolean> = <HTMLButtonElement>.disabled;
<HTMLButtonElement>.disabled = <boolean>;
<new HTMLFormElement> = <HTMLButtonElement>.form;
<new USVString> = <HTMLButtonElement>.formAction;
<HTMLButtonElement>.formAction = <USVString>;
<new DOMString> = <HTMLButtonElement>.formEnctype;
<HTMLButtonElement>.formEnctype = <DOMString>;
<new DOMString> = <HTMLButtonElement>.formMethod;
<HTMLButtonElement>.formMethod = <DOMString>;
<new boolean> = <HTMLButtonElement>.formNoValidate;
<HTMLButtonElement>.formNoValidate = <boolean>;
<new DOMString> = <HTMLButtonElement>.formTarget;
<HTMLButtonElement>.formTarget = <DOMString>;
<new DOMString> = <HTMLButtonElement>.name;
<HTMLButtonElement>.name = <DOMString>;
<new DOMString> = <HTMLButtonElement>.type;
<HTMLButtonElement>.type = <DOMString>;
<new DOMString> = <HTMLButtonElement>.value;
<HTMLButtonElement>.value = <DOMString>;
<new boolean> = <HTMLButtonElement>.willValidate;
<new ValidityState> = <HTMLButtonElement>.validity;
<new DOMString> = <HTMLButtonElement>.validationMessage;
<HTMLButtonElement>.checkValidity();
<HTMLButtonElement>.reportValidity();
<HTMLButtonElement>.setCustomValidity(<DOMString>);
<new NodeList> = <HTMLButtonElement>.labels;
!extends HTMLSelectElement HTMLElement;
<new HTMLElement> = <HTMLSelectElement>;
<new DOMString> = <HTMLSelectElement>.autocomplete;
<HTMLSelectElement>.autocomplete = <DOMString>;
<new boolean> = <HTMLSelectElement>.disabled;
<HTMLSelectElement>.disabled = <boolean>;
<new HTMLFormElement> = <HTMLSelectElement>.form;
<new boolean> = <HTMLSelectElement>.multiple;
<HTMLSelectElement>.multiple = <boolean>;
<new DOMString> = <HTMLSelectElement>.name;
<HTMLSelectElement>.name = <DOMString>;
<new boolean> = <HTMLSelectElement>.required;
<HTMLSelectElement>.required = <boolean>;
<new unsigned_long> = <HTMLSelectElement>.size;
<HTMLSelectElement>.size = <unsigned_long>;
<new DOMString> = <HTMLSelectElement>.type;
<new HTMLOptionsCollection> = <HTMLSelectElement>.options;
<new unsigned_long> = <HTMLSelectElement>.length;
<HTMLSelectElement>.length = <unsigned_long>;
<new HTMLOptionElement> = <HTMLSelectElement>.item(<unsigned_long>);
<new HTMLOptionElement> = <HTMLSelectElement>.namedItem(<DOMString>);
<HTMLSelectElement>.add(<union_HTMLOptionElement1HTMLOptGroupElement_>);
<HTMLSelectElement>.add(<union_HTMLOptionElement1HTMLOptGroupElement_>,<union_HTMLElement1long_>);
<HTMLSelectElement>.remove();
<HTMLSelectElement>.remove(<long>);
<HTMLSelectElement>[<unsigned_long>] = <HTMLOptionElement>;
<new HTMLCollection> = <HTMLSelectElement>.selectedOptions;
<new long> = <HTMLSelectElement>.selectedIndex;
<HTMLSelectElement>.selectedIndex = <long>;
<new DOMString> = <HTMLSelectElement>.value;
<HTMLSelectElement>.value = <DOMString>;
<new boolean> = <HTMLSelectElement>.willValidate;
<new ValidityState> = <HTMLSelectElement>.validity;
<new DOMString> = <HTMLSelectElement>.validationMessage;
<HTMLSelectElement>.checkValidity();
<HTMLSelectElement>.reportValidity();
<HTMLSelectElement>.setCustomValidity(<DOMString>);
<new NodeList> = <HTMLSelectElement>.labels;
!extends HTMLDataListElement HTMLElement;
<new HTMLElement> = <HTMLDataListElement>;
<new HTMLCollection> = <HTMLDataListElement>.options;
!extends HTMLOptGroupElement HTMLElement;
<new HTMLElement> = <HTMLOptGroupElement>;
<new boolean> = <HTMLOptGroupElement>.disabled;
<HTMLOptGroupElement>.disabled = <boolean>;
<new DOMString> = <HTMLOptGroupElement>.label;
<HTMLOptGroupElement>.label = <DOMString>;
!extends HTMLOptionElement HTMLElement;
<new HTMLElement> = <HTMLOptionElement>;
<new boolean> = <HTMLOptionElement>.disabled;
<HTMLOptionElement>.disabled = <boolean>;
<new HTMLFormElement> = <HTMLOptionElement>.form;
<new DOMString> = <HTMLOptionElement>.label;
<HTMLOptionElement>.label = <DOMString>;
<new boolean> = <HTMLOptionElement>.defaultSelected;
<HTMLOptionElement>.defaultSelected = <boolean>;
<new boolean> = <HTMLOptionElement>.selected;
<HTMLOptionElement>.selected = <boolean>;
<new DOMString> = <HTMLOptionElement>.value;
<HTMLOptionElement>.value = <DOMString>;
<new DOMString> = <HTMLOptionElement>.text;
<HTMLOptionElement>.text = <DOMString>;
<new long> = <HTMLOptionElement>.index;
!extends HTMLTextAreaElement HTMLElement;
<new HTMLElement> = <HTMLTextAreaElement>;
<new DOMString> = <HTMLTextAreaElement>.autocomplete;
<HTMLTextAreaElement>.autocomplete = <DOMString>;
<new unsigned_long> = <HTMLTextAreaElement>.cols;
<HTMLTextAreaElement>.cols = <unsigned_long>;
<new DOMString> = <HTMLTextAreaElement>.dirName;
<HTMLTextAreaElement>.dirName = <DOMString>;
<new boolean> = <HTMLTextAreaElement>.disabled;
<HTMLTextAreaElement>.disabled = <boolean>;
<new HTMLFormElement> = <HTMLTextAreaElement>.form;
<new long> = <HTMLTextAreaElement>.maxLength;
<HTMLTextAreaElement>.maxLength = <long>;
<new long> = <HTMLTextAreaElement>.minLength;
<HTMLTextAreaElement>.minLength = <long>;
<new DOMString> = <HTMLTextAreaElement>.name;
<HTMLTextAreaElement>.name = <DOMString>;
<new DOMString> = <HTMLTextAreaElement>.placeholder;
<HTMLTextAreaElement>.placeholder = <DOMString>;
<new boolean> = <HTMLTextAreaElement>.readOnly;
<HTMLTextAreaElement>.readOnly = <boolean>;
<new boolean> = <HTMLTextAreaElement>.required;
<HTMLTextAreaElement>.required = <boolean>;
<new unsigned_long> = <HTMLTextAreaElement>.rows;
<HTMLTextAreaElement>.rows = <unsigned_long>;
<new DOMString> = <HTMLTextAreaElement>.wrap;
<HTMLTextAreaElement>.wrap = <DOMString>;
<new DOMString> = <HTMLTextAreaElement>.type;
<new DOMString> = <HTMLTextAreaElement>.defaultValue;
<HTMLTextAreaElement>.defaultValue = <DOMString>;
<new DOMString> = <HTMLTextAreaElement>.value;
<HTMLTextAreaElement>.value = <DOMString>;
<new unsigned_long> = <HTMLTextAreaElement>.textLength;
<new boolean> = <HTMLTextAreaElement>.willValidate;
<new ValidityState> = <HTMLTextAreaElement>.validity;
<new DOMString> = <HTMLTextAreaElement>.validationMessage;
<HTMLTextAreaElement>.checkValidity();
<HTMLTextAreaElement>.reportValidity();
<HTMLTextAreaElement>.setCustomValidity(<DOMString>);
<new NodeList> = <HTMLTextAreaElement>.labels;
<HTMLTextAreaElement>.select();
<new unsigned_long> = <HTMLTextAreaElement>.selectionStart;
<HTMLTextAreaElement>.selectionStart = <unsigned_long>;
<new unsigned_long> = <HTMLTextAreaElement>.selectionEnd;
<HTMLTextAreaElement>.selectionEnd = <unsigned_long>;
<new DOMString> = <HTMLTextAreaElement>.selectionDirection;
<HTMLTextAreaElement>.selectionDirection = <DOMString>;
<HTMLTextAreaElement>.setRangeText(<DOMString>);
<HTMLTextAreaElement>.setRangeText(<DOMString>,<unsigned_long>,<unsigned_long>);
<HTMLTextAreaElement>.setRangeText(<DOMString>,<unsigned_long>,<unsigned_long>,<SelectionMode>);
<HTMLTextAreaElement>.setSelectionRange(<unsigned_long>,<unsigned_long>);
<HTMLTextAreaElement>.setSelectionRange(<unsigned_long>,<unsigned_long>,<DOMString>);
!extends HTMLOutputElement HTMLElement;
<new HTMLElement> = <HTMLOutputElement>;
<new DOMTokenList> = <HTMLOutputElement>.htmlFor;
<new HTMLFormElement> = <HTMLOutputElement>.form;
<new DOMString> = <HTMLOutputElement>.name;
<HTMLOutputElement>.name = <DOMString>;
<new DOMString> = <HTMLOutputElement>.type;
<new DOMString> = <HTMLOutputElement>.defaultValue;
<HTMLOutputElement>.defaultValue = <DOMString>;
<new DOMString> = <HTMLOutputElement>.value;
<HTMLOutputElement>.value = <DOMString>;
<new boolean> = <HTMLOutputElement>.willValidate;
<new ValidityState> = <HTMLOutputElement>.validity;
<new DOMString> = <HTMLOutputElement>.validationMessage;
<HTMLOutputElement>.checkValidity();
<HTMLOutputElement>.reportValidity();
<HTMLOutputElement>.setCustomValidity(<DOMString>);
<new NodeList> = <HTMLOutputElement>.labels;
!extends HTMLProgressElement HTMLElement;
<new HTMLElement> = <HTMLProgressElement>;
<new double> = <HTMLProgressElement>.value;
<HTMLProgressElement>.value = <double>;
<new double> = <HTMLProgressElement>.max;
<HTMLProgressElement>.max = <double>;
<new double> = <HTMLProgressElement>.position;
<new NodeList> = <HTMLProgressElement>.labels;
!extends HTMLMeterElement HTMLElement;
<new HTMLElement> = <HTMLMeterElement>;
<new double> = <HTMLMeterElement>.value;
<HTMLMeterElement>.value = <double>;
<new double> = <HTMLMeterElement>.min;
<HTMLMeterElement>.min = <double>;
<new double> = <HTMLMeterElement>.max;
<HTMLMeterElement>.max = <double>;
<new double> = <HTMLMeterElement>.low;
<HTMLMeterElement>.low = <double>;
<new double> = <HTMLMeterElement>.high;
<HTMLMeterElement>.high = <double>;
<new double> = <HTMLMeterElement>.optimum;
<HTMLMeterElement>.optimum = <double>;
<new NodeList> = <HTMLMeterElement>.labels;
!extends HTMLFieldSetElement HTMLElement;
<new HTMLElement> = <HTMLFieldSetElement>;
<new boolean> = <HTMLFieldSetElement>.disabled;
<HTMLFieldSetElement>.disabled = <boolean>;
<new HTMLFormElement> = <HTMLFieldSetElement>.form;
<new DOMString> = <HTMLFieldSetElement>.name;
<HTMLFieldSetElement>.name = <DOMString>;
<new DOMString> = <HTMLFieldSetElement>.type;
<new HTMLCollection> = <HTMLFieldSetElement>.elements;
<new boolean> = <HTMLFieldSetElement>.willValidate;
<new ValidityState> = <HTMLFieldSetElement>.validity;
<new DOMString> = <HTMLFieldSetElement>.validationMessage;
<HTMLFieldSetElement>.checkValidity();
<HTMLFieldSetElement>.reportValidity();
<HTMLFieldSetElement>.setCustomValidity(<DOMString>);
!extends HTMLLegendElement HTMLElement;
<new HTMLElement> = <HTMLLegendElement>;
<new HTMLFormElement> = <HTMLLegendElement>.form;
<new boolean> = <ValidityState>.valueMissing;
<new boolean> = <ValidityState>.typeMismatch;
<new boolean> = <ValidityState>.patternMismatch;
<new boolean> = <ValidityState>.tooLong;
<new boolean> = <ValidityState>.tooShort;
<new boolean> = <ValidityState>.rangeUnderflow;
<new boolean> = <ValidityState>.rangeOverflow;
<new boolean> = <ValidityState>.stepMismatch;
<new boolean> = <ValidityState>.badInput;
<new boolean> = <ValidityState>.customError;
<new boolean> = <ValidityState>.valid;
!extends SubmitEvent Event;
<new Event> = <SubmitEvent>;
<new SubmitEvent> = new SubmitEvent(<DOMString>);
<new SubmitEvent> = new SubmitEvent(<DOMString>,<SubmitEventInit>);
<new HTMLElement> = <SubmitEvent>.submitter;
!extends FormDataEvent Event;
<new Event> = <FormDataEvent>;
<new FormDataEvent> = new FormDataEvent(<DOMString>,<FormDataEventInit>);
<new FormData> = <FormDataEvent>.formData;
!extends HTMLDetailsElement HTMLElement;
<new HTMLElement> = <HTMLDetailsElement>;
<new boolean> = <HTMLDetailsElement>.open;
<HTMLDetailsElement>.open = <boolean>;
!extends HTMLDialogElement HTMLElement;
<new HTMLElement> = <HTMLDialogElement>;
<new boolean> = <HTMLDialogElement>.open;
<HTMLDialogElement>.open = <boolean>;
<new DOMString> = <HTMLDialogElement>.returnValue;
<HTMLDialogElement>.returnValue = <DOMString>;
<HTMLDialogElement>.show();
<HTMLDialogElement>.showModal();
<HTMLDialogElement>.close();
<HTMLDialogElement>.close(<DOMString>);
!extends HTMLScriptElement HTMLElement;
<new HTMLElement> = <HTMLScriptElement>;
<new USVString> = <HTMLScriptElement>.src;
<HTMLScriptElement>.src = <USVString>;
<new DOMString> = <HTMLScriptElement>.type;
<HTMLScriptElement>.type = <DOMString>;
<new boolean> = <HTMLScriptElement>.noModule;
<HTMLScriptElement>.noModule = <boolean>;
<new boolean> = <HTMLScriptElement>.async;
<HTMLScriptElement>.async = <boolean>;
<new boolean> = <HTMLScriptElement>.defer;
<HTMLScriptElement>.defer = <boolean>;
<new DOMString> = <HTMLScriptElement>.crossOrigin;
<HTMLScriptElement>.crossOrigin = <DOMString>;
<HTMLScriptElement>.crossOrigin = null;
<new DOMString> = <HTMLScriptElement>.text;
<HTMLScriptElement>.text = <DOMString>;
<new DOMString> = <HTMLScriptElement>.integrity;
<HTMLScriptElement>.integrity = <DOMString>;
<new DOMString> = <HTMLScriptElement>.referrerPolicy;
<HTMLScriptElement>.referrerPolicy = <DOMString>;
<new DOMTokenList> = <HTMLScriptElement>.blocking;
<HTMLScriptElement>.supports(<DOMString>);
!extends HTMLTemplateElement HTMLElement;
<new HTMLElement> = <HTMLTemplateElement>;
<new DocumentFragment> = <HTMLTemplateElement>.content;
!extends HTMLSlotElement HTMLElement;
<new HTMLElement> = <HTMLSlotElement>;
<new DOMString> = <HTMLSlotElement>.name;
<HTMLSlotElement>.name = <DOMString>;
<new sequence_Node_> = <HTMLSlotElement>.assignedNodes();
<new sequence_Node_> = <HTMLSlotElement>.assignedNodes(<AssignedNodesOptions>);
<new sequence_Element_> = <HTMLSlotElement>.assignedElements();
<new sequence_Element_> = <HTMLSlotElement>.assignedElements(<AssignedNodesOptions>);
<new union_Element1Text_> = <Element>;
<new union_Element1Text_> = <Text>;
<HTMLSlotElement>.assign();
<HTMLSlotElement>.assign(<union_Element1Text_>);
!extends HTMLCanvasElement HTMLElement;
<new HTMLElement> = <HTMLCanvasElement>;
<new unsigned_long> = <HTMLCanvasElement>.width;
<HTMLCanvasElement>.width = <unsigned_long>;
<new unsigned_long> = <HTMLCanvasElement>.height;
<HTMLCanvasElement>.height = <unsigned_long>;
<new RenderingContext> = <HTMLCanvasElement>.getContext(<DOMString>);
<new RenderingContext> = <HTMLCanvasElement>.getContext(<DOMString>,<any>);
<new USVString> = <HTMLCanvasElement>.toDataURL();
<new USVString> = <HTMLCanvasElement>.toDataURL(<DOMString>);
<new USVString> = <HTMLCanvasElement>.toDataURL(<DOMString>,<any>);
<HTMLCanvasElement>.toBlob(<BlobCallback>);
<HTMLCanvasElement>.toBlob(<BlobCallback>,<DOMString>);
<HTMLCanvasElement>.toBlob(<BlobCallback>,<DOMString>,<any>);
<new OffscreenCanvas> = <HTMLCanvasElement>.transferControlToOffscreen();
<new HTMLCanvasElement> = <CanvasRenderingContext2D>.canvas;
<new CanvasRenderingContext2DSettings> = <CanvasRenderingContext2D>.getContextAttributes();
<CanvasGradient>.addColorStop(<double>,<DOMString>);
<CanvasPattern>.setTransform();
<CanvasPattern>.setTransform(<DOMMatrix2DInit>);
<new double> = <TextMetrics>.width;
<new double> = <TextMetrics>.actualBoundingBoxLeft;
<new double> = <TextMetrics>.actualBoundingBoxRight;
<new double> = <TextMetrics>.fontBoundingBoxAscent;
<new double> = <TextMetrics>.fontBoundingBoxDescent;
<new double> = <TextMetrics>.actualBoundingBoxAscent;
<new double> = <TextMetrics>.actualBoundingBoxDescent;
<new double> = <TextMetrics>.emHeightAscent;
<new double> = <TextMetrics>.emHeightDescent;
<new double> = <TextMetrics>.hangingBaseline;
<new double> = <TextMetrics>.alphabeticBaseline;
<new double> = <TextMetrics>.ideographicBaseline;
<new ImageData> = new ImageData(<unsigned_long>,<unsigned_long>);
<new ImageData> = new ImageData(<unsigned_long>,<unsigned_long>,<ImageDataSettings>);
<new ImageData> = new ImageData(<Uint8ClampedArray>,<unsigned_long>);
<new ImageData> = new ImageData(<Uint8ClampedArray>,<unsigned_long>,<unsigned_long>);
<new ImageData> = new ImageData(<Uint8ClampedArray>,<unsigned_long>,<unsigned_long>,<ImageDataSettings>);
<new unsigned_long> = <ImageData>.width;
<new unsigned_long> = <ImageData>.height;
<new Uint8ClampedArray> = <ImageData>.data;
<new PredefinedColorSpace> = <ImageData>.colorSpace;
<new union_Path2D1DOMString_> = <Path2D>;
<new union_Path2D1DOMString_> = <DOMString>;
<new Path2D> = new Path2D();
<new Path2D> = new Path2D(<union_Path2D1DOMString_>);
<Path2D>.addPath(<Path2D>);
<Path2D>.addPath(<Path2D>,<DOMMatrix2DInit>);
<new union_HTMLCanvasElement1OffscreenCanvas_> = <HTMLCanvasElement>;
<new union_HTMLCanvasElement1OffscreenCanvas_> = <OffscreenCanvas>;
<new union_HTMLCanvasElement1OffscreenCanvas_> = <ImageBitmapRenderingContext>.canvas;
<ImageBitmapRenderingContext>.transferFromImageBitmap(<ImageBitmap>);
!extends OffscreenCanvas EventTarget;
<new EventTarget> = <OffscreenCanvas>;
<new OffscreenCanvas> = new OffscreenCanvas(<unsigned_long_long>,<unsigned_long_long>);
<new unsigned_long_long> = <OffscreenCanvas>.width;
<OffscreenCanvas>.width = <unsigned_long_long>;
<new unsigned_long_long> = <OffscreenCanvas>.height;
<OffscreenCanvas>.height = <unsigned_long_long>;
<new OffscreenRenderingContext> = <OffscreenCanvas>.getContext(<OffscreenRenderingContextId>);
<new OffscreenRenderingContext> = <OffscreenCanvas>.getContext(<OffscreenRenderingContextId>,<any>);
<new ImageBitmap> = <OffscreenCanvas>.transferToImageBitmap();
<new Promise_Blob_> = <OffscreenCanvas>.convertToBlob();
<new Promise_Blob_> = <OffscreenCanvas>.convertToBlob(<ImageEncodeOptions>);
<new EventHandler> = <OffscreenCanvas>.oncontextlost;
<OffscreenCanvas>.oncontextlost = <EventHandler>;
<new EventHandler> = <OffscreenCanvas>.oncontextrestored;
<OffscreenCanvas>.oncontextrestored = <EventHandler>;
<OffscreenCanvasRenderingContext2D>.commit();
<new OffscreenCanvas> = <OffscreenCanvasRenderingContext2D>.canvas;
<CustomElementRegistry>.define(<DOMString>,<CustomElementConstructor>);
<CustomElementRegistry>.define(<DOMString>,<CustomElementConstructor>,<ElementDefinitionOptions>);
<new union_CustomElementConstructor1undefined_> = <CustomElementConstructor>;
<new union_CustomElementConstructor1undefined_> = <undefined>;
<new union_CustomElementConstructor1undefined_> = <CustomElementRegistry>.get(<DOMString>);
<new Promise_CustomElementConstructor_> = new Promise(function(x){console.log("ok")});
<new Promise_CustomElementConstructor_> = <CustomElementRegistry>.whenDefined(<DOMString>);
<CustomElementRegistry>.upgrade(<Node>);
<new ShadowRoot> = <ElementInternals>.shadowRoot;
<new union_File1USVString1FormData_> = <File>;
<new union_File1USVString1FormData_> = <USVString>;
<new union_File1USVString1FormData_> = <FormData>;
<ElementInternals>.setFormValue(<union_File1USVString1FormData_>);
<ElementInternals>.setFormValue(<union_File1USVString1FormData_>,<union_File1USVString1FormData_>);
<new HTMLFormElement> = <ElementInternals>.form;
<ElementInternals>.setValidity();
<ElementInternals>.setValidity(<ValidityStateFlags>);
<ElementInternals>.setValidity(<ValidityStateFlags>,<DOMString>);
<ElementInternals>.setValidity(<ValidityStateFlags>,<DOMString>,<HTMLElement>);
<new boolean> = <ElementInternals>.willValidate;
<new ValidityState> = <ElementInternals>.validity;
<new DOMString> = <ElementInternals>.validationMessage;
<ElementInternals>.checkValidity();
<ElementInternals>.reportValidity();
<new NodeList> = <ElementInternals>.labels;
<new boolean> = <UserActivation>.hasBeenActive;
<new boolean> = <UserActivation>.isActive;
<new UserActivation> = <Navigator>.userActivation;
<new DataTransfer> = new DataTransfer();
<new DOMString> = <DataTransfer>.dropEffect;
<DataTransfer>.dropEffect = <DOMString>;
<new DOMString> = <DataTransfer>.effectAllowed;
<DataTransfer>.effectAllowed = <DOMString>;
<new DataTransferItemList> = <DataTransfer>.items;
<DataTransfer>.setDragImage(<Element>,<long>,<long>);
<new FrozenArray_DOMString_> = <DataTransfer>.types;
<new DOMString> = <DataTransfer>.getData(<DOMString>);
<DataTransfer>.setData(<DOMString>,<DOMString>);
<DataTransfer>.clearData();
<DataTransfer>.clearData(<DOMString>);
<new FileList> = <DataTransfer>.files;
<new unsigned_long> = <DataTransferItemList>.length;
<new DataTransferItem> = <DataTransferItemList>[<unsigned_long>];
<new DataTransferItem> = <DataTransferItemList>.add(<DOMString>,<DOMString>);
<new DataTransferItem> = <DataTransferItemList>.add(<File>);
<DataTransferItemList>.remove(<unsigned_long>);
<DataTransferItemList>.clear();
<new DOMString> = <DataTransferItem>.kind;
<new DOMString> = <DataTransferItem>.type;
<DataTransferItem>.getAsString(<FunctionStringCallback>);
<new File> = <DataTransferItem>.getAsFile();
!extends DragEvent MouseEvent;
<new MouseEvent> = <DragEvent>;
<new DragEvent> = new DragEvent(<DOMString>);
<new DragEvent> = new DragEvent(<DOMString>,<DragEventInit>);
<new DataTransfer> = <DragEvent>.dataTransfer;
!extends Window EventTarget;
<new EventTarget> = <Window>;
<new WindowProxy> = <Window>.window;
<new WindowProxy> = <Window>.self;
<new Document> = <Window>.document;
<new DOMString> = <Window>.name;
<Window>.name = <DOMString>;
<new Location> = <Window>.location;
<new History> = <Window>.history;
<new CustomElementRegistry> = <Window>.customElements;
<new BarProp> = <Window>.locationbar;
<new BarProp> = <Window>.menubar;
<new BarProp> = <Window>.personalbar;
<new BarProp> = <Window>.scrollbars;
<new BarProp> = <Window>.statusbar;
<new BarProp> = <Window>.toolbar;
<new DOMString> = <Window>.status;
<Window>.status = <DOMString>;
# <Window>.close();
<new boolean> = <Window>.closed;
<Window>.stop();
<Window>.focus();
<Window>.blur();
<new WindowProxy> = <Window>.frames;
<new unsigned_long> = <Window>.length;
<new WindowProxy> = <Window>.top;
<new any> = <Window>.opener;
<Window>.opener = <any>;
<new WindowProxy> = <Window>.parent;
<new Element> = <Window>.frameElement;
<new WindowProxy> = <Window>.open();
<new WindowProxy> = <Window>.open(<USVString>);
<new WindowProxy> = <Window>.open(<USVString>,<DOMString>);
<new WindowProxy> = <Window>.open(<USVString>,<DOMString>,<DOMString>);
<new object> = <Window>[<DOMString>];
<new Navigator> = <Window>.navigator;
<new Navigator> = <Window>.clientInformation;
<new boolean> = <Window>.originAgentCluster;
# <Window>.alert();
# <Window>.alert(<DOMString>);
# <Window>.confirm();
# <Window>.confirm(<DOMString>);
# <new DOMString> = <Window>.prompt();
# <new DOMString> = <Window>.prompt(<DOMString>);
# <new DOMString> = <Window>.prompt(<DOMString>,<DOMString>);
<Window>.print();
<new sequence_object_> = [<object>];
<new object> = <sequence_object_>[0];
<Window>.postMessage(<any>,<USVString>);
<Window>.postMessage(<any>,<USVString>,<sequence_object_>);
<Window>.postMessage(<any>);
<Window>.postMessage(<any>,<WindowPostMessageOptions>);
<new boolean> = <BarProp>.visible;
<new USVString> = <Location>.href;
# <Location>.href = <USVString>;
<new USVString> = <Location>.origin;
<new USVString> = <Location>.protocol;
# <Location>.protocol = <USVString>;
<new USVString> = <Location>.host;
# <Location>.host = <USVString>;
<new USVString> = <Location>.hostname;
# <Location>.hostname = <USVString>;
<new USVString> = <Location>.port;
# <Location>.port = <USVString>;
<new USVString> = <Location>.pathname;
# <Location>.pathname = <USVString>;
<new USVString> = <Location>.search;
# <Location>.search = <USVString>;
<new USVString> = <Location>.hash;
# <Location>.hash = <USVString>;
# <Location>.assign(<USVString>);
# <Location>.replace(<USVString>);
# <Location>.reload();
<new DOMStringList> = <Location>.ancestorOrigins;
<new unsigned_long> = <History>.length;
<new ScrollRestoration> = <History>.scrollRestoration;
<History>.scrollRestoration = <ScrollRestoration>;
<new any> = <History>.state;
<History>.go();
<History>.go(<long>);
<History>.back();
<History>.forward();
<History>.pushState(<any>,<DOMString>);
<History>.pushState(<any>,<DOMString>,<USVString>);
<History>.replaceState(<any>,<DOMString>);
<History>.replaceState(<any>,<DOMString>,<USVString>);
!extends PopStateEvent Event;
<new Event> = <PopStateEvent>;
<new PopStateEvent> = new PopStateEvent(<DOMString>);
<new PopStateEvent> = new PopStateEvent(<DOMString>,<PopStateEventInit>);
<new any> = <PopStateEvent>.state;
!extends HashChangeEvent Event;
<new Event> = <HashChangeEvent>;
<new HashChangeEvent> = new HashChangeEvent(<DOMString>);
<new HashChangeEvent> = new HashChangeEvent(<DOMString>,<HashChangeEventInit>);
<new USVString> = <HashChangeEvent>.oldURL;
<new USVString> = <HashChangeEvent>.newURL;
!extends PageTransitionEvent Event;
<new Event> = <PageTransitionEvent>;
<new PageTransitionEvent> = new PageTransitionEvent(<DOMString>);
<new PageTransitionEvent> = new PageTransitionEvent(<DOMString>,<PageTransitionEventInit>);
<new boolean> = <PageTransitionEvent>.persisted;
!extends BeforeUnloadEvent Event;
<new Event> = <BeforeUnloadEvent>;
<new DOMString> = <BeforeUnloadEvent>.returnValue;
<BeforeUnloadEvent>.returnValue = <DOMString>;
!extends ErrorEvent Event;
<new Event> = <ErrorEvent>;
<new ErrorEvent> = new ErrorEvent(<DOMString>);
<new ErrorEvent> = new ErrorEvent(<DOMString>,<ErrorEventInit>);
<new DOMString> = <ErrorEvent>.message;
<new USVString> = <ErrorEvent>.filename;
<new unsigned_long> = <ErrorEvent>.lineno;
<new unsigned_long> = <ErrorEvent>.colno;
<new any> = <ErrorEvent>.error;
!extends PromiseRejectionEvent Event;
<new Event> = <PromiseRejectionEvent>;
<new PromiseRejectionEvent> = new PromiseRejectionEvent(<DOMString>,<PromiseRejectionEventInit>);
<new Promise_any_> = <PromiseRejectionEvent>.promise;
<new any> = <PromiseRejectionEvent>.reason;
<new DOMParser> = new DOMParser();
<new Document> = <DOMParser>.parseFromString(<DOMString>,<DOMParserSupportedType>);
<PluginArray>.refresh();
<new unsigned_long> = <PluginArray>.length;
<new Plugin> = <PluginArray>.item(<unsigned_long>);
<new Plugin> = <PluginArray>.namedItem(<DOMString>);
<new unsigned_long> = <MimeTypeArray>.length;
<new MimeType> = <MimeTypeArray>.item(<unsigned_long>);
<new MimeType> = <MimeTypeArray>.namedItem(<DOMString>);
<new DOMString> = <Plugin>.name;
<new DOMString> = <Plugin>.description;
<new DOMString> = <Plugin>.filename;
<new unsigned_long> = <Plugin>.length;
<new MimeType> = <Plugin>.item(<unsigned_long>);
<new MimeType> = <Plugin>.namedItem(<DOMString>);
<new DOMString> = <MimeType>.type;
<new DOMString> = <MimeType>.description;
<new DOMString> = <MimeType>.suffixes;
<new Plugin> = <MimeType>.enabledPlugin;
<new unsigned_long> = <ImageBitmap>.width;
<new unsigned_long> = <ImageBitmap>.height;
<ImageBitmap>.close();
!extends MessageEvent Event;
<new Event> = <MessageEvent>;
<new MessageEvent> = new MessageEvent(<DOMString>);
<new MessageEvent> = new MessageEvent(<DOMString>,<MessageEventInit>);
<new any> = <MessageEvent>.data;
<new USVString> = <MessageEvent>.origin;
<new DOMString> = <MessageEvent>.lastEventId;
<new MessageEventSource> = <MessageEvent>.source;
<new FrozenArray_MessagePort_> = [<MessagePort>];
<new MessagePort> = <FrozenArray_MessagePort_>[0];
<new FrozenArray_MessagePort_> = <MessageEvent>.ports;
<new sequence_MessagePort_> = [<MessagePort>];
<new MessagePort> = <sequence_MessagePort_>[0];
<MessageEvent>.initMessageEvent(<DOMString>);
<MessageEvent>.initMessageEvent(<DOMString>,<boolean>);
<MessageEvent>.initMessageEvent(<DOMString>,<boolean>,<boolean>);
<MessageEvent>.initMessageEvent(<DOMString>,<boolean>,<boolean>,<any>);
<MessageEvent>.initMessageEvent(<DOMString>,<boolean>,<boolean>,<any>,<USVString>);
<MessageEvent>.initMessageEvent(<DOMString>,<boolean>,<boolean>,<any>,<USVString>,<DOMString>);
<MessageEvent>.initMessageEvent(<DOMString>,<boolean>,<boolean>,<any>,<USVString>,<DOMString>,<MessageEventSource>);
<MessageEvent>.initMessageEvent(<DOMString>,<boolean>,<boolean>,<any>,<USVString>,<DOMString>,<MessageEventSource>,<sequence_MessagePort_>);
!extends EventSource EventTarget;
<new EventTarget> = <EventSource>;
<new EventSource> = new EventSource(<USVString>);
<new EventSource> = new EventSource(<USVString>,<EventSourceInit>);
<new USVString> = <EventSource>.url;
<new boolean> = <EventSource>.withCredentials;
<new unsigned_short> = EventSource.CONNECTING;
<new unsigned_short> = EventSource.OPEN;
<new unsigned_short> = EventSource.CLOSED;
<new unsigned_short> = <EventSource>.readyState;
<new EventHandler> = <EventSource>.onopen;
<EventSource>.onopen = <EventHandler>;
<new EventHandler> = <EventSource>.onmessage;
<EventSource>.onmessage = <EventHandler>;
<new EventHandler> = <EventSource>.onerror;
<EventSource>.onerror = <EventHandler>;
<EventSource>.close();
<new MessageChannel> = new MessageChannel();
<new MessagePort> = <MessageChannel>.port1;
<new MessagePort> = <MessageChannel>.port2;
!extends MessagePort EventTarget;
<new EventTarget> = <MessagePort>;
<MessagePort>.postMessage(<any>,<sequence_object_>);
<MessagePort>.postMessage(<any>);
<MessagePort>.postMessage(<any>,<StructuredSerializeOptions>);
<MessagePort>.start();
<MessagePort>.close();
<new EventHandler> = <MessagePort>.onmessage;
<MessagePort>.onmessage = <EventHandler>;
<new EventHandler> = <MessagePort>.onmessageerror;
<MessagePort>.onmessageerror = <EventHandler>;
!extends BroadcastChannel EventTarget;
<new EventTarget> = <BroadcastChannel>;
<new BroadcastChannel> = new BroadcastChannel(<DOMString>);
<new DOMString> = <BroadcastChannel>.name;
<BroadcastChannel>.postMessage(<any>);
<BroadcastChannel>.close();
<new EventHandler> = <BroadcastChannel>.onmessage;
<BroadcastChannel>.onmessage = <EventHandler>;
<new EventHandler> = <BroadcastChannel>.onmessageerror;
<BroadcastChannel>.onmessageerror = <EventHandler>;
!extends WorkerGlobalScope EventTarget;
<new EventTarget> = <WorkerGlobalScope>;
<new WorkerGlobalScope> = <WorkerGlobalScope>.self;
<new WorkerLocation> = <WorkerGlobalScope>.location;
<new WorkerNavigator> = <WorkerGlobalScope>.navigator;
<WorkerGlobalScope>.importScripts();
<WorkerGlobalScope>.importScripts(<USVString>);
<new OnErrorEventHandler> = <WorkerGlobalScope>.onerror;
<WorkerGlobalScope>.onerror = <OnErrorEventHandler>;
<new EventHandler> = <WorkerGlobalScope>.onlanguagechange;
<WorkerGlobalScope>.onlanguagechange = <EventHandler>;
<new EventHandler> = <WorkerGlobalScope>.onoffline;
<WorkerGlobalScope>.onoffline = <EventHandler>;
<new EventHandler> = <WorkerGlobalScope>.ononline;
<WorkerGlobalScope>.ononline = <EventHandler>;
<new EventHandler> = <WorkerGlobalScope>.onrejectionhandled;
<WorkerGlobalScope>.onrejectionhandled = <EventHandler>;
<new EventHandler> = <WorkerGlobalScope>.onunhandledrejection;
<WorkerGlobalScope>.onunhandledrejection = <EventHandler>;
!extends DedicatedWorkerGlobalScope WorkerGlobalScope;
<new WorkerGlobalScope> = <DedicatedWorkerGlobalScope>;
<new DOMString> = <DedicatedWorkerGlobalScope>.name;
<DedicatedWorkerGlobalScope>.postMessage(<any>,<sequence_object_>);
<DedicatedWorkerGlobalScope>.postMessage(<any>);
<DedicatedWorkerGlobalScope>.postMessage(<any>,<StructuredSerializeOptions>);
<DedicatedWorkerGlobalScope>.close();
<new EventHandler> = <DedicatedWorkerGlobalScope>.onmessage;
<DedicatedWorkerGlobalScope>.onmessage = <EventHandler>;
<new EventHandler> = <DedicatedWorkerGlobalScope>.onmessageerror;
<DedicatedWorkerGlobalScope>.onmessageerror = <EventHandler>;
!extends SharedWorkerGlobalScope WorkerGlobalScope;
<new WorkerGlobalScope> = <SharedWorkerGlobalScope>;
<new DOMString> = <SharedWorkerGlobalScope>.name;
<SharedWorkerGlobalScope>.close();
<new EventHandler> = <SharedWorkerGlobalScope>.onconnect;
<SharedWorkerGlobalScope>.onconnect = <EventHandler>;
!extends Worker EventTarget;
<new EventTarget> = <Worker>;
<new Worker> = new Worker(<USVString>);
<new Worker> = new Worker(<USVString>,<WorkerOptions>);
<Worker>.terminate();
<Worker>.postMessage(<any>,<sequence_object_>);
<Worker>.postMessage(<any>);
<Worker>.postMessage(<any>,<StructuredSerializeOptions>);
<new EventHandler> = <Worker>.onmessage;
<Worker>.onmessage = <EventHandler>;
<new EventHandler> = <Worker>.onmessageerror;
<Worker>.onmessageerror = <EventHandler>;
!extends SharedWorker EventTarget;
<new EventTarget> = <SharedWorker>;
<new union_DOMString1WorkerOptions_> = <DOMString>;
<new union_DOMString1WorkerOptions_> = <WorkerOptions>;
<new SharedWorker> = new SharedWorker(<USVString>);
<new SharedWorker> = new SharedWorker(<USVString>,<union_DOMString1WorkerOptions_>);
<new MessagePort> = <SharedWorker>.port;
<new USVString> = <WorkerLocation>.href;
<new USVString> = <WorkerLocation>.origin;
<new USVString> = <WorkerLocation>.protocol;
<new USVString> = <WorkerLocation>.host;
<new USVString> = <WorkerLocation>.hostname;
<new USVString> = <WorkerLocation>.port;
<new USVString> = <WorkerLocation>.pathname;
<new USVString> = <WorkerLocation>.search;
<new USVString> = <WorkerLocation>.hash;
<new Promise_undefined_> = <Worklet>.addModule(<USVString>);
<new Promise_undefined_> = <Worklet>.addModule(<USVString>,<WorkletOptions>);
<new unsigned_long> = <Storage>.length;
<new DOMString> = <Storage>.key(<unsigned_long>);
<new DOMString> = <Storage>.getItem(<DOMString>);
<Storage>.setItem(<DOMString>,<DOMString>);
<Storage>.removeItem(<DOMString>);
<Storage>.clear();
!extends StorageEvent Event;
<new Event> = <StorageEvent>;
<new StorageEvent> = new StorageEvent(<DOMString>);
<new StorageEvent> = new StorageEvent(<DOMString>,<StorageEventInit>);
<new DOMString> = <StorageEvent>.key;
<new DOMString> = <StorageEvent>.oldValue;
<new DOMString> = <StorageEvent>.newValue;
<new USVString> = <StorageEvent>.url;
<new Storage> = <StorageEvent>.storageArea;
<StorageEvent>.initStorageEvent(<DOMString>);
<StorageEvent>.initStorageEvent(<DOMString>,<boolean>);
<StorageEvent>.initStorageEvent(<DOMString>,<boolean>,<boolean>);
<StorageEvent>.initStorageEvent(<DOMString>,<boolean>,<boolean>,<DOMString>);
<StorageEvent>.initStorageEvent(<DOMString>,<boolean>,<boolean>,<DOMString>,<DOMString>);
<StorageEvent>.initStorageEvent(<DOMString>,<boolean>,<boolean>,<DOMString>,<DOMString>,<DOMString>);
<StorageEvent>.initStorageEvent(<DOMString>,<boolean>,<boolean>,<DOMString>,<DOMString>,<DOMString>,<USVString>);
<StorageEvent>.initStorageEvent(<DOMString>,<boolean>,<boolean>,<DOMString>,<DOMString>,<DOMString>,<USVString>,<Storage>);
!extends HTMLMarqueeElement HTMLElement;
<new HTMLElement> = <HTMLMarqueeElement>;
<new DOMString> = <HTMLMarqueeElement>.behavior;
<HTMLMarqueeElement>.behavior = <DOMString>;
<new DOMString> = <HTMLMarqueeElement>.bgColor;
<HTMLMarqueeElement>.bgColor = <DOMString>;
<new DOMString> = <HTMLMarqueeElement>.direction;
<HTMLMarqueeElement>.direction = <DOMString>;
<new DOMString> = <HTMLMarqueeElement>.height;
<HTMLMarqueeElement>.height = <DOMString>;
<new unsigned_long> = <HTMLMarqueeElement>.hspace;
<HTMLMarqueeElement>.hspace = <unsigned_long>;
<new long> = <HTMLMarqueeElement>.loop;
<HTMLMarqueeElement>.loop = <long>;
<new unsigned_long> = <HTMLMarqueeElement>.scrollAmount;
<HTMLMarqueeElement>.scrollAmount = <unsigned_long>;
<new unsigned_long> = <HTMLMarqueeElement>.scrollDelay;
<HTMLMarqueeElement>.scrollDelay = <unsigned_long>;
<new boolean> = <HTMLMarqueeElement>.trueSpeed;
<HTMLMarqueeElement>.trueSpeed = <boolean>;
<new unsigned_long> = <HTMLMarqueeElement>.vspace;
<HTMLMarqueeElement>.vspace = <unsigned_long>;
<new DOMString> = <HTMLMarqueeElement>.width;
<HTMLMarqueeElement>.width = <DOMString>;
<HTMLMarqueeElement>.start();
<HTMLMarqueeElement>.stop();
!extends HTMLFrameSetElement HTMLElement;
<new HTMLElement> = <HTMLFrameSetElement>;
<new DOMString> = <HTMLFrameSetElement>.cols;
<HTMLFrameSetElement>.cols = <DOMString>;
<new DOMString> = <HTMLFrameSetElement>.rows;
<HTMLFrameSetElement>.rows = <DOMString>;
!extends HTMLFrameElement HTMLElement;
<new HTMLElement> = <HTMLFrameElement>;
<new DOMString> = <HTMLFrameElement>.name;
<HTMLFrameElement>.name = <DOMString>;
<new DOMString> = <HTMLFrameElement>.scrolling;
<HTMLFrameElement>.scrolling = <DOMString>;
<new USVString> = <HTMLFrameElement>.src;
<HTMLFrameElement>.src = <USVString>;
<new DOMString> = <HTMLFrameElement>.frameBorder;
<HTMLFrameElement>.frameBorder = <DOMString>;
<new USVString> = <HTMLFrameElement>.longDesc;
<HTMLFrameElement>.longDesc = <USVString>;
<new boolean> = <HTMLFrameElement>.noResize;
<HTMLFrameElement>.noResize = <boolean>;
<new Document> = <HTMLFrameElement>.contentDocument;
<new WindowProxy> = <HTMLFrameElement>.contentWindow;
<new DOMString> = <HTMLFrameElement>.marginHeight;
<HTMLFrameElement>.marginHeight = <DOMString>;
<new DOMString> = <HTMLFrameElement>.marginWidth;
<HTMLFrameElement>.marginWidth = <DOMString>;
<new DOMString> = <HTMLAnchorElement>.coords;
<HTMLAnchorElement>.coords = <DOMString>;
<new DOMString> = <HTMLAnchorElement>.charset;
<HTMLAnchorElement>.charset = <DOMString>;
<new DOMString> = <HTMLAnchorElement>.name;
<HTMLAnchorElement>.name = <DOMString>;
<new DOMString> = <HTMLAnchorElement>.rev;
<HTMLAnchorElement>.rev = <DOMString>;
<new DOMString> = <HTMLAnchorElement>.shape;
<HTMLAnchorElement>.shape = <DOMString>;
<new boolean> = <HTMLAreaElement>.noHref;
<HTMLAreaElement>.noHref = <boolean>;
<new DOMString> = <HTMLBodyElement>.text;
<HTMLBodyElement>.text = <DOMString>;
<new DOMString> = <HTMLBodyElement>.link;
<HTMLBodyElement>.link = <DOMString>;
<new DOMString> = <HTMLBodyElement>.vLink;
<HTMLBodyElement>.vLink = <DOMString>;
<new DOMString> = <HTMLBodyElement>.aLink;
<HTMLBodyElement>.aLink = <DOMString>;
<new DOMString> = <HTMLBodyElement>.bgColor;
<HTMLBodyElement>.bgColor = <DOMString>;
<new DOMString> = <HTMLBodyElement>.background;
<HTMLBodyElement>.background = <DOMString>;
<new DOMString> = <HTMLBRElement>.clear;
<HTMLBRElement>.clear = <DOMString>;
<new DOMString> = <HTMLTableCaptionElement>.align;
<HTMLTableCaptionElement>.align = <DOMString>;
<new DOMString> = <HTMLTableColElement>.align;
<HTMLTableColElement>.align = <DOMString>;
<new DOMString> = <HTMLTableColElement>.ch;
<HTMLTableColElement>.ch = <DOMString>;
<new DOMString> = <HTMLTableColElement>.chOff;
<HTMLTableColElement>.chOff = <DOMString>;
<new DOMString> = <HTMLTableColElement>.vAlign;
<HTMLTableColElement>.vAlign = <DOMString>;
<new DOMString> = <HTMLTableColElement>.width;
<HTMLTableColElement>.width = <DOMString>;
!extends HTMLDirectoryElement HTMLElement;
<new HTMLElement> = <HTMLDirectoryElement>;
<new boolean> = <HTMLDirectoryElement>.compact;
<HTMLDirectoryElement>.compact = <boolean>;
<new DOMString> = <HTMLDivElement>.align;
<HTMLDivElement>.align = <DOMString>;
<new boolean> = <HTMLDListElement>.compact;
<HTMLDListElement>.compact = <boolean>;
<new DOMString> = <HTMLEmbedElement>.align;
<HTMLEmbedElement>.align = <DOMString>;
<new DOMString> = <HTMLEmbedElement>.name;
<HTMLEmbedElement>.name = <DOMString>;
!extends HTMLFontElement HTMLElement;
<new HTMLElement> = <HTMLFontElement>;
<new DOMString> = <HTMLFontElement>.color;
<HTMLFontElement>.color = <DOMString>;
<new DOMString> = <HTMLFontElement>.face;
<HTMLFontElement>.face = <DOMString>;
<new DOMString> = <HTMLFontElement>.size;
<HTMLFontElement>.size = <DOMString>;
<new DOMString> = <HTMLHeadingElement>.align;
<HTMLHeadingElement>.align = <DOMString>;
<new DOMString> = <HTMLHRElement>.align;
<HTMLHRElement>.align = <DOMString>;
<new DOMString> = <HTMLHRElement>.color;
<HTMLHRElement>.color = <DOMString>;
<new boolean> = <HTMLHRElement>.noShade;
<HTMLHRElement>.noShade = <boolean>;
<new DOMString> = <HTMLHRElement>.size;
<HTMLHRElement>.size = <DOMString>;
<new DOMString> = <HTMLHRElement>.width;
<HTMLHRElement>.width = <DOMString>;
<new DOMString> = <HTMLHtmlElement>.version;
<HTMLHtmlElement>.version = <DOMString>;
<new DOMString> = <HTMLIFrameElement>.align;
<HTMLIFrameElement>.align = <DOMString>;
<new DOMString> = <HTMLIFrameElement>.scrolling;
<HTMLIFrameElement>.scrolling = <DOMString>;
<new DOMString> = <HTMLIFrameElement>.frameBorder;
<HTMLIFrameElement>.frameBorder = <DOMString>;
<new USVString> = <HTMLIFrameElement>.longDesc;
<HTMLIFrameElement>.longDesc = <USVString>;
<new DOMString> = <HTMLIFrameElement>.marginHeight;
<HTMLIFrameElement>.marginHeight = <DOMString>;
<new DOMString> = <HTMLIFrameElement>.marginWidth;
<HTMLIFrameElement>.marginWidth = <DOMString>;
<new DOMString> = <HTMLImageElement>.name;
<HTMLImageElement>.name = <DOMString>;
<new USVString> = <HTMLImageElement>.lowsrc;
<HTMLImageElement>.lowsrc = <USVString>;
<new DOMString> = <HTMLImageElement>.align;
<HTMLImageElement>.align = <DOMString>;
<new unsigned_long> = <HTMLImageElement>.hspace;
<HTMLImageElement>.hspace = <unsigned_long>;
<new unsigned_long> = <HTMLImageElement>.vspace;
<HTMLImageElement>.vspace = <unsigned_long>;
<new USVString> = <HTMLImageElement>.longDesc;
<HTMLImageElement>.longDesc = <USVString>;
<new DOMString> = <HTMLImageElement>.border;
<HTMLImageElement>.border = <DOMString>;
<new DOMString> = <HTMLInputElement>.align;
<HTMLInputElement>.align = <DOMString>;
<new DOMString> = <HTMLInputElement>.useMap;
<HTMLInputElement>.useMap = <DOMString>;
<new DOMString> = <HTMLLegendElement>.align;
<HTMLLegendElement>.align = <DOMString>;
<new DOMString> = <HTMLLIElement>.type;
<HTMLLIElement>.type = <DOMString>;
<new DOMString> = <HTMLLinkElement>.charset;
<HTMLLinkElement>.charset = <DOMString>;
<new DOMString> = <HTMLLinkElement>.rev;
<HTMLLinkElement>.rev = <DOMString>;
<new DOMString> = <HTMLLinkElement>.target;
<HTMLLinkElement>.target = <DOMString>;
<new boolean> = <HTMLMenuElement>.compact;
<HTMLMenuElement>.compact = <boolean>;
<new DOMString> = <HTMLMetaElement>.scheme;
<HTMLMetaElement>.scheme = <DOMString>;
<new DOMString> = <HTMLObjectElement>.align;
<HTMLObjectElement>.align = <DOMString>;
<new DOMString> = <HTMLObjectElement>.archive;
<HTMLObjectElement>.archive = <DOMString>;
<new DOMString> = <HTMLObjectElement>.code;
<HTMLObjectElement>.code = <DOMString>;
<new boolean> = <HTMLObjectElement>.declare;
<HTMLObjectElement>.declare = <boolean>;
<new unsigned_long> = <HTMLObjectElement>.hspace;
<HTMLObjectElement>.hspace = <unsigned_long>;
<new DOMString> = <HTMLObjectElement>.standby;
<HTMLObjectElement>.standby = <DOMString>;
<new unsigned_long> = <HTMLObjectElement>.vspace;
<HTMLObjectElement>.vspace = <unsigned_long>;
<new DOMString> = <HTMLObjectElement>.codeBase;
<HTMLObjectElement>.codeBase = <DOMString>;
<new DOMString> = <HTMLObjectElement>.codeType;
<HTMLObjectElement>.codeType = <DOMString>;
<new DOMString> = <HTMLObjectElement>.useMap;
<HTMLObjectElement>.useMap = <DOMString>;
<new DOMString> = <HTMLObjectElement>.border;
<HTMLObjectElement>.border = <DOMString>;
<new boolean> = <HTMLOListElement>.compact;
<HTMLOListElement>.compact = <boolean>;
<new DOMString> = <HTMLParagraphElement>.align;
<HTMLParagraphElement>.align = <DOMString>;
!extends HTMLParamElement HTMLElement;
<new HTMLElement> = <HTMLParamElement>;
<new DOMString> = <HTMLParamElement>.name;
<HTMLParamElement>.name = <DOMString>;
<new DOMString> = <HTMLParamElement>.value;
<HTMLParamElement>.value = <DOMString>;
<new DOMString> = <HTMLParamElement>.type;
<HTMLParamElement>.type = <DOMString>;
<new DOMString> = <HTMLParamElement>.valueType;
<HTMLParamElement>.valueType = <DOMString>;
<new long> = <HTMLPreElement>.width;
<HTMLPreElement>.width = <long>;
<new DOMString> = <HTMLStyleElement>.type;
<HTMLStyleElement>.type = <DOMString>;
<new DOMString> = <HTMLScriptElement>.charset;
<HTMLScriptElement>.charset = <DOMString>;
<new DOMString> = <HTMLScriptElement>.event;
<HTMLScriptElement>.event = <DOMString>;
<new DOMString> = <HTMLScriptElement>.htmlFor;
<HTMLScriptElement>.htmlFor = <DOMString>;
<new DOMString> = <HTMLTableElement>.align;
<HTMLTableElement>.align = <DOMString>;
<new DOMString> = <HTMLTableElement>.border;
<HTMLTableElement>.border = <DOMString>;
<new DOMString> = <HTMLTableElement>.frame;
<HTMLTableElement>.frame = <DOMString>;
<new DOMString> = <HTMLTableElement>.rules;
<HTMLTableElement>.rules = <DOMString>;
<new DOMString> = <HTMLTableElement>.summary;
<HTMLTableElement>.summary = <DOMString>;
<new DOMString> = <HTMLTableElement>.width;
<HTMLTableElement>.width = <DOMString>;
<new DOMString> = <HTMLTableElement>.bgColor;
<HTMLTableElement>.bgColor = <DOMString>;
<new DOMString> = <HTMLTableElement>.cellPadding;
<HTMLTableElement>.cellPadding = <DOMString>;
<new DOMString> = <HTMLTableElement>.cellSpacing;
<HTMLTableElement>.cellSpacing = <DOMString>;
<new DOMString> = <HTMLTableSectionElement>.align;
<HTMLTableSectionElement>.align = <DOMString>;
<new DOMString> = <HTMLTableSectionElement>.ch;
<HTMLTableSectionElement>.ch = <DOMString>;
<new DOMString> = <HTMLTableSectionElement>.chOff;
<HTMLTableSectionElement>.chOff = <DOMString>;
<new DOMString> = <HTMLTableSectionElement>.vAlign;
<HTMLTableSectionElement>.vAlign = <DOMString>;
<new DOMString> = <HTMLTableCellElement>.align;
<HTMLTableCellElement>.align = <DOMString>;
<new DOMString> = <HTMLTableCellElement>.axis;
<HTMLTableCellElement>.axis = <DOMString>;
<new DOMString> = <HTMLTableCellElement>.height;
<HTMLTableCellElement>.height = <DOMString>;
<new DOMString> = <HTMLTableCellElement>.width;
<HTMLTableCellElement>.width = <DOMString>;
<new DOMString> = <HTMLTableCellElement>.ch;
<HTMLTableCellElement>.ch = <DOMString>;
<new DOMString> = <HTMLTableCellElement>.chOff;
<HTMLTableCellElement>.chOff = <DOMString>;
<new boolean> = <HTMLTableCellElement>.noWrap;
<HTMLTableCellElement>.noWrap = <boolean>;
<new DOMString> = <HTMLTableCellElement>.vAlign;
<HTMLTableCellElement>.vAlign = <DOMString>;
<new DOMString> = <HTMLTableCellElement>.bgColor;
<HTMLTableCellElement>.bgColor = <DOMString>;
<new DOMString> = <HTMLTableRowElement>.align;
<HTMLTableRowElement>.align = <DOMString>;
<new DOMString> = <HTMLTableRowElement>.ch;
<HTMLTableRowElement>.ch = <DOMString>;
<new DOMString> = <HTMLTableRowElement>.chOff;
<HTMLTableRowElement>.chOff = <DOMString>;
<new DOMString> = <HTMLTableRowElement>.vAlign;
<HTMLTableRowElement>.vAlign = <DOMString>;
<new DOMString> = <HTMLTableRowElement>.bgColor;
<HTMLTableRowElement>.bgColor = <DOMString>;
<new boolean> = <HTMLUListElement>.compact;
<HTMLUListElement>.compact = <boolean>;
<new DOMString> = <HTMLUListElement>.type;
<HTMLUListElement>.type = <DOMString>;
<new DOMString> = <Document>.fgColor;
<Document>.fgColor = <DOMString>;
<new DOMString> = <Document>.linkColor;
<Document>.linkColor = <DOMString>;
<new DOMString> = <Document>.vlinkColor;
<Document>.vlinkColor = <DOMString>;
<new DOMString> = <Document>.alinkColor;
<Document>.alinkColor = <DOMString>;
<new DOMString> = <Document>.bgColor;
<Document>.bgColor = <DOMString>;
<new HTMLCollection> = <Document>.anchors;
<new HTMLCollection> = <Document>.applets;
<Document>.clear();
<Document>.captureEvents();
<Document>.releaseEvents();
<new HTMLAllCollection> = <Document>.all;
<Window>.captureEvents();
<Window>.releaseEvents();
<new External> = <Window>.external;
<External>.AddSearchProvider();
<External>.IsSearchProviderInstalled();
!extends IdleDetector EventTarget;
<new EventTarget> = <IdleDetector>;
<new IdleDetector> = new IdleDetector();
<new UserIdleState> = <IdleDetector>.userState;
<new ScreenIdleState> = <IdleDetector>.screenState;
<new EventHandler> = <IdleDetector>.onchange;
<IdleDetector>.onchange = <EventHandler>;
<new Promise_PermissionState_> = <IdleDetector>.requestPermission();
<new Promise_undefined_> = <IdleDetector>.start();
<new Promise_undefined_> = <IdleDetector>.start(<IdleOptions>);
<new ImageCapture> = new ImageCapture(<MediaStreamTrack>);
<new Promise_Blob_> = <ImageCapture>.takePhoto();
<new Promise_Blob_> = <ImageCapture>.takePhoto(<PhotoSettings>);
<new Promise_PhotoCapabilities_> = new Promise(function(x){console.log("ok")});
<new Promise_PhotoCapabilities_> = <ImageCapture>.getPhotoCapabilities();
<new Promise_PhotoSettings_> = new Promise(function(x){console.log("ok")});
<new Promise_PhotoSettings_> = <ImageCapture>.getPhotoSettings();
<new Promise_ImageBitmap_> = new Promise(function(x){console.log("ok")});
<new Promise_ImageBitmap_> = <ImageCapture>.grabFrame();
<new MediaStreamTrack> = <ImageCapture>.track;
<new Promise_InkPresenter_> = new Promise(function(x){console.log("ok")});
<new Promise_InkPresenter_> = <Ink>.requestPresenter();
<new Promise_InkPresenter_> = <Ink>.requestPresenter(<InkPresenterParam>);
<new Element> = <InkPresenter>.presentationArea;
<new unsigned_long> = <InkPresenter>.expectedImprovement;
<InkPresenter>.updateInkTrailStartPoint(<PointerEvent>,<InkTrailStyle>);
<new Ink> = <Navigator>.ink;
<new InputDeviceCapabilities> = new InputDeviceCapabilities();
<new InputDeviceCapabilities> = new InputDeviceCapabilities(<InputDeviceCapabilitiesInit>);
<new boolean> = <InputDeviceCapabilities>.firesTouchEvents;
<new boolean> = <InputDeviceCapabilities>.pointerMovementScrolls;
<new InputDeviceCapabilities> = <UIEvent>.sourceCapabilities;
<new DataTransfer> = <InputEvent>.dataTransfer;
<new sequence_StaticRange_> = [<StaticRange>];
<new StaticRange> = <sequence_StaticRange_>[0];
<new sequence_StaticRange_> = <InputEvent>.getTargetRanges();
<new IntersectionObserver> = new IntersectionObserver(<IntersectionObserverCallback>);
<new IntersectionObserver> = new IntersectionObserver(<IntersectionObserverCallback>,<IntersectionObserverInit>);
<new union_Element1Document_> = <Element>;
<new union_Element1Document_> = <Document>;
<new union_Element1Document_> = <IntersectionObserver>.root;
<new DOMString> = <IntersectionObserver>.rootMargin;
<new FrozenArray_double_> = <IntersectionObserver>.thresholds;
<IntersectionObserver>.observe(<Element>);
<IntersectionObserver>.unobserve(<Element>);
<IntersectionObserver>.disconnect();
<new sequence_IntersectionObserverEntry_> = [<IntersectionObserverEntry>];
<new IntersectionObserverEntry> = <sequence_IntersectionObserverEntry_>[0];
<new sequence_IntersectionObserverEntry_> = <IntersectionObserver>.takeRecords();
<new IntersectionObserverEntry> = new IntersectionObserverEntry(<IntersectionObserverEntryInit>);
<new DOMHighResTimeStamp> = <IntersectionObserverEntry>.time;
<new DOMRectReadOnly> = <IntersectionObserverEntry>.rootBounds;
<new DOMRectReadOnly> = <IntersectionObserverEntry>.boundingClientRect;
<new DOMRectReadOnly> = <IntersectionObserverEntry>.intersectionRect;
<new boolean> = <IntersectionObserverEntry>.isIntersecting;
<new double> = <IntersectionObserverEntry>.intersectionRatio;
<new Element> = <IntersectionObserverEntry>.target;
!extends InterventionReportBody ReportBody;
<new ReportBody> = <InterventionReportBody>;
<new object> = <InterventionReportBody>.toJSON();
<new DOMString> = <InterventionReportBody>.id;
<new DOMString> = <InterventionReportBody>.message;
<new DOMString> = <InterventionReportBody>.sourceFile;
<new unsigned_long> = <InterventionReportBody>.lineNumber;
<new unsigned_long> = <InterventionReportBody>.columnNumber;
<Scheduling>.isInputPending();
<Scheduling>.isInputPending(<IsInputPendingOptions>);
<new Scheduling> = <Navigator>.scheduling;
!extends Profiler EventTarget;
<new EventTarget> = <Profiler>;
<new DOMHighResTimeStamp> = <Profiler>.sampleInterval;
<new boolean> = <Profiler>.stopped;
<new Profiler> = new Profiler(<ProfilerInitOptions>);
<new Promise_ProfilerTrace_> = new Promise(function(x){console.log("ok")});
<new Promise_ProfilerTrace_> = <Profiler>.stop();
<new Keyboard> = <Navigator>.keyboard;
!extends Keyboard EventTarget;
<new EventTarget> = <Keyboard>;
<new Promise_undefined_> = <Keyboard>.lock();
<new Promise_undefined_> = <Keyboard>.lock(<sequence_DOMString_>);
<Keyboard>.unlock();
<new Promise_KeyboardLayoutMap_> = new Promise(function(x){console.log("ok")});
<new Promise_KeyboardLayoutMap_> = <Keyboard>.getLayoutMap();
<new EventHandler> = <Keyboard>.onlayoutchange;
<Keyboard>.onlayoutchange = <EventHandler>;
!extends LargestContentfulPaint PerformanceEntry;
<new PerformanceEntry> = <LargestContentfulPaint>;
<new DOMHighResTimeStamp> = <LargestContentfulPaint>.renderTime;
<new DOMHighResTimeStamp> = <LargestContentfulPaint>.loadTime;
<new unsigned_long> = <LargestContentfulPaint>.size;
<new DOMString> = <LargestContentfulPaint>.id;
<new DOMString> = <LargestContentfulPaint>.url;
<new Element> = <LargestContentfulPaint>.element;
<new object> = <LargestContentfulPaint>.toJSON();
!extends LayoutShift PerformanceEntry;
<new PerformanceEntry> = <LayoutShift>;
<new double> = <LayoutShift>.value;
<new boolean> = <LayoutShift>.hadRecentInput;
<new DOMHighResTimeStamp> = <LayoutShift>.lastInputTime;
<new FrozenArray_LayoutShiftAttribution_> = [<LayoutShiftAttribution>];
<new LayoutShiftAttribution> = <FrozenArray_LayoutShiftAttribution_>[0];
<new FrozenArray_LayoutShiftAttribution_> = <LayoutShift>.sources;
<new object> = <LayoutShift>.toJSON();
<new Node> = <LayoutShiftAttribution>.node;
<new DOMRectReadOnly> = <LayoutShiftAttribution>.previousRect;
<new DOMRectReadOnly> = <LayoutShiftAttribution>.currentRect;
<new sequence_FontData_> = [<FontData>];
<new FontData> = <sequence_FontData_>[0];
<new Promise_sequence_FontData__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_FontData__> = <Window>.queryLocalFonts();
<new Promise_sequence_FontData__> = <Window>.queryLocalFonts(<QueryOptions>);
<new Promise_Blob_> = <FontData>.blob();
<new USVString> = <FontData>.postscriptName;
<new USVString> = <FontData>.fullName;
<new USVString> = <FontData>.family;
<new USVString> = <FontData>.style;
!extends PerformanceLongTaskTiming PerformanceEntry;
<new PerformanceEntry> = <PerformanceLongTaskTiming>;
<new FrozenArray_TaskAttributionTiming_> = [<TaskAttributionTiming>];
<new TaskAttributionTiming> = <FrozenArray_TaskAttributionTiming_>[0];
<new FrozenArray_TaskAttributionTiming_> = <PerformanceLongTaskTiming>.attribution;
<new object> = <PerformanceLongTaskTiming>.toJSON();
!extends TaskAttributionTiming PerformanceEntry;
<new PerformanceEntry> = <TaskAttributionTiming>;
<new DOMString> = <TaskAttributionTiming>.containerType;
<new DOMString> = <TaskAttributionTiming>.containerSrc;
<new DOMString> = <TaskAttributionTiming>.containerId;
<new DOMString> = <TaskAttributionTiming>.containerName;
<new object> = <TaskAttributionTiming>.toJSON();
!extends Magnetometer Sensor;
<new Sensor> = <Magnetometer>;
<new Magnetometer> = new Magnetometer();
<new Magnetometer> = new Magnetometer(<MagnetometerSensorOptions>);
<new double> = <Magnetometer>.x;
<new double> = <Magnetometer>.y;
<new double> = <Magnetometer>.z;
!extends UncalibratedMagnetometer Sensor;
<new Sensor> = <UncalibratedMagnetometer>;
<new UncalibratedMagnetometer> = new UncalibratedMagnetometer();
<new UncalibratedMagnetometer> = new UncalibratedMagnetometer(<MagnetometerSensorOptions>);
<new double> = <UncalibratedMagnetometer>.x;
<new double> = <UncalibratedMagnetometer>.y;
<new double> = <UncalibratedMagnetometer>.z;
<new double> = <UncalibratedMagnetometer>.xBias;
<new double> = <UncalibratedMagnetometer>.yBias;
<new double> = <UncalibratedMagnetometer>.zBias;
!extends BeforeInstallPromptEvent Event;
<new Event> = <BeforeInstallPromptEvent>;
<new BeforeInstallPromptEvent> = new BeforeInstallPromptEvent(<DOMString>);
<new BeforeInstallPromptEvent> = new BeforeInstallPromptEvent(<DOMString>,<EventInit>);
<new Promise_PromptResponseObject_> = new Promise(function(x){console.log("ok")});
<new Promise_PromptResponseObject_> = <BeforeInstallPromptEvent>.prompt();
<new EventHandler> = <Window>.onappinstalled;
<Window>.onappinstalled = <EventHandler>;
<new EventHandler> = <Window>.onbeforeinstallprompt;
<Window>.onbeforeinstallprompt = <EventHandler>;
!extends MathMLElement Element;
<new Element> = <MathMLElement>;
<new MediaCapabilities> = <Navigator>.mediaCapabilities;
<new MediaCapabilities> = <WorkerNavigator>.mediaCapabilities;
<new Promise_MediaCapabilitiesDecodingInfo_> = new Promise(function(x){console.log("ok")});
<new Promise_MediaCapabilitiesDecodingInfo_> = <MediaCapabilities>.decodingInfo(<MediaDecodingConfiguration>);
<new Promise_MediaCapabilitiesEncodingInfo_> = new Promise(function(x){console.log("ok")});
<new Promise_MediaCapabilitiesEncodingInfo_> = <MediaCapabilities>.encodingInfo(<MediaEncodingConfiguration>);
<new VideoPlaybackQuality> = <HTMLVideoElement>.getVideoPlaybackQuality();
<new DOMHighResTimeStamp> = <VideoPlaybackQuality>.creationTime;
<new unsigned_long> = <VideoPlaybackQuality>.droppedVideoFrames;
<new unsigned_long> = <VideoPlaybackQuality>.totalVideoFrames;
<new unsigned_long> = <VideoPlaybackQuality>.corruptedVideoFrames;
!extends MediaSource EventTarget;
<new EventTarget> = <MediaSource>;
<new MediaSource> = new MediaSource();
<new MediaSourceHandle> = <MediaSource>.handle;
<new SourceBufferList> = <MediaSource>.sourceBuffers;
<new SourceBufferList> = <MediaSource>.activeSourceBuffers;
<new ReadyState> = <MediaSource>.readyState;
<new unrestricted_double> = <MediaSource>.duration;
<MediaSource>.duration = <unrestricted_double>;
<new EventHandler> = <MediaSource>.onsourceopen;
<MediaSource>.onsourceopen = <EventHandler>;
<new EventHandler> = <MediaSource>.onsourceended;
<MediaSource>.onsourceended = <EventHandler>;
<new EventHandler> = <MediaSource>.onsourceclose;
<MediaSource>.onsourceclose = <EventHandler>;
<new boolean> = <MediaSource>.canConstructInDedicatedWorker;
<new SourceBuffer> = <MediaSource>.addSourceBuffer(<DOMString>);
<MediaSource>.removeSourceBuffer(<SourceBuffer>);
<MediaSource>.endOfStream();
<MediaSource>.endOfStream(<EndOfStreamError>);
<MediaSource>.setLiveSeekableRange(<double>,<double>);
<MediaSource>.clearLiveSeekableRange();
<MediaSource>.isTypeSupported(<DOMString>);
!extends SourceBuffer EventTarget;
<new EventTarget> = <SourceBuffer>;
<new AppendMode> = <SourceBuffer>.mode;
<SourceBuffer>.mode = <AppendMode>;
<new boolean> = <SourceBuffer>.updating;
<new TimeRanges> = <SourceBuffer>.buffered;
<new double> = <SourceBuffer>.timestampOffset;
<SourceBuffer>.timestampOffset = <double>;
<new AudioTrackList> = <SourceBuffer>.audioTracks;
<new VideoTrackList> = <SourceBuffer>.videoTracks;
<new TextTrackList> = <SourceBuffer>.textTracks;
<new double> = <SourceBuffer>.appendWindowStart;
<SourceBuffer>.appendWindowStart = <double>;
<new unrestricted_double> = <SourceBuffer>.appendWindowEnd;
<SourceBuffer>.appendWindowEnd = <unrestricted_double>;
<new EventHandler> = <SourceBuffer>.onupdatestart;
<SourceBuffer>.onupdatestart = <EventHandler>;
<new EventHandler> = <SourceBuffer>.onupdate;
<SourceBuffer>.onupdate = <EventHandler>;
<new EventHandler> = <SourceBuffer>.onupdateend;
<SourceBuffer>.onupdateend = <EventHandler>;
<new EventHandler> = <SourceBuffer>.onerror;
<SourceBuffer>.onerror = <EventHandler>;
<new EventHandler> = <SourceBuffer>.onabort;
<SourceBuffer>.onabort = <EventHandler>;
<SourceBuffer>.appendBuffer(<BufferSource>);
<SourceBuffer>.abort();
<SourceBuffer>.changeType(<DOMString>);
<SourceBuffer>.remove(<double>,<unrestricted_double>);
!extends SourceBufferList EventTarget;
<new EventTarget> = <SourceBufferList>;
<new unsigned_long> = <SourceBufferList>.length;
<new EventHandler> = <SourceBufferList>.onaddsourcebuffer;
<SourceBufferList>.onaddsourcebuffer = <EventHandler>;
<new EventHandler> = <SourceBufferList>.onremovesourcebuffer;
<SourceBufferList>.onremovesourcebuffer = <EventHandler>;
<new SourceBuffer> = <SourceBufferList>[<unsigned_long>];
<new SourceBuffer> = <AudioTrack>.sourceBuffer;
<new SourceBuffer> = <VideoTrack>.sourceBuffer;
<new SourceBuffer> = <TextTrack>.sourceBuffer;
<new MediaStream> = <HTMLMediaElement>.captureStream();
<new MediaStream> = <HTMLCanvasElement>.captureStream();
<new MediaStream> = <HTMLCanvasElement>.captureStream(<double>);
!extends CanvasCaptureMediaStreamTrack MediaStreamTrack;
<new MediaStreamTrack> = <CanvasCaptureMediaStreamTrack>;
<new HTMLCanvasElement> = <CanvasCaptureMediaStreamTrack>.canvas;
<CanvasCaptureMediaStreamTrack>.requestFrame();
<MediaDevices>.setSupportedCaptureActions(<sequence_DOMString_>);
<new EventHandler> = <MediaDevices>.oncaptureaction;
<MediaDevices>.oncaptureaction = <EventHandler>;
!extends CaptureActionEvent Event;
<new Event> = <CaptureActionEvent>;
<new CaptureActionEvent> = new CaptureActionEvent();
<new CaptureActionEvent> = new CaptureActionEvent(<CaptureActionEventInit>);
<new CaptureAction> = <CaptureActionEvent>.action;
<new sequence_DOMString_> = <MediaStreamTrack>.getSupportedCaptureActions();
<new Promise_undefined_> = <MediaStreamTrack>.sendCaptureAction(<CaptureAction>);
<new Promise_CropTarget_> = new Promise(function(x){console.log("ok")});
<new Promise_CropTarget_> = <CropTarget>.fromElement(<Element>);
!extends BrowserCaptureMediaStreamTrack MediaStreamTrack;
<new MediaStreamTrack> = <BrowserCaptureMediaStreamTrack>;
<new Promise_undefined_> = <BrowserCaptureMediaStreamTrack>.cropTo(<CropTarget>);
<new BrowserCaptureMediaStreamTrack> = <BrowserCaptureMediaStreamTrack>.clone();
!extends MediaStream EventTarget;
<new EventTarget> = <MediaStream>;
<new MediaStream> = new MediaStream();
<new MediaStream> = new MediaStream(<MediaStream>);
<new sequence_MediaStreamTrack_> = [<MediaStreamTrack>];
<new MediaStreamTrack> = <sequence_MediaStreamTrack_>[0];
<new MediaStream> = new MediaStream(<sequence_MediaStreamTrack_>);
<new DOMString> = <MediaStream>.id;
<new sequence_MediaStreamTrack_> = <MediaStream>.getAudioTracks();
<new sequence_MediaStreamTrack_> = <MediaStream>.getVideoTracks();
<new sequence_MediaStreamTrack_> = <MediaStream>.getTracks();
<new MediaStreamTrack> = <MediaStream>.getTrackById(<DOMString>);
<MediaStream>.addTrack(<MediaStreamTrack>);
<MediaStream>.removeTrack(<MediaStreamTrack>);
<new MediaStream> = <MediaStream>.clone();
<new boolean> = <MediaStream>.active;
<new EventHandler> = <MediaStream>.onaddtrack;
<MediaStream>.onaddtrack = <EventHandler>;
<new EventHandler> = <MediaStream>.onremovetrack;
<MediaStream>.onremovetrack = <EventHandler>;
!extends MediaStreamTrack EventTarget;
<new EventTarget> = <MediaStreamTrack>;
<new DOMString> = <MediaStreamTrack>.kind;
<new DOMString> = <MediaStreamTrack>.id;
<new DOMString> = <MediaStreamTrack>.label;
<new boolean> = <MediaStreamTrack>.enabled;
<MediaStreamTrack>.enabled = <boolean>;
<new boolean> = <MediaStreamTrack>.muted;
<new EventHandler> = <MediaStreamTrack>.onmute;
<MediaStreamTrack>.onmute = <EventHandler>;
<new EventHandler> = <MediaStreamTrack>.onunmute;
<MediaStreamTrack>.onunmute = <EventHandler>;
<new MediaStreamTrackState> = <MediaStreamTrack>.readyState;
<new EventHandler> = <MediaStreamTrack>.onended;
<MediaStreamTrack>.onended = <EventHandler>;
<new MediaStreamTrack> = <MediaStreamTrack>.clone();
<MediaStreamTrack>.stop();
<new MediaTrackCapabilities> = <MediaStreamTrack>.getCapabilities();
<new MediaTrackConstraints> = <MediaStreamTrack>.getConstraints();
<new MediaTrackSettings> = <MediaStreamTrack>.getSettings();
<new Promise_undefined_> = <MediaStreamTrack>.applyConstraints();
<new Promise_undefined_> = <MediaStreamTrack>.applyConstraints(<MediaTrackConstraints>);
!extends MediaStreamTrackEvent Event;
<new Event> = <MediaStreamTrackEvent>;
<new MediaStreamTrackEvent> = new MediaStreamTrackEvent(<DOMString>,<MediaStreamTrackEventInit>);
<new MediaStreamTrack> = <MediaStreamTrackEvent>.track;
!extends OverconstrainedError DOMException;
<new DOMException> = <OverconstrainedError>;
<new OverconstrainedError> = new OverconstrainedError(<DOMString>);
<new OverconstrainedError> = new OverconstrainedError(<DOMString>,<DOMString>);
<new DOMString> = <OverconstrainedError>.constraint;
<new MediaDevices> = <Navigator>.mediaDevices;
!extends MediaDevices EventTarget;
<new EventTarget> = <MediaDevices>;
<new EventHandler> = <MediaDevices>.ondevicechange;
<MediaDevices>.ondevicechange = <EventHandler>;
<new sequence_MediaDeviceInfo_> = [<MediaDeviceInfo>];
<new MediaDeviceInfo> = <sequence_MediaDeviceInfo_>[0];
<new Promise_sequence_MediaDeviceInfo__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_MediaDeviceInfo__> = <MediaDevices>.enumerateDevices();
<new DOMString> = <MediaDeviceInfo>.deviceId;
<new MediaDeviceKind> = <MediaDeviceInfo>.kind;
<new DOMString> = <MediaDeviceInfo>.label;
<new DOMString> = <MediaDeviceInfo>.groupId;
<new object> = <MediaDeviceInfo>.toJSON();
!extends InputDeviceInfo MediaDeviceInfo;
<new MediaDeviceInfo> = <InputDeviceInfo>;
<new MediaTrackCapabilities> = <InputDeviceInfo>.getCapabilities();
<new MediaTrackSupportedConstraints> = <MediaDevices>.getSupportedConstraints();
<new Promise_MediaStream_> = new Promise(function(x){console.log("ok")});
<new Promise_MediaStream_> = <MediaDevices>.getUserMedia();
<new Promise_MediaStream_> = <MediaDevices>.getUserMedia(<MediaStreamConstraints>);
<Navigator>.getUserMedia(<MediaStreamConstraints>,<NavigatorUserMediaSuccessCallback>,<NavigatorUserMediaErrorCallback>);
<new MediaStreamTrackProcessor> = new MediaStreamTrackProcessor(<MediaStreamTrackProcessorInit>);
<new ReadableStream> = <MediaStreamTrackProcessor>.readable;
<MediaStreamTrackProcessor>.readable = <ReadableStream>;
<new VideoTrackGenerator> = new VideoTrackGenerator();
<new WritableStream> = <VideoTrackGenerator>.writable;
<new boolean> = <VideoTrackGenerator>.muted;
<VideoTrackGenerator>.muted = <boolean>;
<new MediaStreamTrack> = <VideoTrackGenerator>.track;
<new Promise_MediaStream_> = <MediaDevices>.getViewportMedia();
<new Promise_MediaStream_> = <MediaDevices>.getViewportMedia(<ViewportMediaStreamConstraints>);
<new MediaSession> = <Navigator>.mediaSession;
<new MediaMetadata> = <MediaSession>.metadata;
<MediaSession>.metadata = <MediaMetadata>;
<MediaSession>.metadata = null;
<new MediaSessionPlaybackState> = <MediaSession>.playbackState;
<MediaSession>.playbackState = <MediaSessionPlaybackState>;
<MediaSession>.setActionHandler(<MediaSessionAction>,<MediaSessionActionHandler>);
<MediaSession>.setPositionState();
<MediaSession>.setPositionState(<MediaPositionState>);
<MediaSession>.setMicrophoneActive(<boolean>);
<MediaSession>.setCameraActive(<boolean>);
<new MediaMetadata> = new MediaMetadata();
<new MediaMetadata> = new MediaMetadata(<MediaMetadataInit>);
<new DOMString> = <MediaMetadata>.title;
<MediaMetadata>.title = <DOMString>;
<new DOMString> = <MediaMetadata>.artist;
<MediaMetadata>.artist = <DOMString>;
<new DOMString> = <MediaMetadata>.album;
<MediaMetadata>.album = <DOMString>;
<new FrozenArray_MediaImage_> = [<MediaImage>];
<new MediaImage> = <FrozenArray_MediaImage_>[0];
<new FrozenArray_MediaImage_> = <MediaMetadata>.artwork;
<MediaMetadata>.artwork = <FrozenArray_MediaImage_>;
!extends MediaRecorder EventTarget;
<new EventTarget> = <MediaRecorder>;
<new MediaRecorder> = new MediaRecorder(<MediaStream>);
<new MediaRecorder> = new MediaRecorder(<MediaStream>,<MediaRecorderOptions>);
<new MediaStream> = <MediaRecorder>.stream;
<new DOMString> = <MediaRecorder>.mimeType;
<new RecordingState> = <MediaRecorder>.state;
<new EventHandler> = <MediaRecorder>.onstart;
<MediaRecorder>.onstart = <EventHandler>;
<new EventHandler> = <MediaRecorder>.onstop;
<MediaRecorder>.onstop = <EventHandler>;
<new EventHandler> = <MediaRecorder>.ondataavailable;
<MediaRecorder>.ondataavailable = <EventHandler>;
<new EventHandler> = <MediaRecorder>.onpause;
<MediaRecorder>.onpause = <EventHandler>;
<new EventHandler> = <MediaRecorder>.onresume;
<MediaRecorder>.onresume = <EventHandler>;
<new EventHandler> = <MediaRecorder>.onerror;
<MediaRecorder>.onerror = <EventHandler>;
<new unsigned_long> = <MediaRecorder>.videoBitsPerSecond;
<new unsigned_long> = <MediaRecorder>.audioBitsPerSecond;
<new BitrateMode> = <MediaRecorder>.audioBitrateMode;
<MediaRecorder>.start();
<MediaRecorder>.start(<unsigned_long>);
<MediaRecorder>.stop();
<MediaRecorder>.pause();
<MediaRecorder>.resume();
<MediaRecorder>.requestData();
<MediaRecorder>.isTypeSupported(<DOMString>);
!extends BlobEvent Event;
<new Event> = <BlobEvent>;
<new BlobEvent> = new BlobEvent(<DOMString>,<BlobEventInit>);
<new Blob> = <BlobEvent>.data;
<new DOMHighResTimeStamp> = <BlobEvent>.timecode;
!extends HTMLModelElement HTMLElement;
<new HTMLElement> = <HTMLModelElement>;
<new DOMString> = <MediaStreamTrack>.contentHint;
<MediaStreamTrack>.contentHint = <DOMString>;
<new Navigation> = <Window>.navigation;
!extends Navigation EventTarget;
<new EventTarget> = <Navigation>;
<new sequence_NavigationHistoryEntry_> = [<NavigationHistoryEntry>];
<new NavigationHistoryEntry> = <sequence_NavigationHistoryEntry_>[0];
<new sequence_NavigationHistoryEntry_> = <Navigation>.entries();
<new NavigationHistoryEntry> = <Navigation>.currentEntry;
<Navigation>.updateCurrentEntry(<NavigationUpdateCurrentEntryOptions>);
<new NavigationTransition> = <Navigation>.transition;
<new boolean> = <Navigation>.canGoBack;
<new boolean> = <Navigation>.canGoForward;
<new NavigationResult> = <Navigation>.navigate(<USVString>);
<new NavigationResult> = <Navigation>.navigate(<USVString>,<NavigationNavigateOptions>);
<new NavigationResult> = <Navigation>.reload();
<new NavigationResult> = <Navigation>.reload(<NavigationReloadOptions>);
<new NavigationResult> = <Navigation>.traverseTo(<DOMString>);
<new NavigationResult> = <Navigation>.traverseTo(<DOMString>,<NavigationOptions>);
<new NavigationResult> = <Navigation>.back();
<new NavigationResult> = <Navigation>.back(<NavigationOptions>);
<new NavigationResult> = <Navigation>.forward();
<new NavigationResult> = <Navigation>.forward(<NavigationOptions>);
<new EventHandler> = <Navigation>.onnavigate;
<Navigation>.onnavigate = <EventHandler>;
<new EventHandler> = <Navigation>.onnavigatesuccess;
<Navigation>.onnavigatesuccess = <EventHandler>;
<new EventHandler> = <Navigation>.onnavigateerror;
<Navigation>.onnavigateerror = <EventHandler>;
<new EventHandler> = <Navigation>.oncurrententrychange;
<Navigation>.oncurrententrychange = <EventHandler>;
!extends NavigationCurrentEntryChangeEvent Event;
<new Event> = <NavigationCurrentEntryChangeEvent>;
<new NavigationCurrentEntryChangeEvent> = new NavigationCurrentEntryChangeEvent(<DOMString>,<NavigationCurrentEntryChangeEventInit>);
<new NavigationType> = <NavigationCurrentEntryChangeEvent>.navigationType;
<new NavigationHistoryEntry> = <NavigationCurrentEntryChangeEvent>.from;
<new NavigationType> = <NavigationTransition>.navigationType;
<new NavigationHistoryEntry> = <NavigationTransition>.from;
<new Promise_undefined_> = <NavigationTransition>.finished;
!extends NavigateEvent Event;
<new Event> = <NavigateEvent>;
<new NavigateEvent> = new NavigateEvent(<DOMString>,<NavigateEventInit>);
<new NavigationType> = <NavigateEvent>.navigationType;
<new NavigationDestination> = <NavigateEvent>.destination;
<new boolean> = <NavigateEvent>.canIntercept;
<new boolean> = <NavigateEvent>.userInitiated;
<new boolean> = <NavigateEvent>.hashChange;
<new AbortSignal> = <NavigateEvent>.signal;
<new FormData> = <NavigateEvent>.formData;
<new DOMString> = <NavigateEvent>.downloadRequest;
<new any> = <NavigateEvent>.info;
<NavigateEvent>.intercept();
<NavigateEvent>.intercept(<NavigationInterceptOptions>);
<NavigateEvent>.scroll();
<new USVString> = <NavigationDestination>.url;
<new DOMString> = <NavigationDestination>.key;
<new DOMString> = <NavigationDestination>.id;
<new long_long> = <NavigationDestination>.index;
<new boolean> = <NavigationDestination>.sameDocument;
<new any> = <NavigationDestination>.getState();
!extends NavigationHistoryEntry EventTarget;
<new EventTarget> = <NavigationHistoryEntry>;
<new USVString> = <NavigationHistoryEntry>.url;
<new DOMString> = <NavigationHistoryEntry>.key;
<new DOMString> = <NavigationHistoryEntry>.id;
<new long_long> = <NavigationHistoryEntry>.index;
<new boolean> = <NavigationHistoryEntry>.sameDocument;
<new any> = <NavigationHistoryEntry>.getState();
<new EventHandler> = <NavigationHistoryEntry>.ondispose;
<NavigationHistoryEntry>.ondispose = <EventHandler>;
!extends PerformanceNavigationTiming PerformanceResourceTiming;
<new PerformanceResourceTiming> = <PerformanceNavigationTiming>;
<new DOMHighResTimeStamp> = <PerformanceNavigationTiming>.unloadEventStart;
<new DOMHighResTimeStamp> = <PerformanceNavigationTiming>.unloadEventEnd;
<new DOMHighResTimeStamp> = <PerformanceNavigationTiming>.domInteractive;
<new DOMHighResTimeStamp> = <PerformanceNavigationTiming>.domContentLoadedEventStart;
<new DOMHighResTimeStamp> = <PerformanceNavigationTiming>.domContentLoadedEventEnd;
<new DOMHighResTimeStamp> = <PerformanceNavigationTiming>.domComplete;
<new DOMHighResTimeStamp> = <PerformanceNavigationTiming>.loadEventStart;
<new DOMHighResTimeStamp> = <PerformanceNavigationTiming>.loadEventEnd;
<new NavigationTimingType> = <PerformanceNavigationTiming>.type;
<new unsigned_short> = <PerformanceNavigationTiming>.redirectCount;
<new object> = <PerformanceNavigationTiming>.toJSON();
<new unsigned_long_long> = <PerformanceTiming>.navigationStart;
<new unsigned_long_long> = <PerformanceTiming>.unloadEventStart;
<new unsigned_long_long> = <PerformanceTiming>.unloadEventEnd;
<new unsigned_long_long> = <PerformanceTiming>.redirectStart;
<new unsigned_long_long> = <PerformanceTiming>.redirectEnd;
<new unsigned_long_long> = <PerformanceTiming>.fetchStart;
<new unsigned_long_long> = <PerformanceTiming>.domainLookupStart;
<new unsigned_long_long> = <PerformanceTiming>.domainLookupEnd;
<new unsigned_long_long> = <PerformanceTiming>.connectStart;
<new unsigned_long_long> = <PerformanceTiming>.connectEnd;
<new unsigned_long_long> = <PerformanceTiming>.secureConnectionStart;
<new unsigned_long_long> = <PerformanceTiming>.requestStart;
<new unsigned_long_long> = <PerformanceTiming>.responseStart;
<new unsigned_long_long> = <PerformanceTiming>.responseEnd;
<new unsigned_long_long> = <PerformanceTiming>.domLoading;
<new unsigned_long_long> = <PerformanceTiming>.domInteractive;
<new unsigned_long_long> = <PerformanceTiming>.domContentLoadedEventStart;
<new unsigned_long_long> = <PerformanceTiming>.domContentLoadedEventEnd;
<new unsigned_long_long> = <PerformanceTiming>.domComplete;
<new unsigned_long_long> = <PerformanceTiming>.loadEventStart;
<new unsigned_long_long> = <PerformanceTiming>.loadEventEnd;
<new object> = <PerformanceTiming>.toJSON();
<new unsigned_short> = PerformanceNavigation.TYPE_NAVIGATE;
<new unsigned_short> = PerformanceNavigation.TYPE_RELOAD;
<new unsigned_short> = PerformanceNavigation.TYPE_BACK_FORWARD;
<new unsigned_short> = PerformanceNavigation.TYPE_RESERVED;
<new unsigned_short> = <PerformanceNavigation>.type;
<new unsigned_short> = <PerformanceNavigation>.redirectCount;
<new object> = <PerformanceNavigation>.toJSON();
<new PerformanceTiming> = <Performance>.timing;
<new PerformanceNavigation> = <Performance>.navigation;
!extends NetworkInformation EventTarget;
<new EventTarget> = <NetworkInformation>;
<new ConnectionType> = <NetworkInformation>.type;
<new EffectiveConnectionType> = <NetworkInformation>.effectiveType;
<new Megabit> = <NetworkInformation>.downlinkMax;
<new Megabit> = <NetworkInformation>.downlink;
<new Millisecond> = <NetworkInformation>.rtt;
<new EventHandler> = <NetworkInformation>.onchange;
<NetworkInformation>.onchange = <EventHandler>;
!extends Notification EventTarget;
<new EventTarget> = <Notification>;
<new Notification> = new Notification(<DOMString>);
<new Notification> = new Notification(<DOMString>,<NotificationOptions>);
<new NotificationPermission> = <Notification>.permission;
<new Promise_NotificationPermission_> = new Promise(function(x){console.log("ok")});
<new Promise_NotificationPermission_> = <Notification>.requestPermission();
<new Promise_NotificationPermission_> = <Notification>.requestPermission(<NotificationPermissionCallback>);
<new unsigned_long> = <Notification>.maxActions;
<new EventHandler> = <Notification>.onclick;
<Notification>.onclick = <EventHandler>;
<new EventHandler> = <Notification>.onshow;
<Notification>.onshow = <EventHandler>;
<new EventHandler> = <Notification>.onerror;
<Notification>.onerror = <EventHandler>;
<new EventHandler> = <Notification>.onclose;
<Notification>.onclose = <EventHandler>;
<new DOMString> = <Notification>.title;
<new NotificationDirection> = <Notification>.dir;
<new DOMString> = <Notification>.lang;
<new DOMString> = <Notification>.body;
<new DOMString> = <Notification>.tag;
<new USVString> = <Notification>.image;
<new USVString> = <Notification>.icon;
<new USVString> = <Notification>.badge;
<new FrozenArray_unsigned_long_> = [<unsigned_long>];
<new unsigned_long> = <FrozenArray_unsigned_long_>[0];
<new FrozenArray_unsigned_long_> = <Notification>.vibrate;
<new EpochTimeStamp> = <Notification>.timestamp;
<new boolean> = <Notification>.renotify;
<new boolean> = <Notification>.silent;
<new boolean> = <Notification>.requireInteraction;
<new any> = <Notification>.data;
<new FrozenArray_NotificationAction_> = [<NotificationAction>];
<new NotificationAction> = <FrozenArray_NotificationAction_>[0];
<new FrozenArray_NotificationAction_> = <Notification>.actions;
<Notification>.close();
<new Promise_undefined_> = <ServiceWorkerRegistration>.showNotification(<DOMString>);
<new Promise_undefined_> = <ServiceWorkerRegistration>.showNotification(<DOMString>,<NotificationOptions>);
<new sequence_Notification_> = [<Notification>];
<new Notification> = <sequence_Notification_>[0];
<new Promise_sequence_Notification__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_Notification__> = <ServiceWorkerRegistration>.getNotifications();
<new Promise_sequence_Notification__> = <ServiceWorkerRegistration>.getNotifications(<GetNotificationOptions>);
!extends NotificationEvent ExtendableEvent;
<new ExtendableEvent> = <NotificationEvent>;
<new NotificationEvent> = new NotificationEvent(<DOMString>,<NotificationEventInit>);
<new Notification> = <NotificationEvent>.notification;
<new DOMString> = <NotificationEvent>.action;
<new EventHandler> = <ServiceWorkerGlobalScope>.onnotificationclick;
<ServiceWorkerGlobalScope>.onnotificationclick = <EventHandler>;
<new EventHandler> = <ServiceWorkerGlobalScope>.onnotificationclose;
<ServiceWorkerGlobalScope>.onnotificationclose = <EventHandler>;
<new EventHandler> = <Window>.ondeviceorientation;
<Window>.ondeviceorientation = <EventHandler>;
!extends DeviceOrientationEvent Event;
<new Event> = <DeviceOrientationEvent>;
<new DeviceOrientationEvent> = new DeviceOrientationEvent(<DOMString>);
<new DeviceOrientationEvent> = new DeviceOrientationEvent(<DOMString>,<DeviceOrientationEventInit>);
<new double> = <DeviceOrientationEvent>.alpha;
<new double> = <DeviceOrientationEvent>.beta;
<new double> = <DeviceOrientationEvent>.gamma;
<new boolean> = <DeviceOrientationEvent>.absolute;
<new Promise_PermissionState_> = <DeviceOrientationEvent>.requestPermission();
<new EventHandler> = <Window>.ondeviceorientationabsolute;
<Window>.ondeviceorientationabsolute = <EventHandler>;
<new EventHandler> = <Window>.oncompassneedscalibration;
<Window>.oncompassneedscalibration = <EventHandler>;
<new EventHandler> = <Window>.ondevicemotion;
<Window>.ondevicemotion = <EventHandler>;
<new double> = <DeviceMotionEventAcceleration>.x;
<new double> = <DeviceMotionEventAcceleration>.y;
<new double> = <DeviceMotionEventAcceleration>.z;
<new double> = <DeviceMotionEventRotationRate>.alpha;
<new double> = <DeviceMotionEventRotationRate>.beta;
<new double> = <DeviceMotionEventRotationRate>.gamma;
!extends DeviceMotionEvent Event;
<new Event> = <DeviceMotionEvent>;
<new DeviceMotionEvent> = new DeviceMotionEvent(<DOMString>);
<new DeviceMotionEvent> = new DeviceMotionEvent(<DOMString>,<DeviceMotionEventInit>);
<new DeviceMotionEventAcceleration> = <DeviceMotionEvent>.acceleration;
<new DeviceMotionEventAcceleration> = <DeviceMotionEvent>.accelerationIncludingGravity;
<new DeviceMotionEventRotationRate> = <DeviceMotionEvent>.rotationRate;
<new double> = <DeviceMotionEvent>.interval;
<new Promise_PermissionState_> = <DeviceMotionEvent>.requestPermission();
!extends OrientationSensor Sensor;
<new Sensor> = <OrientationSensor>;
<new FrozenArray_double_> = <OrientationSensor>.quaternion;
<OrientationSensor>.populateMatrix(<RotationMatrixType>);
!extends AbsoluteOrientationSensor OrientationSensor;
<new OrientationSensor> = <AbsoluteOrientationSensor>;
<new AbsoluteOrientationSensor> = new AbsoluteOrientationSensor();
<new AbsoluteOrientationSensor> = new AbsoluteOrientationSensor(<OrientationSensorOptions>);
!extends RelativeOrientationSensor OrientationSensor;
<new OrientationSensor> = <RelativeOrientationSensor>;
<new RelativeOrientationSensor> = new RelativeOrientationSensor();
<new RelativeOrientationSensor> = new RelativeOrientationSensor(<OrientationSensorOptions>);
<new EventHandler> = <Document>.onfreeze;
<Document>.onfreeze = <EventHandler>;
<new EventHandler> = <Document>.onresume;
<Document>.onresume = <EventHandler>;
<new boolean> = <Document>.wasDiscarded;
<new ClientLifecycleState> = <Client>.lifecycleState;
!extends PerformancePaintTiming PerformanceEntry;
<new PerformanceEntry> = <PerformancePaintTiming>;
<new PaymentManager> = <ServiceWorkerRegistration>.paymentManager;
<new DOMString> = <PaymentManager>.userHint;
<PaymentManager>.userHint = <DOMString>;
<new sequence_PaymentDelegation_> = [<PaymentDelegation>];
<new PaymentDelegation> = <sequence_PaymentDelegation_>[0];
<new Promise_undefined_> = <PaymentManager>.enableDelegations(<sequence_PaymentDelegation_>);
<new EventHandler> = <ServiceWorkerGlobalScope>.oncanmakepayment;
<ServiceWorkerGlobalScope>.oncanmakepayment = <EventHandler>;
!extends CanMakePaymentEvent ExtendableEvent;
<new ExtendableEvent> = <CanMakePaymentEvent>;
<new CanMakePaymentEvent> = new CanMakePaymentEvent(<DOMString>);
<CanMakePaymentEvent>.respondWith(<Promise_boolean_>);
<new EventHandler> = <ServiceWorkerGlobalScope>.onpaymentrequest;
<ServiceWorkerGlobalScope>.onpaymentrequest = <EventHandler>;
!extends PaymentRequestEvent ExtendableEvent;
<new ExtendableEvent> = <PaymentRequestEvent>;
<new PaymentRequestEvent> = new PaymentRequestEvent(<DOMString>);
<new PaymentRequestEvent> = new PaymentRequestEvent(<DOMString>,<PaymentRequestEventInit>);
<new USVString> = <PaymentRequestEvent>.topOrigin;
<new USVString> = <PaymentRequestEvent>.paymentRequestOrigin;
<new DOMString> = <PaymentRequestEvent>.paymentRequestId;
<new FrozenArray_PaymentMethodData_> = [<PaymentMethodData>];
<new PaymentMethodData> = <FrozenArray_PaymentMethodData_>[0];
<new FrozenArray_PaymentMethodData_> = <PaymentRequestEvent>.methodData;
<new object> = <PaymentRequestEvent>.total;
<new FrozenArray_PaymentDetailsModifier_> = [<PaymentDetailsModifier>];
<new PaymentDetailsModifier> = <FrozenArray_PaymentDetailsModifier_>[0];
<new FrozenArray_PaymentDetailsModifier_> = <PaymentRequestEvent>.modifiers;
<new object> = <PaymentRequestEvent>.paymentOptions;
<new FrozenArray_PaymentShippingOption_> = [<PaymentShippingOption>];
<new PaymentShippingOption> = <FrozenArray_PaymentShippingOption_>[0];
<new FrozenArray_PaymentShippingOption_> = <PaymentRequestEvent>.shippingOptions;
<new Promise_WindowClient_> = new Promise(function(x){console.log("ok")});
<new Promise_WindowClient_> = <PaymentRequestEvent>.openWindow(<USVString>);
<new Promise_PaymentRequestDetailsUpdate_> = new Promise(function(x){console.log("ok")});
<new Promise_PaymentRequestDetailsUpdate_> = <PaymentRequestEvent>.changePaymentMethod(<DOMString>);
<new Promise_PaymentRequestDetailsUpdate_> = <PaymentRequestEvent>.changePaymentMethod(<DOMString>,<object>);
<new Promise_PaymentRequestDetailsUpdate_> = <PaymentRequestEvent>.changeShippingAddress();
<new Promise_PaymentRequestDetailsUpdate_> = <PaymentRequestEvent>.changeShippingAddress(<AddressInit>);
<new Promise_PaymentRequestDetailsUpdate_> = <PaymentRequestEvent>.changeShippingOption(<DOMString>);
<new Promise_PaymentHandlerResponse_> = new Promise(function(x){console.log("ok")});
<PaymentRequestEvent>.respondWith(<Promise_PaymentHandlerResponse_>);
!extends PaymentRequest EventTarget;
<new EventTarget> = <PaymentRequest>;
<new sequence_PaymentMethodData_> = [<PaymentMethodData>];
<new PaymentMethodData> = <sequence_PaymentMethodData_>[0];
<new PaymentRequest> = new PaymentRequest(<sequence_PaymentMethodData_>,<PaymentDetailsInit>);
<new Promise_PaymentResponse_> = new Promise(function(x){console.log("ok")});
<new Promise_PaymentDetailsUpdate_> = new Promise(function(x){console.log("ok")});
<new Promise_PaymentResponse_> = <PaymentRequest>.show();
<new Promise_PaymentResponse_> = <PaymentRequest>.show(<Promise_PaymentDetailsUpdate_>);
<new Promise_undefined_> = <PaymentRequest>.abort();
<new Promise_boolean_> = <PaymentRequest>.canMakePayment();
<new DOMString> = <PaymentRequest>.id;
<new EventHandler> = <PaymentRequest>.onpaymentmethodchange;
<PaymentRequest>.onpaymentmethodchange = <EventHandler>;
!extends PaymentResponse EventTarget;
<new EventTarget> = <PaymentResponse>;
<new object> = <PaymentResponse>.toJSON();
<new DOMString> = <PaymentResponse>.requestId;
<new DOMString> = <PaymentResponse>.methodName;
<new object> = <PaymentResponse>.details;
<new Promise_undefined_> = <PaymentResponse>.complete();
<new Promise_undefined_> = <PaymentResponse>.complete(<PaymentComplete>);
<new Promise_undefined_> = <PaymentResponse>.complete(<PaymentComplete>,<PaymentCompleteDetails>);
<new Promise_undefined_> = <PaymentResponse>.retry();
<new Promise_undefined_> = <PaymentResponse>.retry(<PaymentValidationErrors>);
!extends PaymentMethodChangeEvent PaymentRequestUpdateEvent;
<new PaymentRequestUpdateEvent> = <PaymentMethodChangeEvent>;
<new PaymentMethodChangeEvent> = new PaymentMethodChangeEvent(<DOMString>);
<new PaymentMethodChangeEvent> = new PaymentMethodChangeEvent(<DOMString>,<PaymentMethodChangeEventInit>);
<new DOMString> = <PaymentMethodChangeEvent>.methodName;
<new object> = <PaymentMethodChangeEvent>.methodDetails;
!extends PaymentRequestUpdateEvent Event;
<new Event> = <PaymentRequestUpdateEvent>;
<new PaymentRequestUpdateEvent> = new PaymentRequestUpdateEvent(<DOMString>);
<new PaymentRequestUpdateEvent> = new PaymentRequestUpdateEvent(<DOMString>,<PaymentRequestUpdateEventInit>);
<PaymentRequestUpdateEvent>.updateWith(<Promise_PaymentDetailsUpdate_>);
<new Promise_MemoryMeasurement_> = new Promise(function(x){console.log("ok")});
<new Promise_MemoryMeasurement_> = <Performance>.measureUserAgentSpecificMemory();
<new PerformanceEntryList> = <Performance>.getEntries();
<new PerformanceEntryList> = <Performance>.getEntriesByType(<DOMString>);
<new PerformanceEntryList> = <Performance>.getEntriesByName(<DOMString>);
<new PerformanceEntryList> = <Performance>.getEntriesByName(<DOMString>,<DOMString>);
<new DOMString> = <PerformanceEntry>.name;
<new DOMString> = <PerformanceEntry>.entryType;
<new DOMHighResTimeStamp> = <PerformanceEntry>.startTime;
<new DOMHighResTimeStamp> = <PerformanceEntry>.duration;
<new object> = <PerformanceEntry>.toJSON();
<new PerformanceObserver> = new PerformanceObserver(<PerformanceObserverCallback>);
<PerformanceObserver>.observe();
<PerformanceObserver>.observe(<PerformanceObserverInit>);
<PerformanceObserver>.disconnect();
<new PerformanceEntryList> = <PerformanceObserver>.takeRecords();
<new FrozenArray_DOMString_> = <PerformanceObserver>.supportedEntryTypes;
<new PerformanceEntryList> = <PerformanceObserverEntryList>.getEntries();
<new PerformanceEntryList> = <PerformanceObserverEntryList>.getEntriesByType(<DOMString>);
<new PerformanceEntryList> = <PerformanceObserverEntryList>.getEntriesByName(<DOMString>);
<new PerformanceEntryList> = <PerformanceObserverEntryList>.getEntriesByName(<DOMString>,<DOMString>);
<new EventHandler> = <ServiceWorkerGlobalScope>.onperiodicsync;
<ServiceWorkerGlobalScope>.onperiodicsync = <EventHandler>;
<new PeriodicSyncManager> = <ServiceWorkerRegistration>.periodicSync;
<new Promise_undefined_> = <PeriodicSyncManager>.register(<DOMString>);
<new Promise_undefined_> = <PeriodicSyncManager>.register(<DOMString>,<BackgroundSyncOptions>);
<new Promise_sequence_DOMString__> = <PeriodicSyncManager>.getTags();
<new Promise_undefined_> = <PeriodicSyncManager>.unregister(<DOMString>);
!extends PeriodicSyncEvent ExtendableEvent;
<new ExtendableEvent> = <PeriodicSyncEvent>;
<new PeriodicSyncEvent> = new PeriodicSyncEvent(<DOMString>,<PeriodicSyncEventInit>);
<new DOMString> = <PeriodicSyncEvent>.tag;
<PermissionsPolicy>.allowsFeature(<DOMString>);
<PermissionsPolicy>.allowsFeature(<DOMString>,<DOMString>);
<new sequence_DOMString_> = <PermissionsPolicy>.features();
<new sequence_DOMString_> = <PermissionsPolicy>.allowedFeatures();
<new sequence_DOMString_> = <PermissionsPolicy>.getAllowlistForFeature(<DOMString>);
<new PermissionsPolicy> = <Document>.permissionsPolicy;
<new PermissionsPolicy> = <HTMLIFrameElement>.permissionsPolicy;
!extends PermissionsPolicyViolationReportBody ReportBody;
<new ReportBody> = <PermissionsPolicyViolationReportBody>;
<new DOMString> = <PermissionsPolicyViolationReportBody>.featureId;
<new DOMString> = <PermissionsPolicyViolationReportBody>.sourceFile;
<new long> = <PermissionsPolicyViolationReportBody>.lineNumber;
<new long> = <PermissionsPolicyViolationReportBody>.columnNumber;
<new DOMString> = <PermissionsPolicyViolationReportBody>.disposition;
<new Promise_PermissionStatus_> = new Promise(function(x){console.log("ok")});
<new Promise_PermissionStatus_> = <Permissions>.request(<object>);
<new Promise_PermissionStatus_> = <Permissions>.revoke(<object>);
<new Permissions> = <Navigator>.permissions;
<new Permissions> = <WorkerNavigator>.permissions;
<new Promise_PermissionStatus_> = <Permissions>.query(<object>);
!extends PermissionStatus EventTarget;
<new EventTarget> = <PermissionStatus>;
<new PermissionState> = <PermissionStatus>.state;
<new DOMString> = <PermissionStatus>.name;
<new EventHandler> = <PermissionStatus>.onchange;
<PermissionStatus>.onchange = <EventHandler>;
<new Promise_PictureInPictureWindow_> = new Promise(function(x){console.log("ok")});
<new Promise_PictureInPictureWindow_> = <HTMLVideoElement>.requestPictureInPicture();
<new EventHandler> = <HTMLVideoElement>.onenterpictureinpicture;
<HTMLVideoElement>.onenterpictureinpicture = <EventHandler>;
<new EventHandler> = <HTMLVideoElement>.onleavepictureinpicture;
<HTMLVideoElement>.onleavepictureinpicture = <EventHandler>;
<new boolean> = <HTMLVideoElement>.disablePictureInPicture;
<HTMLVideoElement>.disablePictureInPicture = <boolean>;
<new boolean> = <Document>.pictureInPictureEnabled;
<new Promise_undefined_> = <Document>.exitPictureInPicture();
!extends PictureInPictureWindow EventTarget;
<new EventTarget> = <PictureInPictureWindow>;
<new long> = <PictureInPictureWindow>.width;
<new long> = <PictureInPictureWindow>.height;
<new EventHandler> = <PictureInPictureWindow>.onresize;
<PictureInPictureWindow>.onresize = <EventHandler>;
!extends PictureInPictureEvent Event;
<new Event> = <PictureInPictureEvent>;
<new PictureInPictureEvent> = new PictureInPictureEvent(<DOMString>,<PictureInPictureEventInit>);
<new PictureInPictureWindow> = <PictureInPictureEvent>.pictureInPictureWindow;
!extends PointerEvent MouseEvent;
<new MouseEvent> = <PointerEvent>;
<new PointerEvent> = new PointerEvent(<DOMString>);
<new PointerEvent> = new PointerEvent(<DOMString>,<PointerEventInit>);
<new long> = <PointerEvent>.pointerId;
<new double> = <PointerEvent>.width;
<new double> = <PointerEvent>.height;
<new float> = <PointerEvent>.pressure;
<new float> = <PointerEvent>.tangentialPressure;
<new long> = <PointerEvent>.tiltX;
<new long> = <PointerEvent>.tiltY;
<new long> = <PointerEvent>.twist;
<new double> = <PointerEvent>.altitudeAngle;
<new double> = <PointerEvent>.azimuthAngle;
<new DOMString> = <PointerEvent>.pointerType;
<new boolean> = <PointerEvent>.isPrimary;
<new sequence_PointerEvent_> = [<PointerEvent>];
<new PointerEvent> = <sequence_PointerEvent_>[0];
<new sequence_PointerEvent_> = <PointerEvent>.getCoalescedEvents();
<new sequence_PointerEvent_> = <PointerEvent>.getPredictedEvents();
<Element>.setPointerCapture(<long>);
<Element>.releasePointerCapture(<long>);
<Element>.hasPointerCapture(<long>);
<new long> = <Navigator>.maxTouchPoints;
<Element>.requestPointerLock();
<new EventHandler> = <Document>.onpointerlockchange;
<Document>.onpointerlockchange = <EventHandler>;
<new EventHandler> = <Document>.onpointerlockerror;
<Document>.onpointerlockerror = <EventHandler>;
<Document>.exitPointerLock();
<new double> = <MouseEvent>.movementX;
<new double> = <MouseEvent>.movementY;
!extends HTMLPortalElement HTMLElement;
<new HTMLElement> = <HTMLPortalElement>;
<new USVString> = <HTMLPortalElement>.src;
<HTMLPortalElement>.src = <USVString>;
<new DOMString> = <HTMLPortalElement>.referrerPolicy;
<HTMLPortalElement>.referrerPolicy = <DOMString>;
<new Promise_undefined_> = <HTMLPortalElement>.activate();
<new Promise_undefined_> = <HTMLPortalElement>.activate(<PortalActivateOptions>);
<HTMLPortalElement>.postMessage(<any>);
<HTMLPortalElement>.postMessage(<any>,<StructuredSerializeOptions>);
<new EventHandler> = <HTMLPortalElement>.onmessage;
<HTMLPortalElement>.onmessage = <EventHandler>;
<new EventHandler> = <HTMLPortalElement>.onmessageerror;
<HTMLPortalElement>.onmessageerror = <EventHandler>;
<new PortalHost> = <Window>.portalHost;
!extends PortalHost EventTarget;
<new EventTarget> = <PortalHost>;
<PortalHost>.postMessage(<any>);
<PortalHost>.postMessage(<any>,<StructuredSerializeOptions>);
<new EventHandler> = <PortalHost>.onmessage;
<PortalHost>.onmessage = <EventHandler>;
<new EventHandler> = <PortalHost>.onmessageerror;
<PortalHost>.onmessageerror = <EventHandler>;
!extends PortalActivateEvent Event;
<new Event> = <PortalActivateEvent>;
<new PortalActivateEvent> = new PortalActivateEvent(<DOMString>);
<new PortalActivateEvent> = new PortalActivateEvent(<DOMString>,<PortalActivateEventInit>);
<new any> = <PortalActivateEvent>.data;
<new HTMLPortalElement> = <PortalActivateEvent>.adoptPredecessor();
<new boolean> = <Document>.prerendering;
<new EventHandler> = <Document>.onprerenderingchange;
<Document>.onprerenderingchange = <EventHandler>;
<new DOMHighResTimeStamp> = <PerformanceNavigationTiming>.activationStart;
<new Presentation> = <Navigator>.presentation;
<new PresentationRequest> = <Presentation>.defaultRequest;
<Presentation>.defaultRequest = <PresentationRequest>;
<Presentation>.defaultRequest = null;
<new PresentationReceiver> = <Presentation>.receiver;
!extends PresentationRequest EventTarget;
<new EventTarget> = <PresentationRequest>;
<new PresentationRequest> = new PresentationRequest(<USVString>);
<new PresentationRequest> = new PresentationRequest(<sequence_USVString_>);
<new Promise_PresentationConnection_> = new Promise(function(x){console.log("ok")});
<new Promise_PresentationConnection_> = <PresentationRequest>.start();
<new Promise_PresentationConnection_> = <PresentationRequest>.reconnect(<USVString>);
<new Promise_PresentationAvailability_> = new Promise(function(x){console.log("ok")});
<new Promise_PresentationAvailability_> = <PresentationRequest>.getAvailability();
<new EventHandler> = <PresentationRequest>.onconnectionavailable;
<PresentationRequest>.onconnectionavailable = <EventHandler>;
!extends PresentationAvailability EventTarget;
<new EventTarget> = <PresentationAvailability>;
<new boolean> = <PresentationAvailability>.value;
<new EventHandler> = <PresentationAvailability>.onchange;
<PresentationAvailability>.onchange = <EventHandler>;
!extends PresentationConnectionAvailableEvent Event;
<new Event> = <PresentationConnectionAvailableEvent>;
<new PresentationConnectionAvailableEvent> = new PresentationConnectionAvailableEvent(<DOMString>,<PresentationConnectionAvailableEventInit>);
<new PresentationConnection> = <PresentationConnectionAvailableEvent>.connection;
!extends PresentationConnection EventTarget;
<new EventTarget> = <PresentationConnection>;
<new USVString> = <PresentationConnection>.id;
<new USVString> = <PresentationConnection>.url;
<new PresentationConnectionState> = <PresentationConnection>.state;
<PresentationConnection>.close();
<PresentationConnection>.terminate();
<new EventHandler> = <PresentationConnection>.onconnect;
<PresentationConnection>.onconnect = <EventHandler>;
<new EventHandler> = <PresentationConnection>.onclose;
<PresentationConnection>.onclose = <EventHandler>;
<new EventHandler> = <PresentationConnection>.onterminate;
<PresentationConnection>.onterminate = <EventHandler>;
<new BinaryType> = <PresentationConnection>.binaryType;
<PresentationConnection>.binaryType = <BinaryType>;
<new EventHandler> = <PresentationConnection>.onmessage;
<PresentationConnection>.onmessage = <EventHandler>;
<PresentationConnection>.send(<DOMString>);
<PresentationConnection>.send(<Blob>);
<PresentationConnection>.send(<ArrayBuffer>);
<PresentationConnection>.send(<ArrayBufferView>);
!extends PresentationConnectionCloseEvent Event;
<new Event> = <PresentationConnectionCloseEvent>;
<new PresentationConnectionCloseEvent> = new PresentationConnectionCloseEvent(<DOMString>,<PresentationConnectionCloseEventInit>);
<new PresentationConnectionCloseReason> = <PresentationConnectionCloseEvent>.reason;
<new DOMString> = <PresentationConnectionCloseEvent>.message;
<new Promise_PresentationConnectionList_> = new Promise(function(x){console.log("ok")});
<new Promise_PresentationConnectionList_> = <PresentationReceiver>.connectionList;
!extends PresentationConnectionList EventTarget;
<new EventTarget> = <PresentationConnectionList>;
<new FrozenArray_PresentationConnection_> = [<PresentationConnection>];
<new PresentationConnection> = <FrozenArray_PresentationConnection_>[0];
<new FrozenArray_PresentationConnection_> = <PresentationConnectionList>.connections;
<new EventHandler> = <PresentationConnectionList>.onconnectionavailable;
<PresentationConnectionList>.onconnectionavailable = <EventHandler>;
<new DOMString> = <HTMLImageElement>.fetchPriority;
<HTMLImageElement>.fetchPriority = <DOMString>;
<new DOMString> = <HTMLLinkElement>.fetchPriority;
<HTMLLinkElement>.fetchPriority = <DOMString>;
<new DOMString> = <HTMLScriptElement>.fetchPriority;
<HTMLScriptElement>.fetchPriority = <DOMString>;
<new DOMString> = <HTMLIFrameElement>.fetchPriority;
<HTMLIFrameElement>.fetchPriority = <DOMString>;
<new unsigned_long> = <HTMLAnchorElement>.attributionSourceId;
<HTMLAnchorElement>.attributionSourceId = <unsigned_long>;
!extends ProximitySensor Sensor;
<new Sensor> = <ProximitySensor>;
<new ProximitySensor> = new ProximitySensor();
<new ProximitySensor> = new ProximitySensor(<SensorOptions>);
<new double> = <ProximitySensor>.distance;
<new double> = <ProximitySensor>.max;
<new boolean> = <ProximitySensor>.near;
<new PushManager> = <ServiceWorkerRegistration>.pushManager;
<new FrozenArray_DOMString_> = <PushManager>.supportedContentEncodings;
<new Promise_PushSubscription_> = new Promise(function(x){console.log("ok")});
<new Promise_PushSubscription_> = <PushManager>.subscribe();
<new Promise_PushSubscription_> = <PushManager>.subscribe(<PushSubscriptionOptionsInit>);
<new Promise_PushSubscription_> = <PushManager>.getSubscription();
<new Promise_PermissionState_> = <PushManager>.permissionState();
<new Promise_PermissionState_> = <PushManager>.permissionState(<PushSubscriptionOptionsInit>);
<new boolean> = <PushSubscriptionOptions>.userVisibleOnly;
<new ArrayBuffer> = <PushSubscriptionOptions>.applicationServerKey;
<new USVString> = <PushSubscription>.endpoint;
<new EpochTimeStamp> = <PushSubscription>.expirationTime;
<new PushSubscriptionOptions> = <PushSubscription>.options;
<new ArrayBuffer> = <PushSubscription>.getKey(<PushEncryptionKeyName>);
<new Promise_boolean_> = <PushSubscription>.unsubscribe();
<new PushSubscriptionJSON> = <PushSubscription>.toJSON();
<new ArrayBuffer> = <PushMessageData>.arrayBuffer();
<new Blob> = <PushMessageData>.blob();
<new any> = <PushMessageData>.json();
<new USVString> = <PushMessageData>.text();
<new EventHandler> = <ServiceWorkerGlobalScope>.onpush;
<ServiceWorkerGlobalScope>.onpush = <EventHandler>;
<new EventHandler> = <ServiceWorkerGlobalScope>.onpushsubscriptionchange;
<ServiceWorkerGlobalScope>.onpushsubscriptionchange = <EventHandler>;
!extends PushEvent ExtendableEvent;
<new ExtendableEvent> = <PushEvent>;
<new PushEvent> = new PushEvent(<DOMString>);
<new PushEvent> = new PushEvent(<DOMString>,<PushEventInit>);
<new PushMessageData> = <PushEvent>.data;
!extends PushSubscriptionChangeEvent ExtendableEvent;
<new ExtendableEvent> = <PushSubscriptionChangeEvent>;
<new PushSubscriptionChangeEvent> = new PushSubscriptionChangeEvent(<DOMString>);
<new PushSubscriptionChangeEvent> = new PushSubscriptionChangeEvent(<DOMString>,<PushSubscriptionChangeEventInit>);
<new PushSubscription> = <PushSubscriptionChangeEvent>.newSubscription;
<new PushSubscription> = <PushSubscriptionChangeEvent>.oldSubscription;
<new XRCamera> = <XRView>.camera;
<new unsigned_long> = <XRCamera>.width;
<new unsigned_long> = <XRCamera>.height;
<new WebGLTexture> = <XRWebGLBinding>.getCameraImage(<XRCamera>);
!extends RemotePlayback EventTarget;
<new EventTarget> = <RemotePlayback>;
<new Promise_long_> = new Promise(function(x){console.log("ok")});
<new Promise_long_> = <RemotePlayback>.watchAvailability(<RemotePlaybackAvailabilityCallback>);
<new Promise_undefined_> = <RemotePlayback>.cancelWatchAvailability();
<new Promise_undefined_> = <RemotePlayback>.cancelWatchAvailability(<long>);
<new RemotePlaybackState> = <RemotePlayback>.state;
<new EventHandler> = <RemotePlayback>.onconnecting;
<RemotePlayback>.onconnecting = <EventHandler>;
<new EventHandler> = <RemotePlayback>.onconnect;
<RemotePlayback>.onconnect = <EventHandler>;
<new EventHandler> = <RemotePlayback>.ondisconnect;
<RemotePlayback>.ondisconnect = <EventHandler>;
<new Promise_undefined_> = <RemotePlayback>.prompt();
<new RemotePlayback> = <HTMLMediaElement>.remote;
<new boolean> = <HTMLMediaElement>.disableRemotePlayback;
<HTMLMediaElement>.disableRemotePlayback = <boolean>;
<new object> = <ReportBody>.toJSON();
<new object> = <Report>.toJSON();
<new DOMString> = <Report>.type;
<new DOMString> = <Report>.url;
<new ReportBody> = <Report>.body;
<new ReportingObserver> = new ReportingObserver(<ReportingObserverCallback>);
<new ReportingObserver> = new ReportingObserver(<ReportingObserverCallback>,<ReportingObserverOptions>);
<ReportingObserver>.observe();
<ReportingObserver>.disconnect();
<new ReportList> = <ReportingObserver>.takeRecords();
<new unsigned_long> = <Window>.requestIdleCallback(<IdleRequestCallback>);
<new unsigned_long> = <Window>.requestIdleCallback(<IdleRequestCallback>,<IdleRequestOptions>);
<Window>.cancelIdleCallback(<unsigned_long>);
<new DOMHighResTimeStamp> = <IdleDeadline>.timeRemaining();
<new boolean> = <IdleDeadline>.didTimeout;
<new ResizeObserver> = new ResizeObserver(<ResizeObserverCallback>);
<ResizeObserver>.observe(<Element>);
<ResizeObserver>.observe(<Element>,<ResizeObserverOptions>);
<ResizeObserver>.unobserve(<Element>);
<ResizeObserver>.disconnect();
<new Element> = <ResizeObserverEntry>.target;
<new DOMRectReadOnly> = <ResizeObserverEntry>.contentRect;
<new FrozenArray_ResizeObserverSize_> = [<ResizeObserverSize>];
<new ResizeObserverSize> = <FrozenArray_ResizeObserverSize_>[0];
<new FrozenArray_ResizeObserverSize_> = <ResizeObserverEntry>.borderBoxSize;
<new FrozenArray_ResizeObserverSize_> = <ResizeObserverEntry>.contentBoxSize;
<new FrozenArray_ResizeObserverSize_> = <ResizeObserverEntry>.devicePixelContentBoxSize;
<new unrestricted_double> = <ResizeObserverSize>.inlineSize;
<new unrestricted_double> = <ResizeObserverSize>.blockSize;
!extends PerformanceResourceTiming PerformanceEntry;
<new PerformanceEntry> = <PerformanceResourceTiming>;
<new DOMString> = <PerformanceResourceTiming>.initiatorType;
<new ByteString> = <PerformanceResourceTiming>.nextHopProtocol;
<new DOMHighResTimeStamp> = <PerformanceResourceTiming>.workerStart;
<new DOMHighResTimeStamp> = <PerformanceResourceTiming>.redirectStart;
<new DOMHighResTimeStamp> = <PerformanceResourceTiming>.redirectEnd;
<new DOMHighResTimeStamp> = <PerformanceResourceTiming>.fetchStart;
<new DOMHighResTimeStamp> = <PerformanceResourceTiming>.domainLookupStart;
<new DOMHighResTimeStamp> = <PerformanceResourceTiming>.domainLookupEnd;
<new DOMHighResTimeStamp> = <PerformanceResourceTiming>.connectStart;
<new DOMHighResTimeStamp> = <PerformanceResourceTiming>.connectEnd;
<new DOMHighResTimeStamp> = <PerformanceResourceTiming>.secureConnectionStart;
<new DOMHighResTimeStamp> = <PerformanceResourceTiming>.requestStart;
<new DOMHighResTimeStamp> = <PerformanceResourceTiming>.responseStart;
<new DOMHighResTimeStamp> = <PerformanceResourceTiming>.responseEnd;
<new unsigned_long_long> = <PerformanceResourceTiming>.transferSize;
<new unsigned_long_long> = <PerformanceResourceTiming>.encodedBodySize;
<new unsigned_long_long> = <PerformanceResourceTiming>.decodedBodySize;
<new unsigned_short> = <PerformanceResourceTiming>.responseStatus;
<new RenderBlockingStatusType> = <PerformanceResourceTiming>.renderBlockingStatus;
<new object> = <PerformanceResourceTiming>.toJSON();
<Performance>.clearResourceTimings();
<Performance>.setResourceTimingBufferSize(<unsigned_long>);
<new EventHandler> = <Performance>.onresourcetimingbufferfull;
<Performance>.onresourcetimingbufferfull = <EventHandler>;
<new Sanitizer> = new Sanitizer();
<new Sanitizer> = new Sanitizer(<SanitizerConfig>);
<new union_Document1DocumentFragment_> = <Document>;
<new union_Document1DocumentFragment_> = <DocumentFragment>;
<new DocumentFragment> = <Sanitizer>.sanitize(<union_Document1DocumentFragment_>);
<new Element> = <Sanitizer>.sanitizeFor(<DOMString>,<DOMString>);
<new SanitizerConfig> = <Sanitizer>.getConfiguration();
<new SanitizerConfig> = <Sanitizer>.getDefaultConfiguration();
<Element>.setHTML(<DOMString>);
<Element>.setHTML(<DOMString>,<SetHTMLOptions>);
<new Promise_any_> = <Scheduler>.postTask(<SchedulerPostTaskCallback>);
<new Promise_any_> = <Scheduler>.postTask(<SchedulerPostTaskCallback>,<SchedulerPostTaskOptions>);
!extends TaskPriorityChangeEvent Event;
<new Event> = <TaskPriorityChangeEvent>;
<new TaskPriorityChangeEvent> = new TaskPriorityChangeEvent(<DOMString>,<TaskPriorityChangeEventInit>);
<new TaskPriority> = <TaskPriorityChangeEvent>.previousPriority;
!extends TaskController AbortController;
<new AbortController> = <TaskController>;
<new TaskController> = new TaskController();
<new TaskController> = new TaskController(<TaskControllerInit>);
<TaskController>.setPriority(<TaskPriority>);
!extends TaskSignal AbortSignal;
<new AbortSignal> = <TaskSignal>;
<new TaskPriority> = <TaskSignal>.priority;
<new EventHandler> = <TaskSignal>.onprioritychange;
<TaskSignal>.onprioritychange = <EventHandler>;
<new Promise_MediaStream_> = <MediaDevices>.getDisplayMedia();
<new Promise_MediaStream_> = <MediaDevices>.getDisplayMedia(<DisplayMediaStreamOptions>);
<new CaptureController> = new CaptureController();
<CaptureController>.setFocusBehavior(<CaptureStartFocusBehavior>);
<new ScreenOrientation> = <Screen>.orientation;
!extends ScreenOrientation EventTarget;
<new EventTarget> = <ScreenOrientation>;
<new Promise_undefined_> = <ScreenOrientation>.lock(<OrientationLockType>);
<ScreenOrientation>.unlock();
<new OrientationType> = <ScreenOrientation>.type;
<new unsigned_short> = <ScreenOrientation>.angle;
<new EventHandler> = <ScreenOrientation>.onchange;
<ScreenOrientation>.onchange = <EventHandler>;
<new WakeLock> = <Navigator>.wakeLock;
<new Promise_WakeLockSentinel_> = new Promise(function(x){console.log("ok")});
<new Promise_WakeLockSentinel_> = <WakeLock>.request();
<new Promise_WakeLockSentinel_> = <WakeLock>.request(<WakeLockType>);
!extends WakeLockSentinel EventTarget;
<new EventTarget> = <WakeLockSentinel>;
<new boolean> = <WakeLockSentinel>.released;
<new WakeLockType> = <WakeLockSentinel>.type;
<new Promise_undefined_> = <WakeLockSentinel>.release();
<new EventHandler> = <WakeLockSentinel>.onrelease;
<WakeLockSentinel>.onrelease = <EventHandler>;
!extends ScrollTimeline AnimationTimeline;
<new AnimationTimeline> = <ScrollTimeline>;
<new ScrollTimeline> = new ScrollTimeline();
<new ScrollTimeline> = new ScrollTimeline(<ScrollTimelineOptions>);
<new Element> = <ScrollTimeline>.source;
<new ScrollAxis> = <ScrollTimeline>.axis;
!extends ViewTimeline ScrollTimeline;
<new ScrollTimeline> = <ViewTimeline>;
<new ViewTimeline> = new ViewTimeline();
<new ViewTimeline> = new ViewTimeline(<ViewTimelineOptions>);
<new Element> = <ViewTimeline>.subject;
<new CSSNumericValue> = <ViewTimeline>.startOffset;
<new CSSNumericValue> = <ViewTimeline>.endOffset;
<new CSSNumericValue> = <AnimationTimeline>.getCurrentTime();
<new CSSNumericValue> = <AnimationTimeline>.getCurrentTime(<CSSOMString>);
<new FragmentDirective> = <Document>.fragmentDirective;
<new Node> = <Selection>.anchorNode;
<new unsigned_long> = <Selection>.anchorOffset;
<new Node> = <Selection>.focusNode;
<new unsigned_long> = <Selection>.focusOffset;
<new boolean> = <Selection>.isCollapsed;
<new unsigned_long> = <Selection>.rangeCount;
<new DOMString> = <Selection>.type;
<new Range> = <Selection>.getRangeAt(<unsigned_long>);
<Selection>.addRange(<Range>);
<Selection>.removeRange(<Range>);
<Selection>.removeAllRanges();
<Selection>.empty();
<new StaticRange> = <Selection>.getComposedRange();
<new StaticRange> = <Selection>.getComposedRange(<ShadowRoot>);
<Selection>.collapse(<Node>);
<Selection>.collapse(<Node>,<unsigned_long>);
<Selection>.setPosition(<Node>);
<Selection>.setPosition(<Node>,<unsigned_long>);
<Selection>.collapseToStart();
<Selection>.collapseToEnd();
<Selection>.extend(<Node>);
<Selection>.extend(<Node>,<unsigned_long>);
<Selection>.setBaseAndExtent(<Node>,<unsigned_long>,<Node>,<unsigned_long>);
<Selection>.selectAllChildren(<Node>);
<Selection>.modify();
<Selection>.modify(<DOMString>);
<Selection>.modify(<DOMString>,<DOMString>);
<Selection>.modify(<DOMString>,<DOMString>,<DOMString>);
<Selection>.deleteFromDocument();
<Selection>.containsNode(<Node>);
<Selection>.containsNode(<Node>,<boolean>);
<new Selection> = <Document>.getSelection();
<new Selection> = <Window>.getSelection();
<new Serial> = <Navigator>.serial;
<new Serial> = <WorkerNavigator>.serial;
!extends Serial EventTarget;
<new EventTarget> = <Serial>;
<new EventHandler> = <Serial>.onconnect;
<Serial>.onconnect = <EventHandler>;
<new EventHandler> = <Serial>.ondisconnect;
<Serial>.ondisconnect = <EventHandler>;
<new sequence_SerialPort_> = [<SerialPort>];
<new SerialPort> = <sequence_SerialPort_>[0];
<new Promise_sequence_SerialPort__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_SerialPort__> = <Serial>.getPorts();
<new Promise_SerialPort_> = new Promise(function(x){console.log("ok")});
<new Promise_SerialPort_> = <Serial>.requestPort();
<new Promise_SerialPort_> = <Serial>.requestPort(<SerialPortRequestOptions>);
!extends SerialPort EventTarget;
<new EventTarget> = <SerialPort>;
<new EventHandler> = <SerialPort>.onconnect;
<SerialPort>.onconnect = <EventHandler>;
<new EventHandler> = <SerialPort>.ondisconnect;
<SerialPort>.ondisconnect = <EventHandler>;
<new ReadableStream> = <SerialPort>.readable;
<new WritableStream> = <SerialPort>.writable;
<new SerialPortInfo> = <SerialPort>.getInfo();
<new Promise_undefined_> = <SerialPort>.open(<SerialOptions>);
<new Promise_undefined_> = <SerialPort>.setSignals();
<new Promise_undefined_> = <SerialPort>.setSignals(<SerialOutputSignals>);
<new Promise_SerialInputSignals_> = new Promise(function(x){console.log("ok")});
<new Promise_SerialInputSignals_> = <SerialPort>.getSignals();
<new Promise_undefined_> = <SerialPort>.close();
<new Promise_undefined_> = <SerialPort>.forget();
<new DOMString> = <PerformanceServerTiming>.name;
<new DOMHighResTimeStamp> = <PerformanceServerTiming>.duration;
<new DOMString> = <PerformanceServerTiming>.description;
<new object> = <PerformanceServerTiming>.toJSON();
<new FrozenArray_PerformanceServerTiming_> = [<PerformanceServerTiming>];
<new PerformanceServerTiming> = <FrozenArray_PerformanceServerTiming_>[0];
<new FrozenArray_PerformanceServerTiming_> = <PerformanceResourceTiming>.serverTiming;
!extends ServiceWorker EventTarget;
<new EventTarget> = <ServiceWorker>;
<new USVString> = <ServiceWorker>.scriptURL;
<new ServiceWorkerState> = <ServiceWorker>.state;
<ServiceWorker>.postMessage(<any>,<sequence_object_>);
<ServiceWorker>.postMessage(<any>);
<ServiceWorker>.postMessage(<any>,<StructuredSerializeOptions>);
<new EventHandler> = <ServiceWorker>.onstatechange;
<ServiceWorker>.onstatechange = <EventHandler>;
!extends ServiceWorkerRegistration EventTarget;
<new EventTarget> = <ServiceWorkerRegistration>;
<new ServiceWorker> = <ServiceWorkerRegistration>.installing;
<new ServiceWorker> = <ServiceWorkerRegistration>.waiting;
<new ServiceWorker> = <ServiceWorkerRegistration>.active;
<new NavigationPreloadManager> = <ServiceWorkerRegistration>.navigationPreload;
<new USVString> = <ServiceWorkerRegistration>.scope;
<new ServiceWorkerUpdateViaCache> = <ServiceWorkerRegistration>.updateViaCache;
<new Promise_undefined_> = <ServiceWorkerRegistration>.update();
<new Promise_boolean_> = <ServiceWorkerRegistration>.unregister();
<new EventHandler> = <ServiceWorkerRegistration>.onupdatefound;
<ServiceWorkerRegistration>.onupdatefound = <EventHandler>;
<new ServiceWorkerContainer> = <Navigator>.serviceWorker;
<new ServiceWorkerContainer> = <WorkerNavigator>.serviceWorker;
!extends ServiceWorkerContainer EventTarget;
<new EventTarget> = <ServiceWorkerContainer>;
<new ServiceWorker> = <ServiceWorkerContainer>.controller;
<new Promise_ServiceWorkerRegistration_> = new Promise(function(x){console.log("ok")});
<new Promise_ServiceWorkerRegistration_> = <ServiceWorkerContainer>.ready;
<new Promise_ServiceWorkerRegistration_> = <ServiceWorkerContainer>.register(<USVString>);
<new Promise_ServiceWorkerRegistration_> = <ServiceWorkerContainer>.register(<USVString>,<RegistrationOptions>);
<new union_ServiceWorkerRegistration1undefined_> = <ServiceWorkerRegistration>;
<new union_ServiceWorkerRegistration1undefined_> = <undefined>;
<new Promise_union_ServiceWorkerRegistration1undefined__> = new Promise(function(x){console.log("ok")});
<new Promise_union_ServiceWorkerRegistration1undefined__> = <ServiceWorkerContainer>.getRegistration();
<new Promise_union_ServiceWorkerRegistration1undefined__> = <ServiceWorkerContainer>.getRegistration(<USVString>);
<new FrozenArray_ServiceWorkerRegistration_> = [<ServiceWorkerRegistration>];
<new ServiceWorkerRegistration> = <FrozenArray_ServiceWorkerRegistration_>[0];
<new Promise_FrozenArray_ServiceWorkerRegistration__> = new Promise(function(x){console.log("ok")});
<new Promise_FrozenArray_ServiceWorkerRegistration__> = <ServiceWorkerContainer>.getRegistrations();
<ServiceWorkerContainer>.startMessages();
<new EventHandler> = <ServiceWorkerContainer>.oncontrollerchange;
<ServiceWorkerContainer>.oncontrollerchange = <EventHandler>;
<new EventHandler> = <ServiceWorkerContainer>.onmessage;
<ServiceWorkerContainer>.onmessage = <EventHandler>;
<new EventHandler> = <ServiceWorkerContainer>.onmessageerror;
<ServiceWorkerContainer>.onmessageerror = <EventHandler>;
<new Promise_undefined_> = <NavigationPreloadManager>.enable();
<new Promise_undefined_> = <NavigationPreloadManager>.disable();
<new Promise_undefined_> = <NavigationPreloadManager>.setHeaderValue(<ByteString>);
<new Promise_NavigationPreloadState_> = new Promise(function(x){console.log("ok")});
<new Promise_NavigationPreloadState_> = <NavigationPreloadManager>.getState();
!extends ServiceWorkerGlobalScope WorkerGlobalScope;
<new WorkerGlobalScope> = <ServiceWorkerGlobalScope>;
<new Clients> = <ServiceWorkerGlobalScope>.clients;
<new ServiceWorkerRegistration> = <ServiceWorkerGlobalScope>.registration;
<new ServiceWorker> = <ServiceWorkerGlobalScope>.serviceWorker;
<new Promise_undefined_> = <ServiceWorkerGlobalScope>.skipWaiting();
<new EventHandler> = <ServiceWorkerGlobalScope>.oninstall;
<ServiceWorkerGlobalScope>.oninstall = <EventHandler>;
<new EventHandler> = <ServiceWorkerGlobalScope>.onactivate;
<ServiceWorkerGlobalScope>.onactivate = <EventHandler>;
<new EventHandler> = <ServiceWorkerGlobalScope>.onfetch;
<ServiceWorkerGlobalScope>.onfetch = <EventHandler>;
<new EventHandler> = <ServiceWorkerGlobalScope>.onmessage;
<ServiceWorkerGlobalScope>.onmessage = <EventHandler>;
<new EventHandler> = <ServiceWorkerGlobalScope>.onmessageerror;
<ServiceWorkerGlobalScope>.onmessageerror = <EventHandler>;
<new USVString> = <Client>.url;
<new FrameType> = <Client>.frameType;
<new DOMString> = <Client>.id;
<new ClientType> = <Client>.type;
<Client>.postMessage(<any>,<sequence_object_>);
<Client>.postMessage(<any>);
<Client>.postMessage(<any>,<StructuredSerializeOptions>);
!extends WindowClient Client;
<new Client> = <WindowClient>;
<new DocumentVisibilityState> = <WindowClient>.visibilityState;
<new boolean> = <WindowClient>.focused;
<new FrozenArray_USVString_> = [<USVString>];
<new USVString> = <FrozenArray_USVString_>[0];
<new FrozenArray_USVString_> = <WindowClient>.ancestorOrigins;
<new Promise_WindowClient_> = <WindowClient>.focus();
<new Promise_WindowClient_> = <WindowClient>.navigate(<USVString>);
<new union_Client1undefined_> = <Client>;
<new union_Client1undefined_> = <undefined>;
<new Promise_union_Client1undefined__> = new Promise(function(x){console.log("ok")});
<new Promise_union_Client1undefined__> = <Clients>.get(<DOMString>);
<new FrozenArray_Client_> = [<Client>];
<new Client> = <FrozenArray_Client_>[0];
<new Promise_FrozenArray_Client__> = new Promise(function(x){console.log("ok")});
<new Promise_FrozenArray_Client__> = <Clients>.matchAll();
<new Promise_FrozenArray_Client__> = <Clients>.matchAll(<ClientQueryOptions>);
<new Promise_WindowClient_> = <Clients>.openWindow(<USVString>);
<new Promise_undefined_> = <Clients>.claim();
!extends ExtendableEvent Event;
<new Event> = <ExtendableEvent>;
<new ExtendableEvent> = new ExtendableEvent(<DOMString>);
<new ExtendableEvent> = new ExtendableEvent(<DOMString>,<ExtendableEventInit>);
<ExtendableEvent>.waitUntil(<Promise_any_>);
!extends FetchEvent ExtendableEvent;
<new ExtendableEvent> = <FetchEvent>;
<new FetchEvent> = new FetchEvent(<DOMString>,<FetchEventInit>);
<new Request> = <FetchEvent>.request;
<new Promise_any_> = <FetchEvent>.preloadResponse;
<new DOMString> = <FetchEvent>.clientId;
<new DOMString> = <FetchEvent>.resultingClientId;
<new DOMString> = <FetchEvent>.replacesClientId;
<new Promise_undefined_> = <FetchEvent>.handled;
<FetchEvent>.respondWith(<Promise_Response_>);
!extends ExtendableMessageEvent ExtendableEvent;
<new ExtendableEvent> = <ExtendableMessageEvent>;
<new ExtendableMessageEvent> = new ExtendableMessageEvent(<DOMString>);
<new ExtendableMessageEvent> = new ExtendableMessageEvent(<DOMString>,<ExtendableMessageEventInit>);
<new any> = <ExtendableMessageEvent>.data;
<new USVString> = <ExtendableMessageEvent>.origin;
<new DOMString> = <ExtendableMessageEvent>.lastEventId;
<new union_Client1ServiceWorker1MessagePort_> = <Client>;
<new union_Client1ServiceWorker1MessagePort_> = <ServiceWorker>;
<new union_Client1ServiceWorker1MessagePort_> = <MessagePort>;
<new union_Client1ServiceWorker1MessagePort_> = <ExtendableMessageEvent>.source;
<new FrozenArray_MessagePort_> = <ExtendableMessageEvent>.ports;
<new union_Response1undefined_> = <Response>;
<new union_Response1undefined_> = <undefined>;
<new Promise_union_Response1undefined__> = new Promise(function(x){console.log("ok")});
<new Promise_union_Response1undefined__> = <Cache>.match(<RequestInfo>);
<new Promise_union_Response1undefined__> = <Cache>.match(<RequestInfo>,<CacheQueryOptions>);
<new FrozenArray_Response_> = [<Response>];
<new Response> = <FrozenArray_Response_>[0];
<new Promise_FrozenArray_Response__> = new Promise(function(x){console.log("ok")});
<new Promise_FrozenArray_Response__> = <Cache>.matchAll();
<new Promise_FrozenArray_Response__> = <Cache>.matchAll(<RequestInfo>);
<new Promise_FrozenArray_Response__> = <Cache>.matchAll(<RequestInfo>,<CacheQueryOptions>);
<new Promise_undefined_> = <Cache>.add(<RequestInfo>);
<new Promise_undefined_> = <Cache>.addAll(<sequence_RequestInfo_>);
<new Promise_undefined_> = <Cache>.put(<RequestInfo>,<Response>);
<new Promise_boolean_> = <Cache>.delete(<RequestInfo>);
<new Promise_boolean_> = <Cache>.delete(<RequestInfo>,<CacheQueryOptions>);
<new FrozenArray_Request_> = [<Request>];
<new Request> = <FrozenArray_Request_>[0];
<new Promise_FrozenArray_Request__> = new Promise(function(x){console.log("ok")});
<new Promise_FrozenArray_Request__> = <Cache>.keys();
<new Promise_FrozenArray_Request__> = <Cache>.keys(<RequestInfo>);
<new Promise_FrozenArray_Request__> = <Cache>.keys(<RequestInfo>,<CacheQueryOptions>);
<new Promise_union_Response1undefined__> = <CacheStorage>.match(<RequestInfo>);
<new Promise_union_Response1undefined__> = <CacheStorage>.match(<RequestInfo>,<MultiCacheQueryOptions>);
<new Promise_boolean_> = <CacheStorage>.has(<DOMString>);
<new Promise_Cache_> = new Promise(function(x){console.log("ok")});
<new Promise_Cache_> = <CacheStorage>.open(<DOMString>);
<new Promise_boolean_> = <CacheStorage>.delete(<DOMString>);
<new Promise_sequence_DOMString__> = <CacheStorage>.keys();
<new FaceDetector> = new FaceDetector();
<new FaceDetector> = new FaceDetector(<FaceDetectorOptions>);
<new sequence_DetectedFace_> = [<DetectedFace>];
<new DetectedFace> = <sequence_DetectedFace_>[0];
<new Promise_sequence_DetectedFace__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_DetectedFace__> = <FaceDetector>.detect(<ImageBitmapSource>);
<new BarcodeDetector> = new BarcodeDetector();
<new BarcodeDetector> = new BarcodeDetector(<BarcodeDetectorOptions>);
<new sequence_BarcodeFormat_> = [<BarcodeFormat>];
<new BarcodeFormat> = <sequence_BarcodeFormat_>[0];
<new Promise_sequence_BarcodeFormat__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_BarcodeFormat__> = <BarcodeDetector>.getSupportedFormats();
<new sequence_DetectedBarcode_> = [<DetectedBarcode>];
<new DetectedBarcode> = <sequence_DetectedBarcode_>[0];
<new Promise_sequence_DetectedBarcode__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_DetectedBarcode__> = <BarcodeDetector>.detect(<ImageBitmapSource>);
!extends SpeechRecognition EventTarget;
<new EventTarget> = <SpeechRecognition>;
<new SpeechRecognition> = new SpeechRecognition();
<new SpeechGrammarList> = <SpeechRecognition>.grammars;
<SpeechRecognition>.grammars = <SpeechGrammarList>;
<new DOMString> = <SpeechRecognition>.lang;
<SpeechRecognition>.lang = <DOMString>;
<new boolean> = <SpeechRecognition>.continuous;
<SpeechRecognition>.continuous = <boolean>;
<new boolean> = <SpeechRecognition>.interimResults;
<SpeechRecognition>.interimResults = <boolean>;
<new unsigned_long> = <SpeechRecognition>.maxAlternatives;
<SpeechRecognition>.maxAlternatives = <unsigned_long>;
<SpeechRecognition>.start();
<SpeechRecognition>.stop();
<SpeechRecognition>.abort();
<new EventHandler> = <SpeechRecognition>.onaudiostart;
<SpeechRecognition>.onaudiostart = <EventHandler>;
<new EventHandler> = <SpeechRecognition>.onsoundstart;
<SpeechRecognition>.onsoundstart = <EventHandler>;
<new EventHandler> = <SpeechRecognition>.onspeechstart;
<SpeechRecognition>.onspeechstart = <EventHandler>;
<new EventHandler> = <SpeechRecognition>.onspeechend;
<SpeechRecognition>.onspeechend = <EventHandler>;
<new EventHandler> = <SpeechRecognition>.onsoundend;
<SpeechRecognition>.onsoundend = <EventHandler>;
<new EventHandler> = <SpeechRecognition>.onaudioend;
<SpeechRecognition>.onaudioend = <EventHandler>;
<new EventHandler> = <SpeechRecognition>.onresult;
<SpeechRecognition>.onresult = <EventHandler>;
<new EventHandler> = <SpeechRecognition>.onnomatch;
<SpeechRecognition>.onnomatch = <EventHandler>;
<new EventHandler> = <SpeechRecognition>.onerror;
<SpeechRecognition>.onerror = <EventHandler>;
<new EventHandler> = <SpeechRecognition>.onstart;
<SpeechRecognition>.onstart = <EventHandler>;
<new EventHandler> = <SpeechRecognition>.onend;
<SpeechRecognition>.onend = <EventHandler>;
!extends SpeechRecognitionErrorEvent Event;
<new Event> = <SpeechRecognitionErrorEvent>;
<new SpeechRecognitionErrorEvent> = new SpeechRecognitionErrorEvent(<DOMString>,<SpeechRecognitionErrorEventInit>);
<new SpeechRecognitionErrorCode> = <SpeechRecognitionErrorEvent>.error;
<new DOMString> = <SpeechRecognitionErrorEvent>.message;
<new DOMString> = <SpeechRecognitionAlternative>.transcript;
<new float> = <SpeechRecognitionAlternative>.confidence;
<new unsigned_long> = <SpeechRecognitionResult>.length;
<new SpeechRecognitionAlternative> = <SpeechRecognitionResult>.item(<unsigned_long>);
<new boolean> = <SpeechRecognitionResult>.isFinal;
<new unsigned_long> = <SpeechRecognitionResultList>.length;
<new SpeechRecognitionResult> = <SpeechRecognitionResultList>.item(<unsigned_long>);
!extends SpeechRecognitionEvent Event;
<new Event> = <SpeechRecognitionEvent>;
<new SpeechRecognitionEvent> = new SpeechRecognitionEvent(<DOMString>,<SpeechRecognitionEventInit>);
<new unsigned_long> = <SpeechRecognitionEvent>.resultIndex;
<new SpeechRecognitionResultList> = <SpeechRecognitionEvent>.results;
<new DOMString> = <SpeechGrammar>.src;
<SpeechGrammar>.src = <DOMString>;
<new float> = <SpeechGrammar>.weight;
<SpeechGrammar>.weight = <float>;
<new SpeechGrammarList> = new SpeechGrammarList();
<new unsigned_long> = <SpeechGrammarList>.length;
<new SpeechGrammar> = <SpeechGrammarList>.item(<unsigned_long>);
<SpeechGrammarList>.addFromURI(<DOMString>);
<SpeechGrammarList>.addFromURI(<DOMString>,<float>);
<SpeechGrammarList>.addFromString(<DOMString>);
<SpeechGrammarList>.addFromString(<DOMString>,<float>);
!extends SpeechSynthesis EventTarget;
<new EventTarget> = <SpeechSynthesis>;
<new boolean> = <SpeechSynthesis>.pending;
<new boolean> = <SpeechSynthesis>.speaking;
<new boolean> = <SpeechSynthesis>.paused;
<new EventHandler> = <SpeechSynthesis>.onvoiceschanged;
<SpeechSynthesis>.onvoiceschanged = <EventHandler>;
<SpeechSynthesis>.speak(<SpeechSynthesisUtterance>);
<SpeechSynthesis>.cancel();
<SpeechSynthesis>.pause();
<SpeechSynthesis>.resume();
<new sequence_SpeechSynthesisVoice_> = [<SpeechSynthesisVoice>];
<new SpeechSynthesisVoice> = <sequence_SpeechSynthesisVoice_>[0];
<new sequence_SpeechSynthesisVoice_> = <SpeechSynthesis>.getVoices();
<new SpeechSynthesis> = <Window>.speechSynthesis;
!extends SpeechSynthesisUtterance EventTarget;
<new EventTarget> = <SpeechSynthesisUtterance>;
<new SpeechSynthesisUtterance> = new SpeechSynthesisUtterance();
<new SpeechSynthesisUtterance> = new SpeechSynthesisUtterance(<DOMString>);
<new DOMString> = <SpeechSynthesisUtterance>.text;
<SpeechSynthesisUtterance>.text = <DOMString>;
<new DOMString> = <SpeechSynthesisUtterance>.lang;
<SpeechSynthesisUtterance>.lang = <DOMString>;
<new SpeechSynthesisVoice> = <SpeechSynthesisUtterance>.voice;
<SpeechSynthesisUtterance>.voice = <SpeechSynthesisVoice>;
<SpeechSynthesisUtterance>.voice = null;
<new float> = <SpeechSynthesisUtterance>.volume;
<SpeechSynthesisUtterance>.volume = <float>;
<new float> = <SpeechSynthesisUtterance>.rate;
<SpeechSynthesisUtterance>.rate = <float>;
<new float> = <SpeechSynthesisUtterance>.pitch;
<SpeechSynthesisUtterance>.pitch = <float>;
<new EventHandler> = <SpeechSynthesisUtterance>.onstart;
<SpeechSynthesisUtterance>.onstart = <EventHandler>;
<new EventHandler> = <SpeechSynthesisUtterance>.onend;
<SpeechSynthesisUtterance>.onend = <EventHandler>;
<new EventHandler> = <SpeechSynthesisUtterance>.onerror;
<SpeechSynthesisUtterance>.onerror = <EventHandler>;
<new EventHandler> = <SpeechSynthesisUtterance>.onpause;
<SpeechSynthesisUtterance>.onpause = <EventHandler>;
<new EventHandler> = <SpeechSynthesisUtterance>.onresume;
<SpeechSynthesisUtterance>.onresume = <EventHandler>;
<new EventHandler> = <SpeechSynthesisUtterance>.onmark;
<SpeechSynthesisUtterance>.onmark = <EventHandler>;
<new EventHandler> = <SpeechSynthesisUtterance>.onboundary;
<SpeechSynthesisUtterance>.onboundary = <EventHandler>;
!extends SpeechSynthesisEvent Event;
<new Event> = <SpeechSynthesisEvent>;
<new SpeechSynthesisEvent> = new SpeechSynthesisEvent(<DOMString>,<SpeechSynthesisEventInit>);
<new SpeechSynthesisUtterance> = <SpeechSynthesisEvent>.utterance;
<new unsigned_long> = <SpeechSynthesisEvent>.charIndex;
<new unsigned_long> = <SpeechSynthesisEvent>.charLength;
<new float> = <SpeechSynthesisEvent>.elapsedTime;
<new DOMString> = <SpeechSynthesisEvent>.name;
!extends SpeechSynthesisErrorEvent SpeechSynthesisEvent;
<new SpeechSynthesisEvent> = <SpeechSynthesisErrorEvent>;
<new SpeechSynthesisErrorEvent> = new SpeechSynthesisErrorEvent(<DOMString>,<SpeechSynthesisErrorEventInit>);
<new SpeechSynthesisErrorCode> = <SpeechSynthesisErrorEvent>.error;
<new DOMString> = <SpeechSynthesisVoice>.voiceURI;
<new DOMString> = <SpeechSynthesisVoice>.name;
<new DOMString> = <SpeechSynthesisVoice>.lang;
<new boolean> = <SpeechSynthesisVoice>.localService;
<new boolean> = <SpeechSynthesisVoice>.default;
<new Promise_boolean_> = <Document>.hasStorageAccess();
<new Promise_undefined_> = <Document>.requestStorageAccess();
<new Promise_boolean_> = <StorageManager>.persisted();
<new Promise_boolean_> = <StorageManager>.persist();
<new Promise_StorageEstimate_> = new Promise(function(x){console.log("ok")});
<new Promise_StorageEstimate_> = <StorageManager>.estimate();
<new ReadableStream> = new ReadableStream();
<new ReadableStream> = new ReadableStream(<object>);
<new ReadableStream> = new ReadableStream(<object>,<QueuingStrategy>);
<new boolean> = <ReadableStream>.locked;
<new Promise_undefined_> = <ReadableStream>.cancel();
<new Promise_undefined_> = <ReadableStream>.cancel(<any>);
<new ReadableStreamReader> = <ReadableStream>.getReader();
<new ReadableStreamReader> = <ReadableStream>.getReader(<ReadableStreamGetReaderOptions>);
<new ReadableStream> = <ReadableStream>.pipeThrough(<ReadableWritablePair>);
<new ReadableStream> = <ReadableStream>.pipeThrough(<ReadableWritablePair>,<StreamPipeOptions>);
<new Promise_undefined_> = <ReadableStream>.pipeTo(<WritableStream>);
<new Promise_undefined_> = <ReadableStream>.pipeTo(<WritableStream>,<StreamPipeOptions>);
<new sequence_ReadableStream_> = [<ReadableStream>];
<new ReadableStream> = <sequence_ReadableStream_>[0];
<new sequence_ReadableStream_> = <ReadableStream>.tee();
<new ReadableStreamDefaultReader> = new ReadableStreamDefaultReader(<ReadableStream>);
<new Promise_ReadableStreamReadResult_> = new Promise(function(x){console.log("ok")});
<new Promise_ReadableStreamReadResult_> = <ReadableStreamDefaultReader>.read();
<ReadableStreamDefaultReader>.releaseLock();
<new ReadableStreamBYOBReader> = new ReadableStreamBYOBReader(<ReadableStream>);
<new Promise_ReadableStreamReadResult_> = <ReadableStreamBYOBReader>.read(<ArrayBufferView>);
<ReadableStreamBYOBReader>.releaseLock();
<new unrestricted_double> = <ReadableStreamDefaultController>.desiredSize;
<ReadableStreamDefaultController>.close();
<ReadableStreamDefaultController>.enqueue();
<ReadableStreamDefaultController>.enqueue(<any>);
<ReadableStreamDefaultController>.error();
<ReadableStreamDefaultController>.error(<any>);
<new ReadableStreamBYOBRequest> = <ReadableByteStreamController>.byobRequest;
<new unrestricted_double> = <ReadableByteStreamController>.desiredSize;
<ReadableByteStreamController>.close();
<ReadableByteStreamController>.enqueue(<ArrayBufferView>);
<ReadableByteStreamController>.error();
<ReadableByteStreamController>.error(<any>);
<new ArrayBufferView> = <ReadableStreamBYOBRequest>.view;
<ReadableStreamBYOBRequest>.respond(<unsigned_long_long>);
<ReadableStreamBYOBRequest>.respondWithNewView(<ArrayBufferView>);
<new WritableStream> = new WritableStream();
<new WritableStream> = new WritableStream(<object>);
<new WritableStream> = new WritableStream(<object>,<QueuingStrategy>);
<new boolean> = <WritableStream>.locked;
<new Promise_undefined_> = <WritableStream>.abort();
<new Promise_undefined_> = <WritableStream>.abort(<any>);
<new Promise_undefined_> = <WritableStream>.close();
<new WritableStreamDefaultWriter> = <WritableStream>.getWriter();
<new WritableStreamDefaultWriter> = new WritableStreamDefaultWriter(<WritableStream>);
<new Promise_undefined_> = <WritableStreamDefaultWriter>.closed;
<new unrestricted_double> = <WritableStreamDefaultWriter>.desiredSize;
<new Promise_undefined_> = <WritableStreamDefaultWriter>.ready;
<new Promise_undefined_> = <WritableStreamDefaultWriter>.abort();
<new Promise_undefined_> = <WritableStreamDefaultWriter>.abort(<any>);
<new Promise_undefined_> = <WritableStreamDefaultWriter>.close();
<WritableStreamDefaultWriter>.releaseLock();
<new Promise_undefined_> = <WritableStreamDefaultWriter>.write();
<new Promise_undefined_> = <WritableStreamDefaultWriter>.write(<any>);
<new AbortSignal> = <WritableStreamDefaultController>.signal;
<WritableStreamDefaultController>.error();
<WritableStreamDefaultController>.error(<any>);
<new TransformStream> = new TransformStream();
<new TransformStream> = new TransformStream(<object>);
<new TransformStream> = new TransformStream(<object>,<QueuingStrategy>);
<new TransformStream> = new TransformStream(<object>,<QueuingStrategy>,<QueuingStrategy>);
<new ReadableStream> = <TransformStream>.readable;
<new WritableStream> = <TransformStream>.writable;
<new unrestricted_double> = <TransformStreamDefaultController>.desiredSize;
<TransformStreamDefaultController>.enqueue();
<TransformStreamDefaultController>.enqueue(<any>);
<TransformStreamDefaultController>.error();
<TransformStreamDefaultController>.error(<any>);
<TransformStreamDefaultController>.terminate();
<new ByteLengthQueuingStrategy> = new ByteLengthQueuingStrategy(<QueuingStrategyInit>);
<new unrestricted_double> = <ByteLengthQueuingStrategy>.highWaterMark;
<new Function> = <ByteLengthQueuingStrategy>.size;
<new CountQueuingStrategy> = new CountQueuingStrategy(<QueuingStrategyInit>);
<new unrestricted_double> = <CountQueuingStrategy>.highWaterMark;
<new Function> = <CountQueuingStrategy>.size;
!extends TimeEvent Event;
<new Event> = <TimeEvent>;
<new WindowProxy> = <TimeEvent>.view;
<new long> = <TimeEvent>.detail;
<TimeEvent>.initTimeEvent(<DOMString>,<Window>,<long>);
!extends SVGAnimationElement SVGElement;
<new SVGElement> = <SVGAnimationElement>;
<new SVGElement> = <SVGAnimationElement>.targetElement;
<new EventHandler> = <SVGAnimationElement>.onbegin;
<SVGAnimationElement>.onbegin = <EventHandler>;
<new EventHandler> = <SVGAnimationElement>.onend;
<SVGAnimationElement>.onend = <EventHandler>;
<new EventHandler> = <SVGAnimationElement>.onrepeat;
<SVGAnimationElement>.onrepeat = <EventHandler>;
<new float> = <SVGAnimationElement>.getStartTime();
<new float> = <SVGAnimationElement>.getCurrentTime();
<new float> = <SVGAnimationElement>.getSimpleDuration();
<SVGAnimationElement>.beginElement();
<SVGAnimationElement>.beginElementAt(<float>);
<SVGAnimationElement>.endElement();
<SVGAnimationElement>.endElementAt(<float>);
!extends SVGAnimateElement SVGAnimationElement;
<new SVGAnimationElement> = <SVGAnimateElement>;
!extends SVGSetElement SVGAnimationElement;
<new SVGAnimationElement> = <SVGSetElement>;
!extends SVGAnimateMotionElement SVGAnimationElement;
<new SVGAnimationElement> = <SVGAnimateMotionElement>;
!extends SVGMPathElement SVGElement;
<new SVGElement> = <SVGMPathElement>;
!extends SVGAnimateTransformElement SVGAnimationElement;
<new SVGAnimationElement> = <SVGAnimateTransformElement>;
!extends SVGDiscardElement SVGAnimationElement;
<new SVGAnimationElement> = <SVGDiscardElement>;
<SVGSVGElement>.pauseAnimations();
<SVGSVGElement>.unpauseAnimations();
<SVGSVGElement>.animationsPaused();
<new float> = <SVGSVGElement>.getCurrentTime();
<SVGSVGElement>.setCurrentTime(<float>);
<new TextDetector> = new TextDetector();
<new sequence_DetectedText_> = [<DetectedText>];
<new DetectedText> = <sequence_DetectedText_>[0];
<new Promise_sequence_DetectedText__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_DetectedText__> = <TextDetector>.detect(<ImageBitmapSource>);
<new Touch> = new Touch(<TouchInit>);
<new long> = <Touch>.identifier;
<new EventTarget> = <Touch>.target;
<new double> = <Touch>.screenX;
<new double> = <Touch>.screenY;
<new double> = <Touch>.clientX;
<new double> = <Touch>.clientY;
<new double> = <Touch>.pageX;
<new double> = <Touch>.pageY;
<new float> = <Touch>.radiusX;
<new float> = <Touch>.radiusY;
<new float> = <Touch>.rotationAngle;
<new float> = <Touch>.force;
<new float> = <Touch>.altitudeAngle;
<new float> = <Touch>.azimuthAngle;
<new TouchType> = <Touch>.touchType;
<new unsigned_long> = <TouchList>.length;
<new Touch> = <TouchList>.item(<unsigned_long>);
!extends TouchEvent UIEvent;
<new UIEvent> = <TouchEvent>;
<new TouchEvent> = new TouchEvent(<DOMString>);
<new TouchEvent> = new TouchEvent(<DOMString>,<TouchEventInit>);
<new TouchList> = <TouchEvent>.touches;
<new TouchList> = <TouchEvent>.targetTouches;
<new TouchList> = <TouchEvent>.changedTouches;
<new boolean> = <TouchEvent>.altKey;
<new boolean> = <TouchEvent>.metaKey;
<new boolean> = <TouchEvent>.ctrlKey;
<new boolean> = <TouchEvent>.shiftKey;
<TouchEvent>.getModifierState(<DOMString>);
<new DOMString> = <TrustedHTML>.toJSON();
<new TrustedHTML> = <TrustedHTML>.fromLiteral(<object>);
<new DOMString> = <TrustedScript>.toJSON();
<new TrustedScript> = <TrustedScript>.fromLiteral(<object>);
<new USVString> = <TrustedScriptURL>.toJSON();
<new TrustedScriptURL> = <TrustedScriptURL>.fromLiteral(<object>);
<new TrustedTypePolicy> = <TrustedTypePolicyFactory>.createPolicy(<DOMString>);
<new TrustedTypePolicy> = <TrustedTypePolicyFactory>.createPolicy(<DOMString>,<TrustedTypePolicyOptions>);
<TrustedTypePolicyFactory>.isHTML(<any>);
<TrustedTypePolicyFactory>.isScript(<any>);
<TrustedTypePolicyFactory>.isScriptURL(<any>);
<new TrustedHTML> = <TrustedTypePolicyFactory>.emptyHTML;
<new TrustedScript> = <TrustedTypePolicyFactory>.emptyScript;
<new DOMString> = <TrustedTypePolicyFactory>.getAttributeType(<DOMString>,<DOMString>);
<new DOMString> = <TrustedTypePolicyFactory>.getAttributeType(<DOMString>,<DOMString>,<DOMString>);
<new DOMString> = <TrustedTypePolicyFactory>.getAttributeType(<DOMString>,<DOMString>,<DOMString>,<DOMString>);
<new DOMString> = <TrustedTypePolicyFactory>.getPropertyType(<DOMString>,<DOMString>);
<new DOMString> = <TrustedTypePolicyFactory>.getPropertyType(<DOMString>,<DOMString>,<DOMString>);
<new TrustedTypePolicy> = <TrustedTypePolicyFactory>.defaultPolicy;
<new DOMString> = <TrustedTypePolicy>.name;
<new TrustedHTML> = <TrustedTypePolicy>.createHTML(<DOMString>);
<new TrustedHTML> = <TrustedTypePolicy>.createHTML(<DOMString>,<any>);
<new TrustedScript> = <TrustedTypePolicy>.createScript(<DOMString>);
<new TrustedScript> = <TrustedTypePolicy>.createScript(<DOMString>,<any>);
<new TrustedScriptURL> = <TrustedTypePolicy>.createScriptURL(<DOMString>);
<new TrustedScriptURL> = <TrustedTypePolicy>.createScriptURL(<DOMString>,<any>);
<new FrozenArray_NavigatorUABrandVersion_> = [<NavigatorUABrandVersion>];
<new NavigatorUABrandVersion> = <FrozenArray_NavigatorUABrandVersion_>[0];
<new FrozenArray_NavigatorUABrandVersion_> = <NavigatorUAData>.brands;
<new boolean> = <NavigatorUAData>.mobile;
<new DOMString> = <NavigatorUAData>.platform;
<new Promise_UADataValues_> = new Promise(function(x){console.log("ok")});
<new Promise_UADataValues_> = <NavigatorUAData>.getHighEntropyValues(<sequence_DOMString_>);
<new UALowEntropyJSON> = <NavigatorUAData>.toJSON();
!extends UIEvent Event;
<new Event> = <UIEvent>;
<new UIEvent> = new UIEvent(<DOMString>);
<new UIEvent> = new UIEvent(<DOMString>,<UIEventInit>);
<new Window> = <UIEvent>.view;
<new long> = <UIEvent>.detail;
!extends FocusEvent UIEvent;
<new UIEvent> = <FocusEvent>;
<new FocusEvent> = new FocusEvent(<DOMString>);
<new FocusEvent> = new FocusEvent(<DOMString>,<FocusEventInit>);
<new EventTarget> = <FocusEvent>.relatedTarget;
!extends MouseEvent UIEvent;
<new UIEvent> = <MouseEvent>;
<new MouseEvent> = new MouseEvent(<DOMString>);
<new MouseEvent> = new MouseEvent(<DOMString>,<MouseEventInit>);
<new long> = <MouseEvent>.screenX;
<new long> = <MouseEvent>.screenY;
<new long> = <MouseEvent>.clientX;
<new long> = <MouseEvent>.clientY;
<new boolean> = <MouseEvent>.ctrlKey;
<new boolean> = <MouseEvent>.shiftKey;
<new boolean> = <MouseEvent>.altKey;
<new boolean> = <MouseEvent>.metaKey;
<new short> = <MouseEvent>.button;
<new unsigned_short> = <MouseEvent>.buttons;
<new EventTarget> = <MouseEvent>.relatedTarget;
<MouseEvent>.getModifierState(<DOMString>);
!extends WheelEvent MouseEvent;
<new MouseEvent> = <WheelEvent>;
<new WheelEvent> = new WheelEvent(<DOMString>);
<new WheelEvent> = new WheelEvent(<DOMString>,<WheelEventInit>);
<new unsigned_long> = WheelEvent.DOM_DELTA_PIXEL;
<new unsigned_long> = WheelEvent.DOM_DELTA_LINE;
<new unsigned_long> = WheelEvent.DOM_DELTA_PAGE;
<new double> = <WheelEvent>.deltaX;
<new double> = <WheelEvent>.deltaY;
<new double> = <WheelEvent>.deltaZ;
<new unsigned_long> = <WheelEvent>.deltaMode;
!extends InputEvent UIEvent;
<new UIEvent> = <InputEvent>;
<new InputEvent> = new InputEvent(<DOMString>);
<new InputEvent> = new InputEvent(<DOMString>,<InputEventInit>);
<new DOMString> = <InputEvent>.data;
<new boolean> = <InputEvent>.isComposing;
<new DOMString> = <InputEvent>.inputType;
!extends KeyboardEvent UIEvent;
<new UIEvent> = <KeyboardEvent>;
<new KeyboardEvent> = new KeyboardEvent(<DOMString>);
<new KeyboardEvent> = new KeyboardEvent(<DOMString>,<KeyboardEventInit>);
<new unsigned_long> = KeyboardEvent.DOM_KEY_LOCATION_STANDARD;
<new unsigned_long> = KeyboardEvent.DOM_KEY_LOCATION_LEFT;
<new unsigned_long> = KeyboardEvent.DOM_KEY_LOCATION_RIGHT;
<new unsigned_long> = KeyboardEvent.DOM_KEY_LOCATION_NUMPAD;
<new DOMString> = <KeyboardEvent>.key;
<new DOMString> = <KeyboardEvent>.code;
<new unsigned_long> = <KeyboardEvent>.location;
<new boolean> = <KeyboardEvent>.ctrlKey;
<new boolean> = <KeyboardEvent>.shiftKey;
<new boolean> = <KeyboardEvent>.altKey;
<new boolean> = <KeyboardEvent>.metaKey;
<new boolean> = <KeyboardEvent>.repeat;
<new boolean> = <KeyboardEvent>.isComposing;
<KeyboardEvent>.getModifierState(<DOMString>);
!extends CompositionEvent UIEvent;
<new UIEvent> = <CompositionEvent>;
<new CompositionEvent> = new CompositionEvent(<DOMString>);
<new CompositionEvent> = new CompositionEvent(<DOMString>,<CompositionEventInit>);
<new DOMString> = <CompositionEvent>.data;
<UIEvent>.initUIEvent(<DOMString>);
<UIEvent>.initUIEvent(<DOMString>,<boolean>);
<UIEvent>.initUIEvent(<DOMString>,<boolean>,<boolean>);
<UIEvent>.initUIEvent(<DOMString>,<boolean>,<boolean>,<Window>);
<UIEvent>.initUIEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>);
<MouseEvent>.initMouseEvent(<DOMString>);
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>);
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>);
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>);
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>);
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>);
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>);
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>);
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>);
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>);
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>);
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>,<boolean>);
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>,<boolean>,<boolean>);
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>,<boolean>,<boolean>,<short>);
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>,<boolean>,<boolean>,<short>,<EventTarget>);
<KeyboardEvent>.initKeyboardEvent(<DOMString>);
<KeyboardEvent>.initKeyboardEvent(<DOMString>,<boolean>);
<KeyboardEvent>.initKeyboardEvent(<DOMString>,<boolean>,<boolean>);
<KeyboardEvent>.initKeyboardEvent(<DOMString>,<boolean>,<boolean>,<Window>);
<KeyboardEvent>.initKeyboardEvent(<DOMString>,<boolean>,<boolean>,<Window>,<DOMString>);
<KeyboardEvent>.initKeyboardEvent(<DOMString>,<boolean>,<boolean>,<Window>,<DOMString>,<unsigned_long>);
<KeyboardEvent>.initKeyboardEvent(<DOMString>,<boolean>,<boolean>,<Window>,<DOMString>,<unsigned_long>,<boolean>);
<KeyboardEvent>.initKeyboardEvent(<DOMString>,<boolean>,<boolean>,<Window>,<DOMString>,<unsigned_long>,<boolean>,<boolean>);
<KeyboardEvent>.initKeyboardEvent(<DOMString>,<boolean>,<boolean>,<Window>,<DOMString>,<unsigned_long>,<boolean>,<boolean>,<boolean>);
<KeyboardEvent>.initKeyboardEvent(<DOMString>,<boolean>,<boolean>,<Window>,<DOMString>,<unsigned_long>,<boolean>,<boolean>,<boolean>,<boolean>);
<CompositionEvent>.initCompositionEvent(<DOMString>);
<CompositionEvent>.initCompositionEvent(<DOMString>,<boolean>);
<CompositionEvent>.initCompositionEvent(<DOMString>,<boolean>,<boolean>);
<CompositionEvent>.initCompositionEvent(<DOMString>,<boolean>,<boolean>,<WindowProxy>);
<CompositionEvent>.initCompositionEvent(<DOMString>,<boolean>,<boolean>,<WindowProxy>,<DOMString>);
<new unsigned_long> = <UIEvent>.which;
<new unsigned_long> = <KeyboardEvent>.charCode;
<new unsigned_long> = <KeyboardEvent>.keyCode;
!extends MutationEvent Event;
<new Event> = <MutationEvent>;
<new unsigned_short> = MutationEvent.MODIFICATION;
<new unsigned_short> = MutationEvent.ADDITION;
<new unsigned_short> = MutationEvent.REMOVAL;
<new Node> = <MutationEvent>.relatedNode;
<new DOMString> = <MutationEvent>.prevValue;
<new DOMString> = <MutationEvent>.newValue;
<new DOMString> = <MutationEvent>.attrName;
<new unsigned_short> = <MutationEvent>.attrChange;
<MutationEvent>.initMutationEvent(<DOMString>);
<MutationEvent>.initMutationEvent(<DOMString>,<boolean>);
<MutationEvent>.initMutationEvent(<DOMString>,<boolean>,<boolean>);
<MutationEvent>.initMutationEvent(<DOMString>,<boolean>,<boolean>,<Node>);
<MutationEvent>.initMutationEvent(<DOMString>,<boolean>,<boolean>,<Node>,<DOMString>);
<MutationEvent>.initMutationEvent(<DOMString>,<boolean>,<boolean>,<Node>,<DOMString>,<DOMString>);
<MutationEvent>.initMutationEvent(<DOMString>,<boolean>,<boolean>,<Node>,<DOMString>,<DOMString>,<DOMString>);
<MutationEvent>.initMutationEvent(<DOMString>,<boolean>,<boolean>,<Node>,<DOMString>,<DOMString>,<DOMString>,<unsigned_short>);
<new URL> = new URL(<USVString>);
<new URL> = new URL(<USVString>,<USVString>);
<new USVString> = <URL>.href;
<URL>.href = <USVString>;
<new USVString> = <URL>.origin;
<new USVString> = <URL>.protocol;
<URL>.protocol = <USVString>;
<new USVString> = <URL>.username;
<URL>.username = <USVString>;
<new USVString> = <URL>.password;
<URL>.password = <USVString>;
<new USVString> = <URL>.host;
<URL>.host = <USVString>;
<new USVString> = <URL>.hostname;
<URL>.hostname = <USVString>;
<new USVString> = <URL>.port;
<URL>.port = <USVString>;
<new USVString> = <URL>.pathname;
<URL>.pathname = <USVString>;
<new USVString> = <URL>.search;
<URL>.search = <USVString>;
<new URLSearchParams> = <URL>.searchParams;
<new USVString> = <URL>.hash;
<URL>.hash = <USVString>;
<new USVString> = <URL>.toJSON();
<new sequence_sequence_USVString__> = [<sequence_USVString_>];
<new sequence_USVString_> = <sequence_sequence_USVString__>[0];
<new record_USVString1USVString_> = {a: <USVString>};
<new USVString> = <record_USVString1USVString_>[<USVString>];
<new union_sequence_sequence_USVString__1record_USVString1USVString_1USVString_> = <sequence_sequence_USVString__>;
<new union_sequence_sequence_USVString__1record_USVString1USVString_1USVString_> = <record_USVString1USVString_>;
<new union_sequence_sequence_USVString__1record_USVString1USVString_1USVString_> = <USVString>;
<new URLSearchParams> = new URLSearchParams();
<new URLSearchParams> = new URLSearchParams(<union_sequence_sequence_USVString__1record_USVString1USVString_1USVString_>);
<URLSearchParams>.append(<USVString>,<USVString>);
<URLSearchParams>.delete(<USVString>);
<new USVString> = <URLSearchParams>.get(<USVString>);
<new sequence_USVString_> = <URLSearchParams>.getAll(<USVString>);
<URLSearchParams>.has(<USVString>);
<URLSearchParams>.set(<USVString>,<USVString>);
<URLSearchParams>.sort();
<new URLPattern> = new URLPattern(<URLPatternInput>,<USVString>);
<new URLPattern> = new URLPattern(<URLPatternInput>,<USVString>,<URLPatternOptions>);
<new URLPattern> = new URLPattern();
<new URLPattern> = new URLPattern(<URLPatternInput>);
<new URLPattern> = new URLPattern(<URLPatternInput>,<URLPatternOptions>);
<URLPattern>.test();
<URLPattern>.test(<URLPatternInput>);
<URLPattern>.test(<URLPatternInput>,<USVString>);
<new URLPatternResult> = <URLPattern>.exec();
<new URLPatternResult> = <URLPattern>.exec(<URLPatternInput>);
<new URLPatternResult> = <URLPattern>.exec(<URLPatternInput>,<USVString>);
<new USVString> = <URLPattern>.protocol;
<new USVString> = <URLPattern>.username;
<new USVString> = <URLPattern>.password;
<new USVString> = <URLPattern>.hostname;
<new USVString> = <URLPattern>.port;
<new USVString> = <URLPattern>.pathname;
<new USVString> = <URLPattern>.search;
<new USVString> = <URLPattern>.hash;
<new PerformanceMark> = <Performance>.mark(<DOMString>);
<new PerformanceMark> = <Performance>.mark(<DOMString>,<PerformanceMarkOptions>);
<Performance>.clearMarks();
<Performance>.clearMarks(<DOMString>);
<new union_DOMString1PerformanceMeasureOptions_> = <DOMString>;
<new union_DOMString1PerformanceMeasureOptions_> = <PerformanceMeasureOptions>;
<new PerformanceMeasure> = <Performance>.measure(<DOMString>);
<new PerformanceMeasure> = <Performance>.measure(<DOMString>,<union_DOMString1PerformanceMeasureOptions_>);
<new PerformanceMeasure> = <Performance>.measure(<DOMString>,<union_DOMString1PerformanceMeasureOptions_>,<DOMString>);
<Performance>.clearMeasures();
<Performance>.clearMeasures(<DOMString>);
!extends PerformanceMark PerformanceEntry;
<new PerformanceEntry> = <PerformanceMark>;
<new PerformanceMark> = new PerformanceMark(<DOMString>);
<new PerformanceMark> = new PerformanceMark(<DOMString>,<PerformanceMarkOptions>);
<new any> = <PerformanceMark>.detail;
!extends PerformanceMeasure PerformanceEntry;
<new PerformanceEntry> = <PerformanceMeasure>;
<new any> = <PerformanceMeasure>.detail;
<Navigator>.vibrate(<VibratePattern>);
<new unsigned_long> = <HTMLVideoElement>.requestVideoFrameCallback(<VideoFrameRequestCallback>);
<HTMLVideoElement>.cancelVideoFrameCallback(<unsigned_long>);
<new VirtualKeyboard> = <Navigator>.virtualKeyboard;
!extends VirtualKeyboard EventTarget;
<new EventTarget> = <VirtualKeyboard>;
<VirtualKeyboard>.show();
<VirtualKeyboard>.hide();
<new DOMRect> = <VirtualKeyboard>.boundingRect;
<new boolean> = <VirtualKeyboard>.overlaysContent;
<VirtualKeyboard>.overlaysContent = <boolean>;
<new EventHandler> = <VirtualKeyboard>.ongeometrychange;
<VirtualKeyboard>.ongeometrychange = <EventHandler>;
<new Module> = new Module(<BufferSource>);
<new sequence_ModuleExportDescriptor_> = [<ModuleExportDescriptor>];
<new ModuleExportDescriptor> = <sequence_ModuleExportDescriptor_>[0];
<new sequence_ModuleExportDescriptor_> = <Module>.exports(<Module>);
<new sequence_ModuleImportDescriptor_> = [<ModuleImportDescriptor>];
<new ModuleImportDescriptor> = <sequence_ModuleImportDescriptor_>[0];
<new sequence_ModuleImportDescriptor_> = <Module>.imports(<Module>);
<new sequence_ArrayBuffer_> = [<ArrayBuffer>];
<new ArrayBuffer> = <sequence_ArrayBuffer_>[0];
<new sequence_ArrayBuffer_> = <Module>.customSections(<Module>,<DOMString>);
<new Instance> = new Instance(<Module>);
<new Instance> = new Instance(<Module>,<object>);
<new object> = <Instance>.exports;
<new Memory> = new Memory(<MemoryDescriptor>);
<new unsigned_long> = <Memory>.grow(<unsigned_long>);
<new ArrayBuffer> = <Memory>.buffer;
<new Table> = new Table(<TableDescriptor>);
<new Table> = new Table(<TableDescriptor>,<any>);
<new unsigned_long> = <Table>.grow(<unsigned_long>);
<new unsigned_long> = <Table>.grow(<unsigned_long>,<any>);
<new any> = <Table>.get(<unsigned_long>);
<Table>.set(<unsigned_long>);
<Table>.set(<unsigned_long>,<any>);
<new unsigned_long> = <Table>.length;
<new Global> = new Global(<GlobalDescriptor>);
<new Global> = new Global(<GlobalDescriptor>,<any>);
<new any> = <Global>.valueOf();
<new any> = <Global>.value;
<Global>.value = <any>;
<new CSSNumberish> = <AnimationTimeline>.duration;
<new Animation> = <AnimationTimeline>.play();
<new Animation> = <AnimationTimeline>.play(<AnimationEffect>);
<new CSSNumberish> = <Animation>.startTime;
<Animation>.startTime = <CSSNumberish>;
<Animation>.startTime = null;
<new CSSNumberish> = <Animation>.currentTime;
<Animation>.currentTime = <CSSNumberish>;
<Animation>.currentTime = null;
<new GroupEffect> = <AnimationEffect>.parent;
<new AnimationEffect> = <AnimationEffect>.previousSibling;
<new AnimationEffect> = <AnimationEffect>.nextSibling;
<AnimationEffect>.before();
<AnimationEffect>.before(<AnimationEffect>);
<AnimationEffect>.after();
<AnimationEffect>.after(<AnimationEffect>);
<AnimationEffect>.replace();
<AnimationEffect>.replace(<AnimationEffect>);
<AnimationEffect>.remove();
<new union_unrestricted_double1EffectTiming_> = <unrestricted_double>;
<new union_unrestricted_double1EffectTiming_> = <EffectTiming>;
<new GroupEffect> = new GroupEffect(<sequence_AnimationEffect_>);
<new GroupEffect> = new GroupEffect(<sequence_AnimationEffect_>,<union_unrestricted_double1EffectTiming_>);
<new AnimationNodeList> = <GroupEffect>.children;
<new AnimationEffect> = <GroupEffect>.firstChild;
<new AnimationEffect> = <GroupEffect>.lastChild;
<new GroupEffect> = <GroupEffect>.clone();
<GroupEffect>.prepend();
<GroupEffect>.prepend(<AnimationEffect>);
<GroupEffect>.append();
<GroupEffect>.append(<AnimationEffect>);
<new unsigned_long> = <AnimationNodeList>.length;
<new AnimationEffect> = <AnimationNodeList>.item(<unsigned_long>);
!extends SequenceEffect GroupEffect;
<new GroupEffect> = <SequenceEffect>;
<new SequenceEffect> = new SequenceEffect(<sequence_AnimationEffect_>);
<new SequenceEffect> = new SequenceEffect(<sequence_AnimationEffect_>,<union_unrestricted_double1EffectTiming_>);
<new SequenceEffect> = <SequenceEffect>.clone();
<new IterationCompositeOperation> = <KeyframeEffect>.iterationComposite;
<KeyframeEffect>.iterationComposite = <IterationCompositeOperation>;
!extends AnimationPlaybackEvent Event;
<new Event> = <AnimationPlaybackEvent>;
<new AnimationPlaybackEvent> = new AnimationPlaybackEvent(<DOMString>);
<new AnimationPlaybackEvent> = new AnimationPlaybackEvent(<DOMString>,<AnimationPlaybackEventInit>);
<new CSSNumberish> = <AnimationPlaybackEvent>.currentTime;
<new CSSNumberish> = <AnimationPlaybackEvent>.timelineTime;
<new double> = <AnimationTimeline>.currentTime;
!extends DocumentTimeline AnimationTimeline;
<new AnimationTimeline> = <DocumentTimeline>;
<new DocumentTimeline> = new DocumentTimeline();
<new DocumentTimeline> = new DocumentTimeline(<DocumentTimelineOptions>);
!extends Animation EventTarget;
<new EventTarget> = <Animation>;
<new Animation> = new Animation();
<new Animation> = new Animation(<AnimationEffect>);
<new Animation> = new Animation(<AnimationEffect>,<AnimationTimeline>);
<new DOMString> = <Animation>.id;
<Animation>.id = <DOMString>;
<new AnimationEffect> = <Animation>.effect;
<Animation>.effect = <AnimationEffect>;
<Animation>.effect = null;
<new AnimationTimeline> = <Animation>.timeline;
<Animation>.timeline = <AnimationTimeline>;
<Animation>.timeline = null;
<new double> = <Animation>.playbackRate;
<Animation>.playbackRate = <double>;
<new AnimationPlayState> = <Animation>.playState;
<new AnimationReplaceState> = <Animation>.replaceState;
<new boolean> = <Animation>.pending;
<new Promise_Animation_> = new Promise(function(x){console.log("ok")});
<new Promise_Animation_> = <Animation>.ready;
<new Promise_Animation_> = <Animation>.finished;
<new EventHandler> = <Animation>.onfinish;
<Animation>.onfinish = <EventHandler>;
<new EventHandler> = <Animation>.oncancel;
<Animation>.oncancel = <EventHandler>;
<new EventHandler> = <Animation>.onremove;
<Animation>.onremove = <EventHandler>;
<Animation>.cancel();
<Animation>.finish();
<Animation>.play();
<Animation>.pause();
<Animation>.updatePlaybackRate(<double>);
<Animation>.reverse();
<Animation>.persist();
<Animation>.commitStyles();
<new EffectTiming> = <AnimationEffect>.getTiming();
<new ComputedEffectTiming> = <AnimationEffect>.getComputedTiming();
<AnimationEffect>.updateTiming();
<AnimationEffect>.updateTiming(<OptionalEffectTiming>);
!extends KeyframeEffect AnimationEffect;
<new AnimationEffect> = <KeyframeEffect>;
<new union_unrestricted_double1KeyframeEffectOptions_> = <unrestricted_double>;
<new union_unrestricted_double1KeyframeEffectOptions_> = <KeyframeEffectOptions>;
<new KeyframeEffect> = new KeyframeEffect(<Element>,<object>);
<new KeyframeEffect> = new KeyframeEffect(<Element>,<object>,<union_unrestricted_double1KeyframeEffectOptions_>);
<new KeyframeEffect> = new KeyframeEffect(<KeyframeEffect>);
<new Element> = <KeyframeEffect>.target;
<KeyframeEffect>.target = <Element>;
<KeyframeEffect>.target = null;
<new CSSOMString> = <KeyframeEffect>.pseudoElement;
<KeyframeEffect>.pseudoElement = <CSSOMString>;
<KeyframeEffect>.pseudoElement = null;
<new CompositeOperation> = <KeyframeEffect>.composite;
<KeyframeEffect>.composite = <CompositeOperation>;
<new sequence_object_> = <KeyframeEffect>.getKeyframes();
<KeyframeEffect>.setKeyframes(<object>);
<new DocumentTimeline> = <Document>.timeline;
<new DOMString> = <LaunchParams>.targetURL;
<new FrozenArray_FileSystemHandle_> = [<FileSystemHandle>];
<new FileSystemHandle> = <FrozenArray_FileSystemHandle_>[0];
<new FrozenArray_FileSystemHandle_> = <LaunchParams>.files;
<new LaunchQueue> = <Window>.launchQueue;
<LaunchQueue>.setConsumer(<LaunchConsumer>);
!extends Bluetooth EventTarget;
<new EventTarget> = <Bluetooth>;
<new Promise_boolean_> = <Bluetooth>.getAvailability();
<new EventHandler> = <Bluetooth>.onavailabilitychanged;
<Bluetooth>.onavailabilitychanged = <EventHandler>;
<new BluetoothDevice> = <Bluetooth>.referringDevice;
<new sequence_BluetoothDevice_> = [<BluetoothDevice>];
<new BluetoothDevice> = <sequence_BluetoothDevice_>[0];
<new Promise_sequence_BluetoothDevice__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_BluetoothDevice__> = <Bluetooth>.getDevices();
<new Promise_BluetoothDevice_> = new Promise(function(x){console.log("ok")});
<new Promise_BluetoothDevice_> = <Bluetooth>.requestDevice();
<new Promise_BluetoothDevice_> = <Bluetooth>.requestDevice(<RequestDeviceOptions>);
!extends BluetoothPermissionResult PermissionStatus;
<new PermissionStatus> = <BluetoothPermissionResult>;
<new FrozenArray_BluetoothDevice_> = [<BluetoothDevice>];
<new BluetoothDevice> = <FrozenArray_BluetoothDevice_>[0];
<new FrozenArray_BluetoothDevice_> = <BluetoothPermissionResult>.devices;
<BluetoothPermissionResult>.devices = <FrozenArray_BluetoothDevice_>;
!extends ValueEvent Event;
<new Event> = <ValueEvent>;
<new ValueEvent> = new ValueEvent(<DOMString>);
<new ValueEvent> = new ValueEvent(<DOMString>,<ValueEventInit>);
<new any> = <ValueEvent>.value;
!extends BluetoothDevice EventTarget;
<new EventTarget> = <BluetoothDevice>;
<new DOMString> = <BluetoothDevice>.id;
<new DOMString> = <BluetoothDevice>.name;
<new BluetoothRemoteGATTServer> = <BluetoothDevice>.gatt;
<new Promise_undefined_> = <BluetoothDevice>.forget();
<new Promise_undefined_> = <BluetoothDevice>.watchAdvertisements();
<new Promise_undefined_> = <BluetoothDevice>.watchAdvertisements(<WatchAdvertisementsOptions>);
<new boolean> = <BluetoothDevice>.watchingAdvertisements;
!extends BluetoothAdvertisingEvent Event;
<new Event> = <BluetoothAdvertisingEvent>;
<new BluetoothAdvertisingEvent> = new BluetoothAdvertisingEvent(<DOMString>,<BluetoothAdvertisingEventInit>);
<new BluetoothDevice> = <BluetoothAdvertisingEvent>.device;
<new FrozenArray_UUID_> = [<UUID>];
<new UUID> = <FrozenArray_UUID_>[0];
<new FrozenArray_UUID_> = <BluetoothAdvertisingEvent>.uuids;
<new DOMString> = <BluetoothAdvertisingEvent>.name;
<new unsigned_short> = <BluetoothAdvertisingEvent>.appearance;
<new byte> = <BluetoothAdvertisingEvent>.txPower;
<new byte> = <BluetoothAdvertisingEvent>.rssi;
<new BluetoothManufacturerDataMap> = <BluetoothAdvertisingEvent>.manufacturerData;
<new BluetoothServiceDataMap> = <BluetoothAdvertisingEvent>.serviceData;
<new BluetoothDevice> = <BluetoothRemoteGATTServer>.device;
<new boolean> = <BluetoothRemoteGATTServer>.connected;
<new Promise_BluetoothRemoteGATTServer_> = new Promise(function(x){console.log("ok")});
<new Promise_BluetoothRemoteGATTServer_> = <BluetoothRemoteGATTServer>.connect();
<BluetoothRemoteGATTServer>.disconnect();
<new Promise_BluetoothRemoteGATTService_> = new Promise(function(x){console.log("ok")});
<new Promise_BluetoothRemoteGATTService_> = <BluetoothRemoteGATTServer>.getPrimaryService(<BluetoothServiceUUID>);
<new sequence_BluetoothRemoteGATTService_> = [<BluetoothRemoteGATTService>];
<new BluetoothRemoteGATTService> = <sequence_BluetoothRemoteGATTService_>[0];
<new Promise_sequence_BluetoothRemoteGATTService__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_BluetoothRemoteGATTService__> = <BluetoothRemoteGATTServer>.getPrimaryServices();
<new Promise_sequence_BluetoothRemoteGATTService__> = <BluetoothRemoteGATTServer>.getPrimaryServices(<BluetoothServiceUUID>);
!extends BluetoothRemoteGATTService EventTarget;
<new EventTarget> = <BluetoothRemoteGATTService>;
<new BluetoothDevice> = <BluetoothRemoteGATTService>.device;
<new UUID> = <BluetoothRemoteGATTService>.uuid;
<new boolean> = <BluetoothRemoteGATTService>.isPrimary;
<new Promise_BluetoothRemoteGATTCharacteristic_> = new Promise(function(x){console.log("ok")});
<new Promise_BluetoothRemoteGATTCharacteristic_> = <BluetoothRemoteGATTService>.getCharacteristic(<BluetoothCharacteristicUUID>);
<new sequence_BluetoothRemoteGATTCharacteristic_> = [<BluetoothRemoteGATTCharacteristic>];
<new BluetoothRemoteGATTCharacteristic> = <sequence_BluetoothRemoteGATTCharacteristic_>[0];
<new Promise_sequence_BluetoothRemoteGATTCharacteristic__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_BluetoothRemoteGATTCharacteristic__> = <BluetoothRemoteGATTService>.getCharacteristics();
<new Promise_sequence_BluetoothRemoteGATTCharacteristic__> = <BluetoothRemoteGATTService>.getCharacteristics(<BluetoothCharacteristicUUID>);
<new Promise_BluetoothRemoteGATTService_> = <BluetoothRemoteGATTService>.getIncludedService(<BluetoothServiceUUID>);
<new Promise_sequence_BluetoothRemoteGATTService__> = <BluetoothRemoteGATTService>.getIncludedServices();
<new Promise_sequence_BluetoothRemoteGATTService__> = <BluetoothRemoteGATTService>.getIncludedServices(<BluetoothServiceUUID>);
!extends BluetoothRemoteGATTCharacteristic EventTarget;
<new EventTarget> = <BluetoothRemoteGATTCharacteristic>;
<new BluetoothRemoteGATTService> = <BluetoothRemoteGATTCharacteristic>.service;
<new UUID> = <BluetoothRemoteGATTCharacteristic>.uuid;
<new BluetoothCharacteristicProperties> = <BluetoothRemoteGATTCharacteristic>.properties;
<new DataView> = <BluetoothRemoteGATTCharacteristic>.value;
<new Promise_BluetoothRemoteGATTDescriptor_> = new Promise(function(x){console.log("ok")});
<new Promise_BluetoothRemoteGATTDescriptor_> = <BluetoothRemoteGATTCharacteristic>.getDescriptor(<BluetoothDescriptorUUID>);
<new sequence_BluetoothRemoteGATTDescriptor_> = [<BluetoothRemoteGATTDescriptor>];
<new BluetoothRemoteGATTDescriptor> = <sequence_BluetoothRemoteGATTDescriptor_>[0];
<new Promise_sequence_BluetoothRemoteGATTDescriptor__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_BluetoothRemoteGATTDescriptor__> = <BluetoothRemoteGATTCharacteristic>.getDescriptors();
<new Promise_sequence_BluetoothRemoteGATTDescriptor__> = <BluetoothRemoteGATTCharacteristic>.getDescriptors(<BluetoothDescriptorUUID>);
<new Promise_DataView_> = new Promise(function(x){console.log("ok")});
<new Promise_DataView_> = <BluetoothRemoteGATTCharacteristic>.readValue();
<new Promise_undefined_> = <BluetoothRemoteGATTCharacteristic>.writeValue(<BufferSource>);
<new Promise_undefined_> = <BluetoothRemoteGATTCharacteristic>.writeValueWithResponse(<BufferSource>);
<new Promise_undefined_> = <BluetoothRemoteGATTCharacteristic>.writeValueWithoutResponse(<BufferSource>);
<new Promise_BluetoothRemoteGATTCharacteristic_> = <BluetoothRemoteGATTCharacteristic>.startNotifications();
<new Promise_BluetoothRemoteGATTCharacteristic_> = <BluetoothRemoteGATTCharacteristic>.stopNotifications();
<new boolean> = <BluetoothCharacteristicProperties>.broadcast;
<new boolean> = <BluetoothCharacteristicProperties>.read;
<new boolean> = <BluetoothCharacteristicProperties>.writeWithoutResponse;
<new boolean> = <BluetoothCharacteristicProperties>.write;
<new boolean> = <BluetoothCharacteristicProperties>.notify;
<new boolean> = <BluetoothCharacteristicProperties>.indicate;
<new boolean> = <BluetoothCharacteristicProperties>.authenticatedSignedWrites;
<new boolean> = <BluetoothCharacteristicProperties>.reliableWrite;
<new boolean> = <BluetoothCharacteristicProperties>.writableAuxiliaries;
<new BluetoothRemoteGATTCharacteristic> = <BluetoothRemoteGATTDescriptor>.characteristic;
<new UUID> = <BluetoothRemoteGATTDescriptor>.uuid;
<new DataView> = <BluetoothRemoteGATTDescriptor>.value;
<new Promise_DataView_> = <BluetoothRemoteGATTDescriptor>.readValue();
<new Promise_undefined_> = <BluetoothRemoteGATTDescriptor>.writeValue(<BufferSource>);
<new union_DOMString1unsigned_long_> = <DOMString>;
<new union_DOMString1unsigned_long_> = <unsigned_long>;
<new UUID> = <BluetoothUUID>.getService(<union_DOMString1unsigned_long_>);
<new UUID> = <BluetoothUUID>.getCharacteristic(<union_DOMString1unsigned_long_>);
<new UUID> = <BluetoothUUID>.getDescriptor(<union_DOMString1unsigned_long_>);
<new UUID> = <BluetoothUUID>.canonicalUUID(<unsigned_long>);
<new Bluetooth> = <Navigator>.bluetooth;
<new Promise_any_> = <LockManager>.request(<DOMString>,<LockGrantedCallback>);
<new Promise_any_> = <LockManager>.request(<DOMString>,<LockOptions>,<LockGrantedCallback>);
<new Promise_LockManagerSnapshot_> = new Promise(function(x){console.log("ok")});
<new Promise_LockManagerSnapshot_> = <LockManager>.query();
<new DOMString> = <Lock>.name;
<new LockMode> = <Lock>.mode;
<new NDEFMessage> = new NDEFMessage(<NDEFMessageInit>);
<new FrozenArray_NDEFRecord_> = [<NDEFRecord>];
<new NDEFRecord> = <FrozenArray_NDEFRecord_>[0];
<new FrozenArray_NDEFRecord_> = <NDEFMessage>.records;
<new NDEFRecord> = new NDEFRecord(<NDEFRecordInit>);
<new USVString> = <NDEFRecord>.recordType;
<new USVString> = <NDEFRecord>.mediaType;
<new USVString> = <NDEFRecord>.id;
<new DataView> = <NDEFRecord>.data;
<new USVString> = <NDEFRecord>.encoding;
<new USVString> = <NDEFRecord>.lang;
<new sequence_NDEFRecord_> = [<NDEFRecord>];
<new NDEFRecord> = <sequence_NDEFRecord_>[0];
<new sequence_NDEFRecord_> = <NDEFRecord>.toRecords();
!extends NDEFReader EventTarget;
<new EventTarget> = <NDEFReader>;
<new NDEFReader> = new NDEFReader();
<new EventHandler> = <NDEFReader>.onreading;
<NDEFReader>.onreading = <EventHandler>;
<new EventHandler> = <NDEFReader>.onreadingerror;
<NDEFReader>.onreadingerror = <EventHandler>;
<new Promise_undefined_> = <NDEFReader>.scan();
<new Promise_undefined_> = <NDEFReader>.scan(<NDEFScanOptions>);
<new Promise_undefined_> = <NDEFReader>.write(<NDEFMessageSource>);
<new Promise_undefined_> = <NDEFReader>.write(<NDEFMessageSource>,<NDEFWriteOptions>);
<new Promise_undefined_> = <NDEFReader>.makeReadOnly();
<new Promise_undefined_> = <NDEFReader>.makeReadOnly(<NDEFMakeReadOnlyOptions>);
!extends NDEFReadingEvent Event;
<new Event> = <NDEFReadingEvent>;
<new NDEFReadingEvent> = new NDEFReadingEvent(<DOMString>,<NDEFReadingEventInit>);
<new DOMString> = <NDEFReadingEvent>.serialNumber;
<new NDEFMessage> = <NDEFReadingEvent>.message;
!extends OTPCredential Credential;
<new Credential> = <OTPCredential>;
<new DOMString> = <OTPCredential>.code;
<new Promise_undefined_> = <Navigator>.share();
<new Promise_undefined_> = <Navigator>.share(<ShareData>);
<Navigator>.canShare();
<Navigator>.canShare(<ShareData>);
!extends BaseAudioContext EventTarget;
<new EventTarget> = <BaseAudioContext>;
<new AudioDestinationNode> = <BaseAudioContext>.destination;
<new float> = <BaseAudioContext>.sampleRate;
<new double> = <BaseAudioContext>.currentTime;
<new AudioListener> = <BaseAudioContext>.listener;
<new AudioContextState> = <BaseAudioContext>.state;
<new AudioWorklet> = <BaseAudioContext>.audioWorklet;
<new EventHandler> = <BaseAudioContext>.onstatechange;
<BaseAudioContext>.onstatechange = <EventHandler>;
<new AnalyserNode> = <BaseAudioContext>.createAnalyser();
<new BiquadFilterNode> = <BaseAudioContext>.createBiquadFilter();
<new AudioBuffer> = <BaseAudioContext>.createBuffer(<unsigned_long>,<unsigned_long>,<float>);
<new AudioBufferSourceNode> = <BaseAudioContext>.createBufferSource();
<new ChannelMergerNode> = <BaseAudioContext>.createChannelMerger();
<new ChannelMergerNode> = <BaseAudioContext>.createChannelMerger(<unsigned_long>);
<new ChannelSplitterNode> = <BaseAudioContext>.createChannelSplitter();
<new ChannelSplitterNode> = <BaseAudioContext>.createChannelSplitter(<unsigned_long>);
<new ConstantSourceNode> = <BaseAudioContext>.createConstantSource();
<new ConvolverNode> = <BaseAudioContext>.createConvolver();
<new DelayNode> = <BaseAudioContext>.createDelay();
<new DelayNode> = <BaseAudioContext>.createDelay(<double>);
<new DynamicsCompressorNode> = <BaseAudioContext>.createDynamicsCompressor();
<new GainNode> = <BaseAudioContext>.createGain();
<new sequence_double_> = [<double>];
<new double> = <sequence_double_>[0];
<new IIRFilterNode> = <BaseAudioContext>.createIIRFilter(<sequence_double_>,<sequence_double_>);
<new OscillatorNode> = <BaseAudioContext>.createOscillator();
<new PannerNode> = <BaseAudioContext>.createPanner();
<new sequence_float_> = [<float>];
<new float> = <sequence_float_>[0];
<new PeriodicWave> = <BaseAudioContext>.createPeriodicWave(<sequence_float_>,<sequence_float_>);
<new PeriodicWave> = <BaseAudioContext>.createPeriodicWave(<sequence_float_>,<sequence_float_>,<PeriodicWaveConstraints>);
<new ScriptProcessorNode> = <BaseAudioContext>.createScriptProcessor();
<new ScriptProcessorNode> = <BaseAudioContext>.createScriptProcessor(<unsigned_long>);
<new ScriptProcessorNode> = <BaseAudioContext>.createScriptProcessor(<unsigned_long>,<unsigned_long>);
<new ScriptProcessorNode> = <BaseAudioContext>.createScriptProcessor(<unsigned_long>,<unsigned_long>,<unsigned_long>);
<new StereoPannerNode> = <BaseAudioContext>.createStereoPanner();
<new WaveShaperNode> = <BaseAudioContext>.createWaveShaper();
<new Promise_AudioBuffer_> = new Promise(function(x){console.log("ok")});
<new Promise_AudioBuffer_> = <BaseAudioContext>.decodeAudioData(<ArrayBuffer>);
<new Promise_AudioBuffer_> = <BaseAudioContext>.decodeAudioData(<ArrayBuffer>,<DecodeSuccessCallback>);
<new Promise_AudioBuffer_> = <BaseAudioContext>.decodeAudioData(<ArrayBuffer>,<DecodeSuccessCallback>,<DecodeErrorCallback>);
!extends AudioContext BaseAudioContext;
<new BaseAudioContext> = <AudioContext>;
<new AudioContext> = new AudioContext();
<new AudioContext> = new AudioContext(<AudioContextOptions>);
<new double> = <AudioContext>.baseLatency;
<new double> = <AudioContext>.outputLatency;
<new union_DOMString1AudioSinkInfo_> = <DOMString>;
<new union_DOMString1AudioSinkInfo_> = <AudioSinkInfo>;
<new union_DOMString1AudioSinkInfo_> = <AudioContext>.sinkId;
<new AudioRenderCapacity> = <AudioContext>.renderCapacity;
<new EventHandler> = <AudioContext>.onsinkchange;
<AudioContext>.onsinkchange = <EventHandler>;
<new AudioTimestamp> = <AudioContext>.getOutputTimestamp();
<new Promise_undefined_> = <AudioContext>.resume();
<new Promise_undefined_> = <AudioContext>.suspend();
<new Promise_undefined_> = <AudioContext>.close();
<new union_DOMString1AudioSinkOptions_> = <DOMString>;
<new union_DOMString1AudioSinkOptions_> = <AudioSinkOptions>;
<new Promise_undefined_> = <AudioContext>.setSinkId(<union_DOMString1AudioSinkOptions_>);
<new MediaElementAudioSourceNode> = <AudioContext>.createMediaElementSource(<HTMLMediaElement>);
<new MediaStreamAudioSourceNode> = <AudioContext>.createMediaStreamSource(<MediaStream>);
<new MediaStreamTrackAudioSourceNode> = <AudioContext>.createMediaStreamTrackSource(<MediaStreamTrack>);
<new MediaStreamAudioDestinationNode> = <AudioContext>.createMediaStreamDestination();
<new AudioSinkType> = <AudioSinkInfo>.type;
!extends AudioRenderCapacity EventTarget;
<new EventTarget> = <AudioRenderCapacity>;
<AudioRenderCapacity>.start();
<AudioRenderCapacity>.start(<AudioRenderCapacityOptions>);
<AudioRenderCapacity>.stop();
<new EventHandler> = <AudioRenderCapacity>.onupdate;
<AudioRenderCapacity>.onupdate = <EventHandler>;
!extends AudioRenderCapacityEvent Event;
<new Event> = <AudioRenderCapacityEvent>;
<new AudioRenderCapacityEvent> = new AudioRenderCapacityEvent(<DOMString>);
<new AudioRenderCapacityEvent> = new AudioRenderCapacityEvent(<DOMString>,<AudioRenderCapacityEventInit>);
<new double> = <AudioRenderCapacityEvent>.timestamp;
<new double> = <AudioRenderCapacityEvent>.averageLoad;
<new double> = <AudioRenderCapacityEvent>.peakLoad;
<new double> = <AudioRenderCapacityEvent>.underrunRatio;
!extends OfflineAudioContext BaseAudioContext;
<new BaseAudioContext> = <OfflineAudioContext>;
<new OfflineAudioContext> = new OfflineAudioContext(<OfflineAudioContextOptions>);
<new OfflineAudioContext> = new OfflineAudioContext(<unsigned_long>,<unsigned_long>,<float>);
<new Promise_AudioBuffer_> = <OfflineAudioContext>.startRendering();
<new Promise_undefined_> = <OfflineAudioContext>.resume();
<new Promise_undefined_> = <OfflineAudioContext>.suspend(<double>);
<new unsigned_long> = <OfflineAudioContext>.length;
<new EventHandler> = <OfflineAudioContext>.oncomplete;
<OfflineAudioContext>.oncomplete = <EventHandler>;
!extends OfflineAudioCompletionEvent Event;
<new Event> = <OfflineAudioCompletionEvent>;
<new OfflineAudioCompletionEvent> = new OfflineAudioCompletionEvent(<DOMString>,<OfflineAudioCompletionEventInit>);
<new AudioBuffer> = <OfflineAudioCompletionEvent>.renderedBuffer;
<new AudioBuffer> = new AudioBuffer(<AudioBufferOptions>);
<new float> = <AudioBuffer>.sampleRate;
<new unsigned_long> = <AudioBuffer>.length;
<new double> = <AudioBuffer>.duration;
<new unsigned_long> = <AudioBuffer>.numberOfChannels;
<new Float32Array> = <AudioBuffer>.getChannelData(<unsigned_long>);
<AudioBuffer>.copyFromChannel(<Float32Array>,<unsigned_long>);
<AudioBuffer>.copyFromChannel(<Float32Array>,<unsigned_long>,<unsigned_long>);
<AudioBuffer>.copyToChannel(<Float32Array>,<unsigned_long>);
<AudioBuffer>.copyToChannel(<Float32Array>,<unsigned_long>,<unsigned_long>);
!extends AudioNode EventTarget;
<new EventTarget> = <AudioNode>;
<new AudioNode> = <AudioNode>.connect(<AudioNode>);
<new AudioNode> = <AudioNode>.connect(<AudioNode>,<unsigned_long>);
<new AudioNode> = <AudioNode>.connect(<AudioNode>,<unsigned_long>,<unsigned_long>);
<AudioNode>.connect(<AudioParam>);
<AudioNode>.connect(<AudioParam>,<unsigned_long>);
<AudioNode>.disconnect();
<AudioNode>.disconnect(<unsigned_long>);
<AudioNode>.disconnect(<AudioNode>);
<AudioNode>.disconnect(<AudioNode>,<unsigned_long>);
<AudioNode>.disconnect(<AudioNode>,<unsigned_long>,<unsigned_long>);
<AudioNode>.disconnect(<AudioParam>);
<AudioNode>.disconnect(<AudioParam>,<unsigned_long>);
<new BaseAudioContext> = <AudioNode>.context;
<new unsigned_long> = <AudioNode>.numberOfInputs;
<new unsigned_long> = <AudioNode>.numberOfOutputs;
<new unsigned_long> = <AudioNode>.channelCount;
<AudioNode>.channelCount = <unsigned_long>;
<new ChannelCountMode> = <AudioNode>.channelCountMode;
<AudioNode>.channelCountMode = <ChannelCountMode>;
<new ChannelInterpretation> = <AudioNode>.channelInterpretation;
<AudioNode>.channelInterpretation = <ChannelInterpretation>;
<new float> = <AudioParam>.value;
<AudioParam>.value = <float>;
<new AutomationRate> = <AudioParam>.automationRate;
<AudioParam>.automationRate = <AutomationRate>;
<new float> = <AudioParam>.defaultValue;
<new float> = <AudioParam>.minValue;
<new float> = <AudioParam>.maxValue;
<new AudioParam> = <AudioParam>.setValueAtTime(<float>,<double>);
<new AudioParam> = <AudioParam>.linearRampToValueAtTime(<float>,<double>);
<new AudioParam> = <AudioParam>.exponentialRampToValueAtTime(<float>,<double>);
<new AudioParam> = <AudioParam>.setTargetAtTime(<float>,<double>,<float>);
<new AudioParam> = <AudioParam>.setValueCurveAtTime(<sequence_float_>,<double>,<double>);
<new AudioParam> = <AudioParam>.cancelScheduledValues(<double>);
<new AudioParam> = <AudioParam>.cancelAndHoldAtTime(<double>);
!extends AudioScheduledSourceNode AudioNode;
<new AudioNode> = <AudioScheduledSourceNode>;
<new EventHandler> = <AudioScheduledSourceNode>.onended;
<AudioScheduledSourceNode>.onended = <EventHandler>;
<AudioScheduledSourceNode>.start();
<AudioScheduledSourceNode>.start(<double>);
<AudioScheduledSourceNode>.stop();
<AudioScheduledSourceNode>.stop(<double>);
!extends AnalyserNode AudioNode;
<new AudioNode> = <AnalyserNode>;
<new AnalyserNode> = new AnalyserNode(<BaseAudioContext>);
<new AnalyserNode> = new AnalyserNode(<BaseAudioContext>,<AnalyserOptions>);
<AnalyserNode>.getFloatFrequencyData(<Float32Array>);
<AnalyserNode>.getByteFrequencyData(<Uint8Array>);
<AnalyserNode>.getFloatTimeDomainData(<Float32Array>);
<AnalyserNode>.getByteTimeDomainData(<Uint8Array>);
<new unsigned_long> = <AnalyserNode>.fftSize;
<AnalyserNode>.fftSize = <unsigned_long>;
<new unsigned_long> = <AnalyserNode>.frequencyBinCount;
<new double> = <AnalyserNode>.minDecibels;
<AnalyserNode>.minDecibels = <double>;
<new double> = <AnalyserNode>.maxDecibels;
<AnalyserNode>.maxDecibels = <double>;
<new double> = <AnalyserNode>.smoothingTimeConstant;
<AnalyserNode>.smoothingTimeConstant = <double>;
!extends AudioBufferSourceNode AudioScheduledSourceNode;
<new AudioScheduledSourceNode> = <AudioBufferSourceNode>;
<new AudioBufferSourceNode> = new AudioBufferSourceNode(<BaseAudioContext>);
<new AudioBufferSourceNode> = new AudioBufferSourceNode(<BaseAudioContext>,<AudioBufferSourceOptions>);
<new AudioBuffer> = <AudioBufferSourceNode>.buffer;
<AudioBufferSourceNode>.buffer = <AudioBuffer>;
<AudioBufferSourceNode>.buffer = null;
<new AudioParam> = <AudioBufferSourceNode>.playbackRate;
<new AudioParam> = <AudioBufferSourceNode>.detune;
<new boolean> = <AudioBufferSourceNode>.loop;
<AudioBufferSourceNode>.loop = <boolean>;
<new double> = <AudioBufferSourceNode>.loopStart;
<AudioBufferSourceNode>.loopStart = <double>;
<new double> = <AudioBufferSourceNode>.loopEnd;
<AudioBufferSourceNode>.loopEnd = <double>;
<AudioBufferSourceNode>.start();
<AudioBufferSourceNode>.start(<double>);
<AudioBufferSourceNode>.start(<double>,<double>);
<AudioBufferSourceNode>.start(<double>,<double>,<double>);
!extends AudioDestinationNode AudioNode;
<new AudioNode> = <AudioDestinationNode>;
<new unsigned_long> = <AudioDestinationNode>.maxChannelCount;
<new AudioParam> = <AudioListener>.positionX;
<new AudioParam> = <AudioListener>.positionY;
<new AudioParam> = <AudioListener>.positionZ;
<new AudioParam> = <AudioListener>.forwardX;
<new AudioParam> = <AudioListener>.forwardY;
<new AudioParam> = <AudioListener>.forwardZ;
<new AudioParam> = <AudioListener>.upX;
<new AudioParam> = <AudioListener>.upY;
<new AudioParam> = <AudioListener>.upZ;
<AudioListener>.setPosition(<float>,<float>,<float>);
<AudioListener>.setOrientation(<float>,<float>,<float>,<float>,<float>,<float>);
!extends AudioProcessingEvent Event;
<new Event> = <AudioProcessingEvent>;
<new AudioProcessingEvent> = new AudioProcessingEvent(<DOMString>,<AudioProcessingEventInit>);
<new double> = <AudioProcessingEvent>.playbackTime;
<new AudioBuffer> = <AudioProcessingEvent>.inputBuffer;
<new AudioBuffer> = <AudioProcessingEvent>.outputBuffer;
!extends BiquadFilterNode AudioNode;
<new AudioNode> = <BiquadFilterNode>;
<new BiquadFilterNode> = new BiquadFilterNode(<BaseAudioContext>);
<new BiquadFilterNode> = new BiquadFilterNode(<BaseAudioContext>,<BiquadFilterOptions>);
<new BiquadFilterType> = <BiquadFilterNode>.type;
<BiquadFilterNode>.type = <BiquadFilterType>;
<new AudioParam> = <BiquadFilterNode>.frequency;
<new AudioParam> = <BiquadFilterNode>.detune;
<new AudioParam> = <BiquadFilterNode>.Q;
<new AudioParam> = <BiquadFilterNode>.gain;
<BiquadFilterNode>.getFrequencyResponse(<Float32Array>,<Float32Array>,<Float32Array>);
!extends ChannelMergerNode AudioNode;
<new AudioNode> = <ChannelMergerNode>;
<new ChannelMergerNode> = new ChannelMergerNode(<BaseAudioContext>);
<new ChannelMergerNode> = new ChannelMergerNode(<BaseAudioContext>,<ChannelMergerOptions>);
!extends ChannelSplitterNode AudioNode;
<new AudioNode> = <ChannelSplitterNode>;
<new ChannelSplitterNode> = new ChannelSplitterNode(<BaseAudioContext>);
<new ChannelSplitterNode> = new ChannelSplitterNode(<BaseAudioContext>,<ChannelSplitterOptions>);
!extends ConstantSourceNode AudioScheduledSourceNode;
<new AudioScheduledSourceNode> = <ConstantSourceNode>;
<new ConstantSourceNode> = new ConstantSourceNode(<BaseAudioContext>);
<new ConstantSourceNode> = new ConstantSourceNode(<BaseAudioContext>,<ConstantSourceOptions>);
<new AudioParam> = <ConstantSourceNode>.offset;
!extends ConvolverNode AudioNode;
<new AudioNode> = <ConvolverNode>;
<new ConvolverNode> = new ConvolverNode(<BaseAudioContext>);
<new ConvolverNode> = new ConvolverNode(<BaseAudioContext>,<ConvolverOptions>);
<new AudioBuffer> = <ConvolverNode>.buffer;
<ConvolverNode>.buffer = <AudioBuffer>;
<ConvolverNode>.buffer = null;
<new boolean> = <ConvolverNode>.normalize;
<ConvolverNode>.normalize = <boolean>;
!extends DelayNode AudioNode;
<new AudioNode> = <DelayNode>;
<new DelayNode> = new DelayNode(<BaseAudioContext>);
<new DelayNode> = new DelayNode(<BaseAudioContext>,<DelayOptions>);
<new AudioParam> = <DelayNode>.delayTime;
!extends DynamicsCompressorNode AudioNode;
<new AudioNode> = <DynamicsCompressorNode>;
<new DynamicsCompressorNode> = new DynamicsCompressorNode(<BaseAudioContext>);
<new DynamicsCompressorNode> = new DynamicsCompressorNode(<BaseAudioContext>,<DynamicsCompressorOptions>);
<new AudioParam> = <DynamicsCompressorNode>.threshold;
<new AudioParam> = <DynamicsCompressorNode>.knee;
<new AudioParam> = <DynamicsCompressorNode>.ratio;
<new float> = <DynamicsCompressorNode>.reduction;
<new AudioParam> = <DynamicsCompressorNode>.attack;
<new AudioParam> = <DynamicsCompressorNode>.release;
!extends GainNode AudioNode;
<new AudioNode> = <GainNode>;
<new GainNode> = new GainNode(<BaseAudioContext>);
<new GainNode> = new GainNode(<BaseAudioContext>,<GainOptions>);
<new AudioParam> = <GainNode>.gain;
!extends IIRFilterNode AudioNode;
<new AudioNode> = <IIRFilterNode>;
<new IIRFilterNode> = new IIRFilterNode(<BaseAudioContext>,<IIRFilterOptions>);
<IIRFilterNode>.getFrequencyResponse(<Float32Array>,<Float32Array>,<Float32Array>);
!extends MediaElementAudioSourceNode AudioNode;
<new AudioNode> = <MediaElementAudioSourceNode>;
<new MediaElementAudioSourceNode> = new MediaElementAudioSourceNode(<AudioContext>,<MediaElementAudioSourceOptions>);
<new HTMLMediaElement> = <MediaElementAudioSourceNode>.mediaElement;
!extends MediaStreamAudioDestinationNode AudioNode;
<new AudioNode> = <MediaStreamAudioDestinationNode>;
<new MediaStreamAudioDestinationNode> = new MediaStreamAudioDestinationNode(<AudioContext>);
<new MediaStreamAudioDestinationNode> = new MediaStreamAudioDestinationNode(<AudioContext>,<AudioNodeOptions>);
<new MediaStream> = <MediaStreamAudioDestinationNode>.stream;
!extends MediaStreamAudioSourceNode AudioNode;
<new AudioNode> = <MediaStreamAudioSourceNode>;
<new MediaStreamAudioSourceNode> = new MediaStreamAudioSourceNode(<AudioContext>,<MediaStreamAudioSourceOptions>);
<new MediaStream> = <MediaStreamAudioSourceNode>.mediaStream;
!extends MediaStreamTrackAudioSourceNode AudioNode;
<new AudioNode> = <MediaStreamTrackAudioSourceNode>;
<new MediaStreamTrackAudioSourceNode> = new MediaStreamTrackAudioSourceNode(<AudioContext>,<MediaStreamTrackAudioSourceOptions>);
!extends OscillatorNode AudioScheduledSourceNode;
<new AudioScheduledSourceNode> = <OscillatorNode>;
<new OscillatorNode> = new OscillatorNode(<BaseAudioContext>);
<new OscillatorNode> = new OscillatorNode(<BaseAudioContext>,<OscillatorOptions>);
<new OscillatorType> = <OscillatorNode>.type;
<OscillatorNode>.type = <OscillatorType>;
<new AudioParam> = <OscillatorNode>.frequency;
<new AudioParam> = <OscillatorNode>.detune;
<OscillatorNode>.setPeriodicWave(<PeriodicWave>);
!extends PannerNode AudioNode;
<new AudioNode> = <PannerNode>;
<new PannerNode> = new PannerNode(<BaseAudioContext>);
<new PannerNode> = new PannerNode(<BaseAudioContext>,<PannerOptions>);
<new PanningModelType> = <PannerNode>.panningModel;
<PannerNode>.panningModel = <PanningModelType>;
<new AudioParam> = <PannerNode>.positionX;
<new AudioParam> = <PannerNode>.positionY;
<new AudioParam> = <PannerNode>.positionZ;
<new AudioParam> = <PannerNode>.orientationX;
<new AudioParam> = <PannerNode>.orientationY;
<new AudioParam> = <PannerNode>.orientationZ;
<new DistanceModelType> = <PannerNode>.distanceModel;
<PannerNode>.distanceModel = <DistanceModelType>;
<new double> = <PannerNode>.refDistance;
<PannerNode>.refDistance = <double>;
<new double> = <PannerNode>.maxDistance;
<PannerNode>.maxDistance = <double>;
<new double> = <PannerNode>.rolloffFactor;
<PannerNode>.rolloffFactor = <double>;
<new double> = <PannerNode>.coneInnerAngle;
<PannerNode>.coneInnerAngle = <double>;
<new double> = <PannerNode>.coneOuterAngle;
<PannerNode>.coneOuterAngle = <double>;
<new double> = <PannerNode>.coneOuterGain;
<PannerNode>.coneOuterGain = <double>;
<PannerNode>.setPosition(<float>,<float>,<float>);
<PannerNode>.setOrientation(<float>,<float>,<float>);
<new PeriodicWave> = new PeriodicWave(<BaseAudioContext>);
<new PeriodicWave> = new PeriodicWave(<BaseAudioContext>,<PeriodicWaveOptions>);
!extends ScriptProcessorNode AudioNode;
<new AudioNode> = <ScriptProcessorNode>;
<new EventHandler> = <ScriptProcessorNode>.onaudioprocess;
<ScriptProcessorNode>.onaudioprocess = <EventHandler>;
<new long> = <ScriptProcessorNode>.bufferSize;
!extends StereoPannerNode AudioNode;
<new AudioNode> = <StereoPannerNode>;
<new StereoPannerNode> = new StereoPannerNode(<BaseAudioContext>);
<new StereoPannerNode> = new StereoPannerNode(<BaseAudioContext>,<StereoPannerOptions>);
<new AudioParam> = <StereoPannerNode>.pan;
!extends WaveShaperNode AudioNode;
<new AudioNode> = <WaveShaperNode>;
<new WaveShaperNode> = new WaveShaperNode(<BaseAudioContext>);
<new WaveShaperNode> = new WaveShaperNode(<BaseAudioContext>,<WaveShaperOptions>);
<new Float32Array> = <WaveShaperNode>.curve;
<WaveShaperNode>.curve = <Float32Array>;
<WaveShaperNode>.curve = null;
<new OverSampleType> = <WaveShaperNode>.oversample;
<WaveShaperNode>.oversample = <OverSampleType>;
!extends AudioWorklet Worklet;
<new Worklet> = <AudioWorklet>;
<new MessagePort> = <AudioWorklet>.port;
!extends AudioWorkletGlobalScope WorkletGlobalScope;
<new WorkletGlobalScope> = <AudioWorkletGlobalScope>;
<AudioWorkletGlobalScope>.registerProcessor(<DOMString>,<AudioWorkletProcessorConstructor>);
<new unsigned_long_long> = <AudioWorkletGlobalScope>.currentFrame;
<new double> = <AudioWorkletGlobalScope>.currentTime;
<new float> = <AudioWorkletGlobalScope>.sampleRate;
<new MessagePort> = <AudioWorkletGlobalScope>.port;
!extends AudioWorkletNode AudioNode;
<new AudioNode> = <AudioWorkletNode>;
<new AudioWorkletNode> = new AudioWorkletNode(<BaseAudioContext>,<DOMString>);
<new AudioWorkletNode> = new AudioWorkletNode(<BaseAudioContext>,<DOMString>,<AudioWorkletNodeOptions>);
<new AudioParamMap> = <AudioWorkletNode>.parameters;
<new MessagePort> = <AudioWorkletNode>.port;
<new EventHandler> = <AudioWorkletNode>.onprocessorerror;
<AudioWorkletNode>.onprocessorerror = <EventHandler>;
<new AudioWorkletProcessor> = new AudioWorkletProcessor();
<new MessagePort> = <AudioWorkletProcessor>.port;
!extends PublicKeyCredential Credential;
<new Credential> = <PublicKeyCredential>;
<new ArrayBuffer> = <PublicKeyCredential>.rawId;
<new AuthenticatorResponse> = <PublicKeyCredential>.response;
<new DOMString> = <PublicKeyCredential>.authenticatorAttachment;
<new AuthenticationExtensionsClientOutputs> = <PublicKeyCredential>.getClientExtensionResults();
<new Promise_boolean_> = <PublicKeyCredential>.isConditionalMediationAvailable();
<new PublicKeyCredentialJSON> = <PublicKeyCredential>.toJSON();
<new Promise_boolean_> = <PublicKeyCredential>.isUserVerifyingPlatformAuthenticatorAvailable();
<new PublicKeyCredentialCreationOptions> = <PublicKeyCredential>.parseCreationOptionsFromJSON(<PublicKeyCredentialCreationOptionsJSON>);
<new PublicKeyCredentialRequestOptions> = <PublicKeyCredential>.parseRequestOptionsFromJSON(<PublicKeyCredentialRequestOptionsJSON>);
<new ArrayBuffer> = <AuthenticatorResponse>.clientDataJSON;
!extends AuthenticatorAttestationResponse AuthenticatorResponse;
<new AuthenticatorResponse> = <AuthenticatorAttestationResponse>;
<new ArrayBuffer> = <AuthenticatorAttestationResponse>.attestationObject;
<new sequence_DOMString_> = <AuthenticatorAttestationResponse>.getTransports();
<new ArrayBuffer> = <AuthenticatorAttestationResponse>.getAuthenticatorData();
<new ArrayBuffer> = <AuthenticatorAttestationResponse>.getPublicKey();
<new COSEAlgorithmIdentifier> = <AuthenticatorAttestationResponse>.getPublicKeyAlgorithm();
!extends AuthenticatorAssertionResponse AuthenticatorResponse;
<new AuthenticatorResponse> = <AuthenticatorAssertionResponse>;
<new ArrayBuffer> = <AuthenticatorAssertionResponse>.authenticatorData;
<new ArrayBuffer> = <AuthenticatorAssertionResponse>.signature;
<new ArrayBuffer> = <AuthenticatorAssertionResponse>.userHandle;
<new ArrayBuffer> = <AuthenticatorAssertionResponse>.attestationObject;
<new AudioDecoder> = new AudioDecoder(<AudioDecoderInit>);
<new CodecState> = <AudioDecoder>.state;
<new unsigned_long> = <AudioDecoder>.decodeQueueSize;
<new EventHandler> = <AudioDecoder>.ondequeue;
<AudioDecoder>.ondequeue = <EventHandler>;
<AudioDecoder>.configure(<AudioDecoderConfig>);
<AudioDecoder>.decode(<EncodedAudioChunk>);
<new Promise_undefined_> = <AudioDecoder>.flush();
<AudioDecoder>.reset();
<AudioDecoder>.close();
<new Promise_AudioDecoderSupport_> = new Promise(function(x){console.log("ok")});
<new Promise_AudioDecoderSupport_> = <AudioDecoder>.isConfigSupported(<AudioDecoderConfig>);
<new VideoDecoder> = new VideoDecoder(<VideoDecoderInit>);
<new CodecState> = <VideoDecoder>.state;
<new unsigned_long> = <VideoDecoder>.decodeQueueSize;
<new EventHandler> = <VideoDecoder>.ondequeue;
<VideoDecoder>.ondequeue = <EventHandler>;
<VideoDecoder>.configure(<VideoDecoderConfig>);
<VideoDecoder>.decode(<EncodedVideoChunk>);
<new Promise_undefined_> = <VideoDecoder>.flush();
<VideoDecoder>.reset();
<VideoDecoder>.close();
<new Promise_VideoDecoderSupport_> = new Promise(function(x){console.log("ok")});
<new Promise_VideoDecoderSupport_> = <VideoDecoder>.isConfigSupported(<VideoDecoderConfig>);
<new AudioEncoder> = new AudioEncoder(<AudioEncoderInit>);
<new CodecState> = <AudioEncoder>.state;
<new unsigned_long> = <AudioEncoder>.encodeQueueSize;
<new EventHandler> = <AudioEncoder>.ondequeue;
<AudioEncoder>.ondequeue = <EventHandler>;
<AudioEncoder>.configure(<AudioEncoderConfig>);
<AudioEncoder>.encode(<AudioData>);
<new Promise_undefined_> = <AudioEncoder>.flush();
<AudioEncoder>.reset();
<AudioEncoder>.close();
<new Promise_AudioEncoderSupport_> = new Promise(function(x){console.log("ok")});
<new Promise_AudioEncoderSupport_> = <AudioEncoder>.isConfigSupported(<AudioEncoderConfig>);
<new VideoEncoder> = new VideoEncoder(<VideoEncoderInit>);
<new CodecState> = <VideoEncoder>.state;
<new unsigned_long> = <VideoEncoder>.encodeQueueSize;
<new EventHandler> = <VideoEncoder>.ondequeue;
<VideoEncoder>.ondequeue = <EventHandler>;
<VideoEncoder>.configure(<VideoEncoderConfig>);
<VideoEncoder>.encode(<VideoFrame>);
<VideoEncoder>.encode(<VideoFrame>,<VideoEncoderEncodeOptions>);
<new Promise_undefined_> = <VideoEncoder>.flush();
<VideoEncoder>.reset();
<VideoEncoder>.close();
<new Promise_VideoEncoderSupport_> = new Promise(function(x){console.log("ok")});
<new Promise_VideoEncoderSupport_> = <VideoEncoder>.isConfigSupported(<VideoEncoderConfig>);
<new EncodedAudioChunk> = new EncodedAudioChunk(<EncodedAudioChunkInit>);
<new EncodedAudioChunkType> = <EncodedAudioChunk>.type;
<new long_long> = <EncodedAudioChunk>.timestamp;
<new unsigned_long_long> = <EncodedAudioChunk>.duration;
<new unsigned_long> = <EncodedAudioChunk>.byteLength;
<EncodedAudioChunk>.copyTo(<BufferSource>);
<new EncodedVideoChunk> = new EncodedVideoChunk(<EncodedVideoChunkInit>);
<new EncodedVideoChunkType> = <EncodedVideoChunk>.type;
<new long_long> = <EncodedVideoChunk>.timestamp;
<new unsigned_long_long> = <EncodedVideoChunk>.duration;
<new unsigned_long> = <EncodedVideoChunk>.byteLength;
<EncodedVideoChunk>.copyTo(<BufferSource>);
<new AudioData> = new AudioData(<AudioDataInit>);
<new AudioSampleFormat> = <AudioData>.format;
<new float> = <AudioData>.sampleRate;
<new unsigned_long> = <AudioData>.numberOfFrames;
<new unsigned_long> = <AudioData>.numberOfChannels;
<new unsigned_long_long> = <AudioData>.duration;
<new long_long> = <AudioData>.timestamp;
<new unsigned_long> = <AudioData>.allocationSize(<AudioDataCopyToOptions>);
<AudioData>.copyTo(<BufferSource>,<AudioDataCopyToOptions>);
<new AudioData> = <AudioData>.clone();
<AudioData>.close();
<new VideoFrame> = new VideoFrame(<CanvasImageSource>);
<new VideoFrame> = new VideoFrame(<CanvasImageSource>,<VideoFrameInit>);
<new VideoFrame> = new VideoFrame(<BufferSource>,<VideoFrameBufferInit>);
<new VideoPixelFormat> = <VideoFrame>.format;
<new unsigned_long> = <VideoFrame>.codedWidth;
<new unsigned_long> = <VideoFrame>.codedHeight;
<new DOMRectReadOnly> = <VideoFrame>.codedRect;
<new DOMRectReadOnly> = <VideoFrame>.visibleRect;
<new unsigned_long> = <VideoFrame>.displayWidth;
<new unsigned_long> = <VideoFrame>.displayHeight;
<new unsigned_long_long> = <VideoFrame>.duration;
<new long_long> = <VideoFrame>.timestamp;
<new VideoColorSpace> = <VideoFrame>.colorSpace;
<new VideoFrameMetadata> = <VideoFrame>.metadata();
<new unsigned_long> = <VideoFrame>.allocationSize();
<new unsigned_long> = <VideoFrame>.allocationSize(<VideoFrameCopyToOptions>);
<new sequence_PlaneLayout_> = [<PlaneLayout>];
<new PlaneLayout> = <sequence_PlaneLayout_>[0];
<new Promise_sequence_PlaneLayout__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_PlaneLayout__> = <VideoFrame>.copyTo(<BufferSource>);
<new Promise_sequence_PlaneLayout__> = <VideoFrame>.copyTo(<BufferSource>,<VideoFrameCopyToOptions>);
<new VideoFrame> = <VideoFrame>.clone();
<VideoFrame>.close();
<new VideoColorSpace> = new VideoColorSpace();
<new VideoColorSpace> = new VideoColorSpace(<VideoColorSpaceInit>);
<new VideoColorPrimaries> = <VideoColorSpace>.primaries;
<new VideoTransferCharacteristics> = <VideoColorSpace>.transfer;
<new VideoMatrixCoefficients> = <VideoColorSpace>.matrix;
<new boolean> = <VideoColorSpace>.fullRange;
<new VideoColorSpaceInit> = <VideoColorSpace>.toJSON();
<new ImageDecoder> = new ImageDecoder(<ImageDecoderInit>);
<new DOMString> = <ImageDecoder>.type;
<new boolean> = <ImageDecoder>.complete;
<new Promise_undefined_> = <ImageDecoder>.completed;
<new ImageTrackList> = <ImageDecoder>.tracks;
<new Promise_ImageDecodeResult_> = new Promise(function(x){console.log("ok")});
<new Promise_ImageDecodeResult_> = <ImageDecoder>.decode();
<new Promise_ImageDecodeResult_> = <ImageDecoder>.decode(<ImageDecodeOptions>);
<ImageDecoder>.reset();
<ImageDecoder>.close();
<new Promise_boolean_> = <ImageDecoder>.isTypeSupported(<DOMString>);
<new ImageTrack> = <ImageTrackList>[<unsigned_long>];
<new Promise_undefined_> = <ImageTrackList>.ready;
<new unsigned_long> = <ImageTrackList>.length;
<new long> = <ImageTrackList>.selectedIndex;
<new ImageTrack> = <ImageTrackList>.selectedTrack;
<new boolean> = <ImageTrack>.animated;
<new unsigned_long> = <ImageTrack>.frameCount;
<new unrestricted_float> = <ImageTrack>.repetitionCount;
<new boolean> = <ImageTrack>.selected;
<ImageTrack>.selected = <boolean>;
!extends WebGLBuffer WebGLObject;
<new WebGLObject> = <WebGLBuffer>;
!extends WebGLFramebuffer WebGLObject;
<new WebGLObject> = <WebGLFramebuffer>;
!extends WebGLProgram WebGLObject;
<new WebGLObject> = <WebGLProgram>;
!extends WebGLRenderbuffer WebGLObject;
<new WebGLObject> = <WebGLRenderbuffer>;
!extends WebGLShader WebGLObject;
<new WebGLObject> = <WebGLShader>;
!extends WebGLTexture WebGLObject;
<new WebGLObject> = <WebGLTexture>;
<new GLint> = <WebGLActiveInfo>.size;
<new GLenum> = <WebGLActiveInfo>.type;
<new DOMString> = <WebGLActiveInfo>.name;
<new GLint> = <WebGLShaderPrecisionFormat>.rangeMin;
<new GLint> = <WebGLShaderPrecisionFormat>.rangeMax;
<new GLint> = <WebGLShaderPrecisionFormat>.precision;
!extends WebGLContextEvent Event;
<new Event> = <WebGLContextEvent>;
<new WebGLContextEvent> = new WebGLContextEvent(<DOMString>);
<new WebGLContextEvent> = new WebGLContextEvent(<DOMString>,<WebGLContextEventInit>);
<new DOMString> = <WebGLContextEvent>.statusMessage;
!extends WebGLQuery WebGLObject;
<new WebGLObject> = <WebGLQuery>;
!extends WebGLSampler WebGLObject;
<new WebGLObject> = <WebGLSampler>;
!extends WebGLSync WebGLObject;
<new WebGLObject> = <WebGLSync>;
!extends WebGLTransformFeedback WebGLObject;
<new WebGLObject> = <WebGLTransformFeedback>;
!extends WebGLVertexArrayObject WebGLObject;
<new WebGLObject> = <WebGLVertexArrayObject>;
<new unsigned_long> = <GPUSupportedLimits>.maxTextureDimension1D;
<new unsigned_long> = <GPUSupportedLimits>.maxTextureDimension2D;
<new unsigned_long> = <GPUSupportedLimits>.maxTextureDimension3D;
<new unsigned_long> = <GPUSupportedLimits>.maxTextureArrayLayers;
<new unsigned_long> = <GPUSupportedLimits>.maxBindGroups;
<new unsigned_long> = <GPUSupportedLimits>.maxBindingsPerBindGroup;
<new unsigned_long> = <GPUSupportedLimits>.maxDynamicUniformBuffersPerPipelineLayout;
<new unsigned_long> = <GPUSupportedLimits>.maxDynamicStorageBuffersPerPipelineLayout;
<new unsigned_long> = <GPUSupportedLimits>.maxSampledTexturesPerShaderStage;
<new unsigned_long> = <GPUSupportedLimits>.maxSamplersPerShaderStage;
<new unsigned_long> = <GPUSupportedLimits>.maxStorageBuffersPerShaderStage;
<new unsigned_long> = <GPUSupportedLimits>.maxStorageTexturesPerShaderStage;
<new unsigned_long> = <GPUSupportedLimits>.maxUniformBuffersPerShaderStage;
<new unsigned_long_long> = <GPUSupportedLimits>.maxUniformBufferBindingSize;
<new unsigned_long_long> = <GPUSupportedLimits>.maxStorageBufferBindingSize;
<new unsigned_long> = <GPUSupportedLimits>.minUniformBufferOffsetAlignment;
<new unsigned_long> = <GPUSupportedLimits>.minStorageBufferOffsetAlignment;
<new unsigned_long> = <GPUSupportedLimits>.maxVertexBuffers;
<new unsigned_long_long> = <GPUSupportedLimits>.maxBufferSize;
<new unsigned_long> = <GPUSupportedLimits>.maxVertexAttributes;
<new unsigned_long> = <GPUSupportedLimits>.maxVertexBufferArrayStride;
<new unsigned_long> = <GPUSupportedLimits>.maxInterStageShaderComponents;
<new unsigned_long> = <GPUSupportedLimits>.maxInterStageShaderVariables;
<new unsigned_long> = <GPUSupportedLimits>.maxColorAttachments;
<new unsigned_long> = <GPUSupportedLimits>.maxColorAttachmentBytesPerSample;
<new unsigned_long> = <GPUSupportedLimits>.maxComputeWorkgroupStorageSize;
<new unsigned_long> = <GPUSupportedLimits>.maxComputeInvocationsPerWorkgroup;
<new unsigned_long> = <GPUSupportedLimits>.maxComputeWorkgroupSizeX;
<new unsigned_long> = <GPUSupportedLimits>.maxComputeWorkgroupSizeY;
<new unsigned_long> = <GPUSupportedLimits>.maxComputeWorkgroupSizeZ;
<new unsigned_long> = <GPUSupportedLimits>.maxComputeWorkgroupsPerDimension;
<new DOMString> = <GPUAdapterInfo>.vendor;
<new DOMString> = <GPUAdapterInfo>.architecture;
<new DOMString> = <GPUAdapterInfo>.device;
<new DOMString> = <GPUAdapterInfo>.description;
<new Promise_GPUAdapter_> = new Promise(function(x){console.log("ok")});
<new Promise_GPUAdapter_> = <GPU>.requestAdapter();
<new Promise_GPUAdapter_> = <GPU>.requestAdapter(<GPURequestAdapterOptions>);
<new GPUTextureFormat> = <GPU>.getPreferredCanvasFormat();
<new GPUSupportedFeatures> = <GPUAdapter>.features;
<new GPUSupportedLimits> = <GPUAdapter>.limits;
<new boolean> = <GPUAdapter>.isFallbackAdapter;
<new Promise_GPUDevice_> = new Promise(function(x){console.log("ok")});
<new Promise_GPUDevice_> = <GPUAdapter>.requestDevice();
<new Promise_GPUDevice_> = <GPUAdapter>.requestDevice(<GPUDeviceDescriptor>);
<new Promise_GPUAdapterInfo_> = new Promise(function(x){console.log("ok")});
<new Promise_GPUAdapterInfo_> = <GPUAdapter>.requestAdapterInfo();
<new Promise_GPUAdapterInfo_> = <GPUAdapter>.requestAdapterInfo(<sequence_DOMString_>);
!extends GPUDevice EventTarget;
<new EventTarget> = <GPUDevice>;
<new GPUSupportedFeatures> = <GPUDevice>.features;
<new GPUSupportedLimits> = <GPUDevice>.limits;
<new GPUQueue> = <GPUDevice>.queue;
<GPUDevice>.destroy();
<new GPUBuffer> = <GPUDevice>.createBuffer(<GPUBufferDescriptor>);
<new GPUTexture> = <GPUDevice>.createTexture(<GPUTextureDescriptor>);
<new GPUSampler> = <GPUDevice>.createSampler();
<new GPUSampler> = <GPUDevice>.createSampler(<GPUSamplerDescriptor>);
<new GPUExternalTexture> = <GPUDevice>.importExternalTexture(<GPUExternalTextureDescriptor>);
<new GPUBindGroupLayout> = <GPUDevice>.createBindGroupLayout(<GPUBindGroupLayoutDescriptor>);
<new GPUPipelineLayout> = <GPUDevice>.createPipelineLayout(<GPUPipelineLayoutDescriptor>);
<new GPUBindGroup> = <GPUDevice>.createBindGroup(<GPUBindGroupDescriptor>);
<new GPUShaderModule> = <GPUDevice>.createShaderModule(<GPUShaderModuleDescriptor>);
<new GPUComputePipeline> = <GPUDevice>.createComputePipeline(<GPUComputePipelineDescriptor>);
<new GPURenderPipeline> = <GPUDevice>.createRenderPipeline(<GPURenderPipelineDescriptor>);
<new Promise_GPUComputePipeline_> = new Promise(function(x){console.log("ok")});
<new Promise_GPUComputePipeline_> = <GPUDevice>.createComputePipelineAsync(<GPUComputePipelineDescriptor>);
<new Promise_GPURenderPipeline_> = new Promise(function(x){console.log("ok")});
<new Promise_GPURenderPipeline_> = <GPUDevice>.createRenderPipelineAsync(<GPURenderPipelineDescriptor>);
<new GPUCommandEncoder> = <GPUDevice>.createCommandEncoder();
<new GPUCommandEncoder> = <GPUDevice>.createCommandEncoder(<GPUCommandEncoderDescriptor>);
<new GPURenderBundleEncoder> = <GPUDevice>.createRenderBundleEncoder(<GPURenderBundleEncoderDescriptor>);
<new GPUQuerySet> = <GPUDevice>.createQuerySet(<GPUQuerySetDescriptor>);
<new GPUSize64> = <GPUBuffer>.size;
<new GPUBufferUsageFlags> = <GPUBuffer>.usage;
<new GPUBufferMapState> = <GPUBuffer>.mapState;
<new Promise_undefined_> = <GPUBuffer>.mapAsync(<GPUMapModeFlags>);
<new Promise_undefined_> = <GPUBuffer>.mapAsync(<GPUMapModeFlags>,<GPUSize64>);
<new Promise_undefined_> = <GPUBuffer>.mapAsync(<GPUMapModeFlags>,<GPUSize64>,<GPUSize64>);
<new ArrayBuffer> = <GPUBuffer>.getMappedRange();
<new ArrayBuffer> = <GPUBuffer>.getMappedRange(<GPUSize64>);
<new ArrayBuffer> = <GPUBuffer>.getMappedRange(<GPUSize64>,<GPUSize64>);
<GPUBuffer>.unmap();
<GPUBuffer>.destroy();
<new GPUTextureView> = <GPUTexture>.createView();
<new GPUTextureView> = <GPUTexture>.createView(<GPUTextureViewDescriptor>);
<GPUTexture>.destroy();
<new GPUIntegerCoordinate> = <GPUTexture>.width;
<new GPUIntegerCoordinate> = <GPUTexture>.height;
<new GPUIntegerCoordinate> = <GPUTexture>.depthOrArrayLayers;
<new GPUIntegerCoordinate> = <GPUTexture>.mipLevelCount;
<new GPUSize32> = <GPUTexture>.sampleCount;
<new GPUTextureDimension> = <GPUTexture>.dimension;
<new GPUTextureFormat> = <GPUTexture>.format;
<new GPUTextureUsageFlags> = <GPUTexture>.usage;
<new boolean> = <GPUExternalTexture>.expired;
<new Promise_GPUCompilationInfo_> = new Promise(function(x){console.log("ok")});
<new Promise_GPUCompilationInfo_> = <GPUShaderModule>.compilationInfo();
<new DOMString> = <GPUCompilationMessage>.message;
<new GPUCompilationMessageType> = <GPUCompilationMessage>.type;
<new unsigned_long_long> = <GPUCompilationMessage>.lineNum;
<new unsigned_long_long> = <GPUCompilationMessage>.linePos;
<new unsigned_long_long> = <GPUCompilationMessage>.offset;
<new unsigned_long_long> = <GPUCompilationMessage>.length;
<new FrozenArray_GPUCompilationMessage_> = [<GPUCompilationMessage>];
<new GPUCompilationMessage> = <FrozenArray_GPUCompilationMessage_>[0];
<new FrozenArray_GPUCompilationMessage_> = <GPUCompilationInfo>.messages;
!extends GPUPipelineError DOMException;
<new DOMException> = <GPUPipelineError>;
<new GPUPipelineError> = new GPUPipelineError(<DOMString>,<GPUPipelineErrorInit>);
<new GPUPipelineErrorReason> = <GPUPipelineError>.reason;
<new GPURenderPassEncoder> = <GPUCommandEncoder>.beginRenderPass(<GPURenderPassDescriptor>);
<new GPUComputePassEncoder> = <GPUCommandEncoder>.beginComputePass();
<new GPUComputePassEncoder> = <GPUCommandEncoder>.beginComputePass(<GPUComputePassDescriptor>);
<GPUCommandEncoder>.copyBufferToBuffer(<GPUBuffer>,<GPUSize64>,<GPUBuffer>,<GPUSize64>,<GPUSize64>);
<GPUCommandEncoder>.copyBufferToTexture(<GPUImageCopyBuffer>,<GPUImageCopyTexture>,<GPUExtent3D>);
<GPUCommandEncoder>.copyTextureToBuffer(<GPUImageCopyTexture>,<GPUImageCopyBuffer>,<GPUExtent3D>);
<GPUCommandEncoder>.copyTextureToTexture(<GPUImageCopyTexture>,<GPUImageCopyTexture>,<GPUExtent3D>);
<GPUCommandEncoder>.clearBuffer(<GPUBuffer>);
<GPUCommandEncoder>.clearBuffer(<GPUBuffer>,<GPUSize64>);
<GPUCommandEncoder>.clearBuffer(<GPUBuffer>,<GPUSize64>,<GPUSize64>);
<GPUCommandEncoder>.writeTimestamp(<GPUQuerySet>,<GPUSize32>);
<GPUCommandEncoder>.resolveQuerySet(<GPUQuerySet>,<GPUSize32>,<GPUSize32>,<GPUBuffer>,<GPUSize64>);
<new GPUCommandBuffer> = <GPUCommandEncoder>.finish();
<new GPUCommandBuffer> = <GPUCommandEncoder>.finish(<GPUCommandBufferDescriptor>);
<GPUComputePassEncoder>.setPipeline(<GPUComputePipeline>);
<GPUComputePassEncoder>.dispatchWorkgroups(<GPUSize32>);
<GPUComputePassEncoder>.dispatchWorkgroups(<GPUSize32>,<GPUSize32>);
<GPUComputePassEncoder>.dispatchWorkgroups(<GPUSize32>,<GPUSize32>,<GPUSize32>);
<GPUComputePassEncoder>.dispatchWorkgroupsIndirect(<GPUBuffer>,<GPUSize64>);
<GPUComputePassEncoder>.end();
<GPURenderPassEncoder>.setViewport(<float>,<float>,<float>,<float>,<float>,<float>);
<GPURenderPassEncoder>.setScissorRect(<GPUIntegerCoordinate>,<GPUIntegerCoordinate>,<GPUIntegerCoordinate>,<GPUIntegerCoordinate>);
<GPURenderPassEncoder>.setBlendConstant(<GPUColor>);
<GPURenderPassEncoder>.setStencilReference(<GPUStencilValue>);
<GPURenderPassEncoder>.beginOcclusionQuery(<GPUSize32>);
<GPURenderPassEncoder>.endOcclusionQuery();
<new sequence_GPURenderBundle_> = [<GPURenderBundle>];
<new GPURenderBundle> = <sequence_GPURenderBundle_>[0];
<GPURenderPassEncoder>.executeBundles(<sequence_GPURenderBundle_>);
<GPURenderPassEncoder>.end();
<new GPURenderBundle> = <GPURenderBundleEncoder>.finish();
<new GPURenderBundle> = <GPURenderBundleEncoder>.finish(<GPURenderBundleDescriptor>);
<new sequence_GPUCommandBuffer_> = [<GPUCommandBuffer>];
<new GPUCommandBuffer> = <sequence_GPUCommandBuffer_>[0];
<GPUQueue>.submit(<sequence_GPUCommandBuffer_>);
<new Promise_undefined_> = <GPUQueue>.onSubmittedWorkDone();
<GPUQueue>.writeBuffer(<GPUBuffer>,<GPUSize64>,<BufferSource>);
<GPUQueue>.writeBuffer(<GPUBuffer>,<GPUSize64>,<BufferSource>,<GPUSize64>);
<GPUQueue>.writeBuffer(<GPUBuffer>,<GPUSize64>,<BufferSource>,<GPUSize64>,<GPUSize64>);
<GPUQueue>.writeTexture(<GPUImageCopyTexture>,<BufferSource>,<GPUImageDataLayout>,<GPUExtent3D>);
<GPUQueue>.copyExternalImageToTexture(<GPUImageCopyExternalImage>,<GPUImageCopyTextureTagged>,<GPUExtent3D>);
<GPUQuerySet>.destroy();
<new GPUQueryType> = <GPUQuerySet>.type;
<new GPUSize32> = <GPUQuerySet>.count;
<new union_HTMLCanvasElement1OffscreenCanvas_> = <GPUCanvasContext>.canvas;
<GPUCanvasContext>.configure(<GPUCanvasConfiguration>);
<GPUCanvasContext>.unconfigure();
<new GPUTexture> = <GPUCanvasContext>.getCurrentTexture();
<new union_GPUDeviceLostReason1undefined_> = <GPUDeviceLostReason>;
<new union_GPUDeviceLostReason1undefined_> = <undefined>;
<new union_GPUDeviceLostReason1undefined_> = <GPUDeviceLostInfo>.reason;
<new DOMString> = <GPUDeviceLostInfo>.message;
<new Promise_GPUDeviceLostInfo_> = new Promise(function(x){console.log("ok")});
<new Promise_GPUDeviceLostInfo_> = <GPUDevice>.lost;
<new DOMString> = <GPUError>.message;
!extends GPUValidationError GPUError;
<new GPUError> = <GPUValidationError>;
<new GPUValidationError> = new GPUValidationError(<DOMString>);
!extends GPUOutOfMemoryError GPUError;
<new GPUError> = <GPUOutOfMemoryError>;
<new GPUOutOfMemoryError> = new GPUOutOfMemoryError(<DOMString>);
!extends GPUInternalError GPUError;
<new GPUError> = <GPUInternalError>;
<new GPUInternalError> = new GPUInternalError(<DOMString>);
<GPUDevice>.pushErrorScope(<GPUErrorFilter>);
<new Promise_GPUError_> = new Promise(function(x){console.log("ok")});
<new Promise_GPUError_> = <GPUDevice>.popErrorScope();
!extends GPUUncapturedErrorEvent Event;
<new Event> = <GPUUncapturedErrorEvent>;
<new GPUUncapturedErrorEvent> = new GPUUncapturedErrorEvent(<DOMString>,<GPUUncapturedErrorEventInit>);
<new GPUError> = <GPUUncapturedErrorEvent>.error;
<new EventHandler> = <GPUDevice>.onuncapturederror;
<GPUDevice>.onuncapturederror = <EventHandler>;
<new HID> = <Navigator>.hid;
<new HID> = <WorkerNavigator>.hid;
!extends HID EventTarget;
<new EventTarget> = <HID>;
<new EventHandler> = <HID>.onconnect;
<HID>.onconnect = <EventHandler>;
<new EventHandler> = <HID>.ondisconnect;
<HID>.ondisconnect = <EventHandler>;
<new sequence_HIDDevice_> = [<HIDDevice>];
<new HIDDevice> = <sequence_HIDDevice_>[0];
<new Promise_sequence_HIDDevice__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_HIDDevice__> = <HID>.getDevices();
<new Promise_sequence_HIDDevice__> = <HID>.requestDevice(<HIDDeviceRequestOptions>);
!extends HIDDevice EventTarget;
<new EventTarget> = <HIDDevice>;
<new EventHandler> = <HIDDevice>.oninputreport;
<HIDDevice>.oninputreport = <EventHandler>;
<new boolean> = <HIDDevice>.opened;
<new unsigned_short> = <HIDDevice>.vendorId;
<new unsigned_short> = <HIDDevice>.productId;
<new DOMString> = <HIDDevice>.productName;
<new FrozenArray_HIDCollectionInfo_> = [<HIDCollectionInfo>];
<new HIDCollectionInfo> = <FrozenArray_HIDCollectionInfo_>[0];
<new FrozenArray_HIDCollectionInfo_> = <HIDDevice>.collections;
<new Promise_undefined_> = <HIDDevice>.open();
<new Promise_undefined_> = <HIDDevice>.close();
<new Promise_undefined_> = <HIDDevice>.forget();
<new Promise_undefined_> = <HIDDevice>.sendReport(<octet>,<BufferSource>);
<new Promise_undefined_> = <HIDDevice>.sendFeatureReport(<octet>,<BufferSource>);
<new Promise_DataView_> = <HIDDevice>.receiveFeatureReport(<octet>);
!extends HIDConnectionEvent Event;
<new Event> = <HIDConnectionEvent>;
<new HIDConnectionEvent> = new HIDConnectionEvent(<DOMString>,<HIDConnectionEventInit>);
<new HIDDevice> = <HIDConnectionEvent>.device;
!extends HIDInputReportEvent Event;
<new Event> = <HIDInputReportEvent>;
<new HIDInputReportEvent> = new HIDInputReportEvent(<DOMString>,<HIDInputReportEventInit>);
<new HIDDevice> = <HIDInputReportEvent>.device;
<new octet> = <HIDInputReportEvent>.reportId;
<new DataView> = <HIDInputReportEvent>.data;
<new DOMException> = new DOMException();
<new DOMException> = new DOMException(<DOMString>);
<new DOMException> = new DOMException(<DOMString>,<DOMString>);
<new DOMString> = <DOMException>.name;
<new DOMString> = <DOMException>.message;
<new unsigned_short> = <DOMException>.code;
<new unsigned_short> = DOMException.INDEX_SIZE_ERR;
<new unsigned_short> = DOMException.DOMSTRING_SIZE_ERR;
<new unsigned_short> = DOMException.HIERARCHY_REQUEST_ERR;
<new unsigned_short> = DOMException.WRONG_DOCUMENT_ERR;
<new unsigned_short> = DOMException.INVALID_CHARACTER_ERR;
<new unsigned_short> = DOMException.NO_DATA_ALLOWED_ERR;
<new unsigned_short> = DOMException.NO_MODIFICATION_ALLOWED_ERR;
<new unsigned_short> = DOMException.NOT_FOUND_ERR;
<new unsigned_short> = DOMException.NOT_SUPPORTED_ERR;
<new unsigned_short> = DOMException.INUSE_ATTRIBUTE_ERR;
<new unsigned_short> = DOMException.INVALID_STATE_ERR;
<new unsigned_short> = DOMException.SYNTAX_ERR;
<new unsigned_short> = DOMException.INVALID_MODIFICATION_ERR;
<new unsigned_short> = DOMException.NAMESPACE_ERR;
<new unsigned_short> = DOMException.INVALID_ACCESS_ERR;
<new unsigned_short> = DOMException.VALIDATION_ERR;
<new unsigned_short> = DOMException.TYPE_MISMATCH_ERR;
<new unsigned_short> = DOMException.SECURITY_ERR;
<new unsigned_short> = DOMException.NETWORK_ERR;
<new unsigned_short> = DOMException.ABORT_ERR;
<new unsigned_short> = DOMException.URL_MISMATCH_ERR;
<new unsigned_short> = DOMException.QUOTA_EXCEEDED_ERR;
<new unsigned_short> = DOMException.TIMEOUT_ERR;
<new unsigned_short> = DOMException.INVALID_NODE_TYPE_ERR;
<new unsigned_short> = DOMException.DATA_CLONE_ERR;
<new Promise_MIDIAccess_> = new Promise(function(x){console.log("ok")});
<new Promise_MIDIAccess_> = <Navigator>.requestMIDIAccess();
<new Promise_MIDIAccess_> = <Navigator>.requestMIDIAccess(<MIDIOptions>);
!extends MIDIAccess EventTarget;
<new EventTarget> = <MIDIAccess>;
<new MIDIInputMap> = <MIDIAccess>.inputs;
<new MIDIOutputMap> = <MIDIAccess>.outputs;
<new EventHandler> = <MIDIAccess>.onstatechange;
<MIDIAccess>.onstatechange = <EventHandler>;
<new boolean> = <MIDIAccess>.sysexEnabled;
!extends MIDIPort EventTarget;
<new EventTarget> = <MIDIPort>;
<new DOMString> = <MIDIPort>.id;
<new DOMString> = <MIDIPort>.manufacturer;
<new DOMString> = <MIDIPort>.name;
<new MIDIPortType> = <MIDIPort>.type;
<new DOMString> = <MIDIPort>.version;
<new MIDIPortDeviceState> = <MIDIPort>.state;
<new MIDIPortConnectionState> = <MIDIPort>.connection;
<new EventHandler> = <MIDIPort>.onstatechange;
<MIDIPort>.onstatechange = <EventHandler>;
<new Promise_MIDIPort_> = new Promise(function(x){console.log("ok")});
<new Promise_MIDIPort_> = <MIDIPort>.open();
<new Promise_MIDIPort_> = <MIDIPort>.close();
!extends MIDIInput MIDIPort;
<new MIDIPort> = <MIDIInput>;
<new EventHandler> = <MIDIInput>.onmidimessage;
<MIDIInput>.onmidimessage = <EventHandler>;
!extends MIDIOutput MIDIPort;
<new MIDIPort> = <MIDIOutput>;
<new sequence_octet_> = [<octet>];
<new octet> = <sequence_octet_>[0];
<MIDIOutput>.send(<sequence_octet_>);
<MIDIOutput>.send(<sequence_octet_>,<DOMHighResTimeStamp>);
<MIDIOutput>.clear();
!extends MIDIMessageEvent Event;
<new Event> = <MIDIMessageEvent>;
<new MIDIMessageEvent> = new MIDIMessageEvent(<DOMString>);
<new MIDIMessageEvent> = new MIDIMessageEvent(<DOMString>,<MIDIMessageEventInit>);
<new Uint8Array> = <MIDIMessageEvent>.data;
!extends MIDIConnectionEvent Event;
<new Event> = <MIDIConnectionEvent>;
<new MIDIConnectionEvent> = new MIDIConnectionEvent(<DOMString>);
<new MIDIConnectionEvent> = new MIDIConnectionEvent(<DOMString>,<MIDIConnectionEventInit>);
<new MIDIPort> = <MIDIConnectionEvent>.port;
<new Promise_MLContext_> = new Promise(function(x){console.log("ok")});
<new Promise_MLContext_> = <ML>.createContext();
<new Promise_MLContext_> = <ML>.createContext(<MLContextOptions>);
<new Promise_MLContext_> = <ML>.createContext(<GPUDevice>);
<new MLContext> = <ML>.createContextSync();
<new MLContext> = <ML>.createContextSync(<MLContextOptions>);
<new MLContext> = <ML>.createContextSync(<GPUDevice>);
<MLContext>.computeSync(<MLGraph>,<MLNamedArrayBufferViews>,<MLNamedArrayBufferViews>);
<new Promise_MLComputeResult_> = new Promise(function(x){console.log("ok")});
<new Promise_MLComputeResult_> = <MLContext>.compute(<MLGraph>,<MLNamedArrayBufferViews>,<MLNamedArrayBufferViews>);
<new MLCommandEncoder> = <MLContext>.createCommandEncoder();
<MLCommandEncoder>.initializeGraph(<MLGraph>);
<MLCommandEncoder>.dispatch(<MLGraph>,<MLNamedGPUResources>,<MLNamedGPUResources>);
<new GPUCommandBuffer> = <MLCommandEncoder>.finish();
<new GPUCommandBuffer> = <MLCommandEncoder>.finish(<GPUCommandBufferDescriptor>);
<new MLGraphBuilder> = new MLGraphBuilder(<MLContext>);
<new MLOperand> = <MLGraphBuilder>.input(<DOMString>,<MLOperandDescriptor>);
<new MLOperand> = <MLGraphBuilder>.constant(<MLOperandDescriptor>,<MLBufferView>);
<new MLOperand> = <MLGraphBuilder>.constant(<double>);
<new MLOperand> = <MLGraphBuilder>.constant(<double>,<MLOperandType>);
<new Promise_MLGraph_> = new Promise(function(x){console.log("ok")});
<new Promise_MLGraph_> = <MLGraphBuilder>.build(<MLNamedOperands>);
<new MLGraph> = <MLGraphBuilder>.buildSync(<MLNamedOperands>);
<new MLOperand> = <MLGraphBuilder>.batchNormalization(<MLOperand>,<MLOperand>,<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.batchNormalization(<MLOperand>,<MLOperand>,<MLOperand>,<MLBatchNormalizationOptions>);
<new MLOperand> = <MLGraphBuilder>.clamp(<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.clamp(<MLOperand>,<MLClampOptions>);
<new MLActivation> = <MLGraphBuilder>.clamp();
<new MLActivation> = <MLGraphBuilder>.clamp(<MLClampOptions>);
<new sequence_MLOperand_> = [<MLOperand>];
<new MLOperand> = <sequence_MLOperand_>[0];
<new MLOperand> = <MLGraphBuilder>.concat(<sequence_MLOperand_>,<long>);
<new MLOperand> = <MLGraphBuilder>.conv2d(<MLOperand>,<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.conv2d(<MLOperand>,<MLOperand>,<MLConv2dOptions>);
<new MLOperand> = <MLGraphBuilder>.convTranspose2d(<MLOperand>,<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.convTranspose2d(<MLOperand>,<MLOperand>,<MLConvTranspose2dOptions>);
<new MLOperand> = <MLGraphBuilder>.add(<MLOperand>,<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.sub(<MLOperand>,<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.mul(<MLOperand>,<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.div(<MLOperand>,<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.max(<MLOperand>,<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.min(<MLOperand>,<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.pow(<MLOperand>,<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.abs(<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.ceil(<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.cos(<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.exp(<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.floor(<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.log(<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.neg(<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.sin(<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.tan(<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.elu(<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.elu(<MLOperand>,<MLEluOptions>);
<new MLActivation> = <MLGraphBuilder>.elu();
<new MLActivation> = <MLGraphBuilder>.elu(<MLEluOptions>);
<new MLOperand> = <MLGraphBuilder>.gemm(<MLOperand>,<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.gemm(<MLOperand>,<MLOperand>,<MLGemmOptions>);
<new sequence_MLOperand_> = <MLGraphBuilder>.gru(<MLOperand>,<MLOperand>,<MLOperand>,<unsigned_long>,<unsigned_long>);
<new sequence_MLOperand_> = <MLGraphBuilder>.gru(<MLOperand>,<MLOperand>,<MLOperand>,<unsigned_long>,<unsigned_long>,<MLGruOptions>);
<new MLOperand> = <MLGraphBuilder>.gruCell(<MLOperand>,<MLOperand>,<MLOperand>,<MLOperand>,<unsigned_long>);
<new MLOperand> = <MLGraphBuilder>.gruCell(<MLOperand>,<MLOperand>,<MLOperand>,<MLOperand>,<unsigned_long>,<MLGruCellOptions>);
<new MLOperand> = <MLGraphBuilder>.hardSigmoid(<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.hardSigmoid(<MLOperand>,<MLHardSigmoidOptions>);
<new MLActivation> = <MLGraphBuilder>.hardSigmoid();
<new MLActivation> = <MLGraphBuilder>.hardSigmoid(<MLHardSigmoidOptions>);
<new MLOperand> = <MLGraphBuilder>.hardSwish(<MLOperand>);
<new MLActivation> = <MLGraphBuilder>.hardSwish();
<new MLOperand> = <MLGraphBuilder>.instanceNormalization(<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.instanceNormalization(<MLOperand>,<MLInstanceNormalizationOptions>);
<new MLOperand> = <MLGraphBuilder>.leakyRelu(<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.leakyRelu(<MLOperand>,<MLLeakyReluOptions>);
<new MLActivation> = <MLGraphBuilder>.leakyRelu();
<new MLActivation> = <MLGraphBuilder>.leakyRelu(<MLLeakyReluOptions>);
<new MLOperand> = <MLGraphBuilder>.linear(<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.linear(<MLOperand>,<MLLinearOptions>);
<new MLActivation> = <MLGraphBuilder>.linear();
<new MLActivation> = <MLGraphBuilder>.linear(<MLLinearOptions>);
<new sequence_MLOperand_> = <MLGraphBuilder>.lstm(<MLOperand>,<MLOperand>,<MLOperand>,<unsigned_long>,<unsigned_long>);
<new sequence_MLOperand_> = <MLGraphBuilder>.lstm(<MLOperand>,<MLOperand>,<MLOperand>,<unsigned_long>,<unsigned_long>,<MLLstmOptions>);
<new sequence_MLOperand_> = <MLGraphBuilder>.lstmCell(<MLOperand>,<MLOperand>,<MLOperand>,<MLOperand>,<MLOperand>,<unsigned_long>);
<new sequence_MLOperand_> = <MLGraphBuilder>.lstmCell(<MLOperand>,<MLOperand>,<MLOperand>,<MLOperand>,<MLOperand>,<unsigned_long>,<MLLstmCellOptions>);
<new MLOperand> = <MLGraphBuilder>.matmul(<MLOperand>,<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.pad(<MLOperand>,<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.pad(<MLOperand>,<MLOperand>,<MLPadOptions>);
<new MLOperand> = <MLGraphBuilder>.averagePool2d(<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.averagePool2d(<MLOperand>,<MLPool2dOptions>);
<new MLOperand> = <MLGraphBuilder>.l2Pool2d(<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.l2Pool2d(<MLOperand>,<MLPool2dOptions>);
<new MLOperand> = <MLGraphBuilder>.maxPool2d(<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.maxPool2d(<MLOperand>,<MLPool2dOptions>);
<new MLOperand> = <MLGraphBuilder>.reduceL1(<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.reduceL1(<MLOperand>,<MLReduceOptions>);
<new MLOperand> = <MLGraphBuilder>.reduceL2(<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.reduceL2(<MLOperand>,<MLReduceOptions>);
<new MLOperand> = <MLGraphBuilder>.reduceLogSum(<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.reduceLogSum(<MLOperand>,<MLReduceOptions>);
<new MLOperand> = <MLGraphBuilder>.reduceLogSumExp(<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.reduceLogSumExp(<MLOperand>,<MLReduceOptions>);
<new MLOperand> = <MLGraphBuilder>.reduceMax(<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.reduceMax(<MLOperand>,<MLReduceOptions>);
<new MLOperand> = <MLGraphBuilder>.reduceMean(<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.reduceMean(<MLOperand>,<MLReduceOptions>);
<new MLOperand> = <MLGraphBuilder>.reduceMin(<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.reduceMin(<MLOperand>,<MLReduceOptions>);
<new MLOperand> = <MLGraphBuilder>.reduceProduct(<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.reduceProduct(<MLOperand>,<MLReduceOptions>);
<new MLOperand> = <MLGraphBuilder>.reduceSum(<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.reduceSum(<MLOperand>,<MLReduceOptions>);
<new MLOperand> = <MLGraphBuilder>.reduceSumSquare(<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.reduceSumSquare(<MLOperand>,<MLReduceOptions>);
<new MLOperand> = <MLGraphBuilder>.relu(<MLOperand>);
<new MLActivation> = <MLGraphBuilder>.relu();
<new MLOperand> = <MLGraphBuilder>.resample2d(<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.resample2d(<MLOperand>,<MLResample2dOptions>);
<new MLOperand> = <MLGraphBuilder>.reshape(<MLOperand>,<sequence_unsigned_long_>);
<new MLOperand> = <MLGraphBuilder>.sigmoid(<MLOperand>);
<new MLActivation> = <MLGraphBuilder>.sigmoid();
<new sequence_long_> = [<long>];
<new long> = <sequence_long_>[0];
<new MLOperand> = <MLGraphBuilder>.slice(<MLOperand>,<sequence_long_>,<sequence_long_>);
<new MLOperand> = <MLGraphBuilder>.slice(<MLOperand>,<sequence_long_>,<sequence_long_>,<MLSliceOptions>);
<new MLOperand> = <MLGraphBuilder>.softmax(<MLOperand>);
<new MLActivation> = <MLGraphBuilder>.softmax();
<new MLOperand> = <MLGraphBuilder>.softplus(<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.softplus(<MLOperand>,<MLSoftplusOptions>);
<new MLActivation> = <MLGraphBuilder>.softplus();
<new MLActivation> = <MLGraphBuilder>.softplus(<MLSoftplusOptions>);
<new MLOperand> = <MLGraphBuilder>.softsign(<MLOperand>);
<new MLActivation> = <MLGraphBuilder>.softsign();
<new sequence_MLOperand_> = <MLGraphBuilder>.split(<MLOperand>,<union_unsigned_long1sequence_unsigned_long__>);
<new sequence_MLOperand_> = <MLGraphBuilder>.split(<MLOperand>,<union_unsigned_long1sequence_unsigned_long__>,<MLSplitOptions>);
<new MLOperand> = <MLGraphBuilder>.squeeze(<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.squeeze(<MLOperand>,<MLSqueezeOptions>);
<new MLOperand> = <MLGraphBuilder>.tanh(<MLOperand>);
<new MLActivation> = <MLGraphBuilder>.tanh();
<new MLOperand> = <MLGraphBuilder>.transpose(<MLOperand>);
<new MLOperand> = <MLGraphBuilder>.transpose(<MLOperand>,<MLTransposeOptions>);
<new RTCRtpTransform> = <RTCRtpSender>.transform;
<RTCRtpSender>.transform = <RTCRtpTransform>;
<RTCRtpSender>.transform = null;
<new RTCRtpTransform> = <RTCRtpReceiver>.transform;
<RTCRtpReceiver>.transform = <RTCRtpTransform>;
<RTCRtpReceiver>.transform = null;
<new SFrameTransform> = new SFrameTransform();
<new SFrameTransform> = new SFrameTransform(<SFrameTransformOptions>);
<new Promise_undefined_> = <SFrameTransform>.setEncryptionKey(<CryptoKey>);
<new Promise_undefined_> = <SFrameTransform>.setEncryptionKey(<CryptoKey>,<CryptoKeyID>);
<new EventHandler> = <SFrameTransform>.onerror;
<SFrameTransform>.onerror = <EventHandler>;
!extends SFrameTransformErrorEvent Event;
<new Event> = <SFrameTransformErrorEvent>;
<new SFrameTransformErrorEvent> = new SFrameTransformErrorEvent(<DOMString>,<SFrameTransformErrorEventInit>);
<new SFrameTransformErrorEventType> = <SFrameTransformErrorEvent>.errorType;
<new CryptoKeyID> = <SFrameTransformErrorEvent>.keyID;
<new any> = <SFrameTransformErrorEvent>.frame;
<new RTCEncodedVideoFrameType> = <RTCEncodedVideoFrame>.type;
<new unsigned_long> = <RTCEncodedVideoFrame>.timestamp;
<new ArrayBuffer> = <RTCEncodedVideoFrame>.data;
<RTCEncodedVideoFrame>.data = <ArrayBuffer>;
<new RTCEncodedVideoFrameMetadata> = <RTCEncodedVideoFrame>.getMetadata();
<new unsigned_long> = <RTCEncodedAudioFrame>.timestamp;
<new ArrayBuffer> = <RTCEncodedAudioFrame>.data;
<RTCEncodedAudioFrame>.data = <ArrayBuffer>;
<new RTCEncodedAudioFrameMetadata> = <RTCEncodedAudioFrame>.getMetadata();
!extends RTCTransformEvent Event;
<new Event> = <RTCTransformEvent>;
<new RTCRtpScriptTransformer> = <RTCTransformEvent>.transformer;
<new EventHandler> = <DedicatedWorkerGlobalScope>.onrtctransform;
<DedicatedWorkerGlobalScope>.onrtctransform = <EventHandler>;
<new ReadableStream> = <RTCRtpScriptTransformer>.readable;
<new WritableStream> = <RTCRtpScriptTransformer>.writable;
<new any> = <RTCRtpScriptTransformer>.options;
<new Promise_unsigned_long_long_> = new Promise(function(x){console.log("ok")});
<new Promise_unsigned_long_long_> = <RTCRtpScriptTransformer>.generateKeyFrame();
<new Promise_unsigned_long_long_> = <RTCRtpScriptTransformer>.generateKeyFrame(<DOMString>);
<new Promise_undefined_> = <RTCRtpScriptTransformer>.sendKeyFrameRequest();
<new RTCRtpScriptTransform> = new RTCRtpScriptTransform(<Worker>);
<new RTCRtpScriptTransform> = new RTCRtpScriptTransform(<Worker>,<any>);
<new RTCRtpScriptTransform> = new RTCRtpScriptTransform(<Worker>,<any>,<sequence_object_>);
<new Promise_undefined_> = <RTCRtpSender>.generateKeyFrame();
<new Promise_undefined_> = <RTCRtpSender>.generateKeyFrame(<sequence_DOMString_>);
<new RTCIceTransport> = new RTCIceTransport();
<RTCIceTransport>.gather();
<RTCIceTransport>.gather(<RTCIceGatherOptions>);
<RTCIceTransport>.start();
<RTCIceTransport>.start(<RTCIceParameters>);
<RTCIceTransport>.start(<RTCIceParameters>,<RTCIceRole>);
<RTCIceTransport>.stop();
<RTCIceTransport>.addRemoteCandidate();
<RTCIceTransport>.addRemoteCandidate(<RTCIceCandidateInit>);
<new EventHandler> = <RTCIceTransport>.onerror;
<RTCIceTransport>.onerror = <EventHandler>;
<new EventHandler> = <RTCIceTransport>.onicecandidate;
<RTCIceTransport>.onicecandidate = <EventHandler>;
!extends RTCIdentityProviderGlobalScope WorkerGlobalScope;
<new WorkerGlobalScope> = <RTCIdentityProviderGlobalScope>;
<new RTCIdentityProviderRegistrar> = <RTCIdentityProviderGlobalScope>.rtcIdentityProvider;
<RTCIdentityProviderRegistrar>.register(<RTCIdentityProvider>);
<RTCPeerConnection>.setIdentityProvider(<DOMString>);
<RTCPeerConnection>.setIdentityProvider(<DOMString>,<RTCIdentityProviderOptions>);
<new Promise_DOMString_> = <RTCPeerConnection>.getIdentityAssertion();
<new Promise_RTCIdentityAssertion_> = new Promise(function(x){console.log("ok")});
<new Promise_RTCIdentityAssertion_> = <RTCPeerConnection>.peerIdentity;
<new DOMString> = <RTCPeerConnection>.idpLoginUrl;
<new DOMString> = <RTCPeerConnection>.idpErrorInfo;
<new RTCIdentityAssertion> = new RTCIdentityAssertion(<DOMString>,<DOMString>);
<new DOMString> = <RTCIdentityAssertion>.idp;
<RTCIdentityAssertion>.idp = <DOMString>;
<new DOMString> = <RTCIdentityAssertion>.name;
<RTCIdentityAssertion>.name = <DOMString>;
<new long> = <RTCError>.httpRequestStatusCode;
<new boolean> = <MediaStreamTrack>.isolated;
<new EventHandler> = <MediaStreamTrack>.onisolationchange;
<MediaStreamTrack>.onisolationchange = <EventHandler>;
<new RTCPriorityType> = <RTCDataChannel>.priority;
!extends RTCPeerConnection EventTarget;
<new EventTarget> = <RTCPeerConnection>;
<new RTCPeerConnection> = new RTCPeerConnection();
<new RTCPeerConnection> = new RTCPeerConnection(<RTCConfiguration>);
<new Promise_RTCSessionDescriptionInit_> = new Promise(function(x){console.log("ok")});
<new Promise_RTCSessionDescriptionInit_> = <RTCPeerConnection>.createOffer();
<new Promise_RTCSessionDescriptionInit_> = <RTCPeerConnection>.createOffer(<RTCOfferOptions>);
<new Promise_RTCSessionDescriptionInit_> = <RTCPeerConnection>.createAnswer();
<new Promise_RTCSessionDescriptionInit_> = <RTCPeerConnection>.createAnswer(<RTCAnswerOptions>);
<new Promise_undefined_> = <RTCPeerConnection>.setLocalDescription();
<new Promise_undefined_> = <RTCPeerConnection>.setLocalDescription(<RTCLocalSessionDescriptionInit>);
<new RTCSessionDescription> = <RTCPeerConnection>.localDescription;
<new RTCSessionDescription> = <RTCPeerConnection>.currentLocalDescription;
<new RTCSessionDescription> = <RTCPeerConnection>.pendingLocalDescription;
<new Promise_undefined_> = <RTCPeerConnection>.setRemoteDescription(<RTCSessionDescriptionInit>);
<new RTCSessionDescription> = <RTCPeerConnection>.remoteDescription;
<new RTCSessionDescription> = <RTCPeerConnection>.currentRemoteDescription;
<new RTCSessionDescription> = <RTCPeerConnection>.pendingRemoteDescription;
<new Promise_undefined_> = <RTCPeerConnection>.addIceCandidate();
<new Promise_undefined_> = <RTCPeerConnection>.addIceCandidate(<RTCIceCandidateInit>);
<new RTCSignalingState> = <RTCPeerConnection>.signalingState;
<new RTCIceGatheringState> = <RTCPeerConnection>.iceGatheringState;
<new RTCIceConnectionState> = <RTCPeerConnection>.iceConnectionState;
<new RTCPeerConnectionState> = <RTCPeerConnection>.connectionState;
<new boolean> = <RTCPeerConnection>.canTrickleIceCandidates;
<RTCPeerConnection>.restartIce();
<new RTCConfiguration> = <RTCPeerConnection>.getConfiguration();
<RTCPeerConnection>.setConfiguration();
<RTCPeerConnection>.setConfiguration(<RTCConfiguration>);
<RTCPeerConnection>.close();
<new EventHandler> = <RTCPeerConnection>.onnegotiationneeded;
<RTCPeerConnection>.onnegotiationneeded = <EventHandler>;
<new EventHandler> = <RTCPeerConnection>.onicecandidate;
<RTCPeerConnection>.onicecandidate = <EventHandler>;
<new EventHandler> = <RTCPeerConnection>.onicecandidateerror;
<RTCPeerConnection>.onicecandidateerror = <EventHandler>;
<new EventHandler> = <RTCPeerConnection>.onsignalingstatechange;
<RTCPeerConnection>.onsignalingstatechange = <EventHandler>;
<new EventHandler> = <RTCPeerConnection>.oniceconnectionstatechange;
<RTCPeerConnection>.oniceconnectionstatechange = <EventHandler>;
<new EventHandler> = <RTCPeerConnection>.onicegatheringstatechange;
<RTCPeerConnection>.onicegatheringstatechange = <EventHandler>;
<new EventHandler> = <RTCPeerConnection>.onconnectionstatechange;
<RTCPeerConnection>.onconnectionstatechange = <EventHandler>;
<new Promise_undefined_> = <RTCPeerConnection>.createOffer(<RTCSessionDescriptionCallback>,<RTCPeerConnectionErrorCallback>);
<new Promise_undefined_> = <RTCPeerConnection>.createOffer(<RTCSessionDescriptionCallback>,<RTCPeerConnectionErrorCallback>,<RTCOfferOptions>);
<new Promise_undefined_> = <RTCPeerConnection>.setLocalDescription(<RTCLocalSessionDescriptionInit>,<VoidFunction>,<RTCPeerConnectionErrorCallback>);
<new Promise_undefined_> = <RTCPeerConnection>.createAnswer(<RTCSessionDescriptionCallback>,<RTCPeerConnectionErrorCallback>);
<new Promise_undefined_> = <RTCPeerConnection>.setRemoteDescription(<RTCSessionDescriptionInit>,<VoidFunction>,<RTCPeerConnectionErrorCallback>);
<new Promise_undefined_> = <RTCPeerConnection>.addIceCandidate(<RTCIceCandidateInit>,<VoidFunction>,<RTCPeerConnectionErrorCallback>);
<new RTCSessionDescription> = new RTCSessionDescription(<RTCSessionDescriptionInit>);
<new RTCSdpType> = <RTCSessionDescription>.type;
<new DOMString> = <RTCSessionDescription>.sdp;
<new object> = <RTCSessionDescription>.toJSON();
<new RTCIceCandidate> = new RTCIceCandidate();
<new RTCIceCandidate> = new RTCIceCandidate(<RTCIceCandidateInit>);
<new DOMString> = <RTCIceCandidate>.candidate;
<new DOMString> = <RTCIceCandidate>.sdpMid;
<new unsigned_short> = <RTCIceCandidate>.sdpMLineIndex;
<new DOMString> = <RTCIceCandidate>.foundation;
<new RTCIceComponent> = <RTCIceCandidate>.component;
<new unsigned_long> = <RTCIceCandidate>.priority;
<new DOMString> = <RTCIceCandidate>.address;
<new RTCIceProtocol> = <RTCIceCandidate>.protocol;
<new unsigned_short> = <RTCIceCandidate>.port;
<new RTCIceCandidateType> = <RTCIceCandidate>.type;
<new RTCIceTcpCandidateType> = <RTCIceCandidate>.tcpType;
<new DOMString> = <RTCIceCandidate>.relatedAddress;
<new unsigned_short> = <RTCIceCandidate>.relatedPort;
<new DOMString> = <RTCIceCandidate>.usernameFragment;
<new RTCIceServerTransportProtocol> = <RTCIceCandidate>.relayProtocol;
<new DOMString> = <RTCIceCandidate>.url;
<new RTCIceCandidateInit> = <RTCIceCandidate>.toJSON();
!extends RTCPeerConnectionIceEvent Event;
<new Event> = <RTCPeerConnectionIceEvent>;
<new RTCPeerConnectionIceEvent> = new RTCPeerConnectionIceEvent(<DOMString>);
<new RTCPeerConnectionIceEvent> = new RTCPeerConnectionIceEvent(<DOMString>,<RTCPeerConnectionIceEventInit>);
<new RTCIceCandidate> = <RTCPeerConnectionIceEvent>.candidate;
<new DOMString> = <RTCPeerConnectionIceEvent>.url;
!extends RTCPeerConnectionIceErrorEvent Event;
<new Event> = <RTCPeerConnectionIceErrorEvent>;
<new RTCPeerConnectionIceErrorEvent> = new RTCPeerConnectionIceErrorEvent(<DOMString>,<RTCPeerConnectionIceErrorEventInit>);
<new DOMString> = <RTCPeerConnectionIceErrorEvent>.address;
<new unsigned_short> = <RTCPeerConnectionIceErrorEvent>.port;
<new DOMString> = <RTCPeerConnectionIceErrorEvent>.url;
<new unsigned_short> = <RTCPeerConnectionIceErrorEvent>.errorCode;
<new USVString> = <RTCPeerConnectionIceErrorEvent>.errorText;
<new Promise_RTCCertificate_> = new Promise(function(x){console.log("ok")});
<new Promise_RTCCertificate_> = <RTCPeerConnection>.generateCertificate(<AlgorithmIdentifier>);
<new EpochTimeStamp> = <RTCCertificate>.expires;
<new sequence_RTCDtlsFingerprint_> = [<RTCDtlsFingerprint>];
<new RTCDtlsFingerprint> = <sequence_RTCDtlsFingerprint_>[0];
<new sequence_RTCDtlsFingerprint_> = <RTCCertificate>.getFingerprints();
<new sequence_RTCRtpSender_> = [<RTCRtpSender>];
<new RTCRtpSender> = <sequence_RTCRtpSender_>[0];
<new sequence_RTCRtpSender_> = <RTCPeerConnection>.getSenders();
<new sequence_RTCRtpReceiver_> = [<RTCRtpReceiver>];
<new RTCRtpReceiver> = <sequence_RTCRtpReceiver_>[0];
<new sequence_RTCRtpReceiver_> = <RTCPeerConnection>.getReceivers();
<new sequence_RTCRtpTransceiver_> = [<RTCRtpTransceiver>];
<new RTCRtpTransceiver> = <sequence_RTCRtpTransceiver_>[0];
<new sequence_RTCRtpTransceiver_> = <RTCPeerConnection>.getTransceivers();
<new RTCRtpSender> = <RTCPeerConnection>.addTrack(<MediaStreamTrack>);
<new RTCRtpSender> = <RTCPeerConnection>.addTrack(<MediaStreamTrack>,<MediaStream>);
<RTCPeerConnection>.removeTrack(<RTCRtpSender>);
<new union_MediaStreamTrack1DOMString_> = <MediaStreamTrack>;
<new union_MediaStreamTrack1DOMString_> = <DOMString>;
<new RTCRtpTransceiver> = <RTCPeerConnection>.addTransceiver(<union_MediaStreamTrack1DOMString_>);
<new RTCRtpTransceiver> = <RTCPeerConnection>.addTransceiver(<union_MediaStreamTrack1DOMString_>,<RTCRtpTransceiverInit>);
<new EventHandler> = <RTCPeerConnection>.ontrack;
<RTCPeerConnection>.ontrack = <EventHandler>;
<new MediaStreamTrack> = <RTCRtpSender>.track;
<new RTCDtlsTransport> = <RTCRtpSender>.transport;
<new RTCRtpCapabilities> = <RTCRtpSender>.getCapabilities(<DOMString>);
<new Promise_undefined_> = <RTCRtpSender>.setParameters(<RTCRtpSendParameters>);
<new RTCRtpSendParameters> = <RTCRtpSender>.getParameters();
<new Promise_undefined_> = <RTCRtpSender>.replaceTrack(<MediaStreamTrack>);
<RTCRtpSender>.setStreams();
<RTCRtpSender>.setStreams(<MediaStream>);
<new Promise_RTCStatsReport_> = new Promise(function(x){console.log("ok")});
<new Promise_RTCStatsReport_> = <RTCRtpSender>.getStats();
<new MediaStreamTrack> = <RTCRtpReceiver>.track;
<new RTCDtlsTransport> = <RTCRtpReceiver>.transport;
<new RTCRtpCapabilities> = <RTCRtpReceiver>.getCapabilities(<DOMString>);
<new RTCRtpReceiveParameters> = <RTCRtpReceiver>.getParameters();
<new sequence_RTCRtpContributingSource_> = [<RTCRtpContributingSource>];
<new RTCRtpContributingSource> = <sequence_RTCRtpContributingSource_>[0];
<new sequence_RTCRtpContributingSource_> = <RTCRtpReceiver>.getContributingSources();
<new sequence_RTCRtpSynchronizationSource_> = [<RTCRtpSynchronizationSource>];
<new RTCRtpSynchronizationSource> = <sequence_RTCRtpSynchronizationSource_>[0];
<new sequence_RTCRtpSynchronizationSource_> = <RTCRtpReceiver>.getSynchronizationSources();
<new Promise_RTCStatsReport_> = <RTCRtpReceiver>.getStats();
<new DOMString> = <RTCRtpTransceiver>.mid;
<new RTCRtpSender> = <RTCRtpTransceiver>.sender;
<new RTCRtpReceiver> = <RTCRtpTransceiver>.receiver;
<new RTCRtpTransceiverDirection> = <RTCRtpTransceiver>.direction;
<RTCRtpTransceiver>.direction = <RTCRtpTransceiverDirection>;
<new RTCRtpTransceiverDirection> = <RTCRtpTransceiver>.currentDirection;
<RTCRtpTransceiver>.stop();
<new sequence_RTCRtpCodecCapability_> = [<RTCRtpCodecCapability>];
<new RTCRtpCodecCapability> = <sequence_RTCRtpCodecCapability_>[0];
<RTCRtpTransceiver>.setCodecPreferences(<sequence_RTCRtpCodecCapability_>);
!extends RTCDtlsTransport EventTarget;
<new EventTarget> = <RTCDtlsTransport>;
<new RTCIceTransport> = <RTCDtlsTransport>.iceTransport;
<new RTCDtlsTransportState> = <RTCDtlsTransport>.state;
<new sequence_ArrayBuffer_> = <RTCDtlsTransport>.getRemoteCertificates();
<new EventHandler> = <RTCDtlsTransport>.onstatechange;
<RTCDtlsTransport>.onstatechange = <EventHandler>;
<new EventHandler> = <RTCDtlsTransport>.onerror;
<RTCDtlsTransport>.onerror = <EventHandler>;
!extends RTCIceTransport EventTarget;
<new EventTarget> = <RTCIceTransport>;
<new RTCIceRole> = <RTCIceTransport>.role;
<new RTCIceComponent> = <RTCIceTransport>.component;
<new RTCIceTransportState> = <RTCIceTransport>.state;
<new RTCIceGathererState> = <RTCIceTransport>.gatheringState;
<new sequence_RTCIceCandidate_> = [<RTCIceCandidate>];
<new RTCIceCandidate> = <sequence_RTCIceCandidate_>[0];
<new sequence_RTCIceCandidate_> = <RTCIceTransport>.getLocalCandidates();
<new sequence_RTCIceCandidate_> = <RTCIceTransport>.getRemoteCandidates();
<new RTCIceCandidatePair> = <RTCIceTransport>.getSelectedCandidatePair();
<new RTCIceParameters> = <RTCIceTransport>.getLocalParameters();
<new RTCIceParameters> = <RTCIceTransport>.getRemoteParameters();
<new EventHandler> = <RTCIceTransport>.onstatechange;
<RTCIceTransport>.onstatechange = <EventHandler>;
<new EventHandler> = <RTCIceTransport>.ongatheringstatechange;
<RTCIceTransport>.ongatheringstatechange = <EventHandler>;
<new EventHandler> = <RTCIceTransport>.onselectedcandidatepairchange;
<RTCIceTransport>.onselectedcandidatepairchange = <EventHandler>;
!extends RTCTrackEvent Event;
<new Event> = <RTCTrackEvent>;
<new RTCTrackEvent> = new RTCTrackEvent(<DOMString>,<RTCTrackEventInit>);
<new RTCRtpReceiver> = <RTCTrackEvent>.receiver;
<new MediaStreamTrack> = <RTCTrackEvent>.track;
<new FrozenArray_MediaStream_> = [<MediaStream>];
<new MediaStream> = <FrozenArray_MediaStream_>[0];
<new FrozenArray_MediaStream_> = <RTCTrackEvent>.streams;
<new RTCRtpTransceiver> = <RTCTrackEvent>.transceiver;
<new RTCSctpTransport> = <RTCPeerConnection>.sctp;
<new RTCDataChannel> = <RTCPeerConnection>.createDataChannel(<USVString>);
<new RTCDataChannel> = <RTCPeerConnection>.createDataChannel(<USVString>,<RTCDataChannelInit>);
<new EventHandler> = <RTCPeerConnection>.ondatachannel;
<RTCPeerConnection>.ondatachannel = <EventHandler>;
!extends RTCSctpTransport EventTarget;
<new EventTarget> = <RTCSctpTransport>;
<new RTCDtlsTransport> = <RTCSctpTransport>.transport;
<new RTCSctpTransportState> = <RTCSctpTransport>.state;
<new unrestricted_double> = <RTCSctpTransport>.maxMessageSize;
<new unsigned_short> = <RTCSctpTransport>.maxChannels;
<new EventHandler> = <RTCSctpTransport>.onstatechange;
<RTCSctpTransport>.onstatechange = <EventHandler>;
!extends RTCDataChannel EventTarget;
<new EventTarget> = <RTCDataChannel>;
<new USVString> = <RTCDataChannel>.label;
<new boolean> = <RTCDataChannel>.ordered;
<new unsigned_short> = <RTCDataChannel>.maxPacketLifeTime;
<new unsigned_short> = <RTCDataChannel>.maxRetransmits;
<new USVString> = <RTCDataChannel>.protocol;
<new boolean> = <RTCDataChannel>.negotiated;
<new unsigned_short> = <RTCDataChannel>.id;
<new RTCDataChannelState> = <RTCDataChannel>.readyState;
<new unsigned_long> = <RTCDataChannel>.bufferedAmount;
<new unsigned_long> = <RTCDataChannel>.bufferedAmountLowThreshold;
<RTCDataChannel>.bufferedAmountLowThreshold = <unsigned_long>;
<new EventHandler> = <RTCDataChannel>.onopen;
<RTCDataChannel>.onopen = <EventHandler>;
<new EventHandler> = <RTCDataChannel>.onbufferedamountlow;
<RTCDataChannel>.onbufferedamountlow = <EventHandler>;
<new EventHandler> = <RTCDataChannel>.onerror;
<RTCDataChannel>.onerror = <EventHandler>;
<new EventHandler> = <RTCDataChannel>.onclosing;
<RTCDataChannel>.onclosing = <EventHandler>;
<new EventHandler> = <RTCDataChannel>.onclose;
<RTCDataChannel>.onclose = <EventHandler>;
<RTCDataChannel>.close();
<new EventHandler> = <RTCDataChannel>.onmessage;
<RTCDataChannel>.onmessage = <EventHandler>;
<new BinaryType> = <RTCDataChannel>.binaryType;
<RTCDataChannel>.binaryType = <BinaryType>;
<RTCDataChannel>.send(<USVString>);
<RTCDataChannel>.send(<Blob>);
<RTCDataChannel>.send(<ArrayBuffer>);
<RTCDataChannel>.send(<ArrayBufferView>);
!extends RTCDataChannelEvent Event;
<new Event> = <RTCDataChannelEvent>;
<new RTCDataChannelEvent> = new RTCDataChannelEvent(<DOMString>,<RTCDataChannelEventInit>);
<new RTCDataChannel> = <RTCDataChannelEvent>.channel;
<new RTCDTMFSender> = <RTCRtpSender>.dtmf;
!extends RTCDTMFSender EventTarget;
<new EventTarget> = <RTCDTMFSender>;
<RTCDTMFSender>.insertDTMF(<DOMString>);
<RTCDTMFSender>.insertDTMF(<DOMString>,<unsigned_long>);
<RTCDTMFSender>.insertDTMF(<DOMString>,<unsigned_long>,<unsigned_long>);
<new EventHandler> = <RTCDTMFSender>.ontonechange;
<RTCDTMFSender>.ontonechange = <EventHandler>;
<new boolean> = <RTCDTMFSender>.canInsertDTMF;
<new DOMString> = <RTCDTMFSender>.toneBuffer;
!extends RTCDTMFToneChangeEvent Event;
<new Event> = <RTCDTMFToneChangeEvent>;
<new RTCDTMFToneChangeEvent> = new RTCDTMFToneChangeEvent(<DOMString>);
<new RTCDTMFToneChangeEvent> = new RTCDTMFToneChangeEvent(<DOMString>,<RTCDTMFToneChangeEventInit>);
<new DOMString> = <RTCDTMFToneChangeEvent>.tone;
<new Promise_RTCStatsReport_> = <RTCPeerConnection>.getStats();
<new Promise_RTCStatsReport_> = <RTCPeerConnection>.getStats(<MediaStreamTrack>);
!extends RTCError DOMException;
<new DOMException> = <RTCError>;
<new RTCError> = new RTCError(<RTCErrorInit>);
<new RTCError> = new RTCError(<RTCErrorInit>,<DOMString>);
<new RTCErrorDetailType> = <RTCError>.errorDetail;
<new long> = <RTCError>.sdpLineNumber;
<new long> = <RTCError>.sctpCauseCode;
<new unsigned_long> = <RTCError>.receivedAlert;
<new unsigned_long> = <RTCError>.sentAlert;
!extends RTCErrorEvent Event;
<new Event> = <RTCErrorEvent>;
<new RTCErrorEvent> = new RTCErrorEvent(<DOMString>,<RTCErrorEventInit>);
<new RTCError> = <RTCErrorEvent>.error;
!extends WebSocket EventTarget;
<new EventTarget> = <WebSocket>;
<new WebSocket> = new WebSocket(<USVString>);
<new WebSocket> = new WebSocket(<USVString>,<union_DOMString1sequence_DOMString__>);
<new USVString> = <WebSocket>.url;
<new unsigned_short> = WebSocket.CONNECTING;
<new unsigned_short> = WebSocket.OPEN;
<new unsigned_short> = WebSocket.CLOSING;
<new unsigned_short> = WebSocket.CLOSED;
<new unsigned_short> = <WebSocket>.readyState;
<new unsigned_long_long> = <WebSocket>.bufferedAmount;
<new EventHandler> = <WebSocket>.onopen;
<WebSocket>.onopen = <EventHandler>;
<new EventHandler> = <WebSocket>.onerror;
<WebSocket>.onerror = <EventHandler>;
<new EventHandler> = <WebSocket>.onclose;
<WebSocket>.onclose = <EventHandler>;
<new DOMString> = <WebSocket>.extensions;
<new DOMString> = <WebSocket>.protocol;
<WebSocket>.close();
<WebSocket>.close(<unsigned_short>);
<WebSocket>.close(<unsigned_short>,<USVString>);
<new EventHandler> = <WebSocket>.onmessage;
<WebSocket>.onmessage = <EventHandler>;
<new BinaryType> = <WebSocket>.binaryType;
<WebSocket>.binaryType = <BinaryType>;
<new union_BufferSource1Blob1USVString_> = <BufferSource>;
<new union_BufferSource1Blob1USVString_> = <Blob>;
<new union_BufferSource1Blob1USVString_> = <USVString>;
<WebSocket>.send(<union_BufferSource1Blob1USVString_>);
!extends CloseEvent Event;
<new Event> = <CloseEvent>;
<new CloseEvent> = new CloseEvent(<DOMString>);
<new CloseEvent> = new CloseEvent(<DOMString>,<CloseEventInit>);
<new boolean> = <CloseEvent>.wasClean;
<new unsigned_short> = <CloseEvent>.code;
<new USVString> = <CloseEvent>.reason;
<new ReadableStream> = <WebTransportDatagramDuplexStream>.readable;
<new WritableStream> = <WebTransportDatagramDuplexStream>.writable;
<new unsigned_long> = <WebTransportDatagramDuplexStream>.maxDatagramSize;
<new double> = <WebTransportDatagramDuplexStream>.incomingMaxAge;
<WebTransportDatagramDuplexStream>.incomingMaxAge = <double>;
<WebTransportDatagramDuplexStream>.incomingMaxAge = null;
<new double> = <WebTransportDatagramDuplexStream>.outgoingMaxAge;
<WebTransportDatagramDuplexStream>.outgoingMaxAge = <double>;
<WebTransportDatagramDuplexStream>.outgoingMaxAge = null;
<new long> = <WebTransportDatagramDuplexStream>.incomingHighWaterMark;
<WebTransportDatagramDuplexStream>.incomingHighWaterMark = <long>;
<new long> = <WebTransportDatagramDuplexStream>.outgoingHighWaterMark;
<WebTransportDatagramDuplexStream>.outgoingHighWaterMark = <long>;
<new WebTransport> = new WebTransport(<USVString>);
<new WebTransport> = new WebTransport(<USVString>,<WebTransportOptions>);
<new Promise_WebTransportStats_> = new Promise(function(x){console.log("ok")});
<new Promise_WebTransportStats_> = <WebTransport>.getStats();
<new Promise_undefined_> = <WebTransport>.ready;
<new WebTransportReliabilityMode> = <WebTransport>.reliability;
<new WebTransportCongestionControl> = <WebTransport>.congestionControl;
<new Promise_WebTransportCloseInfo_> = new Promise(function(x){console.log("ok")});
<new Promise_WebTransportCloseInfo_> = <WebTransport>.closed;
<WebTransport>.close();
<WebTransport>.close(<WebTransportCloseInfo>);
<new WebTransportDatagramDuplexStream> = <WebTransport>.datagrams;
<new Promise_WebTransportBidirectionalStream_> = new Promise(function(x){console.log("ok")});
<new Promise_WebTransportBidirectionalStream_> = <WebTransport>.createBidirectionalStream();
<new Promise_WebTransportBidirectionalStream_> = <WebTransport>.createBidirectionalStream(<WebTransportSendStreamOptions>);
<new ReadableStream> = <WebTransport>.incomingBidirectionalStreams;
<new Promise_WebTransportSendStream_> = new Promise(function(x){console.log("ok")});
<new Promise_WebTransportSendStream_> = <WebTransport>.createUnidirectionalStream();
<new Promise_WebTransportSendStream_> = <WebTransport>.createUnidirectionalStream(<WebTransportSendStreamOptions>);
<new ReadableStream> = <WebTransport>.incomingUnidirectionalStreams;
!extends WebTransportSendStream WritableStream;
<new WritableStream> = <WebTransportSendStream>;
<new Promise_WebTransportSendStreamStats_> = new Promise(function(x){console.log("ok")});
<new Promise_WebTransportSendStreamStats_> = <WebTransportSendStream>.getStats();
!extends WebTransportReceiveStream ReadableStream;
<new ReadableStream> = <WebTransportReceiveStream>;
<new Promise_WebTransportReceiveStreamStats_> = new Promise(function(x){console.log("ok")});
<new Promise_WebTransportReceiveStreamStats_> = <WebTransportReceiveStream>.getStats();
<new WebTransportReceiveStream> = <WebTransportBidirectionalStream>.readable;
<new WebTransportSendStream> = <WebTransportBidirectionalStream>.writable;
!extends WebTransportError DOMException;
<new DOMException> = <WebTransportError>;
<new WebTransportError> = new WebTransportError();
<new WebTransportError> = new WebTransportError(<WebTransportErrorInit>);
<new WebTransportErrorSource> = <WebTransportError>.source;
<new octet> = <WebTransportError>.streamErrorCode;
!extends USB EventTarget;
<new EventTarget> = <USB>;
<new EventHandler> = <USB>.onconnect;
<USB>.onconnect = <EventHandler>;
<new EventHandler> = <USB>.ondisconnect;
<USB>.ondisconnect = <EventHandler>;
<new sequence_USBDevice_> = [<USBDevice>];
<new USBDevice> = <sequence_USBDevice_>[0];
<new Promise_sequence_USBDevice__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_USBDevice__> = <USB>.getDevices();
<new Promise_USBDevice_> = new Promise(function(x){console.log("ok")});
<new Promise_USBDevice_> = <USB>.requestDevice(<USBDeviceRequestOptions>);
<new USB> = <Navigator>.usb;
<new USB> = <WorkerNavigator>.usb;
!extends USBConnectionEvent Event;
<new Event> = <USBConnectionEvent>;
<new USBConnectionEvent> = new USBConnectionEvent(<DOMString>,<USBConnectionEventInit>);
<new USBDevice> = <USBConnectionEvent>.device;
<new USBInTransferResult> = new USBInTransferResult(<USBTransferStatus>);
<new USBInTransferResult> = new USBInTransferResult(<USBTransferStatus>,<DataView>);
<new DataView> = <USBInTransferResult>.data;
<new USBTransferStatus> = <USBInTransferResult>.status;
<new USBOutTransferResult> = new USBOutTransferResult(<USBTransferStatus>);
<new USBOutTransferResult> = new USBOutTransferResult(<USBTransferStatus>,<unsigned_long>);
<new unsigned_long> = <USBOutTransferResult>.bytesWritten;
<new USBTransferStatus> = <USBOutTransferResult>.status;
<new USBIsochronousInTransferPacket> = new USBIsochronousInTransferPacket(<USBTransferStatus>);
<new USBIsochronousInTransferPacket> = new USBIsochronousInTransferPacket(<USBTransferStatus>,<DataView>);
<new DataView> = <USBIsochronousInTransferPacket>.data;
<new USBTransferStatus> = <USBIsochronousInTransferPacket>.status;
<new sequence_USBIsochronousInTransferPacket_> = [<USBIsochronousInTransferPacket>];
<new USBIsochronousInTransferPacket> = <sequence_USBIsochronousInTransferPacket_>[0];
<new USBIsochronousInTransferResult> = new USBIsochronousInTransferResult(<sequence_USBIsochronousInTransferPacket_>);
<new USBIsochronousInTransferResult> = new USBIsochronousInTransferResult(<sequence_USBIsochronousInTransferPacket_>,<DataView>);
<new DataView> = <USBIsochronousInTransferResult>.data;
<new FrozenArray_USBIsochronousInTransferPacket_> = [<USBIsochronousInTransferPacket>];
<new USBIsochronousInTransferPacket> = <FrozenArray_USBIsochronousInTransferPacket_>[0];
<new FrozenArray_USBIsochronousInTransferPacket_> = <USBIsochronousInTransferResult>.packets;
<new USBIsochronousOutTransferPacket> = new USBIsochronousOutTransferPacket(<USBTransferStatus>);
<new USBIsochronousOutTransferPacket> = new USBIsochronousOutTransferPacket(<USBTransferStatus>,<unsigned_long>);
<new unsigned_long> = <USBIsochronousOutTransferPacket>.bytesWritten;
<new USBTransferStatus> = <USBIsochronousOutTransferPacket>.status;
<new sequence_USBIsochronousOutTransferPacket_> = [<USBIsochronousOutTransferPacket>];
<new USBIsochronousOutTransferPacket> = <sequence_USBIsochronousOutTransferPacket_>[0];
<new USBIsochronousOutTransferResult> = new USBIsochronousOutTransferResult(<sequence_USBIsochronousOutTransferPacket_>);
<new FrozenArray_USBIsochronousOutTransferPacket_> = [<USBIsochronousOutTransferPacket>];
<new USBIsochronousOutTransferPacket> = <FrozenArray_USBIsochronousOutTransferPacket_>[0];
<new FrozenArray_USBIsochronousOutTransferPacket_> = <USBIsochronousOutTransferResult>.packets;
<new octet> = <USBDevice>.usbVersionMajor;
<new octet> = <USBDevice>.usbVersionMinor;
<new octet> = <USBDevice>.usbVersionSubminor;
<new octet> = <USBDevice>.deviceClass;
<new octet> = <USBDevice>.deviceSubclass;
<new octet> = <USBDevice>.deviceProtocol;
<new unsigned_short> = <USBDevice>.vendorId;
<new unsigned_short> = <USBDevice>.productId;
<new octet> = <USBDevice>.deviceVersionMajor;
<new octet> = <USBDevice>.deviceVersionMinor;
<new octet> = <USBDevice>.deviceVersionSubminor;
<new DOMString> = <USBDevice>.manufacturerName;
<new DOMString> = <USBDevice>.productName;
<new DOMString> = <USBDevice>.serialNumber;
<new USBConfiguration> = <USBDevice>.configuration;
<new FrozenArray_USBConfiguration_> = [<USBConfiguration>];
<new USBConfiguration> = <FrozenArray_USBConfiguration_>[0];
<new FrozenArray_USBConfiguration_> = <USBDevice>.configurations;
<new boolean> = <USBDevice>.opened;
<new Promise_undefined_> = <USBDevice>.open();
<new Promise_undefined_> = <USBDevice>.close();
<new Promise_undefined_> = <USBDevice>.forget();
<new Promise_undefined_> = <USBDevice>.selectConfiguration(<octet>);
<new Promise_undefined_> = <USBDevice>.claimInterface(<octet>);
<new Promise_undefined_> = <USBDevice>.releaseInterface(<octet>);
<new Promise_undefined_> = <USBDevice>.selectAlternateInterface(<octet>,<octet>);
<new Promise_USBInTransferResult_> = new Promise(function(x){console.log("ok")});
<new Promise_USBInTransferResult_> = <USBDevice>.controlTransferIn(<USBControlTransferParameters>,<unsigned_short>);
<new Promise_USBOutTransferResult_> = new Promise(function(x){console.log("ok")});
<new Promise_USBOutTransferResult_> = <USBDevice>.controlTransferOut(<USBControlTransferParameters>);
<new Promise_USBOutTransferResult_> = <USBDevice>.controlTransferOut(<USBControlTransferParameters>,<BufferSource>);
<new Promise_undefined_> = <USBDevice>.clearHalt(<USBDirection>,<octet>);
<new Promise_USBInTransferResult_> = <USBDevice>.transferIn(<octet>,<unsigned_long>);
<new Promise_USBOutTransferResult_> = <USBDevice>.transferOut(<octet>,<BufferSource>);
<new Promise_USBIsochronousInTransferResult_> = new Promise(function(x){console.log("ok")});
<new Promise_USBIsochronousInTransferResult_> = <USBDevice>.isochronousTransferIn(<octet>,<sequence_unsigned_long_>);
<new Promise_USBIsochronousOutTransferResult_> = new Promise(function(x){console.log("ok")});
<new Promise_USBIsochronousOutTransferResult_> = <USBDevice>.isochronousTransferOut(<octet>,<BufferSource>,<sequence_unsigned_long_>);
<new Promise_undefined_> = <USBDevice>.reset();
<new USBConfiguration> = new USBConfiguration(<USBDevice>,<octet>);
<new octet> = <USBConfiguration>.configurationValue;
<new DOMString> = <USBConfiguration>.configurationName;
<new FrozenArray_USBInterface_> = [<USBInterface>];
<new USBInterface> = <FrozenArray_USBInterface_>[0];
<new FrozenArray_USBInterface_> = <USBConfiguration>.interfaces;
<new USBInterface> = new USBInterface(<USBConfiguration>,<octet>);
<new octet> = <USBInterface>.interfaceNumber;
<new USBAlternateInterface> = <USBInterface>.alternate;
<new FrozenArray_USBAlternateInterface_> = [<USBAlternateInterface>];
<new USBAlternateInterface> = <FrozenArray_USBAlternateInterface_>[0];
<new FrozenArray_USBAlternateInterface_> = <USBInterface>.alternates;
<new boolean> = <USBInterface>.claimed;
<new USBAlternateInterface> = new USBAlternateInterface(<USBInterface>,<octet>);
<new octet> = <USBAlternateInterface>.alternateSetting;
<new octet> = <USBAlternateInterface>.interfaceClass;
<new octet> = <USBAlternateInterface>.interfaceSubclass;
<new octet> = <USBAlternateInterface>.interfaceProtocol;
<new DOMString> = <USBAlternateInterface>.interfaceName;
<new FrozenArray_USBEndpoint_> = [<USBEndpoint>];
<new USBEndpoint> = <FrozenArray_USBEndpoint_>[0];
<new FrozenArray_USBEndpoint_> = <USBAlternateInterface>.endpoints;
<new USBEndpoint> = new USBEndpoint(<USBAlternateInterface>,<octet>,<USBDirection>);
<new octet> = <USBEndpoint>.endpointNumber;
<new USBDirection> = <USBEndpoint>.direction;
<new USBEndpointType> = <USBEndpoint>.type;
<new unsigned_long> = <USBEndpoint>.packetSize;
!extends USBPermissionResult PermissionStatus;
<new PermissionStatus> = <USBPermissionResult>;
<new FrozenArray_USBDevice_> = [<USBDevice>];
<new USBDevice> = <FrozenArray_USBDevice_>[0];
<new FrozenArray_USBDevice_> = <USBPermissionResult>.devices;
<USBPermissionResult>.devices = <FrozenArray_USBDevice_>;
!extends VTTCue TextTrackCue;
<new TextTrackCue> = <VTTCue>;
<new VTTCue> = new VTTCue(<double>,<unrestricted_double>,<DOMString>);
<new VTTRegion> = <VTTCue>.region;
<VTTCue>.region = <VTTRegion>;
<VTTCue>.region = null;
<new DirectionSetting> = <VTTCue>.vertical;
<VTTCue>.vertical = <DirectionSetting>;
<new boolean> = <VTTCue>.snapToLines;
<VTTCue>.snapToLines = <boolean>;
<new LineAndPositionSetting> = <VTTCue>.line;
<VTTCue>.line = <LineAndPositionSetting>;
<new LineAlignSetting> = <VTTCue>.lineAlign;
<VTTCue>.lineAlign = <LineAlignSetting>;
<new LineAndPositionSetting> = <VTTCue>.position;
<VTTCue>.position = <LineAndPositionSetting>;
<new PositionAlignSetting> = <VTTCue>.positionAlign;
<VTTCue>.positionAlign = <PositionAlignSetting>;
<new double> = <VTTCue>.size;
<VTTCue>.size = <double>;
<new AlignSetting> = <VTTCue>.align;
<VTTCue>.align = <AlignSetting>;
<new DOMString> = <VTTCue>.text;
<VTTCue>.text = <DOMString>;
<new DocumentFragment> = <VTTCue>.getCueAsHTML();
<new VTTRegion> = new VTTRegion();
<new DOMString> = <VTTRegion>.id;
<VTTRegion>.id = <DOMString>;
<new double> = <VTTRegion>.width;
<VTTRegion>.width = <double>;
<new unsigned_long> = <VTTRegion>.lines;
<VTTRegion>.lines = <unsigned_long>;
<new double> = <VTTRegion>.regionAnchorX;
<VTTRegion>.regionAnchorX = <double>;
<new double> = <VTTRegion>.regionAnchorY;
<VTTRegion>.regionAnchorY = <double>;
<new double> = <VTTRegion>.viewportAnchorX;
<VTTRegion>.viewportAnchorX = <double>;
<new double> = <VTTRegion>.viewportAnchorY;
<VTTRegion>.viewportAnchorY = <double>;
<new ScrollSetting> = <VTTRegion>.scroll;
<VTTRegion>.scroll = <ScrollSetting>;
<new XREnvironmentBlendMode> = <XRSession>.environmentBlendMode;
<new XRInteractionMode> = <XRSession>.interactionMode;
<new boolean> = <XRView>.isFirstPersonObserver;
<new XRDepthUsage> = <XRSession>.depthUsage;
<new XRDepthDataFormat> = <XRSession>.depthDataFormat;
<new unsigned_long> = <XRDepthInformation>.width;
<new unsigned_long> = <XRDepthInformation>.height;
<new XRRigidTransform> = <XRDepthInformation>.normDepthBufferFromNormView;
<new float> = <XRDepthInformation>.rawValueToMeters;
!extends XRCPUDepthInformation XRDepthInformation;
<new XRDepthInformation> = <XRCPUDepthInformation>;
<new ArrayBuffer> = <XRCPUDepthInformation>.data;
<new float> = <XRCPUDepthInformation>.getDepthInMeters(<float>,<float>);
<new XRCPUDepthInformation> = <XRFrame>.getDepthInformation(<XRView>);
!extends XRWebGLDepthInformation XRDepthInformation;
<new XRDepthInformation> = <XRWebGLDepthInformation>;
<new WebGLTexture> = <XRWebGLDepthInformation>.texture;
<new XRWebGLDepthInformation> = <XRWebGLBinding>.getDepthInformation(<XRView>);
<new XRDOMOverlayState> = <XRSession>.domOverlayState;
<new Gamepad> = <XRInputSource>.gamepad;
<new XRHand> = <XRInputSource>.hand;
<new unsigned_long> = <XRHand>.size;
<new XRJointSpace> = <XRHand>.get(<XRHandJoint>);
!extends XRJointSpace XRSpace;
<new XRSpace> = <XRJointSpace>;
<new XRHandJoint> = <XRJointSpace>.jointName;
<new XRJointPose> = <XRFrame>.getJointPose(<XRJointSpace>,<XRSpace>);
<new sequence_XRJointSpace_> = [<XRJointSpace>];
<new XRJointSpace> = <sequence_XRJointSpace_>[0];
<XRFrame>.fillJointRadii(<sequence_XRJointSpace_>,<Float32Array>);
<new sequence_XRSpace_> = [<XRSpace>];
<new XRSpace> = <sequence_XRSpace_>[0];
<XRFrame>.fillPoses(<sequence_XRSpace_>,<XRSpace>,<Float32Array>);
!extends XRJointPose XRPose;
<new XRPose> = <XRJointPose>;
<new float> = <XRJointPose>.radius;
<XRHitTestSource>.cancel();
<XRTransientInputHitTestSource>.cancel();
<new XRPose> = <XRHitTestResult>.getPose(<XRSpace>);
<new XRInputSource> = <XRTransientInputHitTestResult>.inputSource;
<new FrozenArray_XRHitTestResult_> = [<XRHitTestResult>];
<new XRHitTestResult> = <FrozenArray_XRHitTestResult_>[0];
<new FrozenArray_XRHitTestResult_> = <XRTransientInputHitTestResult>.results;
<new Promise_XRHitTestSource_> = new Promise(function(x){console.log("ok")});
<new Promise_XRHitTestSource_> = <XRSession>.requestHitTestSource(<XRHitTestOptionsInit>);
<new Promise_XRTransientInputHitTestSource_> = new Promise(function(x){console.log("ok")});
<new Promise_XRTransientInputHitTestSource_> = <XRSession>.requestHitTestSourceForTransientInput(<XRTransientInputHitTestOptionsInit>);
<new FrozenArray_XRHitTestResult_> = <XRFrame>.getHitTestResults(<XRHitTestSource>);
<new FrozenArray_XRTransientInputHitTestResult_> = [<XRTransientInputHitTestResult>];
<new XRTransientInputHitTestResult> = <FrozenArray_XRTransientInputHitTestResult_>[0];
<new FrozenArray_XRTransientInputHitTestResult_> = <XRFrame>.getHitTestResultsForTransientInput(<XRTransientInputHitTestSource>);
<new XRRay> = new XRRay();
<new XRRay> = new XRRay(<DOMPointInit>);
<new XRRay> = new XRRay(<DOMPointInit>,<XRRayDirectionInit>);
<new XRRay> = new XRRay(<XRRigidTransform>);
<new DOMPointReadOnly> = <XRRay>.origin;
<new DOMPointReadOnly> = <XRRay>.direction;
<new Float32Array> = <XRRay>.matrix;
!extends XRLightProbe EventTarget;
<new EventTarget> = <XRLightProbe>;
<new XRSpace> = <XRLightProbe>.probeSpace;
<new EventHandler> = <XRLightProbe>.onreflectionchange;
<XRLightProbe>.onreflectionchange = <EventHandler>;
<new Float32Array> = <XRLightEstimate>.sphericalHarmonicsCoefficients;
<new DOMPointReadOnly> = <XRLightEstimate>.primaryLightDirection;
<new DOMPointReadOnly> = <XRLightEstimate>.primaryLightIntensity;
<new Promise_XRLightProbe_> = new Promise(function(x){console.log("ok")});
<new Promise_XRLightProbe_> = <XRSession>.requestLightProbe();
<new Promise_XRLightProbe_> = <XRSession>.requestLightProbe(<XRLightProbeInit>);
<new XRReflectionFormat> = <XRSession>.preferredReflectionFormat;
<new XRLightEstimate> = <XRFrame>.getLightEstimate(<XRLightProbe>);
<new WebGLTexture> = <XRWebGLBinding>.getReflectionCubeMap(<XRLightProbe>);
<new XRSystem> = <Navigator>.xr;
!extends XRSystem EventTarget;
<new EventTarget> = <XRSystem>;
<new Promise_boolean_> = <XRSystem>.isSessionSupported(<XRSessionMode>);
<new Promise_XRSession_> = new Promise(function(x){console.log("ok")});
<new Promise_XRSession_> = <XRSystem>.requestSession(<XRSessionMode>);
<new Promise_XRSession_> = <XRSystem>.requestSession(<XRSessionMode>,<XRSessionInit>);
<new EventHandler> = <XRSystem>.ondevicechange;
<XRSystem>.ondevicechange = <EventHandler>;
!extends XRSession EventTarget;
<new EventTarget> = <XRSession>;
<new XRVisibilityState> = <XRSession>.visibilityState;
<new float> = <XRSession>.frameRate;
<new Float32Array> = <XRSession>.supportedFrameRates;
<new XRRenderState> = <XRSession>.renderState;
<new XRInputSourceArray> = <XRSession>.inputSources;
<new FrozenArray_DOMString_> = <XRSession>.enabledFeatures;
<XRSession>.updateRenderState();
<XRSession>.updateRenderState(<XRRenderStateInit>);
<new Promise_undefined_> = <XRSession>.updateTargetFrameRate(<float>);
<new Promise_XRReferenceSpace_> = new Promise(function(x){console.log("ok")});
<new Promise_XRReferenceSpace_> = <XRSession>.requestReferenceSpace(<XRReferenceSpaceType>);
<new unsigned_long> = <XRSession>.requestAnimationFrame(<XRFrameRequestCallback>);
<XRSession>.cancelAnimationFrame(<unsigned_long>);
<new Promise_undefined_> = <XRSession>.end();
<new EventHandler> = <XRSession>.onend;
<XRSession>.onend = <EventHandler>;
<new EventHandler> = <XRSession>.oninputsourceschange;
<XRSession>.oninputsourceschange = <EventHandler>;
<new EventHandler> = <XRSession>.onselect;
<XRSession>.onselect = <EventHandler>;
<new EventHandler> = <XRSession>.onselectstart;
<XRSession>.onselectstart = <EventHandler>;
<new EventHandler> = <XRSession>.onselectend;
<XRSession>.onselectend = <EventHandler>;
<new EventHandler> = <XRSession>.onsqueeze;
<XRSession>.onsqueeze = <EventHandler>;
<new EventHandler> = <XRSession>.onsqueezestart;
<XRSession>.onsqueezestart = <EventHandler>;
<new EventHandler> = <XRSession>.onsqueezeend;
<XRSession>.onsqueezeend = <EventHandler>;
<new EventHandler> = <XRSession>.onvisibilitychange;
<XRSession>.onvisibilitychange = <EventHandler>;
<new EventHandler> = <XRSession>.onframeratechange;
<XRSession>.onframeratechange = <EventHandler>;
<new double> = <XRRenderState>.depthNear;
<new double> = <XRRenderState>.depthFar;
<new double> = <XRRenderState>.inlineVerticalFieldOfView;
<new XRWebGLLayer> = <XRRenderState>.baseLayer;
<new XRSession> = <XRFrame>.session;
<new DOMHighResTimeStamp> = <XRFrame>.predictedDisplayTime;
<new XRViewerPose> = <XRFrame>.getViewerPose(<XRReferenceSpace>);
<new XRPose> = <XRFrame>.getPose(<XRSpace>,<XRSpace>);
!extends XRSpace EventTarget;
<new EventTarget> = <XRSpace>;
!extends XRReferenceSpace XRSpace;
<new XRSpace> = <XRReferenceSpace>;
<new XRReferenceSpace> = <XRReferenceSpace>.getOffsetReferenceSpace(<XRRigidTransform>);
<new EventHandler> = <XRReferenceSpace>.onreset;
<XRReferenceSpace>.onreset = <EventHandler>;
!extends XRBoundedReferenceSpace XRReferenceSpace;
<new XRReferenceSpace> = <XRBoundedReferenceSpace>;
<new FrozenArray_DOMPointReadOnly_> = [<DOMPointReadOnly>];
<new DOMPointReadOnly> = <FrozenArray_DOMPointReadOnly_>[0];
<new FrozenArray_DOMPointReadOnly_> = <XRBoundedReferenceSpace>.boundsGeometry;
<new XREye> = <XRView>.eye;
<new Float32Array> = <XRView>.projectionMatrix;
<new XRRigidTransform> = <XRView>.transform;
<new double> = <XRView>.recommendedViewportScale;
<XRView>.requestViewportScale(<double>);
<new long> = <XRViewport>.x;
<new long> = <XRViewport>.y;
<new long> = <XRViewport>.width;
<new long> = <XRViewport>.height;
<new XRRigidTransform> = new XRRigidTransform();
<new XRRigidTransform> = new XRRigidTransform(<DOMPointInit>);
<new XRRigidTransform> = new XRRigidTransform(<DOMPointInit>,<DOMPointInit>);
<new DOMPointReadOnly> = <XRRigidTransform>.position;
<new DOMPointReadOnly> = <XRRigidTransform>.orientation;
<new Float32Array> = <XRRigidTransform>.matrix;
<new XRRigidTransform> = <XRRigidTransform>.inverse;
<new XRRigidTransform> = <XRPose>.transform;
<new DOMPointReadOnly> = <XRPose>.linearVelocity;
<new DOMPointReadOnly> = <XRPose>.angularVelocity;
<new boolean> = <XRPose>.emulatedPosition;
!extends XRViewerPose XRPose;
<new XRPose> = <XRViewerPose>;
<new FrozenArray_XRView_> = [<XRView>];
<new XRView> = <FrozenArray_XRView_>[0];
<new FrozenArray_XRView_> = <XRViewerPose>.views;
<new XRHandedness> = <XRInputSource>.handedness;
<new XRTargetRayMode> = <XRInputSource>.targetRayMode;
<new XRSpace> = <XRInputSource>.targetRaySpace;
<new XRSpace> = <XRInputSource>.gripSpace;
<new FrozenArray_DOMString_> = <XRInputSource>.profiles;
<new unsigned_long> = <XRInputSourceArray>.length;
<new XRInputSource> = <XRInputSourceArray>[<unsigned_long>];
!extends XRLayer EventTarget;
<new EventTarget> = <XRLayer>;
!extends XRWebGLLayer XRLayer;
<new XRLayer> = <XRWebGLLayer>;
<new XRWebGLLayer> = new XRWebGLLayer(<XRSession>,<XRWebGLRenderingContext>);
<new XRWebGLLayer> = new XRWebGLLayer(<XRSession>,<XRWebGLRenderingContext>,<XRWebGLLayerInit>);
<new boolean> = <XRWebGLLayer>.antialias;
<new boolean> = <XRWebGLLayer>.ignoreDepthValues;
<new float> = <XRWebGLLayer>.fixedFoveation;
<XRWebGLLayer>.fixedFoveation = <float>;
<XRWebGLLayer>.fixedFoveation = null;
<new WebGLFramebuffer> = <XRWebGLLayer>.framebuffer;
<new unsigned_long> = <XRWebGLLayer>.framebufferWidth;
<new unsigned_long> = <XRWebGLLayer>.framebufferHeight;
<new XRViewport> = <XRWebGLLayer>.getViewport(<XRView>);
<new double> = <XRWebGLLayer>.getNativeFramebufferScaleFactor(<XRSession>);
!extends XRSessionEvent Event;
<new Event> = <XRSessionEvent>;
<new XRSessionEvent> = new XRSessionEvent(<DOMString>,<XRSessionEventInit>);
<new XRSession> = <XRSessionEvent>.session;
!extends XRInputSourceEvent Event;
<new Event> = <XRInputSourceEvent>;
<new XRInputSourceEvent> = new XRInputSourceEvent(<DOMString>,<XRInputSourceEventInit>);
<new XRFrame> = <XRInputSourceEvent>.frame;
<new XRInputSource> = <XRInputSourceEvent>.inputSource;
!extends XRInputSourcesChangeEvent Event;
<new Event> = <XRInputSourcesChangeEvent>;
<new XRInputSourcesChangeEvent> = new XRInputSourcesChangeEvent(<DOMString>,<XRInputSourcesChangeEventInit>);
<new XRSession> = <XRInputSourcesChangeEvent>.session;
<new FrozenArray_XRInputSource_> = [<XRInputSource>];
<new XRInputSource> = <FrozenArray_XRInputSource_>[0];
<new FrozenArray_XRInputSource_> = <XRInputSourcesChangeEvent>.added;
<new FrozenArray_XRInputSource_> = <XRInputSourcesChangeEvent>.removed;
!extends XRReferenceSpaceEvent Event;
<new Event> = <XRReferenceSpaceEvent>;
<new XRReferenceSpaceEvent> = new XRReferenceSpaceEvent(<DOMString>,<XRReferenceSpaceEventInit>);
<new XRReferenceSpace> = <XRReferenceSpaceEvent>.referenceSpace;
<new XRRigidTransform> = <XRReferenceSpaceEvent>.transform;
!extends XRPermissionStatus PermissionStatus;
<new PermissionStatus> = <XRPermissionStatus>;
<new FrozenArray_DOMString_> = <XRPermissionStatus>.granted;
<XRPermissionStatus>.granted = <FrozenArray_DOMString_>;
!extends XRCompositionLayer XRLayer;
<new XRLayer> = <XRCompositionLayer>;
<new XRLayerLayout> = <XRCompositionLayer>.layout;
<new boolean> = <XRCompositionLayer>.blendTextureSourceAlpha;
<XRCompositionLayer>.blendTextureSourceAlpha = <boolean>;
<new boolean> = <XRCompositionLayer>.forceMonoPresentation;
<XRCompositionLayer>.forceMonoPresentation = <boolean>;
<new float> = <XRCompositionLayer>.opacity;
<XRCompositionLayer>.opacity = <float>;
<new unsigned_long> = <XRCompositionLayer>.mipLevels;
<new boolean> = <XRCompositionLayer>.needsRedraw;
<XRCompositionLayer>.destroy();
!extends XRProjectionLayer XRCompositionLayer;
<new XRCompositionLayer> = <XRProjectionLayer>;
<new unsigned_long> = <XRProjectionLayer>.textureWidth;
<new unsigned_long> = <XRProjectionLayer>.textureHeight;
<new unsigned_long> = <XRProjectionLayer>.textureArrayLength;
<new boolean> = <XRProjectionLayer>.ignoreDepthValues;
<new float> = <XRProjectionLayer>.fixedFoveation;
<XRProjectionLayer>.fixedFoveation = <float>;
<XRProjectionLayer>.fixedFoveation = null;
<new XRRigidTransform> = <XRProjectionLayer>.deltaPose;
<XRProjectionLayer>.deltaPose = <XRRigidTransform>;
<XRProjectionLayer>.deltaPose = null;
!extends XRQuadLayer XRCompositionLayer;
<new XRCompositionLayer> = <XRQuadLayer>;
<new XRSpace> = <XRQuadLayer>.space;
<XRQuadLayer>.space = <XRSpace>;
<new XRRigidTransform> = <XRQuadLayer>.transform;
<XRQuadLayer>.transform = <XRRigidTransform>;
<new float> = <XRQuadLayer>.width;
<XRQuadLayer>.width = <float>;
<new float> = <XRQuadLayer>.height;
<XRQuadLayer>.height = <float>;
<new EventHandler> = <XRQuadLayer>.onredraw;
<XRQuadLayer>.onredraw = <EventHandler>;
!extends XRCylinderLayer XRCompositionLayer;
<new XRCompositionLayer> = <XRCylinderLayer>;
<new XRSpace> = <XRCylinderLayer>.space;
<XRCylinderLayer>.space = <XRSpace>;
<new XRRigidTransform> = <XRCylinderLayer>.transform;
<XRCylinderLayer>.transform = <XRRigidTransform>;
<new float> = <XRCylinderLayer>.radius;
<XRCylinderLayer>.radius = <float>;
<new float> = <XRCylinderLayer>.centralAngle;
<XRCylinderLayer>.centralAngle = <float>;
<new float> = <XRCylinderLayer>.aspectRatio;
<XRCylinderLayer>.aspectRatio = <float>;
<new EventHandler> = <XRCylinderLayer>.onredraw;
<XRCylinderLayer>.onredraw = <EventHandler>;
!extends XREquirectLayer XRCompositionLayer;
<new XRCompositionLayer> = <XREquirectLayer>;
<new XRSpace> = <XREquirectLayer>.space;
<XREquirectLayer>.space = <XRSpace>;
<new XRRigidTransform> = <XREquirectLayer>.transform;
<XREquirectLayer>.transform = <XRRigidTransform>;
<new float> = <XREquirectLayer>.radius;
<XREquirectLayer>.radius = <float>;
<new float> = <XREquirectLayer>.centralHorizontalAngle;
<XREquirectLayer>.centralHorizontalAngle = <float>;
<new float> = <XREquirectLayer>.upperVerticalAngle;
<XREquirectLayer>.upperVerticalAngle = <float>;
<new float> = <XREquirectLayer>.lowerVerticalAngle;
<XREquirectLayer>.lowerVerticalAngle = <float>;
<new EventHandler> = <XREquirectLayer>.onredraw;
<XREquirectLayer>.onredraw = <EventHandler>;
!extends XRCubeLayer XRCompositionLayer;
<new XRCompositionLayer> = <XRCubeLayer>;
<new XRSpace> = <XRCubeLayer>.space;
<XRCubeLayer>.space = <XRSpace>;
<new DOMPointReadOnly> = <XRCubeLayer>.orientation;
<XRCubeLayer>.orientation = <DOMPointReadOnly>;
<new EventHandler> = <XRCubeLayer>.onredraw;
<XRCubeLayer>.onredraw = <EventHandler>;
<new XRViewport> = <XRSubImage>.viewport;
!extends XRWebGLSubImage XRSubImage;
<new XRSubImage> = <XRWebGLSubImage>;
<new WebGLTexture> = <XRWebGLSubImage>.colorTexture;
<new WebGLTexture> = <XRWebGLSubImage>.depthStencilTexture;
<new WebGLTexture> = <XRWebGLSubImage>.motionVectorTexture;
<new unsigned_long> = <XRWebGLSubImage>.imageIndex;
<new unsigned_long> = <XRWebGLSubImage>.colorTextureWidth;
<new unsigned_long> = <XRWebGLSubImage>.colorTextureHeight;
<new unsigned_long> = <XRWebGLSubImage>.depthStencilTextureWidth;
<new unsigned_long> = <XRWebGLSubImage>.depthStencilTextureHeight;
<new unsigned_long> = <XRWebGLSubImage>.motionVectorTextureWidth;
<new unsigned_long> = <XRWebGLSubImage>.motionVectorTextureHeight;
<new XRWebGLBinding> = new XRWebGLBinding(<XRSession>,<XRWebGLRenderingContext>);
<new double> = <XRWebGLBinding>.nativeProjectionScaleFactor;
<new boolean> = <XRWebGLBinding>.usesDepthValues;
<new XRProjectionLayer> = <XRWebGLBinding>.createProjectionLayer();
<new XRProjectionLayer> = <XRWebGLBinding>.createProjectionLayer(<XRProjectionLayerInit>);
<new XRQuadLayer> = <XRWebGLBinding>.createQuadLayer();
<new XRQuadLayer> = <XRWebGLBinding>.createQuadLayer(<XRQuadLayerInit>);
<new XRCylinderLayer> = <XRWebGLBinding>.createCylinderLayer();
<new XRCylinderLayer> = <XRWebGLBinding>.createCylinderLayer(<XRCylinderLayerInit>);
<new XREquirectLayer> = <XRWebGLBinding>.createEquirectLayer();
<new XREquirectLayer> = <XRWebGLBinding>.createEquirectLayer(<XREquirectLayerInit>);
<new XRCubeLayer> = <XRWebGLBinding>.createCubeLayer();
<new XRCubeLayer> = <XRWebGLBinding>.createCubeLayer(<XRCubeLayerInit>);
<new XRWebGLSubImage> = <XRWebGLBinding>.getSubImage(<XRCompositionLayer>,<XRFrame>);
<new XRWebGLSubImage> = <XRWebGLBinding>.getSubImage(<XRCompositionLayer>,<XRFrame>,<XREye>);
<new XRWebGLSubImage> = <XRWebGLBinding>.getViewSubImage(<XRProjectionLayer>,<XRView>);
<new XRMediaBinding> = new XRMediaBinding(<XRSession>);
<new XRQuadLayer> = <XRMediaBinding>.createQuadLayer(<HTMLVideoElement>);
<new XRQuadLayer> = <XRMediaBinding>.createQuadLayer(<HTMLVideoElement>,<XRMediaQuadLayerInit>);
<new XRCylinderLayer> = <XRMediaBinding>.createCylinderLayer(<HTMLVideoElement>);
<new XRCylinderLayer> = <XRMediaBinding>.createCylinderLayer(<HTMLVideoElement>,<XRMediaCylinderLayerInit>);
<new XREquirectLayer> = <XRMediaBinding>.createEquirectLayer(<HTMLVideoElement>);
<new XREquirectLayer> = <XRMediaBinding>.createEquirectLayer(<HTMLVideoElement>,<XRMediaEquirectLayerInit>);
!extends XRLayerEvent Event;
<new Event> = <XRLayerEvent>;
<new XRLayerEvent> = new XRLayerEvent(<DOMString>,<XRLayerEventInit>);
<new XRLayer> = <XRLayerEvent>.layer;
<new FrozenArray_XRLayer_> = [<XRLayer>];
<new XRLayer> = <FrozenArray_XRLayer_>[0];
<new FrozenArray_XRLayer_> = <XRRenderState>.layers;
<new WindowControlsOverlay> = <Navigator>.windowControlsOverlay;
!extends WindowControlsOverlay EventTarget;
<new EventTarget> = <WindowControlsOverlay>;
<new boolean> = <WindowControlsOverlay>.visible;
<new DOMRect> = <WindowControlsOverlay>.getTitlebarAreaRect();
<new EventHandler> = <WindowControlsOverlay>.ongeometrychange;
<WindowControlsOverlay>.ongeometrychange = <EventHandler>;
!extends WindowControlsOverlayGeometryChangeEvent Event;
<new Event> = <WindowControlsOverlayGeometryChangeEvent>;
<new WindowControlsOverlayGeometryChangeEvent> = new WindowControlsOverlayGeometryChangeEvent(<DOMString>,<WindowControlsOverlayGeometryChangeEventInit>);
<new DOMRect> = <WindowControlsOverlayGeometryChangeEvent>.titlebarAreaRect;
<new boolean> = <WindowControlsOverlayGeometryChangeEvent>.visible;
<new boolean> = <Screen>.isExtended;
<new EventHandler> = <Screen>.onchange;
<Screen>.onchange = <EventHandler>;
<new Promise_ScreenDetails_> = new Promise(function(x){console.log("ok")});
<new Promise_ScreenDetails_> = <Window>.getScreenDetails();
!extends ScreenDetails EventTarget;
<new EventTarget> = <ScreenDetails>;
<new FrozenArray_ScreenDetailed_> = [<ScreenDetailed>];
<new ScreenDetailed> = <FrozenArray_ScreenDetailed_>[0];
<new FrozenArray_ScreenDetailed_> = <ScreenDetails>.screens;
<new ScreenDetailed> = <ScreenDetails>.currentScreen;
<new EventHandler> = <ScreenDetails>.onscreenschange;
<ScreenDetails>.onscreenschange = <EventHandler>;
<new EventHandler> = <ScreenDetails>.oncurrentscreenchange;
<ScreenDetails>.oncurrentscreenchange = <EventHandler>;
!extends ScreenDetailed Screen;
<new Screen> = <ScreenDetailed>;
<new long> = <ScreenDetailed>.availLeft;
<new long> = <ScreenDetailed>.availTop;
<new long> = <ScreenDetailed>.left;
<new long> = <ScreenDetailed>.top;
<new boolean> = <ScreenDetailed>.isPrimary;
<new boolean> = <ScreenDetailed>.isInternal;
<new float> = <ScreenDetailed>.devicePixelRatio;
<new DOMString> = <ScreenDetailed>.label;
!extends XMLHttpRequestEventTarget EventTarget;
<new EventTarget> = <XMLHttpRequestEventTarget>;
<new EventHandler> = <XMLHttpRequestEventTarget>.onloadstart;
<XMLHttpRequestEventTarget>.onloadstart = <EventHandler>;
<new EventHandler> = <XMLHttpRequestEventTarget>.onprogress;
<XMLHttpRequestEventTarget>.onprogress = <EventHandler>;
<new EventHandler> = <XMLHttpRequestEventTarget>.onabort;
<XMLHttpRequestEventTarget>.onabort = <EventHandler>;
<new EventHandler> = <XMLHttpRequestEventTarget>.onerror;
<XMLHttpRequestEventTarget>.onerror = <EventHandler>;
<new EventHandler> = <XMLHttpRequestEventTarget>.onload;
<XMLHttpRequestEventTarget>.onload = <EventHandler>;
<new EventHandler> = <XMLHttpRequestEventTarget>.ontimeout;
<XMLHttpRequestEventTarget>.ontimeout = <EventHandler>;
<new EventHandler> = <XMLHttpRequestEventTarget>.onloadend;
<XMLHttpRequestEventTarget>.onloadend = <EventHandler>;
!extends XMLHttpRequestUpload XMLHttpRequestEventTarget;
<new XMLHttpRequestEventTarget> = <XMLHttpRequestUpload>;
!extends XMLHttpRequest XMLHttpRequestEventTarget;
<new XMLHttpRequestEventTarget> = <XMLHttpRequest>;
<new XMLHttpRequest> = new XMLHttpRequest();
<new EventHandler> = <XMLHttpRequest>.onreadystatechange;
<XMLHttpRequest>.onreadystatechange = <EventHandler>;
<new unsigned_short> = XMLHttpRequest.UNSENT;
<new unsigned_short> = XMLHttpRequest.OPENED;
<new unsigned_short> = XMLHttpRequest.HEADERS_RECEIVED;
<new unsigned_short> = XMLHttpRequest.LOADING;
<new unsigned_short> = XMLHttpRequest.DONE;
<new unsigned_short> = <XMLHttpRequest>.readyState;
<XMLHttpRequest>.open(<ByteString>,<USVString>);
<XMLHttpRequest>.open(<ByteString>,<USVString>,<boolean>);
<XMLHttpRequest>.open(<ByteString>,<USVString>,<boolean>,<USVString>);
<XMLHttpRequest>.open(<ByteString>,<USVString>,<boolean>,<USVString>,<USVString>);
<XMLHttpRequest>.setRequestHeader(<ByteString>,<ByteString>);
<new unsigned_long> = <XMLHttpRequest>.timeout;
<XMLHttpRequest>.timeout = <unsigned_long>;
<new boolean> = <XMLHttpRequest>.withCredentials;
<XMLHttpRequest>.withCredentials = <boolean>;
<new XMLHttpRequestUpload> = <XMLHttpRequest>.upload;
<new union_Document1XMLHttpRequestBodyInit_> = <Document>;
<new union_Document1XMLHttpRequestBodyInit_> = <XMLHttpRequestBodyInit>;
<XMLHttpRequest>.send();
<XMLHttpRequest>.send(<union_Document1XMLHttpRequestBodyInit_>);
<XMLHttpRequest>.abort();
<new USVString> = <XMLHttpRequest>.responseURL;
<new unsigned_short> = <XMLHttpRequest>.status;
<new ByteString> = <XMLHttpRequest>.statusText;
<new ByteString> = <XMLHttpRequest>.getResponseHeader(<ByteString>);
<new ByteString> = <XMLHttpRequest>.getAllResponseHeaders();
<XMLHttpRequest>.overrideMimeType(<DOMString>);
<new XMLHttpRequestResponseType> = <XMLHttpRequest>.responseType;
<XMLHttpRequest>.responseType = <XMLHttpRequestResponseType>;
<new any> = <XMLHttpRequest>.response;
<new USVString> = <XMLHttpRequest>.responseText;
<new Document> = <XMLHttpRequest>.responseXML;
<new FormData> = new FormData();
<new FormData> = new FormData(<HTMLFormElement>);
<FormData>.append(<USVString>,<USVString>);
<FormData>.append(<USVString>,<Blob>);
<FormData>.append(<USVString>,<Blob>,<USVString>);
<FormData>.delete(<USVString>);
<new FormDataEntryValue> = <FormData>.get(<USVString>);
<new sequence_FormDataEntryValue_> = [<FormDataEntryValue>];
<new FormDataEntryValue> = <sequence_FormDataEntryValue_>[0];
<new sequence_FormDataEntryValue_> = <FormData>.getAll(<USVString>);
<FormData>.has(<USVString>);
<FormData>.set(<USVString>,<USVString>);
<FormData>.set(<USVString>,<Blob>);
<FormData>.set(<USVString>,<Blob>,<USVString>);
!extends ProgressEvent Event;
<new Event> = <ProgressEvent>;
<new ProgressEvent> = new ProgressEvent(<DOMString>);
<new ProgressEvent> = new ProgressEvent(<DOMString>,<ProgressEventInit>);
<new boolean> = <ProgressEvent>.lengthComputable;
<new unsigned_long_long> = <ProgressEvent>.loaded;
<new unsigned_long_long> = <ProgressEvent>.total;
<new GLuint64EXT> = <unsigned_long_long>;
<new BlobPart> = <BufferSource>;
<new BlobPart> = <Blob>;
<new BlobPart> = <USVString>;
<new AlgorithmIdentifier> = <object>;
<new AlgorithmIdentifier> = <DOMString>;
<new HashAlgorithmIdentifier> = <AlgorithmIdentifier>;
<new BigInteger> = <Uint8Array>;
<new NamedCurve> = <DOMString>;
<new union_DOMString1Blob_> = <DOMString>;
<new union_DOMString1Blob_> = <Blob>;
<new Promise_union_DOMString1Blob__> = new Promise(function(x){console.log("ok")});
<new ClipboardItemData> = <Promise_union_DOMString1Blob__>;
<new sequence_ClipboardItem_> = [<ClipboardItem>];
<new ClipboardItem> = <sequence_ClipboardItem_>[0];
<new ClipboardItems> = <sequence_ClipboardItem_>;
<new sequence_CookieListItem_> = [<CookieListItem>];
<new CookieListItem> = <sequence_CookieListItem_>[0];
<new CookieList> = <sequence_CookieListItem_>;
<new PasswordCredentialInit> = <PasswordCredentialData>;
<new PasswordCredentialInit> = <HTMLFormElement>;
<new BinaryData> = <ArrayBuffer>;
<new BinaryData> = <ArrayBufferView>;
<new CSSStringSource> = <DOMString>;
<new CSSStringSource> = <ReadableStream>;
<new CSSToken> = <DOMString>;
<new CSSToken> = <CSSStyleValue>;
<new CSSToken> = <CSSParserValue>;
<new CSSUnparsedSegment> = <USVString>;
<new CSSUnparsedSegment> = <CSSVariableReferenceValue>;
<new CSSKeywordish> = <DOMString>;
<new CSSKeywordish> = <CSSKeywordValue>;
<new CSSNumberish> = <double>;
<new CSSNumberish> = <CSSNumericValue>;
<new CSSPerspectiveValue> = <CSSNumericValue>;
<new CSSPerspectiveValue> = <CSSKeywordish>;
<new CSSColorRGBComp> = <CSSNumberish>;
<new CSSColorRGBComp> = <CSSKeywordish>;
<new CSSColorPercent> = <CSSNumberish>;
<new CSSColorPercent> = <CSSKeywordish>;
<new CSSColorNumber> = <CSSNumberish>;
<new CSSColorNumber> = <CSSKeywordish>;
<new CSSColorAngle> = <CSSNumberish>;
<new CSSColorAngle> = <CSSKeywordish>;
<new GeometryNode> = <Text>;
<new GeometryNode> = <Element>;
<new GeometryNode> = <CSSPseudoElement>;
<new GeometryNode> = <Document>;
<new sequence_ByteString_> = [<ByteString>];
<new ByteString> = <sequence_ByteString_>[0];
<new sequence_sequence_ByteString__> = [<sequence_ByteString_>];
<new sequence_ByteString_> = <sequence_sequence_ByteString__>[0];
<new record_ByteString1ByteString_> = {a: <ByteString>};
<new ByteString> = <record_ByteString1ByteString_>[<ByteString>];
<new HeadersInit> = <sequence_sequence_ByteString__>;
<new HeadersInit> = <record_ByteString1ByteString_>;
<new XMLHttpRequestBodyInit> = <Blob>;
<new XMLHttpRequestBodyInit> = <BufferSource>;
<new XMLHttpRequestBodyInit> = <FormData>;
<new XMLHttpRequestBodyInit> = <URLSearchParams>;
<new XMLHttpRequestBodyInit> = <USVString>;
<new BodyInit> = <ReadableStream>;
<new BodyInit> = <XMLHttpRequestBodyInit>;
<new RequestInfo> = <Request>;
<new RequestInfo> = <USVString>;
<new StartInDirectory> = <WellKnownDirectory>;
<new StartInDirectory> = <FileSystemHandle>;
<new FileSystemWriteChunkType> = <BufferSource>;
<new FileSystemWriteChunkType> = <Blob>;
<new FileSystemWriteChunkType> = <USVString>;
<new FileSystemWriteChunkType> = <WriteParams>;
<new DOMHighResTimeStamp> = <double>;
<new EpochTimeStamp> = <unsigned_long_long>;
<new HTMLOrSVGScriptElement> = <HTMLScriptElement>;
<new HTMLOrSVGScriptElement> = <SVGScriptElement>;
<new MediaProvider> = <MediaStream>;
<new MediaProvider> = <MediaSource>;
<new MediaProvider> = <Blob>;
<new RenderingContext> = <CanvasRenderingContext2D>;
<new RenderingContext> = <ImageBitmapRenderingContext>;
<new RenderingContext> = <WebGLRenderingContext>;
<new RenderingContext> = <WebGL2RenderingContext>;
<new RenderingContext> = <GPUCanvasContext>;
<new HTMLOrSVGImageElement> = <HTMLImageElement>;
<new HTMLOrSVGImageElement> = <SVGImageElement>;
<new CanvasImageSource> = <HTMLOrSVGImageElement>;
<new CanvasImageSource> = <HTMLVideoElement>;
<new CanvasImageSource> = <HTMLCanvasElement>;
<new CanvasImageSource> = <ImageBitmap>;
<new CanvasImageSource> = <OffscreenCanvas>;
<new CanvasImageSource> = <VideoFrame>;
<new OffscreenRenderingContext> = <OffscreenCanvasRenderingContext2D>;
<new OffscreenRenderingContext> = <ImageBitmapRenderingContext>;
<new OffscreenRenderingContext> = <WebGLRenderingContext>;
<new OffscreenRenderingContext> = <WebGL2RenderingContext>;
<new OffscreenRenderingContext> = <GPUCanvasContext>;
<new EventHandler> = <EventHandlerNonNull>;
<new OnErrorEventHandler> = <OnErrorEventHandlerNonNull>;
<new OnBeforeUnloadEventHandler> = <OnBeforeUnloadEventHandlerNonNull>;
<new TimerHandler> = <DOMString>;
<new TimerHandler> = <Function>;
<new ImageBitmapSource> = <CanvasImageSource>;
<new ImageBitmapSource> = <Blob>;
<new ImageBitmapSource> = <ImageData>;
<new MessageEventSource> = <WindowProxy>;
<new MessageEventSource> = <MessagePort>;
<new MessageEventSource> = <ServiceWorker>;
<new sequence_Point2D_> = [<Point2D>];
<new Point2D> = <sequence_Point2D_>[0];
<new ConstrainPoint2D> = <sequence_Point2D_>;
<new ConstrainPoint2D> = <ConstrainPoint2DParameters>;
<new ProfilerResource> = <DOMString>;
<new ConstrainULong> = <unsigned_long>;
<new ConstrainULong> = <ConstrainULongRange>;
<new ConstrainDouble> = <double>;
<new ConstrainDouble> = <ConstrainDoubleRange>;
<new ConstrainBoolean> = <boolean>;
<new ConstrainBoolean> = <ConstrainBooleanParameters>;
<new ConstrainDOMString> = <DOMString>;
<new ConstrainDOMString> = <sequence_DOMString_>;
<new ConstrainDOMString> = <ConstrainDOMStringParameters>;
<new Megabit> = <unrestricted_double>;
<new Millisecond> = <unsigned_long_long>;
<new RotationMatrixType> = <Float32Array>;
<new RotationMatrixType> = <Float64Array>;
<new RotationMatrixType> = <DOMMatrix>;
<new sequence_PerformanceEntry_> = [<PerformanceEntry>];
<new PerformanceEntry> = <sequence_PerformanceEntry_>[0];
<new PerformanceEntryList> = <sequence_PerformanceEntry_>;
<new PushMessageDataInit> = <BufferSource>;
<new PushMessageDataInit> = <USVString>;
<new sequence_Report_> = [<Report>];
<new Report> = <sequence_Report_>[0];
<new ReportList> = <sequence_Report_>;
<new record_DOMString1sequence_DOMString__> = {a: <sequence_DOMString_>};
<new sequence_DOMString_> = <record_DOMString1sequence_DOMString__>[<DOMString>];
<new AttributeMatchList> = <record_DOMString1sequence_DOMString__>;
<new ReadableStreamReader> = <ReadableStreamDefaultReader>;
<new ReadableStreamReader> = <ReadableStreamBYOBReader>;
<new ReadableStreamController> = <ReadableStreamDefaultController>;
<new ReadableStreamController> = <ReadableByteStreamController>;
<new HTMLString> = <DOMString>;
<new ScriptString> = <DOMString>;
<new ScriptURLString> = <USVString>;
<new TrustedType> = <TrustedHTML>;
<new TrustedType> = <TrustedScript>;
<new TrustedType> = <TrustedScriptURL>;
<new URLPatternInput> = <USVString>;
<new URLPatternInput> = <URLPatternInit>;
<new VibratePattern> = <unsigned_long>;
<new VibratePattern> = <sequence_unsigned_long_>;
<new UUID> = <DOMString>;
<new BluetoothServiceUUID> = <DOMString>;
<new BluetoothServiceUUID> = <unsigned_long>;
<new BluetoothCharacteristicUUID> = <DOMString>;
<new BluetoothCharacteristicUUID> = <unsigned_long>;
<new BluetoothDescriptorUUID> = <DOMString>;
<new BluetoothDescriptorUUID> = <unsigned_long>;
<new NDEFMessageSource> = <DOMString>;
<new NDEFMessageSource> = <BufferSource>;
<new NDEFMessageSource> = <NDEFMessageInit>;
<new Base64URLString> = <DOMString>;
<new PublicKeyCredentialJSON> = <RegistrationResponseJSON>;
<new PublicKeyCredentialJSON> = <AuthenticationResponseJSON>;
<new COSEAlgorithmIdentifier> = <long>;
<new UvmEntry> = <sequence_unsigned_long_>;
<new sequence_UvmEntry_> = [<UvmEntry>];
<new UvmEntry> = <sequence_UvmEntry_>[0];
<new UvmEntries> = <sequence_UvmEntry_>;
<new ImageBufferSource> = <BufferSource>;
<new ImageBufferSource> = <ReadableStream>;
<new GLenum> = <unsigned_long>;
<new GLboolean> = <boolean>;
<new GLbitfield> = <unsigned_long>;
<new GLbyte> = <byte>;
<new GLshort> = <short>;
<new GLint> = <long>;
<new GLsizei> = <long>;
<new GLintptr> = <long_long>;
<new GLsizeiptr> = <long_long>;
<new GLubyte> = <octet>;
<new GLushort> = <unsigned_short>;
<new GLuint> = <unsigned_long>;
<new GLfloat> = <unrestricted_float>;
<new GLclampf> = <unrestricted_float>;
<new TexImageSource> = <ImageBitmap>;
<new TexImageSource> = <ImageData>;
<new TexImageSource> = <HTMLImageElement>;
<new TexImageSource> = <HTMLCanvasElement>;
<new TexImageSource> = <HTMLVideoElement>;
<new TexImageSource> = <OffscreenCanvas>;
<new TexImageSource> = <VideoFrame>;
<new sequence_GLfloat_> = [<GLfloat>];
<new GLfloat> = <sequence_GLfloat_>[0];
<new Float32List> = <Float32Array>;
<new Float32List> = <sequence_GLfloat_>;
<new Int32List> = <Int32Array>;
<new Int32List> = <sequence_GLint_>;
<new GLint64> = <long_long>;
<new GLuint64> = <unsigned_long_long>;
<new Uint32List> = <Uint32Array>;
<new Uint32List> = <sequence_GLuint_>;
<new GPUBufferUsageFlags> = <unsigned_long>;
<new GPUMapModeFlags> = <unsigned_long>;
<new GPUTextureUsageFlags> = <unsigned_long>;
<new GPUShaderStageFlags> = <unsigned_long>;
<new GPUBindingResource> = <GPUSampler>;
<new GPUBindingResource> = <GPUTextureView>;
<new GPUBindingResource> = <GPUBufferBinding>;
<new GPUBindingResource> = <GPUExternalTexture>;
<new GPUPipelineConstantValue> = <double>;
<new GPUColorWriteFlags> = <unsigned_long>;
<new sequence_GPUComputePassTimestampWrite_> = [<GPUComputePassTimestampWrite>];
<new GPUComputePassTimestampWrite> = <sequence_GPUComputePassTimestampWrite_>[0];
<new GPUComputePassTimestampWrites> = <sequence_GPUComputePassTimestampWrite_>;
<new sequence_GPURenderPassTimestampWrite_> = [<GPURenderPassTimestampWrite>];
<new GPURenderPassTimestampWrite> = <sequence_GPURenderPassTimestampWrite_>[0];
<new GPURenderPassTimestampWrites> = <sequence_GPURenderPassTimestampWrite_>;
<new GPUBufferDynamicOffset> = <unsigned_long>;
<new GPUStencilValue> = <unsigned_long>;
<new GPUSampleMask> = <unsigned_long>;
<new GPUDepthBias> = <long>;
<new GPUSize64> = <unsigned_long_long>;
<new GPUIntegerCoordinate> = <unsigned_long>;
<new GPUIndex32> = <unsigned_long>;
<new GPUSize32> = <unsigned_long>;
<new GPUSignedOffset32> = <long>;
<new GPUFlagsConstant> = <unsigned_long>;
<new GPUColor> = <sequence_double_>;
<new GPUColor> = <GPUColorDict>;
<new sequence_GPUIntegerCoordinate_> = [<GPUIntegerCoordinate>];
<new GPUIntegerCoordinate> = <sequence_GPUIntegerCoordinate_>[0];
<new GPUOrigin2D> = <sequence_GPUIntegerCoordinate_>;
<new GPUOrigin2D> = <GPUOrigin2DDict>;
<new GPUOrigin3D> = <sequence_GPUIntegerCoordinate_>;
<new GPUOrigin3D> = <GPUOrigin3DDict>;
<new GPUExtent3D> = <sequence_GPUIntegerCoordinate_>;
<new GPUExtent3D> = <GPUExtent3DDict>;
<new ArrayBufferView> = <Int8Array>;
<new ArrayBufferView> = <Int16Array>;
<new ArrayBufferView> = <Int32Array>;
<new ArrayBufferView> = <Uint8Array>;
<new ArrayBufferView> = <Uint16Array>;
<new ArrayBufferView> = <Uint32Array>;
<new ArrayBufferView> = <Uint8ClampedArray>;
<new ArrayBufferView> = <BigInt64Array>;
<new ArrayBufferView> = <BigUint64Array>;
<new ArrayBufferView> = <Float32Array>;
<new ArrayBufferView> = <Float64Array>;
<new ArrayBufferView> = <DataView>;
<new BufferSource> = <ArrayBufferView>;
<new BufferSource> = <ArrayBuffer>;
<new DOMTimeStamp> = <unsigned_long_long>;
<new record_DOMString1ArrayBufferView_> = {a: <ArrayBufferView>};
<new ArrayBufferView> = <record_DOMString1ArrayBufferView_>[<DOMString>];
<new MLNamedArrayBufferViews> = <record_DOMString1ArrayBufferView_>;
<new MLGPUResource> = <GPUBuffer>;
<new MLGPUResource> = <GPUTexture>;
<new record_DOMString1MLGPUResource_> = {a: <MLGPUResource>};
<new MLGPUResource> = <record_DOMString1MLGPUResource_>[<DOMString>];
<new MLNamedGPUResources> = <record_DOMString1MLGPUResource_>;
<new record_DOMString1MLOperand_> = {a: <MLOperand>};
<new MLOperand> = <record_DOMString1MLOperand_>[<DOMString>];
<new MLNamedOperands> = <record_DOMString1MLOperand_>;
<new MLBufferView> = <ArrayBufferView>;
<new MLBufferView> = <MLBufferResourceView>;
<new RTCRtpTransform> = <SFrameTransform>;
<new RTCRtpTransform> = <RTCRtpScriptTransform>;
<new SmallCryptoKeyID> = <unsigned_long_long>;
<new CryptoKeyID> = <SmallCryptoKeyID>;
<new CryptoKeyID> = <bigint>;
<new LineAndPositionSetting> = <double>;
<new LineAndPositionSetting> = <AutoKeyword>;
<new XRWebGLRenderingContext> = <WebGLRenderingContext>;
<new XRWebGLRenderingContext> = <WebGL2RenderingContext>;
<new FormDataEntryValue> = <File>;
<new FormDataEntryValue> = <USVString>;
!extends SecurityPolicyViolationEventInit EventInit;
<new EventInit> = <SecurityPolicyViolationEventInit>;
<new SecurityPolicyViolationEventInit> = {documentURI:<USVString>,violatedDirective:<DOMString>,effectiveDirective:<DOMString>,originalPolicy:<DOMString>,disposition:<SecurityPolicyViolationEventDisposition>,statusCode:<unsigned_short>};
<new IdentityProviderWellKnown> = {provider_urls:<sequence_USVString_>};
<new IdentityProviderIcon> = {url:<USVString>};
<new IdentityProviderBranding> = {};
<new IdentityProviderAPIConfig> = {accounts_endpoint:<USVString>,client_metadata_endpoint:<USVString>,id_assertion_endpoint:<USVString>};
<new IdentityProviderAccount> = {id:<USVString>,name:<USVString>,email:<USVString>};
<new IdentityProviderAccountList> = {};
<new IdentityProviderClientMetadata> = {};
<new IdentityProviderToken> = {token:<USVString>};
<new CredentialRequestOptions> = {};
<new IdentityCredentialRequestOptions> = {};
<new IdentityProviderConfig> = {configURL:<USVString>,clientId:<USVString>};
<new IdentityCredentialLogoutRPsRequest> = {url:<USVString>,accountId:<USVString>};
<new BlobPropertyBag> = {};
!extends FilePropertyBag BlobPropertyBag;
<new BlobPropertyBag> = <FilePropertyBag>;
<new FilePropertyBag> = {};
!extends IDBVersionChangeEventInit EventInit;
<new EventInit> = <IDBVersionChangeEventInit>;
<new IDBVersionChangeEventInit> = {};
<new IDBDatabaseInfo> = {};
<new IDBTransactionOptions> = {};
<new IDBObjectStoreParameters> = {};
<new IDBIndexParameters> = {};
<new SVGBoundingBoxOptions> = {};
<new Algorithm> = {name:<DOMString>};
<new KeyAlgorithm> = {name:<DOMString>};
<new RsaOtherPrimesInfo> = {};
<new JsonWebKey> = {};
<new CryptoKeyPair> = {};
!extends RsaKeyGenParams Algorithm;
<new Algorithm> = <RsaKeyGenParams>;
<new RsaKeyGenParams> = {modulusLength:<unsigned_long>,publicExponent:<BigInteger>};
!extends RsaHashedKeyGenParams RsaKeyGenParams;
<new RsaKeyGenParams> = <RsaHashedKeyGenParams>;
<new RsaHashedKeyGenParams> = {hash:<HashAlgorithmIdentifier>};
!extends RsaKeyAlgorithm KeyAlgorithm;
<new KeyAlgorithm> = <RsaKeyAlgorithm>;
<new RsaKeyAlgorithm> = {modulusLength:<unsigned_long>,publicExponent:<BigInteger>};
!extends RsaHashedKeyAlgorithm RsaKeyAlgorithm;
<new RsaKeyAlgorithm> = <RsaHashedKeyAlgorithm>;
<new RsaHashedKeyAlgorithm> = {hash:<KeyAlgorithm>};
!extends RsaHashedImportParams Algorithm;
<new Algorithm> = <RsaHashedImportParams>;
<new RsaHashedImportParams> = {hash:<HashAlgorithmIdentifier>};
!extends RsaPssParams Algorithm;
<new Algorithm> = <RsaPssParams>;
<new RsaPssParams> = {saltLength:<unsigned_long>};
!extends RsaOaepParams Algorithm;
<new Algorithm> = <RsaOaepParams>;
<new RsaOaepParams> = {};
!extends EcdsaParams Algorithm;
<new Algorithm> = <EcdsaParams>;
<new EcdsaParams> = {hash:<HashAlgorithmIdentifier>};
!extends EcKeyGenParams Algorithm;
<new Algorithm> = <EcKeyGenParams>;
<new EcKeyGenParams> = {namedCurve:<NamedCurve>};
!extends EcKeyAlgorithm KeyAlgorithm;
<new KeyAlgorithm> = <EcKeyAlgorithm>;
<new EcKeyAlgorithm> = {namedCurve:<NamedCurve>};
!extends EcKeyImportParams Algorithm;
<new Algorithm> = <EcKeyImportParams>;
<new EcKeyImportParams> = {namedCurve:<NamedCurve>};
!extends EcdhKeyDeriveParams Algorithm;
<new Algorithm> = <EcdhKeyDeriveParams>;
<new EcdhKeyDeriveParams> = {public:<CryptoKey>};
!extends AesCtrParams Algorithm;
<new Algorithm> = <AesCtrParams>;
<new AesCtrParams> = {counter:<BufferSource>,length:<octet>};
!extends AesKeyAlgorithm KeyAlgorithm;
<new KeyAlgorithm> = <AesKeyAlgorithm>;
<new AesKeyAlgorithm> = {length:<unsigned_short>};
!extends AesKeyGenParams Algorithm;
<new Algorithm> = <AesKeyGenParams>;
<new AesKeyGenParams> = {length:<unsigned_short>};
!extends AesDerivedKeyParams Algorithm;
<new Algorithm> = <AesDerivedKeyParams>;
<new AesDerivedKeyParams> = {length:<unsigned_short>};
!extends AesCbcParams Algorithm;
<new Algorithm> = <AesCbcParams>;
<new AesCbcParams> = {iv:<BufferSource>};
!extends AesGcmParams Algorithm;
<new Algorithm> = <AesGcmParams>;
<new AesGcmParams> = {iv:<BufferSource>};
!extends HmacImportParams Algorithm;
<new Algorithm> = <HmacImportParams>;
<new HmacImportParams> = {hash:<HashAlgorithmIdentifier>};
!extends HmacKeyAlgorithm KeyAlgorithm;
<new KeyAlgorithm> = <HmacKeyAlgorithm>;
<new HmacKeyAlgorithm> = {hash:<KeyAlgorithm>,length:<unsigned_long>};
!extends HmacKeyGenParams Algorithm;
<new Algorithm> = <HmacKeyGenParams>;
<new HmacKeyGenParams> = {hash:<HashAlgorithmIdentifier>};
!extends HkdfParams Algorithm;
<new Algorithm> = <HkdfParams>;
<new HkdfParams> = {hash:<HashAlgorithmIdentifier>,salt:<BufferSource>,info:<BufferSource>};
!extends Pbkdf2Params Algorithm;
<new Algorithm> = <Pbkdf2Params>;
<new Pbkdf2Params> = {salt:<BufferSource>,iterations:<unsigned_long>,hash:<HashAlgorithmIdentifier>};
!extends AccelerometerSensorOptions SensorOptions;
<new SensorOptions> = <AccelerometerSensorOptions>;
<new AccelerometerSensorOptions> = {};
<new AccelerometerReadingValues> = {x:<double>,y:<double>,z:<double>};
!extends LinearAccelerationReadingValues AccelerometerReadingValues;
<new AccelerometerReadingValues> = <LinearAccelerationReadingValues>;
<new LinearAccelerationReadingValues> = {};
!extends GravityReadingValues AccelerometerReadingValues;
<new AccelerometerReadingValues> = <GravityReadingValues>;
<new GravityReadingValues> = {};
<new AmbientLightReadingValues> = {illuminance:<double>};
<new AudioOutputOptions> = {};
<new BackgroundFetchUIOptions> = {};
!extends BackgroundFetchOptions BackgroundFetchUIOptions;
<new BackgroundFetchUIOptions> = <BackgroundFetchOptions>;
<new BackgroundFetchOptions> = {};
!extends BackgroundFetchEventInit ExtendableEventInit;
<new ExtendableEventInit> = <BackgroundFetchEventInit>;
<new BackgroundFetchEventInit> = {registration:<BackgroundFetchRegistration>};
!extends SyncEventInit ExtendableEventInit;
<new ExtendableEventInit> = <SyncEventInit>;
<new SyncEventInit> = {tag:<DOMString>};
<new CaptureHandleConfig> = {};
<new CaptureHandle> = {};
!extends ClipboardEventInit EventInit;
<new EventInit> = <ClipboardEventInit>;
<new ClipboardEventInit> = {};
<new ClipboardItemOptions> = {};
!extends ClipboardPermissionDescriptor PermissionDescriptor;
<new PermissionDescriptor> = <ClipboardPermissionDescriptor>;
<new ClipboardPermissionDescriptor> = {};
<new CloseWatcherOptions> = {};
<new PressureObserverOptions> = {};
<new ContactInfo> = {};
<new ContactsSelectOptions> = {};
<new ContentDescription> = {id:<DOMString>,title:<DOMString>,description:<DOMString>,url:<USVString>};
!extends ContentIndexEventInit ExtendableEventInit;
<new ExtendableEventInit> = <ContentIndexEventInit>;
<new ContentIndexEventInit> = {id:<DOMString>};
<new CookieStoreGetOptions> = {};
<new CookieInit> = {name:<USVString>,value:<USVString>};
<new CookieStoreDeleteOptions> = {name:<USVString>};
<new CookieListItem> = {};
!extends CookieChangeEventInit EventInit;
<new EventInit> = <CookieChangeEventInit>;
<new CookieChangeEventInit> = {};
!extends ExtendableCookieChangeEventInit ExtendableEventInit;
<new ExtendableEventInit> = <ExtendableCookieChangeEventInit>;
<new ExtendableCookieChangeEventInit> = {};
<new CredentialData> = {id:<USVString>};
<new CredentialCreationOptions> = {};
!extends PasswordCredentialData CredentialData;
<new CredentialData> = <PasswordCredentialData>;
<new PasswordCredentialData> = {origin:<USVString>,password:<USVString>};
<new FederatedCredentialRequestOptions> = {};
!extends FederatedCredentialInit CredentialData;
<new CredentialData> = <FederatedCredentialInit>;
<new FederatedCredentialInit> = {origin:<USVString>,provider:<USVString>};
!extends AnimationEventInit EventInit;
<new EventInit> = <AnimationEventInit>;
<new AnimationEventInit> = {};
!extends ContentVisibilityAutoStateChangedEventInit EventInit;
<new EventInit> = <ContentVisibilityAutoStateChangedEventInit>;
<new ContentVisibilityAutoStateChangedEventInit> = {};
<new FontFaceDescriptors> = {};
!extends FontFaceSetLoadEventInit EventInit;
<new EventInit> = <FontFaceSetLoadEventInit>;
<new FontFaceSetLoadEventInit> = {};
<new LayoutOptions> = {};
<new LayoutConstraintsOptions> = {};
<new BreakTokenOptions> = {};
<new FragmentResultOptions> = {};
<new IntrinsicSizesResultOptions> = {};
<new FocusableAreasOption> = {};
<new SpatialNavigationSearchOptions> = {};
!extends NavigationEventInit UIEventInit;
<new UIEventInit> = <NavigationEventInit>;
<new NavigationEventInit> = {};
<new PaintRenderingContext2DSettings> = {};
<new CSSParserOptions> = {};
<new PropertyDefinition> = {name:<DOMString>,inherits:<boolean>};
!extends TransitionEventInit EventInit;
<new EventInit> = <TransitionEventInit>;
<new TransitionEventInit> = {};
<new CSSNumericType> = {};
<new CSSMatrixComponentOptions> = {};
<new ScrollOptions> = {};
!extends ScrollToOptions ScrollOptions;
<new ScrollOptions> = <ScrollToOptions>;
<new ScrollToOptions> = {};
!extends MediaQueryListEventInit EventInit;
<new EventInit> = <MediaQueryListEventInit>;
<new MediaQueryListEventInit> = {};
!extends ScrollIntoViewOptions ScrollOptions;
<new ScrollOptions> = <ScrollIntoViewOptions>;
<new ScrollIntoViewOptions> = {};
<new CheckVisibilityOptions> = {};
<new BoxQuadOptions> = {};
<new ConvertCoordinateOptions> = {};
<new CSSStyleSheetInit> = {};
<new ItemDetails> = {itemId:<DOMString>,title:<DOMString>,price:<PaymentCurrencyAmount>};
<new PurchaseDetails> = {itemId:<DOMString>,purchaseToken:<DOMString>};
<new EventInit> = {};
!extends CustomEventInit EventInit;
<new EventInit> = <CustomEventInit>;
<new CustomEventInit> = {};
<new EventListenerOptions> = {};
!extends AddEventListenerOptions EventListenerOptions;
<new EventListenerOptions> = <AddEventListenerOptions>;
<new AddEventListenerOptions> = {};
<new MutationObserverInit> = {};
<new GetRootNodeOptions> = {};
<new ElementCreationOptions> = {};
<new ShadowRootInit> = {mode:<ShadowRootMode>};
<new StaticRangeInit> = {startContainer:<Node>,startOffset:<unsigned_long>,endContainer:<Node>,endOffset:<unsigned_long>};
<new EditContextInit> = {};
<new TextUpdateEventInit> = {};
<new TextFormatInit> = {};
<new TextFormatUpdateEventInit> = {};
<new CharacterBoundsUpdateEventInit> = {};
<new TextDecoderOptions> = {};
<new TextDecodeOptions> = {};
<new TextEncoderEncodeIntoResult> = {};
<new MediaKeySystemConfiguration> = {};
<new MediaKeySystemMediaCapability> = {};
!extends MediaKeyMessageEventInit EventInit;
<new EventInit> = <MediaKeyMessageEventInit>;
<new MediaKeyMessageEventInit> = {messageType:<MediaKeyMessageType>,message:<ArrayBuffer>};
!extends MediaEncryptedEventInit EventInit;
<new EventInit> = <MediaEncryptedEventInit>;
<new MediaEncryptedEventInit> = {};
<new FileSystemFlags> = {};
<new PerformanceObserverInit> = {};
<new ColorSelectionResult> = {};
<new ColorSelectionOptions> = {};
<new RequestInit> = {};
<new ResponseInit> = {};
<new AuthenticationExtensionsClientInputs> = {};
<new HMACGetSecretInput> = {salt1:<ArrayBuffer>};
<new AuthenticationExtensionsClientOutputs> = {};
<new HMACGetSecretOutput> = {output1:<ArrayBuffer>};
!extends FileSystemPermissionDescriptor PermissionDescriptor;
<new PermissionDescriptor> = <FileSystemPermissionDescriptor>;
<new FileSystemPermissionDescriptor> = {handle:<FileSystemHandle>};
<new FileSystemHandlePermissionDescriptor> = {};
<new FilePickerAcceptType> = {};
<new FilePickerOptions> = {};
!extends OpenFilePickerOptions FilePickerOptions;
<new FilePickerOptions> = <OpenFilePickerOptions>;
<new OpenFilePickerOptions> = {};
!extends SaveFilePickerOptions FilePickerOptions;
<new FilePickerOptions> = <SaveFilePickerOptions>;
<new SaveFilePickerOptions> = {};
<new DirectoryPickerOptions> = {};
<new FileSystemCreateWritableOptions> = {};
<new FileSystemGetFileOptions> = {};
<new FileSystemGetDirectoryOptions> = {};
<new FileSystemRemoveOptions> = {};
<new WriteParams> = {type:<WriteCommandType>};
<new FileSystemReadWriteOptions> = {};
<new FullscreenOptions> = {};
<new GamepadEffectParameters> = {};
!extends GamepadEventInit EventInit;
<new EventInit> = <GamepadEventInit>;
<new GamepadEventInit> = {gamepad:<Gamepad>};
<new SensorOptions> = {};
!extends SensorErrorEventInit EventInit;
<new EventInit> = <SensorErrorEventInit>;
<new SensorErrorEventInit> = {error:<DOMException>};
<new MockSensorConfiguration> = {mockSensorType:<MockSensorType>};
<new MockSensor> = {};
<new MockSensorReadingValues> = {};
!extends GeolocationSensorOptions SensorOptions;
<new SensorOptions> = <GeolocationSensorOptions>;
<new GeolocationSensorOptions> = {};
!extends ReadOptions GeolocationSensorOptions;
<new GeolocationSensorOptions> = <ReadOptions>;
<new ReadOptions> = {};
<new GeolocationSensorReading> = {};
<new GeolocationReadingValues> = {latitude:<double>,longitude:<double>,altitude:<double>,accuracy:<double>,altitudeAccuracy:<double>,heading:<double>,speed:<double>};
<new PositionOptions> = {};
<new DOMPointInit> = {};
<new DOMRectInit> = {};
<new DOMQuadInit> = {};
<new DOMMatrix2DInit> = {};
!extends DOMMatrixInit DOMMatrix2DInit;
<new DOMMatrix2DInit> = <DOMMatrixInit>;
<new DOMMatrixInit> = {};
<new RelatedApplication> = {platform:<USVString>};
!extends GyroscopeSensorOptions SensorOptions;
<new SensorOptions> = <GyroscopeSensorOptions>;
<new GyroscopeSensorOptions> = {};
<new GyroscopeReadingValues> = {x:<double>,y:<double>,z:<double>};
!extends TrackEventInit EventInit;
<new EventInit> = <TrackEventInit>;
<new TrackEventInit> = {};
!extends SubmitEventInit EventInit;
<new EventInit> = <SubmitEventInit>;
<new SubmitEventInit> = {};
!extends FormDataEventInit EventInit;
<new EventInit> = <FormDataEventInit>;
<new FormDataEventInit> = {formData:<FormData>};
<new AssignedNodesOptions> = {};
<new CanvasRenderingContext2DSettings> = {};
<new ImageDataSettings> = {};
<new ImageBitmapRenderingContextSettings> = {};
<new ImageEncodeOptions> = {};
<new ElementDefinitionOptions> = {};
<new ValidityStateFlags> = {};
<new FocusOptions> = {};
!extends DragEventInit MouseEventInit;
<new MouseEventInit> = <DragEventInit>;
<new DragEventInit> = {};
!extends WindowPostMessageOptions StructuredSerializeOptions;
<new StructuredSerializeOptions> = <WindowPostMessageOptions>;
<new WindowPostMessageOptions> = {};
!extends PopStateEventInit EventInit;
<new EventInit> = <PopStateEventInit>;
<new PopStateEventInit> = {};
!extends HashChangeEventInit EventInit;
<new EventInit> = <HashChangeEventInit>;
<new HashChangeEventInit> = {};
!extends PageTransitionEventInit EventInit;
<new EventInit> = <PageTransitionEventInit>;
<new PageTransitionEventInit> = {};
!extends ErrorEventInit EventInit;
<new EventInit> = <ErrorEventInit>;
<new ErrorEventInit> = {};
!extends PromiseRejectionEventInit EventInit;
<new EventInit> = <PromiseRejectionEventInit>;
<new PromiseRejectionEventInit> = {promise:<Promise_any_>};
<new ImageBitmapOptions> = {};
!extends MessageEventInit EventInit;
<new EventInit> = <MessageEventInit>;
<new MessageEventInit> = {};
<new EventSourceInit> = {};
<new StructuredSerializeOptions> = {};
<new WorkerOptions> = {};
<new WorkletOptions> = {};
!extends StorageEventInit EventInit;
<new EventInit> = <StorageEventInit>;
<new StorageEventInit> = {};
<new IdleOptions> = {};
<new PhotoCapabilities> = {};
<new PhotoSettings> = {};
<new MediaSettingsRange> = {};
<new MediaTrackSupportedConstraints> = {};
<new MediaTrackCapabilities> = {};
<new MediaTrackConstraintSet> = {};
<new MediaTrackSettings> = {};
<new ConstrainPoint2DParameters> = {};
<new Point2D> = {};
<new ImageResource> = {src:<USVString>};
<new InkPresenterParam> = {};
<new InkTrailStyle> = {color:<DOMString>,diameter:<unrestricted_double>};
<new InputDeviceCapabilitiesInit> = {};
<new UIEventInit> = {};
<new InputEventInit> = {};
<new IntersectionObserverEntryInit> = {time:<DOMHighResTimeStamp>,rootBounds:<DOMRectInit>,boundingClientRect:<DOMRectInit>,intersectionRect:<DOMRectInit>,isIntersecting:<boolean>,intersectionRatio:<double>,target:<Element>};
<new IntersectionObserverInit> = {};
<new IsInputPendingOptions> = {};
<new sequence_ProfilerResource_> = [<ProfilerResource>];
<new ProfilerResource> = <sequence_ProfilerResource_>[0];
<new sequence_ProfilerFrame_> = [<ProfilerFrame>];
<new ProfilerFrame> = <sequence_ProfilerFrame_>[0];
<new sequence_ProfilerStack_> = [<ProfilerStack>];
<new ProfilerStack> = <sequence_ProfilerStack_>[0];
<new sequence_ProfilerSample_> = [<ProfilerSample>];
<new ProfilerSample> = <sequence_ProfilerSample_>[0];
<new ProfilerTrace> = {resources:<sequence_ProfilerResource_>,frames:<sequence_ProfilerFrame_>,stacks:<sequence_ProfilerStack_>,samples:<sequence_ProfilerSample_>};
<new ProfilerSample> = {timestamp:<DOMHighResTimeStamp>};
<new ProfilerStack> = {frameId:<unsigned_long_long>};
<new ProfilerFrame> = {name:<DOMString>};
<new ProfilerInitOptions> = {sampleInterval:<DOMHighResTimeStamp>,maxBufferSize:<unsigned_long>};
<new QueryOptions> = {};
!extends MagnetometerSensorOptions SensorOptions;
<new SensorOptions> = <MagnetometerSensorOptions>;
<new MagnetometerSensorOptions> = {};
<new MagnetometerReadingValues> = {x:<double>,y:<double>,z:<double>};
<new UncalibratedMagnetometerReadingValues> = {x:<double>,y:<double>,z:<double>,xBias:<double>,yBias:<double>,zBias:<double>};
<new PromptResponseObject> = {};
<new MediaConfiguration> = {};
!extends MediaDecodingConfiguration MediaConfiguration;
<new MediaConfiguration> = <MediaDecodingConfiguration>;
<new MediaDecodingConfiguration> = {type:<MediaDecodingType>};
!extends MediaEncodingConfiguration MediaConfiguration;
<new MediaConfiguration> = <MediaEncodingConfiguration>;
<new MediaEncodingConfiguration> = {type:<MediaEncodingType>};
<new VideoConfiguration> = {contentType:<DOMString>,width:<unsigned_long>,height:<unsigned_long>,bitrate:<unsigned_long_long>,framerate:<double>};
<new AudioConfiguration> = {contentType:<DOMString>};
<new MediaCapabilitiesKeySystemConfiguration> = {keySystem:<DOMString>};
<new KeySystemTrackConfiguration> = {};
<new MediaCapabilitiesInfo> = {supported:<boolean>,smooth:<boolean>,powerEfficient:<boolean>};
!extends MediaCapabilitiesDecodingInfo MediaCapabilitiesInfo;
<new MediaCapabilitiesInfo> = <MediaCapabilitiesDecodingInfo>;
<new MediaCapabilitiesDecodingInfo> = {keySystemAccess:<MediaKeySystemAccess>};
!extends MediaCapabilitiesEncodingInfo MediaCapabilitiesInfo;
<new MediaCapabilitiesInfo> = <MediaCapabilitiesEncodingInfo>;
<new MediaCapabilitiesEncodingInfo> = {};
<new MockCapturePromptResultConfiguration> = {};
<new MockCaptureDeviceConfiguration> = {};
!extends MockCameraConfiguration MockCaptureDeviceConfiguration;
<new MockCaptureDeviceConfiguration> = <MockCameraConfiguration>;
<new MockCameraConfiguration> = {};
!extends MockMicrophoneConfiguration MockCaptureDeviceConfiguration;
<new MockCaptureDeviceConfiguration> = <MockMicrophoneConfiguration>;
<new MockMicrophoneConfiguration> = {};
!extends CaptureActionEventInit EventInit;
<new EventInit> = <CaptureActionEventInit>;
<new CaptureActionEventInit> = {};
!extends MediaTrackConstraints MediaTrackConstraintSet;
<new MediaTrackConstraintSet> = <MediaTrackConstraints>;
<new MediaTrackConstraints> = {};
!extends MediaStreamTrackEventInit EventInit;
<new EventInit> = <MediaStreamTrackEventInit>;
<new MediaStreamTrackEventInit> = {track:<MediaStreamTrack>};
<new MediaStreamConstraints> = {};
<new DoubleRange> = {};
!extends ConstrainDoubleRange DoubleRange;
<new DoubleRange> = <ConstrainDoubleRange>;
<new ConstrainDoubleRange> = {};
<new ULongRange> = {};
!extends ConstrainULongRange ULongRange;
<new ULongRange> = <ConstrainULongRange>;
<new ConstrainULongRange> = {};
<new ConstrainBooleanParameters> = {};
<new ConstrainDOMStringParameters> = {};
!extends DevicePermissionDescriptor PermissionDescriptor;
<new PermissionDescriptor> = <DevicePermissionDescriptor>;
<new DevicePermissionDescriptor> = {};
!extends CameraDevicePermissionDescriptor DevicePermissionDescriptor;
<new DevicePermissionDescriptor> = <CameraDevicePermissionDescriptor>;
<new CameraDevicePermissionDescriptor> = {};
<new MediaStreamTrackProcessorInit> = {track:<MediaStreamTrack>};
<new ViewportMediaStreamConstraints> = {};
<new MediaMetadataInit> = {};
<new MediaImage> = {src:<USVString>};
<new MediaPositionState> = {};
<new MediaSessionActionDetails> = {action:<MediaSessionAction>};
<new MediaRecorderOptions> = {};
<new BlobEventInit> = {data:<Blob>};
<new RTCRtpSendParameters> = {};
<new NavigationUpdateCurrentEntryOptions> = {state:<any>};
<new NavigationOptions> = {};
!extends NavigationNavigateOptions NavigationOptions;
<new NavigationOptions> = <NavigationNavigateOptions>;
<new NavigationNavigateOptions> = {};
!extends NavigationReloadOptions NavigationOptions;
<new NavigationOptions> = <NavigationReloadOptions>;
<new NavigationReloadOptions> = {};
<new NavigationResult> = {};
!extends NavigationCurrentEntryChangeEventInit EventInit;
<new EventInit> = <NavigationCurrentEntryChangeEventInit>;
<new NavigationCurrentEntryChangeEventInit> = {destination:<NavigationHistoryEntry>};
!extends NavigateEventInit EventInit;
<new EventInit> = <NavigateEventInit>;
<new NavigateEventInit> = {destination:<NavigationDestination>,signal:<AbortSignal>};
<new NavigationInterceptOptions> = {};
<new NotificationOptions> = {};
<new NotificationAction> = {action:<DOMString>,title:<DOMString>};
<new GetNotificationOptions> = {};
!extends NotificationEventInit ExtendableEventInit;
<new ExtendableEventInit> = <NotificationEventInit>;
<new NotificationEventInit> = {notification:<Notification>};
!extends DeviceOrientationEventInit EventInit;
<new EventInit> = <DeviceOrientationEventInit>;
<new DeviceOrientationEventInit> = {};
<new DeviceMotionEventAccelerationInit> = {};
<new DeviceMotionEventRotationRateInit> = {};
!extends DeviceMotionEventInit EventInit;
<new EventInit> = <DeviceMotionEventInit>;
<new DeviceMotionEventInit> = {};
!extends OrientationSensorOptions SensorOptions;
<new SensorOptions> = <OrientationSensorOptions>;
<new OrientationSensorOptions> = {};
<new AbsoluteOrientationReadingValues> = {quaternion:<FrozenArray_double_>};
!extends RelativeOrientationReadingValues AbsoluteOrientationReadingValues;
<new AbsoluteOrientationReadingValues> = <RelativeOrientationReadingValues>;
<new RelativeOrientationReadingValues> = {};
<new PaymentRequestDetailsUpdate> = {};
!extends PaymentRequestEventInit ExtendableEventInit;
<new ExtendableEventInit> = <PaymentRequestEventInit>;
<new PaymentRequestEventInit> = {};
<new PaymentHandlerResponse> = {};
<new AddressInit> = {};
<new PaymentOptions> = {};
<new PaymentShippingOption> = {id:<DOMString>,label:<DOMString>,amount:<PaymentCurrencyAmount>};
<new AddressErrors> = {};
<new PaymentMethodData> = {supportedMethods:<DOMString>};
<new PaymentCurrencyAmount> = {currency:<DOMString>,value:<DOMString>};
<new PaymentDetailsBase> = {};
!extends PaymentDetailsInit PaymentDetailsBase;
<new PaymentDetailsBase> = <PaymentDetailsInit>;
<new PaymentDetailsInit> = {total:<PaymentItem>};
!extends PaymentDetailsUpdate PaymentDetailsBase;
<new PaymentDetailsBase> = <PaymentDetailsUpdate>;
<new PaymentDetailsUpdate> = {};
<new PaymentDetailsModifier> = {supportedMethods:<DOMString>};
<new PaymentItem> = {label:<DOMString>,amount:<PaymentCurrencyAmount>};
<new PaymentCompleteDetails> = {};
<new PaymentValidationErrors> = {};
!extends PaymentMethodChangeEventInit PaymentRequestUpdateEventInit;
<new PaymentRequestUpdateEventInit> = <PaymentMethodChangeEventInit>;
<new PaymentMethodChangeEventInit> = {};
!extends PaymentRequestUpdateEventInit EventInit;
<new EventInit> = <PaymentRequestUpdateEventInit>;
<new PaymentRequestUpdateEventInit> = {};
<new MemoryMeasurement> = {};
<new MemoryBreakdownEntry> = {};
<new MemoryAttribution> = {};
<new MemoryAttributionContainer> = {};
<new PerformanceObserverCallbackOptions> = {};
<new BackgroundSyncOptions> = {};
!extends PeriodicSyncEventInit ExtendableEventInit;
<new ExtendableEventInit> = <PeriodicSyncEventInit>;
<new PeriodicSyncEventInit> = {tag:<DOMString>};
<new PermissionDescriptor> = {name:<DOMString>};
<new PermissionSetParameters> = {descriptor:<PermissionDescriptor>,state:<PermissionState>};
!extends PictureInPictureEventInit EventInit;
<new EventInit> = <PictureInPictureEventInit>;
<new PictureInPictureEventInit> = {pictureInPictureWindow:<PictureInPictureWindow>};
!extends PointerEventInit MouseEventInit;
<new MouseEventInit> = <PointerEventInit>;
<new PointerEventInit> = {};
<new MouseEventInit> = {};
!extends PortalActivateOptions StructuredSerializeOptions;
<new StructuredSerializeOptions> = <PortalActivateOptions>;
<new PortalActivateOptions> = {};
!extends PortalActivateEventInit EventInit;
<new EventInit> = <PortalActivateEventInit>;
<new PortalActivateEventInit> = {};
!extends PresentationConnectionAvailableEventInit EventInit;
<new EventInit> = <PresentationConnectionAvailableEventInit>;
<new PresentationConnectionAvailableEventInit> = {connection:<PresentationConnection>};
!extends PresentationConnectionCloseEventInit EventInit;
<new EventInit> = <PresentationConnectionCloseEventInit>;
<new PresentationConnectionCloseEventInit> = {reason:<PresentationConnectionCloseReason>};
<new ProximityReadingValues> = {distance:<double>,max:<double>,near:<boolean>};
!extends PushPermissionDescriptor PermissionDescriptor;
<new PermissionDescriptor> = <PushPermissionDescriptor>;
<new PushPermissionDescriptor> = {};
<new PushSubscriptionOptionsInit> = {};
<new PushSubscriptionJSON> = {};
!extends PushEventInit ExtendableEventInit;
<new ExtendableEventInit> = <PushEventInit>;
<new PushEventInit> = {};
!extends PushSubscriptionChangeEventInit ExtendableEventInit;
<new ExtendableEventInit> = <PushSubscriptionChangeEventInit>;
<new PushSubscriptionChangeEventInit> = {};
<new ReportingObserverOptions> = {};
<new GenerateTestReportParameters> = {message:<DOMString>};
<new IdleRequestOptions> = {};
<new ResizeObserverOptions> = {};
<new SetHTMLOptions> = {};
<new SanitizerConfig> = {};
<new SchedulerPostTaskOptions> = {};
!extends TaskPriorityChangeEventInit EventInit;
<new EventInit> = <TaskPriorityChangeEventInit>;
<new TaskPriorityChangeEventInit> = {previousPriority:<TaskPriority>};
<new TaskControllerInit> = {};
<new DisplayMediaStreamOptions> = {};
<new ScrollTimelineOptions> = {};
<new ViewTimelineOptions> = {};
<new sequence_BufferSource_> = [<BufferSource>];
<new BufferSource> = <sequence_BufferSource_>[0];
<new SecurePaymentConfirmationRequest> = {challenge:<BufferSource>,rpId:<USVString>,credentialIds:<sequence_BufferSource_>,instrument:<PaymentCredentialInstrument>};
<new AuthenticationExtensionsPaymentInputs> = {};
!extends CollectedClientPaymentData CollectedClientData;
<new CollectedClientData> = <CollectedClientPaymentData>;
<new CollectedClientPaymentData> = {payment:<CollectedClientAdditionalPaymentData>};
<new CollectedClientAdditionalPaymentData> = {rpId:<USVString>,topOrigin:<USVString>,total:<PaymentCurrencyAmount>,instrument:<PaymentCredentialInstrument>};
<new PaymentCredentialInstrument> = {displayName:<USVString>,icon:<USVString>};
<new SerialPortRequestOptions> = {};
<new SerialPortFilter> = {};
<new SerialPortInfo> = {};
<new SerialOptions> = {baudRate:<unsigned_long>};
<new SerialOutputSignals> = {};
<new SerialInputSignals> = {dataCarrierDetect:<boolean>,clearToSend:<boolean>,ringIndicator:<boolean>,dataSetReady:<boolean>};
<new RegistrationOptions> = {};
<new NavigationPreloadState> = {};
<new ClientQueryOptions> = {};
!extends ExtendableEventInit EventInit;
<new EventInit> = <ExtendableEventInit>;
<new ExtendableEventInit> = {};
!extends FetchEventInit ExtendableEventInit;
<new ExtendableEventInit> = <FetchEventInit>;
<new FetchEventInit> = {request:<Request>};
!extends ExtendableMessageEventInit ExtendableEventInit;
<new ExtendableEventInit> = <ExtendableMessageEventInit>;
<new ExtendableMessageEventInit> = {};
<new CacheQueryOptions> = {};
!extends MultiCacheQueryOptions CacheQueryOptions;
<new CacheQueryOptions> = <MultiCacheQueryOptions>;
<new MultiCacheQueryOptions> = {};
<new FaceDetectorOptions> = {};
<new FrozenArray_Landmark_> = [<Landmark>];
<new Landmark> = <FrozenArray_Landmark_>[0];
<new DetectedFace> = {boundingBox:<DOMRectReadOnly>,landmarks:<FrozenArray_Landmark_>};
<new FrozenArray_Point2D_> = [<Point2D>];
<new Point2D> = <FrozenArray_Point2D_>[0];
<new Landmark> = {locations:<FrozenArray_Point2D_>};
<new BarcodeDetectorOptions> = {};
<new DetectedBarcode> = {boundingBox:<DOMRectReadOnly>,rawValue:<DOMString>,format:<BarcodeFormat>,cornerPoints:<FrozenArray_Point2D_>};
!extends SpeechRecognitionErrorEventInit EventInit;
<new EventInit> = <SpeechRecognitionErrorEventInit>;
<new SpeechRecognitionErrorEventInit> = {error:<SpeechRecognitionErrorCode>};
!extends SpeechRecognitionEventInit EventInit;
<new EventInit> = <SpeechRecognitionEventInit>;
<new SpeechRecognitionEventInit> = {results:<SpeechRecognitionResultList>};
!extends SpeechSynthesisEventInit EventInit;
<new EventInit> = <SpeechSynthesisEventInit>;
<new SpeechSynthesisEventInit> = {utterance:<SpeechSynthesisUtterance>};
!extends SpeechSynthesisErrorEventInit SpeechSynthesisEventInit;
<new SpeechSynthesisEventInit> = <SpeechSynthesisErrorEventInit>;
<new SpeechSynthesisErrorEventInit> = {error:<SpeechSynthesisErrorCode>};
<new StorageEstimate> = {};
<new ReadableStreamGetReaderOptions> = {};
<new ReadableStreamIteratorOptions> = {};
<new ReadableWritablePair> = {readable:<ReadableStream>,writable:<WritableStream>};
<new StreamPipeOptions> = {};
<new UnderlyingSource> = {};
<new ReadableStreamReadResult> = {};
<new UnderlyingSink> = {};
<new Transformer> = {};
<new QueuingStrategy> = {};
<new QueuingStrategyInit> = {highWaterMark:<unrestricted_double>};
<new DetectedText> = {boundingBox:<DOMRectReadOnly>,rawValue:<DOMString>,cornerPoints:<FrozenArray_Point2D_>};
<new TouchInit> = {identifier:<long>,target:<EventTarget>};
!extends TouchEventInit EventModifierInit;
<new EventModifierInit> = <TouchEventInit>;
<new TouchEventInit> = {};
<new TrustedTypePolicyOptions> = {};
<new NavigatorUABrandVersion> = {};
<new UADataValues> = {};
<new UALowEntropyJSON> = {};
!extends UIEventInit EventInit;
<new EventInit> = <UIEventInit>;
!extends FocusEventInit UIEventInit;
<new UIEventInit> = <FocusEventInit>;
<new FocusEventInit> = {};
!extends MouseEventInit EventModifierInit;
<new EventModifierInit> = <MouseEventInit>;
!extends EventModifierInit UIEventInit;
<new UIEventInit> = <EventModifierInit>;
<new EventModifierInit> = {};
!extends WheelEventInit MouseEventInit;
<new MouseEventInit> = <WheelEventInit>;
<new WheelEventInit> = {};
!extends InputEventInit UIEventInit;
<new UIEventInit> = <InputEventInit>;
!extends KeyboardEventInit EventModifierInit;
<new EventModifierInit> = <KeyboardEventInit>;
<new KeyboardEventInit> = {};
!extends CompositionEventInit UIEventInit;
<new UIEventInit> = <CompositionEventInit>;
<new CompositionEventInit> = {};
<new URLPatternInit> = {};
<new URLPatternOptions> = {};
<new URLPatternResult> = {};
<new URLPatternComponentResult> = {};
<new PerformanceMarkOptions> = {};
<new PerformanceMeasureOptions> = {};
<new VideoFrameCallbackMetadata> = {presentationTime:<DOMHighResTimeStamp>,expectedDisplayTime:<DOMHighResTimeStamp>,width:<unsigned_long>,height:<unsigned_long>,mediaTime:<double>,presentedFrames:<unsigned_long>};
<new WebAssemblyInstantiatedSource> = {module:<Module>,instance:<Instance>};
<new ModuleExportDescriptor> = {name:<USVString>,kind:<ImportExportKind>};
<new ModuleImportDescriptor> = {module:<USVString>,name:<USVString>,kind:<ImportExportKind>};
<new MemoryDescriptor> = {initial:<unsigned_long>};
<new TableDescriptor> = {element:<TableKind>,initial:<unsigned_long>};
<new GlobalDescriptor> = {value:<ValueType>};
<new EffectTiming> = {};
<new OptionalEffectTiming> = {};
<new ComputedEffectTiming> = {};
<new KeyframeEffectOptions> = {};
!extends AnimationPlaybackEventInit EventInit;
<new EventInit> = <AnimationPlaybackEventInit>;
<new AnimationPlaybackEventInit> = {};
<new DocumentTimelineOptions> = {};
!extends ComputedEffectTiming EffectTiming;
<new EffectTiming> = <ComputedEffectTiming>;
<new BaseComputedKeyframe> = {};
<new BasePropertyIndexedKeyframe> = {};
<new BaseKeyframe> = {};
!extends KeyframeEffectOptions EffectTiming;
<new EffectTiming> = <KeyframeEffectOptions>;
!extends KeyframeAnimationOptions KeyframeEffectOptions;
<new KeyframeEffectOptions> = <KeyframeAnimationOptions>;
<new KeyframeAnimationOptions> = {};
<new GetAnimationsOptions> = {};
<new BluetoothDataFilterInit> = {};
!extends BluetoothManufacturerDataFilterInit BluetoothDataFilterInit;
<new BluetoothDataFilterInit> = <BluetoothManufacturerDataFilterInit>;
<new BluetoothManufacturerDataFilterInit> = {companyIdentifier:<unsigned_short>};
!extends BluetoothServiceDataFilterInit BluetoothDataFilterInit;
<new BluetoothDataFilterInit> = <BluetoothServiceDataFilterInit>;
<new BluetoothServiceDataFilterInit> = {service:<BluetoothServiceUUID>};
<new BluetoothLEScanFilterInit> = {};
<new RequestDeviceOptions> = {};
!extends BluetoothPermissionDescriptor PermissionDescriptor;
<new PermissionDescriptor> = <BluetoothPermissionDescriptor>;
<new BluetoothPermissionDescriptor> = {};
<new sequence_UUID_> = [<UUID>];
<new UUID> = <sequence_UUID_>[0];
<new union_DOMString1sequence_UUID__> = <DOMString>;
<new union_DOMString1sequence_UUID__> = <sequence_UUID_>;
<new sequence_unsigned_short_> = [<unsigned_short>];
<new unsigned_short> = <sequence_unsigned_short_>[0];
<new AllowedBluetoothDevice> = {deviceId:<DOMString>,mayUseGATT:<boolean>,allowedServices:<union_DOMString1sequence_UUID__>,allowedManufacturerData:<sequence_unsigned_short_>};
<new sequence_AllowedBluetoothDevice_> = [<AllowedBluetoothDevice>];
<new AllowedBluetoothDevice> = <sequence_AllowedBluetoothDevice_>[0];
<new BluetoothPermissionStorage> = {allowedDevices:<sequence_AllowedBluetoothDevice_>};
!extends ValueEventInit EventInit;
<new EventInit> = <ValueEventInit>;
<new ValueEventInit> = {};
<new WatchAdvertisementsOptions> = {};
!extends BluetoothAdvertisingEventInit EventInit;
<new EventInit> = <BluetoothAdvertisingEventInit>;
<new BluetoothAdvertisingEventInit> = {device:<BluetoothDevice>};
<new LockOptions> = {};
<new LockManagerSnapshot> = {};
<new LockInfo> = {};
<new sequence_NDEFRecordInit_> = [<NDEFRecordInit>];
<new NDEFRecordInit> = <sequence_NDEFRecordInit_>[0];
<new NDEFMessageInit> = {records:<sequence_NDEFRecordInit_>};
<new NDEFRecordInit> = {recordType:<USVString>};
!extends NDEFReadingEventInit EventInit;
<new EventInit> = <NDEFReadingEventInit>;
<new NDEFReadingEventInit> = {message:<NDEFMessageInit>};
<new NDEFWriteOptions> = {};
<new NDEFMakeReadOnlyOptions> = {};
<new NDEFScanOptions> = {};
<new OTPCredentialRequestOptions> = {};
<new ShareData> = {};
<new AudioContextOptions> = {};
<new AudioSinkOptions> = {type:<AudioSinkType>};
<new AudioTimestamp> = {};
<new AudioRenderCapacityOptions> = {};
!extends AudioRenderCapacityEventInit EventInit;
<new EventInit> = <AudioRenderCapacityEventInit>;
<new AudioRenderCapacityEventInit> = {};
<new OfflineAudioContextOptions> = {length:<unsigned_long>,sampleRate:<float>};
!extends OfflineAudioCompletionEventInit EventInit;
<new EventInit> = <OfflineAudioCompletionEventInit>;
<new OfflineAudioCompletionEventInit> = {renderedBuffer:<AudioBuffer>};
<new AudioBufferOptions> = {length:<unsigned_long>,sampleRate:<float>};
<new AudioNodeOptions> = {};
!extends AnalyserOptions AudioNodeOptions;
<new AudioNodeOptions> = <AnalyserOptions>;
<new AnalyserOptions> = {};
<new AudioBufferSourceOptions> = {};
!extends AudioProcessingEventInit EventInit;
<new EventInit> = <AudioProcessingEventInit>;
<new AudioProcessingEventInit> = {playbackTime:<double>,inputBuffer:<AudioBuffer>,outputBuffer:<AudioBuffer>};
!extends BiquadFilterOptions AudioNodeOptions;
<new AudioNodeOptions> = <BiquadFilterOptions>;
<new BiquadFilterOptions> = {};
!extends ChannelMergerOptions AudioNodeOptions;
<new AudioNodeOptions> = <ChannelMergerOptions>;
<new ChannelMergerOptions> = {};
!extends ChannelSplitterOptions AudioNodeOptions;
<new AudioNodeOptions> = <ChannelSplitterOptions>;
<new ChannelSplitterOptions> = {};
<new ConstantSourceOptions> = {};
!extends ConvolverOptions AudioNodeOptions;
<new AudioNodeOptions> = <ConvolverOptions>;
<new ConvolverOptions> = {};
!extends DelayOptions AudioNodeOptions;
<new AudioNodeOptions> = <DelayOptions>;
<new DelayOptions> = {};
!extends DynamicsCompressorOptions AudioNodeOptions;
<new AudioNodeOptions> = <DynamicsCompressorOptions>;
<new DynamicsCompressorOptions> = {};
!extends GainOptions AudioNodeOptions;
<new AudioNodeOptions> = <GainOptions>;
<new GainOptions> = {};
!extends IIRFilterOptions AudioNodeOptions;
<new AudioNodeOptions> = <IIRFilterOptions>;
<new IIRFilterOptions> = {feedforward:<sequence_double_>,feedback:<sequence_double_>};
<new MediaElementAudioSourceOptions> = {mediaElement:<HTMLMediaElement>};
<new MediaStreamAudioSourceOptions> = {mediaStream:<MediaStream>};
<new MediaStreamTrackAudioSourceOptions> = {mediaStreamTrack:<MediaStreamTrack>};
!extends OscillatorOptions AudioNodeOptions;
<new AudioNodeOptions> = <OscillatorOptions>;
<new OscillatorOptions> = {};
!extends PannerOptions AudioNodeOptions;
<new AudioNodeOptions> = <PannerOptions>;
<new PannerOptions> = {};
<new PeriodicWaveConstraints> = {};
!extends PeriodicWaveOptions PeriodicWaveConstraints;
<new PeriodicWaveConstraints> = <PeriodicWaveOptions>;
<new PeriodicWaveOptions> = {};
!extends StereoPannerOptions AudioNodeOptions;
<new AudioNodeOptions> = <StereoPannerOptions>;
<new StereoPannerOptions> = {};
!extends WaveShaperOptions AudioNodeOptions;
<new AudioNodeOptions> = <WaveShaperOptions>;
<new WaveShaperOptions> = {};
!extends AudioWorkletNodeOptions AudioNodeOptions;
<new AudioNodeOptions> = <AudioWorkletNodeOptions>;
<new AudioWorkletNodeOptions> = {};
<new AudioParamDescriptor> = {name:<DOMString>};
<new RegistrationResponseJSON> = {};
<new AuthenticatorAttestationResponseJSON> = {};
<new AuthenticationResponseJSON> = {};
<new AuthenticatorAssertionResponseJSON> = {};
<new AuthenticationExtensionsClientOutputsJSON> = {};
<new sequence_PublicKeyCredentialParameters_> = [<PublicKeyCredentialParameters>];
<new PublicKeyCredentialParameters> = <sequence_PublicKeyCredentialParameters_>[0];
<new PublicKeyCredentialCreationOptionsJSON> = {rp:<PublicKeyCredentialRpEntity>,user:<PublicKeyCredentialUserEntityJSON>,challenge:<Base64URLString>,pubKeyCredParams:<sequence_PublicKeyCredentialParameters_>};
<new PublicKeyCredentialUserEntityJSON> = {id:<Base64URLString>,name:<DOMString>,displayName:<DOMString>};
<new PublicKeyCredentialDescriptorJSON> = {id:<Base64URLString>,type:<DOMString>};
<new AuthenticationExtensionsClientInputsJSON> = {};
<new PublicKeyCredentialRequestOptionsJSON> = {challenge:<Base64URLString>};
<new PublicKeyCredentialParameters> = {type:<DOMString>,alg:<COSEAlgorithmIdentifier>};
<new PublicKeyCredentialCreationOptions> = {rp:<PublicKeyCredentialRpEntity>,user:<PublicKeyCredentialUserEntity>,challenge:<BufferSource>,pubKeyCredParams:<sequence_PublicKeyCredentialParameters_>};
<new PublicKeyCredentialEntity> = {name:<DOMString>};
!extends PublicKeyCredentialRpEntity PublicKeyCredentialEntity;
<new PublicKeyCredentialEntity> = <PublicKeyCredentialRpEntity>;
<new PublicKeyCredentialRpEntity> = {};
!extends PublicKeyCredentialUserEntity PublicKeyCredentialEntity;
<new PublicKeyCredentialEntity> = <PublicKeyCredentialUserEntity>;
<new PublicKeyCredentialUserEntity> = {id:<BufferSource>,displayName:<DOMString>};
<new AuthenticatorSelectionCriteria> = {};
<new PublicKeyCredentialRequestOptions> = {challenge:<BufferSource>};
<new CollectedClientData> = {type:<DOMString>,challenge:<DOMString>,origin:<DOMString>};
<new TokenBinding> = {status:<DOMString>};
<new PublicKeyCredentialDescriptor> = {type:<DOMString>,id:<BufferSource>};
<new CredentialPropertiesOutput> = {};
<new AuthenticationExtensionsPRFValues> = {first:<ArrayBuffer>};
<new AuthenticationExtensionsPRFInputs> = {};
<new AuthenticationExtensionsPRFOutputs> = {};
<new AuthenticationExtensionsLargeBlobInputs> = {};
<new AuthenticationExtensionsLargeBlobOutputs> = {};
<new AuthenticationExtensionsDevicePublicKeyInputs> = {};
<new AuthenticationExtensionsDevicePublicKeyOutputs> = {};
<new AudioEncoderConfig> = {};
<new AacEncoderConfig> = {};
<new VideoEncoderConfig> = {};
<new AvcEncoderConfig> = {};
<new FlacEncoderConfig> = {};
<new HevcEncoderConfig> = {};
<new OpusEncoderConfig> = {};
<new AudioDecoderInit> = {output:<AudioDataOutputCallback>,error:<WebCodecsErrorCallback>};
<new VideoDecoderInit> = {output:<VideoFrameOutputCallback>,error:<WebCodecsErrorCallback>};
<new AudioEncoderInit> = {output:<EncodedAudioChunkOutputCallback>,error:<WebCodecsErrorCallback>};
<new EncodedAudioChunkMetadata> = {};
<new VideoEncoderInit> = {output:<EncodedVideoChunkOutputCallback>,error:<WebCodecsErrorCallback>};
<new EncodedVideoChunkMetadata> = {};
<new SvcOutputMetadata> = {};
<new AudioDecoderSupport> = {};
<new VideoDecoderSupport> = {};
<new AudioEncoderSupport> = {};
<new VideoEncoderSupport> = {};
<new AudioDecoderConfig> = {codec:<DOMString>,sampleRate:<unsigned_long>,numberOfChannels:<unsigned_long>};
<new VideoDecoderConfig> = {codec:<DOMString>};
<new AudioEncoderConfig> = {codec:<DOMString>};
<new VideoEncoderConfig> = {codec:<DOMString>,width:<unsigned_long>,height:<unsigned_long>};
<new VideoEncoderEncodeOptions> = {};
<new EncodedAudioChunkInit> = {type:<EncodedAudioChunkType>,timestamp:<long_long>,data:<BufferSource>};
<new EncodedVideoChunkInit> = {type:<EncodedVideoChunkType>,timestamp:<long_long>,data:<BufferSource>};
<new AudioDataInit> = {format:<AudioSampleFormat>,sampleRate:<float>,numberOfFrames:<unsigned_long>,numberOfChannels:<unsigned_long>,timestamp:<long_long>,data:<BufferSource>};
<new AudioDataCopyToOptions> = {planeIndex:<unsigned_long>};
<new VideoFrameInit> = {};
<new VideoFrameBufferInit> = {format:<VideoPixelFormat>,codedWidth:<unsigned_long>,codedHeight:<unsigned_long>,timestamp:<long_long>};
<new VideoFrameMetadata> = {};
<new VideoFrameCopyToOptions> = {};
<new PlaneLayout> = {offset:<unsigned_long>,stride:<unsigned_long>};
<new VideoColorSpaceInit> = {};
<new ImageDecoderInit> = {type:<DOMString>,data:<ImageBufferSource>};
<new ImageDecodeOptions> = {};
<new ImageDecodeResult> = {image:<VideoFrame>,complete:<boolean>};
!extends Ed448Params Algorithm;
<new Algorithm> = <Ed448Params>;
<new Ed448Params> = {};
<new WebGLContextAttributes> = {};
!extends WebGLContextEventInit EventInit;
<new EventInit> = <WebGLContextEventInit>;
<new WebGLContextEventInit> = {};
<new GPUObjectDescriptorBase> = {};
<new GPURequestAdapterOptions> = {};
!extends GPUDeviceDescriptor GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPUDeviceDescriptor>;
<new GPUDeviceDescriptor> = {};
!extends GPUBufferDescriptor GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPUBufferDescriptor>;
<new GPUBufferDescriptor> = {size:<GPUSize64>,usage:<GPUBufferUsageFlags>};
!extends GPUTextureDescriptor GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPUTextureDescriptor>;
<new GPUTextureDescriptor> = {size:<GPUExtent3D>,format:<GPUTextureFormat>,usage:<GPUTextureUsageFlags>};
!extends GPUTextureViewDescriptor GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPUTextureViewDescriptor>;
<new GPUTextureViewDescriptor> = {};
!extends GPUExternalTextureDescriptor GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPUExternalTextureDescriptor>;
<new GPUExternalTextureDescriptor> = {source:<HTMLVideoElement>};
!extends GPUSamplerDescriptor GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPUSamplerDescriptor>;
<new GPUSamplerDescriptor> = {};
!extends GPUBindGroupLayoutDescriptor GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPUBindGroupLayoutDescriptor>;
<new sequence_GPUBindGroupLayoutEntry_> = [<GPUBindGroupLayoutEntry>];
<new GPUBindGroupLayoutEntry> = <sequence_GPUBindGroupLayoutEntry_>[0];
<new GPUBindGroupLayoutDescriptor> = {entries:<sequence_GPUBindGroupLayoutEntry_>};
<new GPUBindGroupLayoutEntry> = {binding:<GPUIndex32>,visibility:<GPUShaderStageFlags>};
<new GPUBufferBindingLayout> = {};
<new GPUSamplerBindingLayout> = {};
<new GPUTextureBindingLayout> = {};
<new GPUStorageTextureBindingLayout> = {format:<GPUTextureFormat>};
<new GPUExternalTextureBindingLayout> = {};
!extends GPUBindGroupDescriptor GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPUBindGroupDescriptor>;
<new sequence_GPUBindGroupEntry_> = [<GPUBindGroupEntry>];
<new GPUBindGroupEntry> = <sequence_GPUBindGroupEntry_>[0];
<new GPUBindGroupDescriptor> = {layout:<GPUBindGroupLayout>,entries:<sequence_GPUBindGroupEntry_>};
<new GPUBindGroupEntry> = {binding:<GPUIndex32>,resource:<GPUBindingResource>};
<new GPUBufferBinding> = {buffer:<GPUBuffer>};
!extends GPUPipelineLayoutDescriptor GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPUPipelineLayoutDescriptor>;
<new sequence_GPUBindGroupLayout_> = [<GPUBindGroupLayout>];
<new GPUBindGroupLayout> = <sequence_GPUBindGroupLayout_>[0];
<new GPUPipelineLayoutDescriptor> = {bindGroupLayouts:<sequence_GPUBindGroupLayout_>};
!extends GPUShaderModuleDescriptor GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPUShaderModuleDescriptor>;
<new GPUShaderModuleDescriptor> = {code:<USVString>};
<new GPUShaderModuleCompilationHint> = {};
<new GPUPipelineErrorInit> = {reason:<GPUPipelineErrorReason>};
!extends GPUPipelineDescriptorBase GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPUPipelineDescriptorBase>;
<new union_GPUPipelineLayout1GPUAutoLayoutMode_> = <GPUPipelineLayout>;
<new union_GPUPipelineLayout1GPUAutoLayoutMode_> = <GPUAutoLayoutMode>;
<new GPUPipelineDescriptorBase> = {layout:<union_GPUPipelineLayout1GPUAutoLayoutMode_>};
<new GPUProgrammableStage> = {module:<GPUShaderModule>,entryPoint:<USVString>};
!extends GPUComputePipelineDescriptor GPUPipelineDescriptorBase;
<new GPUPipelineDescriptorBase> = <GPUComputePipelineDescriptor>;
<new GPUComputePipelineDescriptor> = {compute:<GPUProgrammableStage>};
!extends GPURenderPipelineDescriptor GPUPipelineDescriptorBase;
<new GPUPipelineDescriptorBase> = <GPURenderPipelineDescriptor>;
<new GPURenderPipelineDescriptor> = {vertex:<GPUVertexState>};
<new GPUPrimitiveState> = {};
<new GPUMultisampleState> = {};
!extends GPUFragmentState GPUProgrammableStage;
<new GPUProgrammableStage> = <GPUFragmentState>;
<new sequence_GPUColorTargetState_> = [<GPUColorTargetState>];
<new GPUColorTargetState> = <sequence_GPUColorTargetState_>[0];
<new GPUFragmentState> = {targets:<sequence_GPUColorTargetState_>};
<new GPUColorTargetState> = {format:<GPUTextureFormat>};
<new GPUBlendState> = {color:<GPUBlendComponent>,alpha:<GPUBlendComponent>};
<new GPUBlendComponent> = {};
<new GPUDepthStencilState> = {format:<GPUTextureFormat>};
<new GPUStencilFaceState> = {};
!extends GPUVertexState GPUProgrammableStage;
<new GPUProgrammableStage> = <GPUVertexState>;
<new GPUVertexState> = {};
<new sequence_GPUVertexAttribute_> = [<GPUVertexAttribute>];
<new GPUVertexAttribute> = <sequence_GPUVertexAttribute_>[0];
<new GPUVertexBufferLayout> = {arrayStride:<GPUSize64>,attributes:<sequence_GPUVertexAttribute_>};
<new GPUVertexAttribute> = {format:<GPUVertexFormat>,offset:<GPUSize64>,shaderLocation:<GPUIndex32>};
<new GPUImageDataLayout> = {};
!extends GPUImageCopyBuffer GPUImageDataLayout;
<new GPUImageDataLayout> = <GPUImageCopyBuffer>;
<new GPUImageCopyBuffer> = {buffer:<GPUBuffer>};
<new GPUImageCopyTexture> = {texture:<GPUTexture>};
!extends GPUImageCopyTextureTagged GPUImageCopyTexture;
<new GPUImageCopyTexture> = <GPUImageCopyTextureTagged>;
<new GPUImageCopyTextureTagged> = {};
<new union_ImageBitmap1HTMLVideoElement1HTMLCanvasElement1OffscreenCanvas_> = <ImageBitmap>;
<new union_ImageBitmap1HTMLVideoElement1HTMLCanvasElement1OffscreenCanvas_> = <HTMLVideoElement>;
<new union_ImageBitmap1HTMLVideoElement1HTMLCanvasElement1OffscreenCanvas_> = <HTMLCanvasElement>;
<new union_ImageBitmap1HTMLVideoElement1HTMLCanvasElement1OffscreenCanvas_> = <OffscreenCanvas>;
<new GPUImageCopyExternalImage> = {source:<union_ImageBitmap1HTMLVideoElement1HTMLCanvasElement1OffscreenCanvas_>};
!extends GPUCommandBufferDescriptor GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPUCommandBufferDescriptor>;
<new GPUCommandBufferDescriptor> = {};
!extends GPUCommandEncoderDescriptor GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPUCommandEncoderDescriptor>;
<new GPUCommandEncoderDescriptor> = {};
<new GPUComputePassTimestampWrite> = {querySet:<GPUQuerySet>,queryIndex:<GPUSize32>,location:<GPUComputePassTimestampLocation>};
!extends GPUComputePassDescriptor GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPUComputePassDescriptor>;
<new GPUComputePassDescriptor> = {};
<new GPURenderPassTimestampWrite> = {querySet:<GPUQuerySet>,queryIndex:<GPUSize32>,location:<GPURenderPassTimestampLocation>};
!extends GPURenderPassDescriptor GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPURenderPassDescriptor>;
<new sequence_GPURenderPassColorAttachment_> = [<GPURenderPassColorAttachment>];
<new GPURenderPassColorAttachment> = <sequence_GPURenderPassColorAttachment_>[0];
<new GPURenderPassDescriptor> = {colorAttachments:<sequence_GPURenderPassColorAttachment_>};
<new GPURenderPassColorAttachment> = {view:<GPUTextureView>,loadOp:<GPULoadOp>,storeOp:<GPUStoreOp>};
<new GPURenderPassDepthStencilAttachment> = {view:<GPUTextureView>};
!extends GPURenderPassLayout GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPURenderPassLayout>;
<new sequence_GPUTextureFormat_> = [<GPUTextureFormat>];
<new GPUTextureFormat> = <sequence_GPUTextureFormat_>[0];
<new GPURenderPassLayout> = {colorFormats:<sequence_GPUTextureFormat_>};
!extends GPURenderBundleDescriptor GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPURenderBundleDescriptor>;
<new GPURenderBundleDescriptor> = {};
!extends GPURenderBundleEncoderDescriptor GPURenderPassLayout;
<new GPURenderPassLayout> = <GPURenderBundleEncoderDescriptor>;
<new GPURenderBundleEncoderDescriptor> = {};
!extends GPUQueueDescriptor GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPUQueueDescriptor>;
<new GPUQueueDescriptor> = {};
!extends GPUQuerySetDescriptor GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPUQuerySetDescriptor>;
<new GPUQuerySetDescriptor> = {type:<GPUQueryType>,count:<GPUSize32>};
<new GPUCanvasConfiguration> = {device:<GPUDevice>,format:<GPUTextureFormat>};
!extends GPUUncapturedErrorEventInit EventInit;
<new EventInit> = <GPUUncapturedErrorEventInit>;
<new GPUUncapturedErrorEventInit> = {error:<GPUError>};
<new GPUColorDict> = {r:<double>,g:<double>,b:<double>,a:<double>};
<new GPUOrigin2DDict> = {};
<new GPUOrigin3DDict> = {};
<new GPUExtent3DDict> = {width:<GPUIntegerCoordinate>};
<new sequence_HIDDeviceFilter_> = [<HIDDeviceFilter>];
<new HIDDeviceFilter> = <sequence_HIDDeviceFilter_>[0];
<new HIDDeviceRequestOptions> = {filters:<sequence_HIDDeviceFilter_>};
<new HIDDeviceFilter> = {};
!extends HIDConnectionEventInit EventInit;
<new EventInit> = <HIDConnectionEventInit>;
<new HIDConnectionEventInit> = {device:<HIDDevice>};
!extends HIDInputReportEventInit EventInit;
<new EventInit> = <HIDInputReportEventInit>;
<new HIDInputReportEventInit> = {device:<HIDDevice>,reportId:<octet>,data:<DataView>};
<new HIDCollectionInfo> = {};
<new HIDReportInfo> = {};
<new HIDReportItem> = {};
!extends MidiPermissionDescriptor PermissionDescriptor;
<new PermissionDescriptor> = <MidiPermissionDescriptor>;
<new MidiPermissionDescriptor> = {};
<new MIDIOptions> = {};
!extends MIDIMessageEventInit EventInit;
<new EventInit> = <MIDIMessageEventInit>;
<new MIDIMessageEventInit> = {};
!extends MIDIConnectionEventInit EventInit;
<new EventInit> = <MIDIConnectionEventInit>;
<new MIDIConnectionEventInit> = {};
<new MLContextOptions> = {};
<new MLOperandDescriptor> = {type:<MLOperandType>};
<new MLComputeResult> = {};
<new MLBufferResourceView> = {resource:<GPUBuffer>};
<new MLBatchNormalizationOptions> = {};
<new MLClampOptions> = {};
<new MLConv2dOptions> = {};
<new MLConvTranspose2dOptions> = {};
<new MLEluOptions> = {};
<new MLGemmOptions> = {};
<new MLGruOptions> = {};
<new MLGruCellOptions> = {};
<new MLHardSigmoidOptions> = {};
<new MLInstanceNormalizationOptions> = {};
<new MLLeakyReluOptions> = {};
<new MLLinearOptions> = {};
<new MLLstmOptions> = {};
<new MLLstmCellOptions> = {};
<new MLPadOptions> = {};
<new MLPool2dOptions> = {};
<new MLReduceOptions> = {};
<new MLResample2dOptions> = {};
<new MLSliceOptions> = {};
<new MLSoftplusOptions> = {};
<new MLSplitOptions> = {};
<new MLSqueezeOptions> = {};
<new MLTransposeOptions> = {};
<new SFrameTransformOptions> = {};
!extends SFrameTransformErrorEventInit EventInit;
<new EventInit> = <SFrameTransformErrorEventInit>;
<new SFrameTransformErrorEventInit> = {errorType:<SFrameTransformErrorEventType>,frame:<any>};
<new RTCEncodedVideoFrameMetadata> = {};
<new RTCEncodedAudioFrameMetadata> = {};
<new RTCIceParameters> = {};
<new RTCIceGatherOptions> = {};
<new RTCIdentityProvider> = {generateAssertion:<GenerateAssertionCallback>,validateAssertion:<ValidateAssertionCallback>};
<new RTCIdentityAssertionResult> = {idp:<RTCIdentityProviderDetails>,assertion:<DOMString>};
<new RTCIdentityProviderDetails> = {domain:<DOMString>};
<new RTCIdentityValidationResult> = {identity:<DOMString>,contents:<DOMString>};
<new RTCConfiguration> = {};
<new RTCIdentityProviderOptions> = {};
<new RTCErrorInit> = {};
<new RTCRtpEncodingParameters> = {};
<new RTCDataChannelInit> = {};
!extends RTCRtpStreamStats RTCStats;
<new RTCStats> = <RTCRtpStreamStats>;
<new RTCRtpStreamStats> = {ssrc:<unsigned_long>,kind:<DOMString>};
!extends RTCCodecStats RTCStats;
<new RTCStats> = <RTCCodecStats>;
<new RTCCodecStats> = {payloadType:<unsigned_long>,transportId:<DOMString>,mimeType:<DOMString>};
!extends RTCReceivedRtpStreamStats RTCRtpStreamStats;
<new RTCRtpStreamStats> = <RTCReceivedRtpStreamStats>;
<new RTCReceivedRtpStreamStats> = {};
!extends RTCInboundRtpStreamStats RTCReceivedRtpStreamStats;
<new RTCReceivedRtpStreamStats> = <RTCInboundRtpStreamStats>;
<new RTCInboundRtpStreamStats> = {trackIdentifier:<DOMString>,kind:<DOMString>};
!extends RTCRemoteInboundRtpStreamStats RTCReceivedRtpStreamStats;
<new RTCReceivedRtpStreamStats> = <RTCRemoteInboundRtpStreamStats>;
<new RTCRemoteInboundRtpStreamStats> = {};
!extends RTCSentRtpStreamStats RTCRtpStreamStats;
<new RTCRtpStreamStats> = <RTCSentRtpStreamStats>;
<new RTCSentRtpStreamStats> = {};
!extends RTCOutboundRtpStreamStats RTCSentRtpStreamStats;
<new RTCSentRtpStreamStats> = <RTCOutboundRtpStreamStats>;
<new RTCOutboundRtpStreamStats> = {};
!extends RTCRemoteOutboundRtpStreamStats RTCSentRtpStreamStats;
<new RTCSentRtpStreamStats> = <RTCRemoteOutboundRtpStreamStats>;
<new RTCRemoteOutboundRtpStreamStats> = {};
!extends RTCMediaSourceStats RTCStats;
<new RTCStats> = <RTCMediaSourceStats>;
<new RTCMediaSourceStats> = {trackIdentifier:<DOMString>,kind:<DOMString>};
!extends RTCAudioSourceStats RTCMediaSourceStats;
<new RTCMediaSourceStats> = <RTCAudioSourceStats>;
<new RTCAudioSourceStats> = {};
!extends RTCVideoSourceStats RTCMediaSourceStats;
<new RTCMediaSourceStats> = <RTCVideoSourceStats>;
<new RTCVideoSourceStats> = {};
!extends RTCAudioPlayoutStats RTCStats;
<new RTCStats> = <RTCAudioPlayoutStats>;
<new RTCAudioPlayoutStats> = {kind:<DOMString>};
!extends RTCPeerConnectionStats RTCStats;
<new RTCStats> = <RTCPeerConnectionStats>;
<new RTCPeerConnectionStats> = {};
!extends RTCDataChannelStats RTCStats;
<new RTCStats> = <RTCDataChannelStats>;
<new RTCDataChannelStats> = {state:<RTCDataChannelState>};
!extends RTCTransportStats RTCStats;
<new RTCStats> = <RTCTransportStats>;
<new RTCTransportStats> = {dtlsState:<RTCDtlsTransportState>};
!extends RTCIceCandidateStats RTCStats;
<new RTCStats> = <RTCIceCandidateStats>;
<new RTCIceCandidateStats> = {transportId:<DOMString>,candidateType:<RTCIceCandidateType>};
!extends RTCIceCandidatePairStats RTCStats;
<new RTCStats> = <RTCIceCandidatePairStats>;
<new RTCIceCandidatePairStats> = {transportId:<DOMString>,localCandidateId:<DOMString>,remoteCandidateId:<DOMString>,state:<RTCStatsIceCandidatePairState>};
!extends RTCCertificateStats RTCStats;
<new RTCStats> = <RTCCertificateStats>;
<new RTCCertificateStats> = {fingerprint:<DOMString>,fingerprintAlgorithm:<DOMString>,base64Certificate:<DOMString>};
<new RTCIceServer> = {urls:<union_DOMString1sequence_DOMString__>};
<new RTCOfferAnswerOptions> = {};
!extends RTCOfferOptions RTCOfferAnswerOptions;
<new RTCOfferAnswerOptions> = <RTCOfferOptions>;
<new RTCOfferOptions> = {};
!extends RTCAnswerOptions RTCOfferAnswerOptions;
<new RTCOfferAnswerOptions> = <RTCAnswerOptions>;
<new RTCAnswerOptions> = {};
<new RTCSessionDescriptionInit> = {type:<RTCSdpType>};
<new RTCLocalSessionDescriptionInit> = {};
<new RTCIceCandidateInit> = {};
!extends RTCPeerConnectionIceEventInit EventInit;
<new EventInit> = <RTCPeerConnectionIceEventInit>;
<new RTCPeerConnectionIceEventInit> = {};
!extends RTCPeerConnectionIceErrorEventInit EventInit;
<new EventInit> = <RTCPeerConnectionIceErrorEventInit>;
<new RTCPeerConnectionIceErrorEventInit> = {errorCode:<unsigned_short>};
<new RTCCertificateExpiration> = {};
<new RTCRtpTransceiverInit> = {};
<new sequence_RTCRtpHeaderExtensionParameters_> = [<RTCRtpHeaderExtensionParameters>];
<new RTCRtpHeaderExtensionParameters> = <sequence_RTCRtpHeaderExtensionParameters_>[0];
<new sequence_RTCRtpCodecParameters_> = [<RTCRtpCodecParameters>];
<new RTCRtpCodecParameters> = <sequence_RTCRtpCodecParameters_>[0];
<new RTCRtpParameters> = {headerExtensions:<sequence_RTCRtpHeaderExtensionParameters_>,rtcp:<RTCRtcpParameters>,codecs:<sequence_RTCRtpCodecParameters_>};
!extends RTCRtpSendParameters RTCRtpParameters;
<new RTCRtpParameters> = <RTCRtpSendParameters>;
<new sequence_RTCRtpEncodingParameters_> = [<RTCRtpEncodingParameters>];
<new RTCRtpEncodingParameters> = <sequence_RTCRtpEncodingParameters_>[0];
<new RTCRtpSendParameters> = {transactionId:<DOMString>,encodings:<sequence_RTCRtpEncodingParameters_>};
!extends RTCRtpReceiveParameters RTCRtpParameters;
<new RTCRtpParameters> = <RTCRtpReceiveParameters>;
<new RTCRtpReceiveParameters> = {};
<new RTCRtpCodingParameters> = {};
!extends RTCRtpEncodingParameters RTCRtpCodingParameters;
<new RTCRtpCodingParameters> = <RTCRtpEncodingParameters>;
<new RTCRtcpParameters> = {};
<new RTCRtpHeaderExtensionParameters> = {uri:<DOMString>,id:<unsigned_short>};
<new RTCRtpCodecParameters> = {payloadType:<octet>,mimeType:<DOMString>,clockRate:<unsigned_long>};
<new sequence_RTCRtpHeaderExtensionCapability_> = [<RTCRtpHeaderExtensionCapability>];
<new RTCRtpHeaderExtensionCapability> = <sequence_RTCRtpHeaderExtensionCapability_>[0];
<new RTCRtpCapabilities> = {codecs:<sequence_RTCRtpCodecCapability_>,headerExtensions:<sequence_RTCRtpHeaderExtensionCapability_>};
<new RTCRtpCodecCapability> = {mimeType:<DOMString>,clockRate:<unsigned_long>};
<new RTCRtpHeaderExtensionCapability> = {};
<new RTCRtpContributingSource> = {timestamp:<DOMHighResTimeStamp>,source:<unsigned_long>,rtpTimestamp:<unsigned_long>};
!extends RTCRtpSynchronizationSource RTCRtpContributingSource;
<new RTCRtpContributingSource> = <RTCRtpSynchronizationSource>;
<new RTCRtpSynchronizationSource> = {};
<new RTCDtlsFingerprint> = {};
<new RTCIceCandidatePair> = {};
!extends RTCTrackEventInit EventInit;
<new EventInit> = <RTCTrackEventInit>;
<new RTCTrackEventInit> = {receiver:<RTCRtpReceiver>,track:<MediaStreamTrack>,transceiver:<RTCRtpTransceiver>};
!extends RTCDataChannelEventInit EventInit;
<new EventInit> = <RTCDataChannelEventInit>;
<new RTCDataChannelEventInit> = {channel:<RTCDataChannel>};
!extends RTCDTMFToneChangeEventInit EventInit;
<new EventInit> = <RTCDTMFToneChangeEventInit>;
<new RTCDTMFToneChangeEventInit> = {};
<new RTCStats> = {timestamp:<DOMHighResTimeStamp>,type:<RTCStatsType>,id:<DOMString>};
<new RTCErrorInit> = {errorDetail:<RTCErrorDetailType>};
!extends RTCErrorEventInit EventInit;
<new EventInit> = <RTCErrorEventInit>;
<new RTCErrorEventInit> = {error:<RTCError>};
!extends CloseEventInit EventInit;
<new EventInit> = <CloseEventInit>;
<new CloseEventInit> = {};
<new WebTransportHash> = {};
<new WebTransportOptions> = {};
<new WebTransportCloseInfo> = {};
<new WebTransportSendStreamOptions> = {};
<new WebTransportStats> = {};
<new WebTransportDatagramStats> = {};
<new WebTransportSendStreamStats> = {};
<new WebTransportReceiveStreamStats> = {};
<new WebTransportErrorInit> = {};
<new USBDeviceFilter> = {};
<new sequence_USBDeviceFilter_> = [<USBDeviceFilter>];
<new USBDeviceFilter> = <sequence_USBDeviceFilter_>[0];
<new USBDeviceRequestOptions> = {filters:<sequence_USBDeviceFilter_>};
!extends USBConnectionEventInit EventInit;
<new EventInit> = <USBConnectionEventInit>;
<new USBConnectionEventInit> = {device:<USBDevice>};
<new USBControlTransferParameters> = {requestType:<USBRequestType>,recipient:<USBRecipient>,request:<octet>,value:<unsigned_short>,index:<unsigned_short>};
!extends USBPermissionDescriptor PermissionDescriptor;
<new PermissionDescriptor> = <USBPermissionDescriptor>;
<new USBPermissionDescriptor> = {};
<new AllowedUSBDevice> = {vendorId:<octet>,productId:<octet>};
<new USBPermissionStorage> = {};
<new sequence_XRDepthUsage_> = [<XRDepthUsage>];
<new XRDepthUsage> = <sequence_XRDepthUsage_>[0];
<new sequence_XRDepthDataFormat_> = [<XRDepthDataFormat>];
<new XRDepthDataFormat> = <sequence_XRDepthDataFormat_>[0];
<new XRDepthStateInit> = {usagePreference:<sequence_XRDepthUsage_>,dataFormatPreference:<sequence_XRDepthDataFormat_>};
<new XRSessionInit> = {};
<new XRDOMOverlayInit> = {root:<Element>};
<new XRDOMOverlayState> = {};
<new XRHitTestOptionsInit> = {space:<XRSpace>};
<new XRTransientInputHitTestOptionsInit> = {profile:<DOMString>};
<new XRRayDirectionInit> = {};
<new XRLightProbeInit> = {};
<new XRRenderStateInit> = {};
<new XRWebGLLayerInit> = {};
!extends XRSessionEventInit EventInit;
<new EventInit> = <XRSessionEventInit>;
<new XRSessionEventInit> = {session:<XRSession>};
!extends XRInputSourceEventInit EventInit;
<new EventInit> = <XRInputSourceEventInit>;
<new XRInputSourceEventInit> = {frame:<XRFrame>,inputSource:<XRInputSource>};
!extends XRInputSourcesChangeEventInit EventInit;
<new EventInit> = <XRInputSourcesChangeEventInit>;
<new XRInputSourcesChangeEventInit> = {session:<XRSession>,added:<FrozenArray_XRInputSource_>,removed:<FrozenArray_XRInputSource_>};
!extends XRReferenceSpaceEventInit EventInit;
<new EventInit> = <XRReferenceSpaceEventInit>;
<new XRReferenceSpaceEventInit> = {referenceSpace:<XRReferenceSpace>};
!extends XRSessionSupportedPermissionDescriptor PermissionDescriptor;
<new PermissionDescriptor> = <XRSessionSupportedPermissionDescriptor>;
<new XRSessionSupportedPermissionDescriptor> = {};
!extends XRPermissionDescriptor PermissionDescriptor;
<new PermissionDescriptor> = <XRPermissionDescriptor>;
<new XRPermissionDescriptor> = {};
<new XRProjectionLayerInit> = {};
<new XRLayerInit> = {space:<XRSpace>,viewPixelWidth:<unsigned_long>,viewPixelHeight:<unsigned_long>};
!extends XRQuadLayerInit XRLayerInit;
<new XRLayerInit> = <XRQuadLayerInit>;
<new XRQuadLayerInit> = {};
!extends XRCylinderLayerInit XRLayerInit;
<new XRLayerInit> = <XRCylinderLayerInit>;
<new XRCylinderLayerInit> = {};
!extends XREquirectLayerInit XRLayerInit;
<new XRLayerInit> = <XREquirectLayerInit>;
<new XREquirectLayerInit> = {};
!extends XRCubeLayerInit XRLayerInit;
<new XRLayerInit> = <XRCubeLayerInit>;
<new XRCubeLayerInit> = {};
<new XRMediaLayerInit> = {space:<XRSpace>};
!extends XRMediaQuadLayerInit XRMediaLayerInit;
<new XRMediaLayerInit> = <XRMediaQuadLayerInit>;
<new XRMediaQuadLayerInit> = {};
!extends XRMediaCylinderLayerInit XRMediaLayerInit;
<new XRMediaLayerInit> = <XRMediaCylinderLayerInit>;
<new XRMediaCylinderLayerInit> = {};
!extends XRMediaEquirectLayerInit XRMediaLayerInit;
<new XRMediaLayerInit> = <XRMediaEquirectLayerInit>;
<new XRMediaEquirectLayerInit> = {};
!extends XRLayerEventInit EventInit;
<new EventInit> = <XRLayerEventInit>;
<new XRLayerEventInit> = {layer:<XRLayer>};
!extends WindowControlsOverlayGeometryChangeEventInit EventInit;
<new EventInit> = <WindowControlsOverlayGeometryChangeEventInit>;
<new WindowControlsOverlayGeometryChangeEventInit> = {titlebarAreaRect:<DOMRect>};
!extends ProgressEventInit EventInit;
<new EventInit> = <ProgressEventInit>;
<new ProgressEventInit> = {};
<new PressureUpdateCallback> = function(x){console.log("ok")};
<new AnimatorInstanceConstructor> = function(x){console.log("ok")};
<new UpdateCallback> = function(x){console.log("ok")};
<new MutationCallback> = function(x){console.log("ok")};
<new ErrorCallback> = function(x){console.log("ok")};
<new FileSystemEntryCallback> = function(x){console.log("ok")};
<new sequence_FileSystemEntry_> = [<FileSystemEntry>];
<new FileSystemEntry> = <sequence_FileSystemEntry_>[0];
<new FileSystemEntriesCallback> = function(x){console.log("ok")};
<new FileCallback> = function(x){console.log("ok")};
<new PositionCallback> = function(x){console.log("ok")};
<new PositionErrorCallback> = function(x){console.log("ok")};
<new BlobCallback> = function(x){console.log("ok")};
<new CustomElementConstructor> = function(x){console.log("ok")};
<new FunctionStringCallback> = function(x){console.log("ok")};
<new EventHandlerNonNull> = function(x){console.log("ok")};
<new union_Event1DOMString_> = <Event>;
<new union_Event1DOMString_> = <DOMString>;
<new OnErrorEventHandlerNonNull> = function(x){console.log("ok")};
<new OnBeforeUnloadEventHandlerNonNull> = function(x){console.log("ok")};
<new FrameRequestCallback> = function(x){console.log("ok")};
<new IntersectionObserverCallback> = function(x){console.log("ok")};
<new NavigatorUserMediaSuccessCallback> = function(x){console.log("ok")};
<new NavigatorUserMediaErrorCallback> = function(x){console.log("ok")};
<new MediaSessionActionHandler> = function(x){console.log("ok")};
<new NavigationInterceptHandler> = function(x){console.log("ok")};
<new NotificationPermissionCallback> = function(x){console.log("ok")};
<new PerformanceObserverCallback> = function(x){console.log("ok")};
<new RemotePlaybackAvailabilityCallback> = function(x){console.log("ok")};
<new ReportingObserverCallback> = function(x){console.log("ok")};
<new IdleRequestCallback> = function(x){console.log("ok")};
<new sequence_ResizeObserverEntry_> = [<ResizeObserverEntry>];
<new ResizeObserverEntry> = <sequence_ResizeObserverEntry_>[0];
<new ResizeObserverCallback> = function(x){console.log("ok")};
<new SchedulerPostTaskCallback> = function(x){console.log("ok")};
<new UnderlyingSourceStartCallback> = function(x){console.log("ok")};
<new UnderlyingSourcePullCallback> = function(x){console.log("ok")};
<new UnderlyingSourceCancelCallback> = function(x){console.log("ok")};
<new UnderlyingSinkStartCallback> = function(x){console.log("ok")};
<new UnderlyingSinkWriteCallback> = function(x){console.log("ok")};
<new UnderlyingSinkCloseCallback> = function(x){console.log("ok")};
<new UnderlyingSinkAbortCallback> = function(x){console.log("ok")};
<new TransformerStartCallback> = function(x){console.log("ok")};
<new TransformerFlushCallback> = function(x){console.log("ok")};
<new TransformerTransformCallback> = function(x){console.log("ok")};
<new QueuingStrategySize> = function(x){console.log("ok")};
<new CreateHTMLCallback> = function(x){console.log("ok")};
<new CreateScriptCallback> = function(x){console.log("ok")};
<new CreateScriptURLCallback> = function(x){console.log("ok")};
<new VideoFrameRequestCallback> = function(x){console.log("ok")};
<new EffectCallback> = function(x){console.log("ok")};
<new LaunchConsumer> = function(x){console.log("ok")};
<new LockGrantedCallback> = function(x){console.log("ok")};
<new DecodeErrorCallback> = function(x){console.log("ok")};
<new DecodeSuccessCallback> = function(x){console.log("ok")};
<new AudioWorkletProcessorConstructor> = function(x){console.log("ok")};
<new FrozenArray_Float32Array_> = [<Float32Array>];
<new Float32Array> = <FrozenArray_Float32Array_>[0];
<new FrozenArray_FrozenArray_Float32Array__> = [<FrozenArray_Float32Array_>];
<new FrozenArray_Float32Array_> = <FrozenArray_FrozenArray_Float32Array__>[0];
<new AudioWorkletProcessCallback> = function(x){console.log("ok")};
<new AudioDataOutputCallback> = function(x){console.log("ok")};
<new VideoFrameOutputCallback> = function(x){console.log("ok")};
<new EncodedAudioChunkOutputCallback> = function(x){console.log("ok")};
<new EncodedVideoChunkOutputCallback> = function(x){console.log("ok")};
<new WebCodecsErrorCallback> = function(x){console.log("ok")};
<new Function> = function(x){console.log("ok")};
<new VoidFunction> = function(x){console.log("ok")};
<new GenerateAssertionCallback> = function(x){console.log("ok")};
<new ValidateAssertionCallback> = function(x){console.log("ok")};
<new RTCPeerConnectionErrorCallback> = function(x){console.log("ok")};
<new RTCSessionDescriptionCallback> = function(x){console.log("ok")};
<new XRFrameRequestCallback> = function(x){console.log("ok")};
<new DOMString> = <Element>.innerHTML;
<Element>.innerHTML = <DOMString>;
<new DOMString> = <ShadowRoot>.innerHTML;
<ShadowRoot>.innerHTML = <DOMString>;
<new IDBFactory> = <WorkerGlobalScope>.indexedDB;
<new IDBFactory> = <Window>.indexedDB;
<new SVGStringList> = <SVGAnimationElement>.requiredExtensions;
<new SVGStringList> = <SVGGraphicsElement>.requiredExtensions;
<new SVGStringList> = <SVGAnimationElement>.systemLanguage;
<new SVGStringList> = <SVGGraphicsElement>.systemLanguage;
<new SVGAnimatedRect> = <SVGSVGElement>.viewBox;
<new SVGAnimatedRect> = <SVGMarkerElement>.viewBox;
<new SVGAnimatedRect> = <SVGPatternElement>.viewBox;
<new SVGAnimatedRect> = <SVGSymbolElement>.viewBox;
<new SVGAnimatedRect> = <SVGViewElement>.viewBox;
<new SVGAnimatedPreserveAspectRatio> = <SVGSVGElement>.preserveAspectRatio;
<new SVGAnimatedPreserveAspectRatio> = <SVGMarkerElement>.preserveAspectRatio;
<new SVGAnimatedPreserveAspectRatio> = <SVGPatternElement>.preserveAspectRatio;
<new SVGAnimatedPreserveAspectRatio> = <SVGSymbolElement>.preserveAspectRatio;
<new SVGAnimatedPreserveAspectRatio> = <SVGViewElement>.preserveAspectRatio;
<new SVGAnimatedString> = <SVGUseElement>.href;
<new SVGAnimatedString> = <SVGFEImageElement>.href;
<new SVGAnimatedString> = <SVGAElement>.href;
<new SVGAnimatedString> = <SVGPatternElement>.href;
<new SVGAnimatedString> = <SVGTextPathElement>.href;
<new SVGAnimatedString> = <SVGFilterElement>.href;
<new SVGAnimatedString> = <SVGMPathElement>.href;
<new SVGAnimatedString> = <SVGGradientElement>.href;
<new SVGAnimatedString> = <SVGScriptElement>.href;
<new SVGAnimatedString> = <SVGImageElement>.href;
<new SVGElement> = <SVGElement>.correspondingElement;
<new SVGUseElement> = <SVGElement>.correspondingUseElement;
<new SVGPointList> = <SVGPolylineElement>.points;
<new SVGPointList> = <SVGPolygonElement>.points;
<new SVGPointList> = <SVGPolylineElement>.animatedPoints;
<new SVGPointList> = <SVGPolygonElement>.animatedPoints;
<new Crypto> = <WorkerGlobalScope>.crypto;
<new Crypto> = <Window>.crypto;
<new USVString> = <HTMLImageElement>.attributionSrc;
<HTMLImageElement>.attributionSrc = <USVString>;
<new USVString> = <HTMLAnchorElement>.attributionSrc;
<HTMLAnchorElement>.attributionSrc = <USVString>;
<new USVString> = <HTMLScriptElement>.attributionSrc;
<HTMLScriptElement>.attributionSrc = <USVString>;
<new Promise_undefined_> = <Navigator>.setAppBadge();
<new Promise_undefined_> = <Navigator>.setAppBadge(<unsigned_long_long>);
<new Promise_undefined_> = <WorkerNavigator>.setAppBadge();
<new Promise_undefined_> = <WorkerNavigator>.setAppBadge(<unsigned_long_long>);
<new Promise_undefined_> = <Navigator>.clearAppBadge();
<new Promise_undefined_> = <WorkerNavigator>.clearAppBadge();
<new USVString> = <PasswordCredential>.name;
<new USVString> = <FederatedCredential>.name;
<new USVString> = <PasswordCredential>.iconURL;
<new USVString> = <FederatedCredential>.iconURL;
<new EventHandler> = <HTMLElement>.onanimationstart;
<HTMLElement>.onanimationstart = <EventHandler>;
<new EventHandler> = <MathMLElement>.onanimationstart;
<MathMLElement>.onanimationstart = <EventHandler>;
<new EventHandler> = <SVGElement>.onanimationstart;
<SVGElement>.onanimationstart = <EventHandler>;
<new EventHandler> = <Document>.onanimationstart;
<Document>.onanimationstart = <EventHandler>;
<new EventHandler> = <Window>.onanimationstart;
<Window>.onanimationstart = <EventHandler>;
<new EventHandler> = <HTMLElement>.onanimationiteration;
<HTMLElement>.onanimationiteration = <EventHandler>;
<new EventHandler> = <MathMLElement>.onanimationiteration;
<MathMLElement>.onanimationiteration = <EventHandler>;
<new EventHandler> = <SVGElement>.onanimationiteration;
<SVGElement>.onanimationiteration = <EventHandler>;
<new EventHandler> = <Document>.onanimationiteration;
<Document>.onanimationiteration = <EventHandler>;
<new EventHandler> = <Window>.onanimationiteration;
<Window>.onanimationiteration = <EventHandler>;
<new EventHandler> = <HTMLElement>.onanimationend;
<HTMLElement>.onanimationend = <EventHandler>;
<new EventHandler> = <MathMLElement>.onanimationend;
<MathMLElement>.onanimationend = <EventHandler>;
<new EventHandler> = <SVGElement>.onanimationend;
<SVGElement>.onanimationend = <EventHandler>;
<new EventHandler> = <Document>.onanimationend;
<Document>.onanimationend = <EventHandler>;
<new EventHandler> = <Window>.onanimationend;
<Window>.onanimationend = <EventHandler>;
<new EventHandler> = <HTMLElement>.onanimationcancel;
<HTMLElement>.onanimationcancel = <EventHandler>;
<new EventHandler> = <MathMLElement>.onanimationcancel;
<MathMLElement>.onanimationcancel = <EventHandler>;
<new EventHandler> = <SVGElement>.onanimationcancel;
<SVGElement>.onanimationcancel = <EventHandler>;
<new EventHandler> = <Document>.onanimationcancel;
<Document>.onanimationcancel = <EventHandler>;
<new EventHandler> = <Window>.onanimationcancel;
<Window>.onanimationcancel = <EventHandler>;
<new FontFaceSet> = <Document>.fonts;
<new FontFaceSet> = <WorkerGlobalScope>.fonts;
<new CSSOMString> = <Element>.regionOverset;
<new sequence_Range_> = [<Range>];
<new Range> = <sequence_Range_>[0];
<new sequence_Range_> = <Element>.getRegionFlowRanges();
<new EventHandler> = <HTMLElement>.ontransitionrun;
<HTMLElement>.ontransitionrun = <EventHandler>;
<new EventHandler> = <MathMLElement>.ontransitionrun;
<MathMLElement>.ontransitionrun = <EventHandler>;
<new EventHandler> = <SVGElement>.ontransitionrun;
<SVGElement>.ontransitionrun = <EventHandler>;
<new EventHandler> = <Document>.ontransitionrun;
<Document>.ontransitionrun = <EventHandler>;
<new EventHandler> = <Window>.ontransitionrun;
<Window>.ontransitionrun = <EventHandler>;
<new EventHandler> = <HTMLElement>.ontransitionstart;
<HTMLElement>.ontransitionstart = <EventHandler>;
<new EventHandler> = <MathMLElement>.ontransitionstart;
<MathMLElement>.ontransitionstart = <EventHandler>;
<new EventHandler> = <SVGElement>.ontransitionstart;
<SVGElement>.ontransitionstart = <EventHandler>;
<new EventHandler> = <Document>.ontransitionstart;
<Document>.ontransitionstart = <EventHandler>;
<new EventHandler> = <Window>.ontransitionstart;
<Window>.ontransitionstart = <EventHandler>;
<new EventHandler> = <HTMLElement>.ontransitionend;
<HTMLElement>.ontransitionend = <EventHandler>;
<new EventHandler> = <MathMLElement>.ontransitionend;
<MathMLElement>.ontransitionend = <EventHandler>;
<new EventHandler> = <SVGElement>.ontransitionend;
<SVGElement>.ontransitionend = <EventHandler>;
<new EventHandler> = <Document>.ontransitionend;
<Document>.ontransitionend = <EventHandler>;
<new EventHandler> = <Window>.ontransitionend;
<Window>.ontransitionend = <EventHandler>;
<new EventHandler> = <HTMLElement>.ontransitioncancel;
<HTMLElement>.ontransitioncancel = <EventHandler>;
<new EventHandler> = <MathMLElement>.ontransitioncancel;
<MathMLElement>.ontransitioncancel = <EventHandler>;
<new EventHandler> = <SVGElement>.ontransitioncancel;
<SVGElement>.ontransitioncancel = <EventHandler>;
<new EventHandler> = <Document>.ontransitioncancel;
<Document>.ontransitioncancel = <EventHandler>;
<new EventHandler> = <Window>.ontransitioncancel;
<Window>.ontransitioncancel = <EventHandler>;
<new StylePropertyMap> = <MathMLElement>.attributeStyleMap;
<new StylePropertyMap> = <SVGElement>.attributeStyleMap;
<new StylePropertyMap> = <HTMLElement>.attributeStyleMap;
<new sequence_DOMQuad_> = [<DOMQuad>];
<new DOMQuad> = <sequence_DOMQuad_>[0];
<new sequence_DOMQuad_> = <Document>.getBoxQuads();
<new sequence_DOMQuad_> = <Document>.getBoxQuads(<BoxQuadOptions>);
<new sequence_DOMQuad_> = <Element>.getBoxQuads();
<new sequence_DOMQuad_> = <Element>.getBoxQuads(<BoxQuadOptions>);
<new sequence_DOMQuad_> = <Text>.getBoxQuads();
<new sequence_DOMQuad_> = <Text>.getBoxQuads(<BoxQuadOptions>);
<new sequence_DOMQuad_> = <CSSPseudoElement>.getBoxQuads();
<new sequence_DOMQuad_> = <CSSPseudoElement>.getBoxQuads(<BoxQuadOptions>);
<new DOMQuad> = <Document>.convertQuadFromNode(<DOMQuadInit>,<GeometryNode>);
<new DOMQuad> = <Document>.convertQuadFromNode(<DOMQuadInit>,<GeometryNode>,<ConvertCoordinateOptions>);
<new DOMQuad> = <Element>.convertQuadFromNode(<DOMQuadInit>,<GeometryNode>);
<new DOMQuad> = <Element>.convertQuadFromNode(<DOMQuadInit>,<GeometryNode>,<ConvertCoordinateOptions>);
<new DOMQuad> = <Text>.convertQuadFromNode(<DOMQuadInit>,<GeometryNode>);
<new DOMQuad> = <Text>.convertQuadFromNode(<DOMQuadInit>,<GeometryNode>,<ConvertCoordinateOptions>);
<new DOMQuad> = <CSSPseudoElement>.convertQuadFromNode(<DOMQuadInit>,<GeometryNode>);
<new DOMQuad> = <CSSPseudoElement>.convertQuadFromNode(<DOMQuadInit>,<GeometryNode>,<ConvertCoordinateOptions>);
<new DOMQuad> = <Document>.convertRectFromNode(<DOMRectReadOnly>,<GeometryNode>);
<new DOMQuad> = <Document>.convertRectFromNode(<DOMRectReadOnly>,<GeometryNode>,<ConvertCoordinateOptions>);
<new DOMQuad> = <Element>.convertRectFromNode(<DOMRectReadOnly>,<GeometryNode>);
<new DOMQuad> = <Element>.convertRectFromNode(<DOMRectReadOnly>,<GeometryNode>,<ConvertCoordinateOptions>);
<new DOMQuad> = <Text>.convertRectFromNode(<DOMRectReadOnly>,<GeometryNode>);
<new DOMQuad> = <Text>.convertRectFromNode(<DOMRectReadOnly>,<GeometryNode>,<ConvertCoordinateOptions>);
<new DOMQuad> = <CSSPseudoElement>.convertRectFromNode(<DOMRectReadOnly>,<GeometryNode>);
<new DOMQuad> = <CSSPseudoElement>.convertRectFromNode(<DOMRectReadOnly>,<GeometryNode>,<ConvertCoordinateOptions>);
<new DOMPoint> = <Document>.convertPointFromNode(<DOMPointInit>,<GeometryNode>);
<new DOMPoint> = <Document>.convertPointFromNode(<DOMPointInit>,<GeometryNode>,<ConvertCoordinateOptions>);
<new DOMPoint> = <Element>.convertPointFromNode(<DOMPointInit>,<GeometryNode>);
<new DOMPoint> = <Element>.convertPointFromNode(<DOMPointInit>,<GeometryNode>,<ConvertCoordinateOptions>);
<new DOMPoint> = <Text>.convertPointFromNode(<DOMPointInit>,<GeometryNode>);
<new DOMPoint> = <Text>.convertPointFromNode(<DOMPointInit>,<GeometryNode>,<ConvertCoordinateOptions>);
<new DOMPoint> = <CSSPseudoElement>.convertPointFromNode(<DOMPointInit>,<GeometryNode>);
<new DOMPoint> = <CSSPseudoElement>.convertPointFromNode(<DOMPointInit>,<GeometryNode>,<ConvertCoordinateOptions>);
<new StyleSheetList> = <Document>.styleSheets;
<new StyleSheetList> = <ShadowRoot>.styleSheets;
<new ObservableArray_CSSStyleSheet_> = [<CSSStyleSheet>];
<new CSSStyleSheet> = <ObservableArray_CSSStyleSheet_>[0];
<new ObservableArray_CSSStyleSheet_> = <Document>.adoptedStyleSheets;
<Document>.adoptedStyleSheets = <ObservableArray_CSSStyleSheet_>;
<new ObservableArray_CSSStyleSheet_> = <ShadowRoot>.adoptedStyleSheets;
<ShadowRoot>.adoptedStyleSheets = <ObservableArray_CSSStyleSheet_>;
<new CSSStyleSheet> = <HTMLLinkElement>.sheet;
<new CSSStyleSheet> = <HTMLStyleElement>.sheet;
<new CSSStyleSheet> = <SVGStyleElement>.sheet;
<new CSSStyleSheet> = <ProcessingInstruction>.sheet;
<new CSSStyleDeclaration> = <MathMLElement>.style;
<new CSSStyleDeclaration> = <SVGElement>.style;
<new CSSStyleDeclaration> = <HTMLElement>.style;
<new double> = <Navigator>.deviceMemory;
<new double> = <WorkerNavigator>.deviceMemory;
<new Element> = <Document>.getElementById(<DOMString>);
<new Element> = <DocumentFragment>.getElementById(<DOMString>);
<new HTMLCollection> = <Document>.children;
<new HTMLCollection> = <Element>.children;
<new HTMLCollection> = <DocumentFragment>.children;
<new Element> = <Document>.firstElementChild;
<new Element> = <Element>.firstElementChild;
<new Element> = <DocumentFragment>.firstElementChild;
<new Element> = <Document>.lastElementChild;
<new Element> = <Element>.lastElementChild;
<new Element> = <DocumentFragment>.lastElementChild;
<new unsigned_long> = <Document>.childElementCount;
<new unsigned_long> = <Element>.childElementCount;
<new unsigned_long> = <DocumentFragment>.childElementCount;
<new union_Node1DOMString_> = <Node>;
<new union_Node1DOMString_> = <DOMString>;
<Document>.prepend();
<Document>.prepend(<union_Node1DOMString_>);
<Element>.prepend();
<Element>.prepend(<union_Node1DOMString_>);
<DocumentFragment>.prepend();
<DocumentFragment>.prepend(<union_Node1DOMString_>);
<Document>.append();
<Document>.append(<union_Node1DOMString_>);
<Element>.append();
<Element>.append(<union_Node1DOMString_>);
<DocumentFragment>.append();
<DocumentFragment>.append(<union_Node1DOMString_>);
<Document>.replaceChildren();
<Document>.replaceChildren(<union_Node1DOMString_>);
<Element>.replaceChildren();
<Element>.replaceChildren(<union_Node1DOMString_>);
<DocumentFragment>.replaceChildren();
<DocumentFragment>.replaceChildren(<union_Node1DOMString_>);
<new Element> = <Document>.querySelector(<DOMString>);
<new Element> = <Element>.querySelector(<DOMString>);
<new Element> = <DocumentFragment>.querySelector(<DOMString>);
<new NodeList> = <Document>.querySelectorAll(<DOMString>);
<new NodeList> = <Element>.querySelectorAll(<DOMString>);
<new NodeList> = <DocumentFragment>.querySelectorAll(<DOMString>);
<new Element> = <CharacterData>.previousElementSibling;
<new Element> = <Element>.previousElementSibling;
<new Element> = <CharacterData>.nextElementSibling;
<new Element> = <Element>.nextElementSibling;
<DocumentType>.before();
<DocumentType>.before(<union_Node1DOMString_>);
<Element>.before();
<Element>.before(<union_Node1DOMString_>);
<CharacterData>.before();
<CharacterData>.before(<union_Node1DOMString_>);
<DocumentType>.after();
<DocumentType>.after(<union_Node1DOMString_>);
<Element>.after();
<Element>.after(<union_Node1DOMString_>);
<CharacterData>.after();
<CharacterData>.after(<union_Node1DOMString_>);
<DocumentType>.replaceWith();
<DocumentType>.replaceWith(<union_Node1DOMString_>);
<Element>.replaceWith();
<Element>.replaceWith(<union_Node1DOMString_>);
<CharacterData>.replaceWith();
<CharacterData>.replaceWith(<union_Node1DOMString_>);
<DocumentType>.remove();
<Element>.remove();
<CharacterData>.remove();
<new HTMLSlotElement> = <Element>.assignedSlot;
<new HTMLSlotElement> = <Text>.assignedSlot;
<new XPathExpression> = <Document>.createExpression(<DOMString>);
<new XPathExpression> = <Document>.createExpression(<DOMString>,<XPathNSResolver>);
<new XPathExpression> = <XPathEvaluator>.createExpression(<DOMString>);
<new XPathExpression> = <XPathEvaluator>.createExpression(<DOMString>,<XPathNSResolver>);
<new XPathNSResolver> = <Document>.createNSResolver(<Node>);
<new XPathNSResolver> = <XPathEvaluator>.createNSResolver(<Node>);
<new XPathResult> = <Document>.evaluate(<DOMString>,<Node>);
<new XPathResult> = <Document>.evaluate(<DOMString>,<Node>,<XPathNSResolver>);
<new XPathResult> = <Document>.evaluate(<DOMString>,<Node>,<XPathNSResolver>,<unsigned_short>);
<new XPathResult> = <Document>.evaluate(<DOMString>,<Node>,<XPathNSResolver>,<unsigned_short>,<XPathResult>);
<new XPathResult> = <XPathEvaluator>.evaluate(<DOMString>,<Node>);
<new XPathResult> = <XPathEvaluator>.evaluate(<DOMString>,<Node>,<XPathNSResolver>);
<new XPathResult> = <XPathEvaluator>.evaluate(<DOMString>,<Node>,<XPathNSResolver>,<unsigned_short>);
<new XPathResult> = <XPathEvaluator>.evaluate(<DOMString>,<Node>,<XPathNSResolver>,<unsigned_short>,<XPathResult>);
<new DOMString> = <TextDecoderStream>.encoding;
<new DOMString> = <TextDecoder>.encoding;
<new boolean> = <TextDecoderStream>.fatal;
<new boolean> = <TextDecoder>.fatal;
<new boolean> = <TextDecoderStream>.ignoreBOM;
<new boolean> = <TextDecoder>.ignoreBOM;
<new DOMString> = <TextEncoderStream>.encoding;
<new DOMString> = <TextEncoder>.encoding;
<new ReadableStream> = <Request>.body;
<new ReadableStream> = <Response>.body;
<new boolean> = <Request>.bodyUsed;
<new boolean> = <Response>.bodyUsed;
<new Promise_ArrayBuffer_> = <Request>.arrayBuffer();
<new Promise_ArrayBuffer_> = <Response>.arrayBuffer();
<new Promise_Blob_> = <Request>.blob();
<new Promise_Blob_> = <Response>.blob();
<new Promise_FormData_> = new Promise(function(x){console.log("ok")});
<new Promise_FormData_> = <Request>.formData();
<new Promise_FormData_> = <Response>.formData();
<new Promise_any_> = <Request>.json();
<new Promise_any_> = <Response>.json();
<new Promise_USVString_> = <Request>.text();
<new Promise_USVString_> = <Response>.text();
<new Promise_Response_> = <WorkerGlobalScope>.fetch(<RequestInfo>);
<new Promise_Response_> = <WorkerGlobalScope>.fetch(<RequestInfo>,<RequestInit>);
<new Promise_Response_> = <Window>.fetch(<RequestInfo>);
<new Promise_Response_> = <Window>.fetch(<RequestInfo>,<RequestInit>);
<new SVGAnimatedLength> = <SVGFEGaussianBlurElement>.x;
<new SVGAnimatedLength> = <SVGFEDropShadowElement>.x;
<new SVGAnimatedLength> = <SVGFEOffsetElement>.x;
<new SVGAnimatedLength> = <SVGFETurbulenceElement>.x;
<new SVGAnimatedLength> = <SVGFEImageElement>.x;
<new SVGAnimatedLength> = <SVGFEBlendElement>.x;
<new SVGAnimatedLength> = <SVGFECompositeElement>.x;
<new SVGAnimatedLength> = <SVGFEMorphologyElement>.x;
<new SVGAnimatedLength> = <SVGFEConvolveMatrixElement>.x;
<new SVGAnimatedLength> = <SVGFEColorMatrixElement>.x;
<new SVGAnimatedLength> = <SVGFESpecularLightingElement>.x;
<new SVGAnimatedLength> = <SVGFETileElement>.x;
<new SVGAnimatedLength> = <SVGFEFloodElement>.x;
<new SVGAnimatedLength> = <SVGFEDiffuseLightingElement>.x;
<new SVGAnimatedLength> = <SVGFEMergeElement>.x;
<new SVGAnimatedLength> = <SVGFEComponentTransferElement>.x;
<new SVGAnimatedLength> = <SVGFEDisplacementMapElement>.x;
<new SVGAnimatedLength> = <SVGFEGaussianBlurElement>.y;
<new SVGAnimatedLength> = <SVGFEDropShadowElement>.y;
<new SVGAnimatedLength> = <SVGFEOffsetElement>.y;
<new SVGAnimatedLength> = <SVGFETurbulenceElement>.y;
<new SVGAnimatedLength> = <SVGFEImageElement>.y;
<new SVGAnimatedLength> = <SVGFEBlendElement>.y;
<new SVGAnimatedLength> = <SVGFECompositeElement>.y;
<new SVGAnimatedLength> = <SVGFEMorphologyElement>.y;
<new SVGAnimatedLength> = <SVGFEConvolveMatrixElement>.y;
<new SVGAnimatedLength> = <SVGFEColorMatrixElement>.y;
<new SVGAnimatedLength> = <SVGFESpecularLightingElement>.y;
<new SVGAnimatedLength> = <SVGFETileElement>.y;
<new SVGAnimatedLength> = <SVGFEFloodElement>.y;
<new SVGAnimatedLength> = <SVGFEDiffuseLightingElement>.y;
<new SVGAnimatedLength> = <SVGFEMergeElement>.y;
<new SVGAnimatedLength> = <SVGFEComponentTransferElement>.y;
<new SVGAnimatedLength> = <SVGFEDisplacementMapElement>.y;
<new SVGAnimatedLength> = <SVGFEGaussianBlurElement>.width;
<new SVGAnimatedLength> = <SVGFEDropShadowElement>.width;
<new SVGAnimatedLength> = <SVGFEOffsetElement>.width;
<new SVGAnimatedLength> = <SVGFETurbulenceElement>.width;
<new SVGAnimatedLength> = <SVGFEImageElement>.width;
<new SVGAnimatedLength> = <SVGFEBlendElement>.width;
<new SVGAnimatedLength> = <SVGFECompositeElement>.width;
<new SVGAnimatedLength> = <SVGFEMorphologyElement>.width;
<new SVGAnimatedLength> = <SVGFEConvolveMatrixElement>.width;
<new SVGAnimatedLength> = <SVGFEColorMatrixElement>.width;
<new SVGAnimatedLength> = <SVGFESpecularLightingElement>.width;
<new SVGAnimatedLength> = <SVGFETileElement>.width;
<new SVGAnimatedLength> = <SVGFEFloodElement>.width;
<new SVGAnimatedLength> = <SVGFEDiffuseLightingElement>.width;
<new SVGAnimatedLength> = <SVGFEMergeElement>.width;
<new SVGAnimatedLength> = <SVGFEComponentTransferElement>.width;
<new SVGAnimatedLength> = <SVGFEDisplacementMapElement>.width;
<new SVGAnimatedLength> = <SVGFEGaussianBlurElement>.height;
<new SVGAnimatedLength> = <SVGFEDropShadowElement>.height;
<new SVGAnimatedLength> = <SVGFEOffsetElement>.height;
<new SVGAnimatedLength> = <SVGFETurbulenceElement>.height;
<new SVGAnimatedLength> = <SVGFEImageElement>.height;
<new SVGAnimatedLength> = <SVGFEBlendElement>.height;
<new SVGAnimatedLength> = <SVGFECompositeElement>.height;
<new SVGAnimatedLength> = <SVGFEMorphologyElement>.height;
<new SVGAnimatedLength> = <SVGFEConvolveMatrixElement>.height;
<new SVGAnimatedLength> = <SVGFEColorMatrixElement>.height;
<new SVGAnimatedLength> = <SVGFESpecularLightingElement>.height;
<new SVGAnimatedLength> = <SVGFETileElement>.height;
<new SVGAnimatedLength> = <SVGFEFloodElement>.height;
<new SVGAnimatedLength> = <SVGFEDiffuseLightingElement>.height;
<new SVGAnimatedLength> = <SVGFEMergeElement>.height;
<new SVGAnimatedLength> = <SVGFEComponentTransferElement>.height;
<new SVGAnimatedLength> = <SVGFEDisplacementMapElement>.height;
<new SVGAnimatedString> = <SVGFEGaussianBlurElement>.result;
<new SVGAnimatedString> = <SVGFEDropShadowElement>.result;
<new SVGAnimatedString> = <SVGFEOffsetElement>.result;
<new SVGAnimatedString> = <SVGFETurbulenceElement>.result;
<new SVGAnimatedString> = <SVGFEImageElement>.result;
<new SVGAnimatedString> = <SVGFEBlendElement>.result;
<new SVGAnimatedString> = <SVGFECompositeElement>.result;
<new SVGAnimatedString> = <SVGFEMorphologyElement>.result;
<new SVGAnimatedString> = <SVGFEConvolveMatrixElement>.result;
<new SVGAnimatedString> = <SVGFEColorMatrixElement>.result;
<new SVGAnimatedString> = <SVGFESpecularLightingElement>.result;
<new SVGAnimatedString> = <SVGFETileElement>.result;
<new SVGAnimatedString> = <SVGFEFloodElement>.result;
<new SVGAnimatedString> = <SVGFEDiffuseLightingElement>.result;
<new SVGAnimatedString> = <SVGFEMergeElement>.result;
<new SVGAnimatedString> = <SVGFEComponentTransferElement>.result;
<new SVGAnimatedString> = <SVGFEDisplacementMapElement>.result;
<new Element> = <Document>.fullscreenElement;
<new Element> = <ShadowRoot>.fullscreenElement;
<new EventHandler> = <SVGSVGElement>.ongamepadconnected;
<SVGSVGElement>.ongamepadconnected = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.ongamepadconnected;
<HTMLFrameSetElement>.ongamepadconnected = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.ongamepadconnected;
<HTMLBodyElement>.ongamepadconnected = <EventHandler>;
<new EventHandler> = <Window>.ongamepadconnected;
<Window>.ongamepadconnected = <EventHandler>;
<new EventHandler> = <SVGSVGElement>.ongamepaddisconnected;
<SVGSVGElement>.ongamepaddisconnected = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.ongamepaddisconnected;
<HTMLFrameSetElement>.ongamepaddisconnected = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.ongamepaddisconnected;
<HTMLBodyElement>.ongamepaddisconnected = <EventHandler>;
<new EventHandler> = <Window>.ongamepaddisconnected;
<Window>.ongamepaddisconnected = <EventHandler>;
<new Performance> = <WorkerGlobalScope>.performance;
<new Performance> = <Window>.performance;
<new Element> = <Document>.activeElement;
<new Element> = <ShadowRoot>.activeElement;
<new DOMStringMap> = <MathMLElement>.dataset;
<new DOMStringMap> = <SVGElement>.dataset;
<new DOMStringMap> = <HTMLElement>.dataset;
<new DOMString> = <MathMLElement>.nonce;
<MathMLElement>.nonce = <DOMString>;
<new DOMString> = <SVGElement>.nonce;
<SVGElement>.nonce = <DOMString>;
<new DOMString> = <HTMLElement>.nonce;
<HTMLElement>.nonce = <DOMString>;
<new boolean> = <MathMLElement>.autofocus;
<MathMLElement>.autofocus = <boolean>;
<new boolean> = <SVGElement>.autofocus;
<SVGElement>.autofocus = <boolean>;
<new boolean> = <HTMLElement>.autofocus;
<HTMLElement>.autofocus = <boolean>;
<new long> = <MathMLElement>.tabIndex;
<MathMLElement>.tabIndex = <long>;
<new long> = <SVGElement>.tabIndex;
<SVGElement>.tabIndex = <long>;
<new long> = <HTMLElement>.tabIndex;
<HTMLElement>.tabIndex = <long>;
<MathMLElement>.focus();
<MathMLElement>.focus(<FocusOptions>);
<SVGElement>.focus();
<SVGElement>.focus(<FocusOptions>);
<HTMLElement>.focus();
<HTMLElement>.focus(<FocusOptions>);
<MathMLElement>.blur();
<SVGElement>.blur();
<HTMLElement>.blur();
<new USVString> = <HTMLAnchorElement>.href;
<HTMLAnchorElement>.href = <USVString>;
<new USVString> = <HTMLAreaElement>.href;
<HTMLAreaElement>.href = <USVString>;
<new USVString> = <HTMLAnchorElement>.origin;
<new USVString> = <HTMLAreaElement>.origin;
<new USVString> = <HTMLAnchorElement>.protocol;
<HTMLAnchorElement>.protocol = <USVString>;
<new USVString> = <HTMLAreaElement>.protocol;
<HTMLAreaElement>.protocol = <USVString>;
<new USVString> = <HTMLAnchorElement>.username;
<HTMLAnchorElement>.username = <USVString>;
<new USVString> = <HTMLAreaElement>.username;
<HTMLAreaElement>.username = <USVString>;
<new USVString> = <HTMLAnchorElement>.password;
<HTMLAnchorElement>.password = <USVString>;
<new USVString> = <HTMLAreaElement>.password;
<HTMLAreaElement>.password = <USVString>;
<new USVString> = <HTMLAnchorElement>.host;
<HTMLAnchorElement>.host = <USVString>;
<new USVString> = <HTMLAreaElement>.host;
<HTMLAreaElement>.host = <USVString>;
<new USVString> = <HTMLAnchorElement>.hostname;
<HTMLAnchorElement>.hostname = <USVString>;
<new USVString> = <HTMLAreaElement>.hostname;
<HTMLAreaElement>.hostname = <USVString>;
<new USVString> = <HTMLAnchorElement>.port;
<HTMLAnchorElement>.port = <USVString>;
<new USVString> = <HTMLAreaElement>.port;
<HTMLAreaElement>.port = <USVString>;
<new USVString> = <HTMLAnchorElement>.pathname;
<HTMLAnchorElement>.pathname = <USVString>;
<new USVString> = <HTMLAreaElement>.pathname;
<HTMLAreaElement>.pathname = <USVString>;
<new USVString> = <HTMLAnchorElement>.search;
<HTMLAnchorElement>.search = <USVString>;
<new USVString> = <HTMLAreaElement>.search;
<HTMLAreaElement>.search = <USVString>;
<new USVString> = <HTMLAnchorElement>.hash;
<HTMLAnchorElement>.hash = <USVString>;
<new USVString> = <HTMLAreaElement>.hash;
<HTMLAreaElement>.hash = <USVString>;
<CanvasRenderingContext2D>.save();
<OffscreenCanvasRenderingContext2D>.save();
<PaintRenderingContext2D>.save();
<CanvasRenderingContext2D>.restore();
<OffscreenCanvasRenderingContext2D>.restore();
<PaintRenderingContext2D>.restore();
<CanvasRenderingContext2D>.reset();
<OffscreenCanvasRenderingContext2D>.reset();
<PaintRenderingContext2D>.reset();
<CanvasRenderingContext2D>.isContextLost();
<OffscreenCanvasRenderingContext2D>.isContextLost();
<PaintRenderingContext2D>.isContextLost();
<CanvasRenderingContext2D>.scale(<unrestricted_double>,<unrestricted_double>);
<OffscreenCanvasRenderingContext2D>.scale(<unrestricted_double>,<unrestricted_double>);
<PaintRenderingContext2D>.scale(<unrestricted_double>,<unrestricted_double>);
<CanvasRenderingContext2D>.rotate(<unrestricted_double>);
<OffscreenCanvasRenderingContext2D>.rotate(<unrestricted_double>);
<PaintRenderingContext2D>.rotate(<unrestricted_double>);
<CanvasRenderingContext2D>.translate(<unrestricted_double>,<unrestricted_double>);
<OffscreenCanvasRenderingContext2D>.translate(<unrestricted_double>,<unrestricted_double>);
<PaintRenderingContext2D>.translate(<unrestricted_double>,<unrestricted_double>);
<CanvasRenderingContext2D>.transform(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<OffscreenCanvasRenderingContext2D>.transform(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<PaintRenderingContext2D>.transform(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<new DOMMatrix> = <CanvasRenderingContext2D>.getTransform();
<new DOMMatrix> = <OffscreenCanvasRenderingContext2D>.getTransform();
<new DOMMatrix> = <PaintRenderingContext2D>.getTransform();
<CanvasRenderingContext2D>.setTransform(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<OffscreenCanvasRenderingContext2D>.setTransform(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<PaintRenderingContext2D>.setTransform(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<CanvasRenderingContext2D>.setTransform();
<CanvasRenderingContext2D>.setTransform(<DOMMatrix2DInit>);
<OffscreenCanvasRenderingContext2D>.setTransform();
<OffscreenCanvasRenderingContext2D>.setTransform(<DOMMatrix2DInit>);
<PaintRenderingContext2D>.setTransform();
<PaintRenderingContext2D>.setTransform(<DOMMatrix2DInit>);
<CanvasRenderingContext2D>.resetTransform();
<OffscreenCanvasRenderingContext2D>.resetTransform();
<PaintRenderingContext2D>.resetTransform();
<new unrestricted_double> = <CanvasRenderingContext2D>.globalAlpha;
<CanvasRenderingContext2D>.globalAlpha = <unrestricted_double>;
<new unrestricted_double> = <OffscreenCanvasRenderingContext2D>.globalAlpha;
<OffscreenCanvasRenderingContext2D>.globalAlpha = <unrestricted_double>;
<new unrestricted_double> = <PaintRenderingContext2D>.globalAlpha;
<PaintRenderingContext2D>.globalAlpha = <unrestricted_double>;
<new DOMString> = <CanvasRenderingContext2D>.globalCompositeOperation;
<CanvasRenderingContext2D>.globalCompositeOperation = <DOMString>;
<new DOMString> = <OffscreenCanvasRenderingContext2D>.globalCompositeOperation;
<OffscreenCanvasRenderingContext2D>.globalCompositeOperation = <DOMString>;
<new DOMString> = <PaintRenderingContext2D>.globalCompositeOperation;
<PaintRenderingContext2D>.globalCompositeOperation = <DOMString>;
<new boolean> = <CanvasRenderingContext2D>.imageSmoothingEnabled;
<CanvasRenderingContext2D>.imageSmoothingEnabled = <boolean>;
<new boolean> = <OffscreenCanvasRenderingContext2D>.imageSmoothingEnabled;
<OffscreenCanvasRenderingContext2D>.imageSmoothingEnabled = <boolean>;
<new boolean> = <PaintRenderingContext2D>.imageSmoothingEnabled;
<PaintRenderingContext2D>.imageSmoothingEnabled = <boolean>;
<new ImageSmoothingQuality> = <CanvasRenderingContext2D>.imageSmoothingQuality;
<CanvasRenderingContext2D>.imageSmoothingQuality = <ImageSmoothingQuality>;
<new ImageSmoothingQuality> = <OffscreenCanvasRenderingContext2D>.imageSmoothingQuality;
<OffscreenCanvasRenderingContext2D>.imageSmoothingQuality = <ImageSmoothingQuality>;
<new ImageSmoothingQuality> = <PaintRenderingContext2D>.imageSmoothingQuality;
<PaintRenderingContext2D>.imageSmoothingQuality = <ImageSmoothingQuality>;
<new union_DOMString1CanvasGradient1CanvasPattern_> = <DOMString>;
<new union_DOMString1CanvasGradient1CanvasPattern_> = <CanvasGradient>;
<new union_DOMString1CanvasGradient1CanvasPattern_> = <CanvasPattern>;
<new union_DOMString1CanvasGradient1CanvasPattern_> = <CanvasRenderingContext2D>.strokeStyle;
<CanvasRenderingContext2D>.strokeStyle = <union_DOMString1CanvasGradient1CanvasPattern_>;
<new union_DOMString1CanvasGradient1CanvasPattern_> = <OffscreenCanvasRenderingContext2D>.strokeStyle;
<OffscreenCanvasRenderingContext2D>.strokeStyle = <union_DOMString1CanvasGradient1CanvasPattern_>;
<new union_DOMString1CanvasGradient1CanvasPattern_> = <PaintRenderingContext2D>.strokeStyle;
<PaintRenderingContext2D>.strokeStyle = <union_DOMString1CanvasGradient1CanvasPattern_>;
<new union_DOMString1CanvasGradient1CanvasPattern_> = <CanvasRenderingContext2D>.fillStyle;
<CanvasRenderingContext2D>.fillStyle = <union_DOMString1CanvasGradient1CanvasPattern_>;
<new union_DOMString1CanvasGradient1CanvasPattern_> = <OffscreenCanvasRenderingContext2D>.fillStyle;
<OffscreenCanvasRenderingContext2D>.fillStyle = <union_DOMString1CanvasGradient1CanvasPattern_>;
<new union_DOMString1CanvasGradient1CanvasPattern_> = <PaintRenderingContext2D>.fillStyle;
<PaintRenderingContext2D>.fillStyle = <union_DOMString1CanvasGradient1CanvasPattern_>;
<new CanvasGradient> = <CanvasRenderingContext2D>.createLinearGradient(<double>,<double>,<double>,<double>);
<new CanvasGradient> = <OffscreenCanvasRenderingContext2D>.createLinearGradient(<double>,<double>,<double>,<double>);
<new CanvasGradient> = <PaintRenderingContext2D>.createLinearGradient(<double>,<double>,<double>,<double>);
<new CanvasGradient> = <CanvasRenderingContext2D>.createRadialGradient(<double>,<double>,<double>,<double>,<double>,<double>);
<new CanvasGradient> = <OffscreenCanvasRenderingContext2D>.createRadialGradient(<double>,<double>,<double>,<double>,<double>,<double>);
<new CanvasGradient> = <PaintRenderingContext2D>.createRadialGradient(<double>,<double>,<double>,<double>,<double>,<double>);
<new CanvasGradient> = <CanvasRenderingContext2D>.createConicGradient(<double>,<double>,<double>);
<new CanvasGradient> = <OffscreenCanvasRenderingContext2D>.createConicGradient(<double>,<double>,<double>);
<new CanvasGradient> = <PaintRenderingContext2D>.createConicGradient(<double>,<double>,<double>);
<new CanvasPattern> = <CanvasRenderingContext2D>.createPattern(<CanvasImageSource>,<DOMString>);
<new CanvasPattern> = <OffscreenCanvasRenderingContext2D>.createPattern(<CanvasImageSource>,<DOMString>);
<new CanvasPattern> = <PaintRenderingContext2D>.createPattern(<CanvasImageSource>,<DOMString>);
<new unrestricted_double> = <CanvasRenderingContext2D>.shadowOffsetX;
<CanvasRenderingContext2D>.shadowOffsetX = <unrestricted_double>;
<new unrestricted_double> = <OffscreenCanvasRenderingContext2D>.shadowOffsetX;
<OffscreenCanvasRenderingContext2D>.shadowOffsetX = <unrestricted_double>;
<new unrestricted_double> = <PaintRenderingContext2D>.shadowOffsetX;
<PaintRenderingContext2D>.shadowOffsetX = <unrestricted_double>;
<new unrestricted_double> = <CanvasRenderingContext2D>.shadowOffsetY;
<CanvasRenderingContext2D>.shadowOffsetY = <unrestricted_double>;
<new unrestricted_double> = <OffscreenCanvasRenderingContext2D>.shadowOffsetY;
<OffscreenCanvasRenderingContext2D>.shadowOffsetY = <unrestricted_double>;
<new unrestricted_double> = <PaintRenderingContext2D>.shadowOffsetY;
<PaintRenderingContext2D>.shadowOffsetY = <unrestricted_double>;
<new unrestricted_double> = <CanvasRenderingContext2D>.shadowBlur;
<CanvasRenderingContext2D>.shadowBlur = <unrestricted_double>;
<new unrestricted_double> = <OffscreenCanvasRenderingContext2D>.shadowBlur;
<OffscreenCanvasRenderingContext2D>.shadowBlur = <unrestricted_double>;
<new unrestricted_double> = <PaintRenderingContext2D>.shadowBlur;
<PaintRenderingContext2D>.shadowBlur = <unrestricted_double>;
<new DOMString> = <CanvasRenderingContext2D>.shadowColor;
<CanvasRenderingContext2D>.shadowColor = <DOMString>;
<new DOMString> = <OffscreenCanvasRenderingContext2D>.shadowColor;
<OffscreenCanvasRenderingContext2D>.shadowColor = <DOMString>;
<new DOMString> = <PaintRenderingContext2D>.shadowColor;
<PaintRenderingContext2D>.shadowColor = <DOMString>;
<new DOMString> = <CanvasRenderingContext2D>.filter;
<CanvasRenderingContext2D>.filter = <DOMString>;
<new DOMString> = <OffscreenCanvasRenderingContext2D>.filter;
<OffscreenCanvasRenderingContext2D>.filter = <DOMString>;
<CanvasRenderingContext2D>.clearRect(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<OffscreenCanvasRenderingContext2D>.clearRect(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<PaintRenderingContext2D>.clearRect(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<CanvasRenderingContext2D>.fillRect(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<OffscreenCanvasRenderingContext2D>.fillRect(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<PaintRenderingContext2D>.fillRect(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<CanvasRenderingContext2D>.strokeRect(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<OffscreenCanvasRenderingContext2D>.strokeRect(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<PaintRenderingContext2D>.strokeRect(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<CanvasRenderingContext2D>.beginPath();
<OffscreenCanvasRenderingContext2D>.beginPath();
<PaintRenderingContext2D>.beginPath();
<CanvasRenderingContext2D>.fill();
<CanvasRenderingContext2D>.fill(<CanvasFillRule>);
<OffscreenCanvasRenderingContext2D>.fill();
<OffscreenCanvasRenderingContext2D>.fill(<CanvasFillRule>);
<PaintRenderingContext2D>.fill();
<PaintRenderingContext2D>.fill(<CanvasFillRule>);
<CanvasRenderingContext2D>.fill(<Path2D>);
<CanvasRenderingContext2D>.fill(<Path2D>,<CanvasFillRule>);
<OffscreenCanvasRenderingContext2D>.fill(<Path2D>);
<OffscreenCanvasRenderingContext2D>.fill(<Path2D>,<CanvasFillRule>);
<PaintRenderingContext2D>.fill(<Path2D>);
<PaintRenderingContext2D>.fill(<Path2D>,<CanvasFillRule>);
<CanvasRenderingContext2D>.stroke();
<OffscreenCanvasRenderingContext2D>.stroke();
<PaintRenderingContext2D>.stroke();
<CanvasRenderingContext2D>.stroke(<Path2D>);
<OffscreenCanvasRenderingContext2D>.stroke(<Path2D>);
<PaintRenderingContext2D>.stroke(<Path2D>);
<CanvasRenderingContext2D>.clip();
<CanvasRenderingContext2D>.clip(<CanvasFillRule>);
<OffscreenCanvasRenderingContext2D>.clip();
<OffscreenCanvasRenderingContext2D>.clip(<CanvasFillRule>);
<PaintRenderingContext2D>.clip();
<PaintRenderingContext2D>.clip(<CanvasFillRule>);
<CanvasRenderingContext2D>.clip(<Path2D>);
<CanvasRenderingContext2D>.clip(<Path2D>,<CanvasFillRule>);
<OffscreenCanvasRenderingContext2D>.clip(<Path2D>);
<OffscreenCanvasRenderingContext2D>.clip(<Path2D>,<CanvasFillRule>);
<PaintRenderingContext2D>.clip(<Path2D>);
<PaintRenderingContext2D>.clip(<Path2D>,<CanvasFillRule>);
<CanvasRenderingContext2D>.isPointInPath(<unrestricted_double>,<unrestricted_double>);
<CanvasRenderingContext2D>.isPointInPath(<unrestricted_double>,<unrestricted_double>,<CanvasFillRule>);
<OffscreenCanvasRenderingContext2D>.isPointInPath(<unrestricted_double>,<unrestricted_double>);
<OffscreenCanvasRenderingContext2D>.isPointInPath(<unrestricted_double>,<unrestricted_double>,<CanvasFillRule>);
<PaintRenderingContext2D>.isPointInPath(<unrestricted_double>,<unrestricted_double>);
<PaintRenderingContext2D>.isPointInPath(<unrestricted_double>,<unrestricted_double>,<CanvasFillRule>);
<CanvasRenderingContext2D>.isPointInPath(<Path2D>,<unrestricted_double>,<unrestricted_double>);
<CanvasRenderingContext2D>.isPointInPath(<Path2D>,<unrestricted_double>,<unrestricted_double>,<CanvasFillRule>);
<OffscreenCanvasRenderingContext2D>.isPointInPath(<Path2D>,<unrestricted_double>,<unrestricted_double>);
<OffscreenCanvasRenderingContext2D>.isPointInPath(<Path2D>,<unrestricted_double>,<unrestricted_double>,<CanvasFillRule>);
<PaintRenderingContext2D>.isPointInPath(<Path2D>,<unrestricted_double>,<unrestricted_double>);
<PaintRenderingContext2D>.isPointInPath(<Path2D>,<unrestricted_double>,<unrestricted_double>,<CanvasFillRule>);
<CanvasRenderingContext2D>.isPointInStroke(<unrestricted_double>,<unrestricted_double>);
<OffscreenCanvasRenderingContext2D>.isPointInStroke(<unrestricted_double>,<unrestricted_double>);
<PaintRenderingContext2D>.isPointInStroke(<unrestricted_double>,<unrestricted_double>);
<CanvasRenderingContext2D>.isPointInStroke(<Path2D>,<unrestricted_double>,<unrestricted_double>);
<OffscreenCanvasRenderingContext2D>.isPointInStroke(<Path2D>,<unrestricted_double>,<unrestricted_double>);
<PaintRenderingContext2D>.isPointInStroke(<Path2D>,<unrestricted_double>,<unrestricted_double>);
<CanvasRenderingContext2D>.drawFocusIfNeeded(<Element>);
<CanvasRenderingContext2D>.drawFocusIfNeeded(<Path2D>,<Element>);
<CanvasRenderingContext2D>.scrollPathIntoView();
<CanvasRenderingContext2D>.scrollPathIntoView(<Path2D>);
<CanvasRenderingContext2D>.fillText(<DOMString>,<unrestricted_double>,<unrestricted_double>);
<CanvasRenderingContext2D>.fillText(<DOMString>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<OffscreenCanvasRenderingContext2D>.fillText(<DOMString>,<unrestricted_double>,<unrestricted_double>);
<OffscreenCanvasRenderingContext2D>.fillText(<DOMString>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<CanvasRenderingContext2D>.strokeText(<DOMString>,<unrestricted_double>,<unrestricted_double>);
<CanvasRenderingContext2D>.strokeText(<DOMString>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<OffscreenCanvasRenderingContext2D>.strokeText(<DOMString>,<unrestricted_double>,<unrestricted_double>);
<OffscreenCanvasRenderingContext2D>.strokeText(<DOMString>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<new TextMetrics> = <CanvasRenderingContext2D>.measureText(<DOMString>);
<new TextMetrics> = <OffscreenCanvasRenderingContext2D>.measureText(<DOMString>);
<CanvasRenderingContext2D>.drawImage(<CanvasImageSource>,<unrestricted_double>,<unrestricted_double>);
<OffscreenCanvasRenderingContext2D>.drawImage(<CanvasImageSource>,<unrestricted_double>,<unrestricted_double>);
<PaintRenderingContext2D>.drawImage(<CanvasImageSource>,<unrestricted_double>,<unrestricted_double>);
<CanvasRenderingContext2D>.drawImage(<CanvasImageSource>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<OffscreenCanvasRenderingContext2D>.drawImage(<CanvasImageSource>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<PaintRenderingContext2D>.drawImage(<CanvasImageSource>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<CanvasRenderingContext2D>.drawImage(<CanvasImageSource>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<OffscreenCanvasRenderingContext2D>.drawImage(<CanvasImageSource>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<PaintRenderingContext2D>.drawImage(<CanvasImageSource>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<new ImageData> = <CanvasRenderingContext2D>.createImageData(<long>,<long>);
<new ImageData> = <CanvasRenderingContext2D>.createImageData(<long>,<long>,<ImageDataSettings>);
<new ImageData> = <OffscreenCanvasRenderingContext2D>.createImageData(<long>,<long>);
<new ImageData> = <OffscreenCanvasRenderingContext2D>.createImageData(<long>,<long>,<ImageDataSettings>);
<new ImageData> = <CanvasRenderingContext2D>.createImageData(<ImageData>);
<new ImageData> = <OffscreenCanvasRenderingContext2D>.createImageData(<ImageData>);
<new ImageData> = <CanvasRenderingContext2D>.getImageData(<long>,<long>,<long>,<long>);
<new ImageData> = <CanvasRenderingContext2D>.getImageData(<long>,<long>,<long>,<long>,<ImageDataSettings>);
<new ImageData> = <OffscreenCanvasRenderingContext2D>.getImageData(<long>,<long>,<long>,<long>);
<new ImageData> = <OffscreenCanvasRenderingContext2D>.getImageData(<long>,<long>,<long>,<long>,<ImageDataSettings>);
<CanvasRenderingContext2D>.putImageData(<ImageData>,<long>,<long>);
<OffscreenCanvasRenderingContext2D>.putImageData(<ImageData>,<long>,<long>);
<CanvasRenderingContext2D>.putImageData(<ImageData>,<long>,<long>,<long>,<long>,<long>,<long>);
<OffscreenCanvasRenderingContext2D>.putImageData(<ImageData>,<long>,<long>,<long>,<long>,<long>,<long>);
<new unrestricted_double> = <CanvasRenderingContext2D>.lineWidth;
<CanvasRenderingContext2D>.lineWidth = <unrestricted_double>;
<new unrestricted_double> = <OffscreenCanvasRenderingContext2D>.lineWidth;
<OffscreenCanvasRenderingContext2D>.lineWidth = <unrestricted_double>;
<new unrestricted_double> = <PaintRenderingContext2D>.lineWidth;
<PaintRenderingContext2D>.lineWidth = <unrestricted_double>;
<new CanvasLineCap> = <CanvasRenderingContext2D>.lineCap;
<CanvasRenderingContext2D>.lineCap = <CanvasLineCap>;
<new CanvasLineCap> = <OffscreenCanvasRenderingContext2D>.lineCap;
<OffscreenCanvasRenderingContext2D>.lineCap = <CanvasLineCap>;
<new CanvasLineCap> = <PaintRenderingContext2D>.lineCap;
<PaintRenderingContext2D>.lineCap = <CanvasLineCap>;
<new CanvasLineJoin> = <CanvasRenderingContext2D>.lineJoin;
<CanvasRenderingContext2D>.lineJoin = <CanvasLineJoin>;
<new CanvasLineJoin> = <OffscreenCanvasRenderingContext2D>.lineJoin;
<OffscreenCanvasRenderingContext2D>.lineJoin = <CanvasLineJoin>;
<new CanvasLineJoin> = <PaintRenderingContext2D>.lineJoin;
<PaintRenderingContext2D>.lineJoin = <CanvasLineJoin>;
<new unrestricted_double> = <CanvasRenderingContext2D>.miterLimit;
<CanvasRenderingContext2D>.miterLimit = <unrestricted_double>;
<new unrestricted_double> = <OffscreenCanvasRenderingContext2D>.miterLimit;
<OffscreenCanvasRenderingContext2D>.miterLimit = <unrestricted_double>;
<new unrestricted_double> = <PaintRenderingContext2D>.miterLimit;
<PaintRenderingContext2D>.miterLimit = <unrestricted_double>;
<CanvasRenderingContext2D>.setLineDash(<sequence_unrestricted_double_>);
<OffscreenCanvasRenderingContext2D>.setLineDash(<sequence_unrestricted_double_>);
<PaintRenderingContext2D>.setLineDash(<sequence_unrestricted_double_>);
<new sequence_unrestricted_double_> = <CanvasRenderingContext2D>.getLineDash();
<new sequence_unrestricted_double_> = <OffscreenCanvasRenderingContext2D>.getLineDash();
<new sequence_unrestricted_double_> = <PaintRenderingContext2D>.getLineDash();
<new unrestricted_double> = <CanvasRenderingContext2D>.lineDashOffset;
<CanvasRenderingContext2D>.lineDashOffset = <unrestricted_double>;
<new unrestricted_double> = <OffscreenCanvasRenderingContext2D>.lineDashOffset;
<OffscreenCanvasRenderingContext2D>.lineDashOffset = <unrestricted_double>;
<new unrestricted_double> = <PaintRenderingContext2D>.lineDashOffset;
<PaintRenderingContext2D>.lineDashOffset = <unrestricted_double>;
<new DOMString> = <CanvasRenderingContext2D>.font;
<CanvasRenderingContext2D>.font = <DOMString>;
<new DOMString> = <OffscreenCanvasRenderingContext2D>.font;
<OffscreenCanvasRenderingContext2D>.font = <DOMString>;
<new CanvasTextAlign> = <CanvasRenderingContext2D>.textAlign;
<CanvasRenderingContext2D>.textAlign = <CanvasTextAlign>;
<new CanvasTextAlign> = <OffscreenCanvasRenderingContext2D>.textAlign;
<OffscreenCanvasRenderingContext2D>.textAlign = <CanvasTextAlign>;
<new CanvasTextBaseline> = <CanvasRenderingContext2D>.textBaseline;
<CanvasRenderingContext2D>.textBaseline = <CanvasTextBaseline>;
<new CanvasTextBaseline> = <OffscreenCanvasRenderingContext2D>.textBaseline;
<OffscreenCanvasRenderingContext2D>.textBaseline = <CanvasTextBaseline>;
<new CanvasDirection> = <CanvasRenderingContext2D>.direction;
<CanvasRenderingContext2D>.direction = <CanvasDirection>;
<new CanvasDirection> = <OffscreenCanvasRenderingContext2D>.direction;
<OffscreenCanvasRenderingContext2D>.direction = <CanvasDirection>;
<new DOMString> = <CanvasRenderingContext2D>.letterSpacing;
<CanvasRenderingContext2D>.letterSpacing = <DOMString>;
<new DOMString> = <OffscreenCanvasRenderingContext2D>.letterSpacing;
<OffscreenCanvasRenderingContext2D>.letterSpacing = <DOMString>;
<new CanvasFontKerning> = <CanvasRenderingContext2D>.fontKerning;
<CanvasRenderingContext2D>.fontKerning = <CanvasFontKerning>;
<new CanvasFontKerning> = <OffscreenCanvasRenderingContext2D>.fontKerning;
<OffscreenCanvasRenderingContext2D>.fontKerning = <CanvasFontKerning>;
<new CanvasFontStretch> = <CanvasRenderingContext2D>.fontStretch;
<CanvasRenderingContext2D>.fontStretch = <CanvasFontStretch>;
<new CanvasFontStretch> = <OffscreenCanvasRenderingContext2D>.fontStretch;
<OffscreenCanvasRenderingContext2D>.fontStretch = <CanvasFontStretch>;
<new CanvasFontVariantCaps> = <CanvasRenderingContext2D>.fontVariantCaps;
<CanvasRenderingContext2D>.fontVariantCaps = <CanvasFontVariantCaps>;
<new CanvasFontVariantCaps> = <OffscreenCanvasRenderingContext2D>.fontVariantCaps;
<OffscreenCanvasRenderingContext2D>.fontVariantCaps = <CanvasFontVariantCaps>;
<new CanvasTextRendering> = <CanvasRenderingContext2D>.textRendering;
<CanvasRenderingContext2D>.textRendering = <CanvasTextRendering>;
<new CanvasTextRendering> = <OffscreenCanvasRenderingContext2D>.textRendering;
<OffscreenCanvasRenderingContext2D>.textRendering = <CanvasTextRendering>;
<new DOMString> = <CanvasRenderingContext2D>.wordSpacing;
<CanvasRenderingContext2D>.wordSpacing = <DOMString>;
<new DOMString> = <OffscreenCanvasRenderingContext2D>.wordSpacing;
<OffscreenCanvasRenderingContext2D>.wordSpacing = <DOMString>;
<CanvasRenderingContext2D>.closePath();
<OffscreenCanvasRenderingContext2D>.closePath();
<PaintRenderingContext2D>.closePath();
<Path2D>.closePath();
<CanvasRenderingContext2D>.moveTo(<unrestricted_double>,<unrestricted_double>);
<OffscreenCanvasRenderingContext2D>.moveTo(<unrestricted_double>,<unrestricted_double>);
<PaintRenderingContext2D>.moveTo(<unrestricted_double>,<unrestricted_double>);
<Path2D>.moveTo(<unrestricted_double>,<unrestricted_double>);
<CanvasRenderingContext2D>.lineTo(<unrestricted_double>,<unrestricted_double>);
<OffscreenCanvasRenderingContext2D>.lineTo(<unrestricted_double>,<unrestricted_double>);
<PaintRenderingContext2D>.lineTo(<unrestricted_double>,<unrestricted_double>);
<Path2D>.lineTo(<unrestricted_double>,<unrestricted_double>);
<CanvasRenderingContext2D>.quadraticCurveTo(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<OffscreenCanvasRenderingContext2D>.quadraticCurveTo(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<PaintRenderingContext2D>.quadraticCurveTo(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<Path2D>.quadraticCurveTo(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<CanvasRenderingContext2D>.bezierCurveTo(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<OffscreenCanvasRenderingContext2D>.bezierCurveTo(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<PaintRenderingContext2D>.bezierCurveTo(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<Path2D>.bezierCurveTo(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<CanvasRenderingContext2D>.arcTo(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<OffscreenCanvasRenderingContext2D>.arcTo(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<PaintRenderingContext2D>.arcTo(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<Path2D>.arcTo(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<CanvasRenderingContext2D>.rect(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<OffscreenCanvasRenderingContext2D>.rect(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<PaintRenderingContext2D>.rect(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<Path2D>.rect(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<new union_unrestricted_double1DOMPointInit_> = <unrestricted_double>;
<new union_unrestricted_double1DOMPointInit_> = <DOMPointInit>;
<new sequence_union_unrestricted_double1DOMPointInit__> = [<union_unrestricted_double1DOMPointInit_>];
<new union_unrestricted_double1DOMPointInit_> = <sequence_union_unrestricted_double1DOMPointInit__>[0];
<new union_unrestricted_double1DOMPointInit1sequence_union_unrestricted_double1DOMPointInit___> = <unrestricted_double>;
<new union_unrestricted_double1DOMPointInit1sequence_union_unrestricted_double1DOMPointInit___> = <DOMPointInit>;
<new union_unrestricted_double1DOMPointInit1sequence_union_unrestricted_double1DOMPointInit___> = <sequence_union_unrestricted_double1DOMPointInit__>;
<CanvasRenderingContext2D>.roundRect(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<CanvasRenderingContext2D>.roundRect(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<union_unrestricted_double1DOMPointInit1sequence_union_unrestricted_double1DOMPointInit___>);
<OffscreenCanvasRenderingContext2D>.roundRect(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<OffscreenCanvasRenderingContext2D>.roundRect(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<union_unrestricted_double1DOMPointInit1sequence_union_unrestricted_double1DOMPointInit___>);
<PaintRenderingContext2D>.roundRect(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<PaintRenderingContext2D>.roundRect(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<union_unrestricted_double1DOMPointInit1sequence_union_unrestricted_double1DOMPointInit___>);
<Path2D>.roundRect(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<Path2D>.roundRect(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<union_unrestricted_double1DOMPointInit1sequence_union_unrestricted_double1DOMPointInit___>);
<CanvasRenderingContext2D>.arc(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<CanvasRenderingContext2D>.arc(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<boolean>);
<OffscreenCanvasRenderingContext2D>.arc(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<OffscreenCanvasRenderingContext2D>.arc(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<boolean>);
<PaintRenderingContext2D>.arc(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<PaintRenderingContext2D>.arc(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<boolean>);
<Path2D>.arc(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<Path2D>.arc(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<boolean>);
<CanvasRenderingContext2D>.ellipse(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<CanvasRenderingContext2D>.ellipse(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<boolean>);
<OffscreenCanvasRenderingContext2D>.ellipse(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<OffscreenCanvasRenderingContext2D>.ellipse(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<boolean>);
<PaintRenderingContext2D>.ellipse(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<PaintRenderingContext2D>.ellipse(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<boolean>);
<Path2D>.ellipse(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>);
<Path2D>.ellipse(<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<unrestricted_double>,<boolean>);
<new DOMString> = <HTMLElement>.contentEditable;
<HTMLElement>.contentEditable = <DOMString>;
<new DOMString> = <HTMLElement>.enterKeyHint;
<HTMLElement>.enterKeyHint = <DOMString>;
<new boolean> = <HTMLElement>.isContentEditable;
<new DOMString> = <HTMLElement>.inputMode;
<HTMLElement>.inputMode = <DOMString>;
<new EventHandler> = <HTMLElement>.onabort;
<HTMLElement>.onabort = <EventHandler>;
<new EventHandler> = <MathMLElement>.onabort;
<MathMLElement>.onabort = <EventHandler>;
<new EventHandler> = <SVGElement>.onabort;
<SVGElement>.onabort = <EventHandler>;
<new EventHandler> = <Document>.onabort;
<Document>.onabort = <EventHandler>;
<new EventHandler> = <Window>.onabort;
<Window>.onabort = <EventHandler>;
<new EventHandler> = <HTMLElement>.onauxclick;
<HTMLElement>.onauxclick = <EventHandler>;
<new EventHandler> = <MathMLElement>.onauxclick;
<MathMLElement>.onauxclick = <EventHandler>;
<new EventHandler> = <SVGElement>.onauxclick;
<SVGElement>.onauxclick = <EventHandler>;
<new EventHandler> = <Document>.onauxclick;
<Document>.onauxclick = <EventHandler>;
<new EventHandler> = <Window>.onauxclick;
<Window>.onauxclick = <EventHandler>;
<new EventHandler> = <HTMLElement>.onbeforeinput;
<HTMLElement>.onbeforeinput = <EventHandler>;
<new EventHandler> = <MathMLElement>.onbeforeinput;
<MathMLElement>.onbeforeinput = <EventHandler>;
<new EventHandler> = <SVGElement>.onbeforeinput;
<SVGElement>.onbeforeinput = <EventHandler>;
<new EventHandler> = <Document>.onbeforeinput;
<Document>.onbeforeinput = <EventHandler>;
<new EventHandler> = <Window>.onbeforeinput;
<Window>.onbeforeinput = <EventHandler>;
<new EventHandler> = <HTMLElement>.onbeforematch;
<HTMLElement>.onbeforematch = <EventHandler>;
<new EventHandler> = <MathMLElement>.onbeforematch;
<MathMLElement>.onbeforematch = <EventHandler>;
<new EventHandler> = <SVGElement>.onbeforematch;
<SVGElement>.onbeforematch = <EventHandler>;
<new EventHandler> = <Document>.onbeforematch;
<Document>.onbeforematch = <EventHandler>;
<new EventHandler> = <Window>.onbeforematch;
<Window>.onbeforematch = <EventHandler>;
<new EventHandler> = <HTMLElement>.onblur;
<HTMLElement>.onblur = <EventHandler>;
<new EventHandler> = <MathMLElement>.onblur;
<MathMLElement>.onblur = <EventHandler>;
<new EventHandler> = <SVGElement>.onblur;
<SVGElement>.onblur = <EventHandler>;
<new EventHandler> = <Document>.onblur;
<Document>.onblur = <EventHandler>;
<new EventHandler> = <Window>.onblur;
<Window>.onblur = <EventHandler>;
<new EventHandler> = <HTMLElement>.oncancel;
<HTMLElement>.oncancel = <EventHandler>;
<new EventHandler> = <MathMLElement>.oncancel;
<MathMLElement>.oncancel = <EventHandler>;
<new EventHandler> = <SVGElement>.oncancel;
<SVGElement>.oncancel = <EventHandler>;
<new EventHandler> = <Document>.oncancel;
<Document>.oncancel = <EventHandler>;
<new EventHandler> = <Window>.oncancel;
<Window>.oncancel = <EventHandler>;
<new EventHandler> = <HTMLElement>.oncanplay;
<HTMLElement>.oncanplay = <EventHandler>;
<new EventHandler> = <MathMLElement>.oncanplay;
<MathMLElement>.oncanplay = <EventHandler>;
<new EventHandler> = <SVGElement>.oncanplay;
<SVGElement>.oncanplay = <EventHandler>;
<new EventHandler> = <Document>.oncanplay;
<Document>.oncanplay = <EventHandler>;
<new EventHandler> = <Window>.oncanplay;
<Window>.oncanplay = <EventHandler>;
<new EventHandler> = <HTMLElement>.oncanplaythrough;
<HTMLElement>.oncanplaythrough = <EventHandler>;
<new EventHandler> = <MathMLElement>.oncanplaythrough;
<MathMLElement>.oncanplaythrough = <EventHandler>;
<new EventHandler> = <SVGElement>.oncanplaythrough;
<SVGElement>.oncanplaythrough = <EventHandler>;
<new EventHandler> = <Document>.oncanplaythrough;
<Document>.oncanplaythrough = <EventHandler>;
<new EventHandler> = <Window>.oncanplaythrough;
<Window>.oncanplaythrough = <EventHandler>;
<new EventHandler> = <HTMLElement>.onchange;
<HTMLElement>.onchange = <EventHandler>;
<new EventHandler> = <MathMLElement>.onchange;
<MathMLElement>.onchange = <EventHandler>;
<new EventHandler> = <SVGElement>.onchange;
<SVGElement>.onchange = <EventHandler>;
<new EventHandler> = <Document>.onchange;
<Document>.onchange = <EventHandler>;
<new EventHandler> = <Window>.onchange;
<Window>.onchange = <EventHandler>;
<new EventHandler> = <HTMLElement>.onclick;
<HTMLElement>.onclick = <EventHandler>;
<new EventHandler> = <MathMLElement>.onclick;
<MathMLElement>.onclick = <EventHandler>;
<new EventHandler> = <SVGElement>.onclick;
<SVGElement>.onclick = <EventHandler>;
<new EventHandler> = <Document>.onclick;
<Document>.onclick = <EventHandler>;
<new EventHandler> = <Window>.onclick;
<Window>.onclick = <EventHandler>;
<new EventHandler> = <HTMLElement>.onclose;
<HTMLElement>.onclose = <EventHandler>;
<new EventHandler> = <MathMLElement>.onclose;
<MathMLElement>.onclose = <EventHandler>;
<new EventHandler> = <SVGElement>.onclose;
<SVGElement>.onclose = <EventHandler>;
<new EventHandler> = <Document>.onclose;
<Document>.onclose = <EventHandler>;
<new EventHandler> = <Window>.onclose;
<Window>.onclose = <EventHandler>;
<new EventHandler> = <HTMLElement>.oncontextlost;
<HTMLElement>.oncontextlost = <EventHandler>;
<new EventHandler> = <MathMLElement>.oncontextlost;
<MathMLElement>.oncontextlost = <EventHandler>;
<new EventHandler> = <SVGElement>.oncontextlost;
<SVGElement>.oncontextlost = <EventHandler>;
<new EventHandler> = <Document>.oncontextlost;
<Document>.oncontextlost = <EventHandler>;
<new EventHandler> = <Window>.oncontextlost;
<Window>.oncontextlost = <EventHandler>;
<new EventHandler> = <HTMLElement>.oncontextmenu;
<HTMLElement>.oncontextmenu = <EventHandler>;
<new EventHandler> = <MathMLElement>.oncontextmenu;
<MathMLElement>.oncontextmenu = <EventHandler>;
<new EventHandler> = <SVGElement>.oncontextmenu;
<SVGElement>.oncontextmenu = <EventHandler>;
<new EventHandler> = <Document>.oncontextmenu;
<Document>.oncontextmenu = <EventHandler>;
<new EventHandler> = <Window>.oncontextmenu;
<Window>.oncontextmenu = <EventHandler>;
<new EventHandler> = <HTMLElement>.oncontextrestored;
<HTMLElement>.oncontextrestored = <EventHandler>;
<new EventHandler> = <MathMLElement>.oncontextrestored;
<MathMLElement>.oncontextrestored = <EventHandler>;
<new EventHandler> = <SVGElement>.oncontextrestored;
<SVGElement>.oncontextrestored = <EventHandler>;
<new EventHandler> = <Document>.oncontextrestored;
<Document>.oncontextrestored = <EventHandler>;
<new EventHandler> = <Window>.oncontextrestored;
<Window>.oncontextrestored = <EventHandler>;
<new EventHandler> = <HTMLElement>.oncopy;
<HTMLElement>.oncopy = <EventHandler>;
<new EventHandler> = <MathMLElement>.oncopy;
<MathMLElement>.oncopy = <EventHandler>;
<new EventHandler> = <SVGElement>.oncopy;
<SVGElement>.oncopy = <EventHandler>;
<new EventHandler> = <Document>.oncopy;
<Document>.oncopy = <EventHandler>;
<new EventHandler> = <Window>.oncopy;
<Window>.oncopy = <EventHandler>;
<new EventHandler> = <HTMLElement>.oncuechange;
<HTMLElement>.oncuechange = <EventHandler>;
<new EventHandler> = <MathMLElement>.oncuechange;
<MathMLElement>.oncuechange = <EventHandler>;
<new EventHandler> = <SVGElement>.oncuechange;
<SVGElement>.oncuechange = <EventHandler>;
<new EventHandler> = <Document>.oncuechange;
<Document>.oncuechange = <EventHandler>;
<new EventHandler> = <Window>.oncuechange;
<Window>.oncuechange = <EventHandler>;
<new EventHandler> = <HTMLElement>.oncut;
<HTMLElement>.oncut = <EventHandler>;
<new EventHandler> = <MathMLElement>.oncut;
<MathMLElement>.oncut = <EventHandler>;
<new EventHandler> = <SVGElement>.oncut;
<SVGElement>.oncut = <EventHandler>;
<new EventHandler> = <Document>.oncut;
<Document>.oncut = <EventHandler>;
<new EventHandler> = <Window>.oncut;
<Window>.oncut = <EventHandler>;
<new EventHandler> = <HTMLElement>.ondblclick;
<HTMLElement>.ondblclick = <EventHandler>;
<new EventHandler> = <MathMLElement>.ondblclick;
<MathMLElement>.ondblclick = <EventHandler>;
<new EventHandler> = <SVGElement>.ondblclick;
<SVGElement>.ondblclick = <EventHandler>;
<new EventHandler> = <Document>.ondblclick;
<Document>.ondblclick = <EventHandler>;
<new EventHandler> = <Window>.ondblclick;
<Window>.ondblclick = <EventHandler>;
<new EventHandler> = <HTMLElement>.ondrag;
<HTMLElement>.ondrag = <EventHandler>;
<new EventHandler> = <MathMLElement>.ondrag;
<MathMLElement>.ondrag = <EventHandler>;
<new EventHandler> = <SVGElement>.ondrag;
<SVGElement>.ondrag = <EventHandler>;
<new EventHandler> = <Document>.ondrag;
<Document>.ondrag = <EventHandler>;
<new EventHandler> = <Window>.ondrag;
<Window>.ondrag = <EventHandler>;
<new EventHandler> = <HTMLElement>.ondragend;
<HTMLElement>.ondragend = <EventHandler>;
<new EventHandler> = <MathMLElement>.ondragend;
<MathMLElement>.ondragend = <EventHandler>;
<new EventHandler> = <SVGElement>.ondragend;
<SVGElement>.ondragend = <EventHandler>;
<new EventHandler> = <Document>.ondragend;
<Document>.ondragend = <EventHandler>;
<new EventHandler> = <Window>.ondragend;
<Window>.ondragend = <EventHandler>;
<new EventHandler> = <HTMLElement>.ondragenter;
<HTMLElement>.ondragenter = <EventHandler>;
<new EventHandler> = <MathMLElement>.ondragenter;
<MathMLElement>.ondragenter = <EventHandler>;
<new EventHandler> = <SVGElement>.ondragenter;
<SVGElement>.ondragenter = <EventHandler>;
<new EventHandler> = <Document>.ondragenter;
<Document>.ondragenter = <EventHandler>;
<new EventHandler> = <Window>.ondragenter;
<Window>.ondragenter = <EventHandler>;
<new EventHandler> = <HTMLElement>.ondragleave;
<HTMLElement>.ondragleave = <EventHandler>;
<new EventHandler> = <MathMLElement>.ondragleave;
<MathMLElement>.ondragleave = <EventHandler>;
<new EventHandler> = <SVGElement>.ondragleave;
<SVGElement>.ondragleave = <EventHandler>;
<new EventHandler> = <Document>.ondragleave;
<Document>.ondragleave = <EventHandler>;
<new EventHandler> = <Window>.ondragleave;
<Window>.ondragleave = <EventHandler>;
<new EventHandler> = <HTMLElement>.ondragover;
<HTMLElement>.ondragover = <EventHandler>;
<new EventHandler> = <MathMLElement>.ondragover;
<MathMLElement>.ondragover = <EventHandler>;
<new EventHandler> = <SVGElement>.ondragover;
<SVGElement>.ondragover = <EventHandler>;
<new EventHandler> = <Document>.ondragover;
<Document>.ondragover = <EventHandler>;
<new EventHandler> = <Window>.ondragover;
<Window>.ondragover = <EventHandler>;
<new EventHandler> = <HTMLElement>.ondragstart;
<HTMLElement>.ondragstart = <EventHandler>;
<new EventHandler> = <MathMLElement>.ondragstart;
<MathMLElement>.ondragstart = <EventHandler>;
<new EventHandler> = <SVGElement>.ondragstart;
<SVGElement>.ondragstart = <EventHandler>;
<new EventHandler> = <Document>.ondragstart;
<Document>.ondragstart = <EventHandler>;
<new EventHandler> = <Window>.ondragstart;
<Window>.ondragstart = <EventHandler>;
<new EventHandler> = <HTMLElement>.ondrop;
<HTMLElement>.ondrop = <EventHandler>;
<new EventHandler> = <MathMLElement>.ondrop;
<MathMLElement>.ondrop = <EventHandler>;
<new EventHandler> = <SVGElement>.ondrop;
<SVGElement>.ondrop = <EventHandler>;
<new EventHandler> = <Document>.ondrop;
<Document>.ondrop = <EventHandler>;
<new EventHandler> = <Window>.ondrop;
<Window>.ondrop = <EventHandler>;
<new EventHandler> = <HTMLElement>.ondurationchange;
<HTMLElement>.ondurationchange = <EventHandler>;
<new EventHandler> = <MathMLElement>.ondurationchange;
<MathMLElement>.ondurationchange = <EventHandler>;
<new EventHandler> = <SVGElement>.ondurationchange;
<SVGElement>.ondurationchange = <EventHandler>;
<new EventHandler> = <Document>.ondurationchange;
<Document>.ondurationchange = <EventHandler>;
<new EventHandler> = <Window>.ondurationchange;
<Window>.ondurationchange = <EventHandler>;
<new EventHandler> = <HTMLElement>.onemptied;
<HTMLElement>.onemptied = <EventHandler>;
<new EventHandler> = <MathMLElement>.onemptied;
<MathMLElement>.onemptied = <EventHandler>;
<new EventHandler> = <SVGElement>.onemptied;
<SVGElement>.onemptied = <EventHandler>;
<new EventHandler> = <Document>.onemptied;
<Document>.onemptied = <EventHandler>;
<new EventHandler> = <Window>.onemptied;
<Window>.onemptied = <EventHandler>;
<new EventHandler> = <HTMLElement>.onended;
<HTMLElement>.onended = <EventHandler>;
<new EventHandler> = <MathMLElement>.onended;
<MathMLElement>.onended = <EventHandler>;
<new EventHandler> = <SVGElement>.onended;
<SVGElement>.onended = <EventHandler>;
<new EventHandler> = <Document>.onended;
<Document>.onended = <EventHandler>;
<new EventHandler> = <Window>.onended;
<Window>.onended = <EventHandler>;
<new OnErrorEventHandler> = <HTMLElement>.onerror;
<HTMLElement>.onerror = <OnErrorEventHandler>;
<new OnErrorEventHandler> = <MathMLElement>.onerror;
<MathMLElement>.onerror = <OnErrorEventHandler>;
<new OnErrorEventHandler> = <SVGElement>.onerror;
<SVGElement>.onerror = <OnErrorEventHandler>;
<new OnErrorEventHandler> = <Document>.onerror;
<Document>.onerror = <OnErrorEventHandler>;
<new OnErrorEventHandler> = <Window>.onerror;
<Window>.onerror = <OnErrorEventHandler>;
<new EventHandler> = <HTMLElement>.onfocus;
<HTMLElement>.onfocus = <EventHandler>;
<new EventHandler> = <MathMLElement>.onfocus;
<MathMLElement>.onfocus = <EventHandler>;
<new EventHandler> = <SVGElement>.onfocus;
<SVGElement>.onfocus = <EventHandler>;
<new EventHandler> = <Document>.onfocus;
<Document>.onfocus = <EventHandler>;
<new EventHandler> = <Window>.onfocus;
<Window>.onfocus = <EventHandler>;
<new EventHandler> = <HTMLElement>.onformdata;
<HTMLElement>.onformdata = <EventHandler>;
<new EventHandler> = <MathMLElement>.onformdata;
<MathMLElement>.onformdata = <EventHandler>;
<new EventHandler> = <SVGElement>.onformdata;
<SVGElement>.onformdata = <EventHandler>;
<new EventHandler> = <Document>.onformdata;
<Document>.onformdata = <EventHandler>;
<new EventHandler> = <Window>.onformdata;
<Window>.onformdata = <EventHandler>;
<new EventHandler> = <HTMLElement>.oninput;
<HTMLElement>.oninput = <EventHandler>;
<new EventHandler> = <MathMLElement>.oninput;
<MathMLElement>.oninput = <EventHandler>;
<new EventHandler> = <SVGElement>.oninput;
<SVGElement>.oninput = <EventHandler>;
<new EventHandler> = <Document>.oninput;
<Document>.oninput = <EventHandler>;
<new EventHandler> = <Window>.oninput;
<Window>.oninput = <EventHandler>;
<new EventHandler> = <HTMLElement>.oninvalid;
<HTMLElement>.oninvalid = <EventHandler>;
<new EventHandler> = <MathMLElement>.oninvalid;
<MathMLElement>.oninvalid = <EventHandler>;
<new EventHandler> = <SVGElement>.oninvalid;
<SVGElement>.oninvalid = <EventHandler>;
<new EventHandler> = <Document>.oninvalid;
<Document>.oninvalid = <EventHandler>;
<new EventHandler> = <Window>.oninvalid;
<Window>.oninvalid = <EventHandler>;
<new EventHandler> = <HTMLElement>.onkeydown;
<HTMLElement>.onkeydown = <EventHandler>;
<new EventHandler> = <MathMLElement>.onkeydown;
<MathMLElement>.onkeydown = <EventHandler>;
<new EventHandler> = <SVGElement>.onkeydown;
<SVGElement>.onkeydown = <EventHandler>;
<new EventHandler> = <Document>.onkeydown;
<Document>.onkeydown = <EventHandler>;
<new EventHandler> = <Window>.onkeydown;
<Window>.onkeydown = <EventHandler>;
<new EventHandler> = <HTMLElement>.onkeypress;
<HTMLElement>.onkeypress = <EventHandler>;
<new EventHandler> = <MathMLElement>.onkeypress;
<MathMLElement>.onkeypress = <EventHandler>;
<new EventHandler> = <SVGElement>.onkeypress;
<SVGElement>.onkeypress = <EventHandler>;
<new EventHandler> = <Document>.onkeypress;
<Document>.onkeypress = <EventHandler>;
<new EventHandler> = <Window>.onkeypress;
<Window>.onkeypress = <EventHandler>;
<new EventHandler> = <HTMLElement>.onkeyup;
<HTMLElement>.onkeyup = <EventHandler>;
<new EventHandler> = <MathMLElement>.onkeyup;
<MathMLElement>.onkeyup = <EventHandler>;
<new EventHandler> = <SVGElement>.onkeyup;
<SVGElement>.onkeyup = <EventHandler>;
<new EventHandler> = <Document>.onkeyup;
<Document>.onkeyup = <EventHandler>;
<new EventHandler> = <Window>.onkeyup;
<Window>.onkeyup = <EventHandler>;
<new EventHandler> = <HTMLElement>.onload;
<HTMLElement>.onload = <EventHandler>;
<new EventHandler> = <MathMLElement>.onload;
<MathMLElement>.onload = <EventHandler>;
<new EventHandler> = <SVGElement>.onload;
<SVGElement>.onload = <EventHandler>;
<new EventHandler> = <Document>.onload;
<Document>.onload = <EventHandler>;
<new EventHandler> = <Window>.onload;
<Window>.onload = <EventHandler>;
<new EventHandler> = <HTMLElement>.onloadeddata;
<HTMLElement>.onloadeddata = <EventHandler>;
<new EventHandler> = <MathMLElement>.onloadeddata;
<MathMLElement>.onloadeddata = <EventHandler>;
<new EventHandler> = <SVGElement>.onloadeddata;
<SVGElement>.onloadeddata = <EventHandler>;
<new EventHandler> = <Document>.onloadeddata;
<Document>.onloadeddata = <EventHandler>;
<new EventHandler> = <Window>.onloadeddata;
<Window>.onloadeddata = <EventHandler>;
<new EventHandler> = <HTMLElement>.onloadedmetadata;
<HTMLElement>.onloadedmetadata = <EventHandler>;
<new EventHandler> = <MathMLElement>.onloadedmetadata;
<MathMLElement>.onloadedmetadata = <EventHandler>;
<new EventHandler> = <SVGElement>.onloadedmetadata;
<SVGElement>.onloadedmetadata = <EventHandler>;
<new EventHandler> = <Document>.onloadedmetadata;
<Document>.onloadedmetadata = <EventHandler>;
<new EventHandler> = <Window>.onloadedmetadata;
<Window>.onloadedmetadata = <EventHandler>;
<new EventHandler> = <HTMLElement>.onloadstart;
<HTMLElement>.onloadstart = <EventHandler>;
<new EventHandler> = <MathMLElement>.onloadstart;
<MathMLElement>.onloadstart = <EventHandler>;
<new EventHandler> = <SVGElement>.onloadstart;
<SVGElement>.onloadstart = <EventHandler>;
<new EventHandler> = <Document>.onloadstart;
<Document>.onloadstart = <EventHandler>;
<new EventHandler> = <Window>.onloadstart;
<Window>.onloadstart = <EventHandler>;
<new EventHandler> = <HTMLElement>.onmousedown;
<HTMLElement>.onmousedown = <EventHandler>;
<new EventHandler> = <MathMLElement>.onmousedown;
<MathMLElement>.onmousedown = <EventHandler>;
<new EventHandler> = <SVGElement>.onmousedown;
<SVGElement>.onmousedown = <EventHandler>;
<new EventHandler> = <Document>.onmousedown;
<Document>.onmousedown = <EventHandler>;
<new EventHandler> = <Window>.onmousedown;
<Window>.onmousedown = <EventHandler>;
<new EventHandler> = <HTMLElement>.onmouseenter;
<HTMLElement>.onmouseenter = <EventHandler>;
<new EventHandler> = <MathMLElement>.onmouseenter;
<MathMLElement>.onmouseenter = <EventHandler>;
<new EventHandler> = <SVGElement>.onmouseenter;
<SVGElement>.onmouseenter = <EventHandler>;
<new EventHandler> = <Document>.onmouseenter;
<Document>.onmouseenter = <EventHandler>;
<new EventHandler> = <Window>.onmouseenter;
<Window>.onmouseenter = <EventHandler>;
<new EventHandler> = <HTMLElement>.onmouseleave;
<HTMLElement>.onmouseleave = <EventHandler>;
<new EventHandler> = <MathMLElement>.onmouseleave;
<MathMLElement>.onmouseleave = <EventHandler>;
<new EventHandler> = <SVGElement>.onmouseleave;
<SVGElement>.onmouseleave = <EventHandler>;
<new EventHandler> = <Document>.onmouseleave;
<Document>.onmouseleave = <EventHandler>;
<new EventHandler> = <Window>.onmouseleave;
<Window>.onmouseleave = <EventHandler>;
<new EventHandler> = <HTMLElement>.onmousemove;
<HTMLElement>.onmousemove = <EventHandler>;
<new EventHandler> = <MathMLElement>.onmousemove;
<MathMLElement>.onmousemove = <EventHandler>;
<new EventHandler> = <SVGElement>.onmousemove;
<SVGElement>.onmousemove = <EventHandler>;
<new EventHandler> = <Document>.onmousemove;
<Document>.onmousemove = <EventHandler>;
<new EventHandler> = <Window>.onmousemove;
<Window>.onmousemove = <EventHandler>;
<new EventHandler> = <HTMLElement>.onmouseout;
<HTMLElement>.onmouseout = <EventHandler>;
<new EventHandler> = <MathMLElement>.onmouseout;
<MathMLElement>.onmouseout = <EventHandler>;
<new EventHandler> = <SVGElement>.onmouseout;
<SVGElement>.onmouseout = <EventHandler>;
<new EventHandler> = <Document>.onmouseout;
<Document>.onmouseout = <EventHandler>;
<new EventHandler> = <Window>.onmouseout;
<Window>.onmouseout = <EventHandler>;
<new EventHandler> = <HTMLElement>.onmouseover;
<HTMLElement>.onmouseover = <EventHandler>;
<new EventHandler> = <MathMLElement>.onmouseover;
<MathMLElement>.onmouseover = <EventHandler>;
<new EventHandler> = <SVGElement>.onmouseover;
<SVGElement>.onmouseover = <EventHandler>;
<new EventHandler> = <Document>.onmouseover;
<Document>.onmouseover = <EventHandler>;
<new EventHandler> = <Window>.onmouseover;
<Window>.onmouseover = <EventHandler>;
<new EventHandler> = <HTMLElement>.onmouseup;
<HTMLElement>.onmouseup = <EventHandler>;
<new EventHandler> = <MathMLElement>.onmouseup;
<MathMLElement>.onmouseup = <EventHandler>;
<new EventHandler> = <SVGElement>.onmouseup;
<SVGElement>.onmouseup = <EventHandler>;
<new EventHandler> = <Document>.onmouseup;
<Document>.onmouseup = <EventHandler>;
<new EventHandler> = <Window>.onmouseup;
<Window>.onmouseup = <EventHandler>;
<new EventHandler> = <HTMLElement>.onpaste;
<HTMLElement>.onpaste = <EventHandler>;
<new EventHandler> = <MathMLElement>.onpaste;
<MathMLElement>.onpaste = <EventHandler>;
<new EventHandler> = <SVGElement>.onpaste;
<SVGElement>.onpaste = <EventHandler>;
<new EventHandler> = <Document>.onpaste;
<Document>.onpaste = <EventHandler>;
<new EventHandler> = <Window>.onpaste;
<Window>.onpaste = <EventHandler>;
<new EventHandler> = <HTMLElement>.onpause;
<HTMLElement>.onpause = <EventHandler>;
<new EventHandler> = <MathMLElement>.onpause;
<MathMLElement>.onpause = <EventHandler>;
<new EventHandler> = <SVGElement>.onpause;
<SVGElement>.onpause = <EventHandler>;
<new EventHandler> = <Document>.onpause;
<Document>.onpause = <EventHandler>;
<new EventHandler> = <Window>.onpause;
<Window>.onpause = <EventHandler>;
<new EventHandler> = <HTMLElement>.onplay;
<HTMLElement>.onplay = <EventHandler>;
<new EventHandler> = <MathMLElement>.onplay;
<MathMLElement>.onplay = <EventHandler>;
<new EventHandler> = <SVGElement>.onplay;
<SVGElement>.onplay = <EventHandler>;
<new EventHandler> = <Document>.onplay;
<Document>.onplay = <EventHandler>;
<new EventHandler> = <Window>.onplay;
<Window>.onplay = <EventHandler>;
<new EventHandler> = <HTMLElement>.onplaying;
<HTMLElement>.onplaying = <EventHandler>;
<new EventHandler> = <MathMLElement>.onplaying;
<MathMLElement>.onplaying = <EventHandler>;
<new EventHandler> = <SVGElement>.onplaying;
<SVGElement>.onplaying = <EventHandler>;
<new EventHandler> = <Document>.onplaying;
<Document>.onplaying = <EventHandler>;
<new EventHandler> = <Window>.onplaying;
<Window>.onplaying = <EventHandler>;
<new EventHandler> = <HTMLElement>.onprogress;
<HTMLElement>.onprogress = <EventHandler>;
<new EventHandler> = <MathMLElement>.onprogress;
<MathMLElement>.onprogress = <EventHandler>;
<new EventHandler> = <SVGElement>.onprogress;
<SVGElement>.onprogress = <EventHandler>;
<new EventHandler> = <Document>.onprogress;
<Document>.onprogress = <EventHandler>;
<new EventHandler> = <Window>.onprogress;
<Window>.onprogress = <EventHandler>;
<new EventHandler> = <HTMLElement>.onratechange;
<HTMLElement>.onratechange = <EventHandler>;
<new EventHandler> = <MathMLElement>.onratechange;
<MathMLElement>.onratechange = <EventHandler>;
<new EventHandler> = <SVGElement>.onratechange;
<SVGElement>.onratechange = <EventHandler>;
<new EventHandler> = <Document>.onratechange;
<Document>.onratechange = <EventHandler>;
<new EventHandler> = <Window>.onratechange;
<Window>.onratechange = <EventHandler>;
<new EventHandler> = <HTMLElement>.onreset;
<HTMLElement>.onreset = <EventHandler>;
<new EventHandler> = <MathMLElement>.onreset;
<MathMLElement>.onreset = <EventHandler>;
<new EventHandler> = <SVGElement>.onreset;
<SVGElement>.onreset = <EventHandler>;
<new EventHandler> = <Document>.onreset;
<Document>.onreset = <EventHandler>;
<new EventHandler> = <Window>.onreset;
<Window>.onreset = <EventHandler>;
<new EventHandler> = <HTMLElement>.onresize;
<HTMLElement>.onresize = <EventHandler>;
<new EventHandler> = <MathMLElement>.onresize;
<MathMLElement>.onresize = <EventHandler>;
<new EventHandler> = <SVGElement>.onresize;
<SVGElement>.onresize = <EventHandler>;
<new EventHandler> = <Document>.onresize;
<Document>.onresize = <EventHandler>;
<new EventHandler> = <Window>.onresize;
<Window>.onresize = <EventHandler>;
<new EventHandler> = <HTMLElement>.onscroll;
<HTMLElement>.onscroll = <EventHandler>;
<new EventHandler> = <MathMLElement>.onscroll;
<MathMLElement>.onscroll = <EventHandler>;
<new EventHandler> = <SVGElement>.onscroll;
<SVGElement>.onscroll = <EventHandler>;
<new EventHandler> = <Document>.onscroll;
<Document>.onscroll = <EventHandler>;
<new EventHandler> = <Window>.onscroll;
<Window>.onscroll = <EventHandler>;
<new EventHandler> = <HTMLElement>.onscrollend;
<HTMLElement>.onscrollend = <EventHandler>;
<new EventHandler> = <MathMLElement>.onscrollend;
<MathMLElement>.onscrollend = <EventHandler>;
<new EventHandler> = <SVGElement>.onscrollend;
<SVGElement>.onscrollend = <EventHandler>;
<new EventHandler> = <Document>.onscrollend;
<Document>.onscrollend = <EventHandler>;
<new EventHandler> = <Window>.onscrollend;
<Window>.onscrollend = <EventHandler>;
<new EventHandler> = <HTMLElement>.onsecuritypolicyviolation;
<HTMLElement>.onsecuritypolicyviolation = <EventHandler>;
<new EventHandler> = <MathMLElement>.onsecuritypolicyviolation;
<MathMLElement>.onsecuritypolicyviolation = <EventHandler>;
<new EventHandler> = <SVGElement>.onsecuritypolicyviolation;
<SVGElement>.onsecuritypolicyviolation = <EventHandler>;
<new EventHandler> = <Document>.onsecuritypolicyviolation;
<Document>.onsecuritypolicyviolation = <EventHandler>;
<new EventHandler> = <Window>.onsecuritypolicyviolation;
<Window>.onsecuritypolicyviolation = <EventHandler>;
<new EventHandler> = <HTMLElement>.onseeked;
<HTMLElement>.onseeked = <EventHandler>;
<new EventHandler> = <MathMLElement>.onseeked;
<MathMLElement>.onseeked = <EventHandler>;
<new EventHandler> = <SVGElement>.onseeked;
<SVGElement>.onseeked = <EventHandler>;
<new EventHandler> = <Document>.onseeked;
<Document>.onseeked = <EventHandler>;
<new EventHandler> = <Window>.onseeked;
<Window>.onseeked = <EventHandler>;
<new EventHandler> = <HTMLElement>.onseeking;
<HTMLElement>.onseeking = <EventHandler>;
<new EventHandler> = <MathMLElement>.onseeking;
<MathMLElement>.onseeking = <EventHandler>;
<new EventHandler> = <SVGElement>.onseeking;
<SVGElement>.onseeking = <EventHandler>;
<new EventHandler> = <Document>.onseeking;
<Document>.onseeking = <EventHandler>;
<new EventHandler> = <Window>.onseeking;
<Window>.onseeking = <EventHandler>;
<new EventHandler> = <HTMLElement>.onselect;
<HTMLElement>.onselect = <EventHandler>;
<new EventHandler> = <MathMLElement>.onselect;
<MathMLElement>.onselect = <EventHandler>;
<new EventHandler> = <SVGElement>.onselect;
<SVGElement>.onselect = <EventHandler>;
<new EventHandler> = <Document>.onselect;
<Document>.onselect = <EventHandler>;
<new EventHandler> = <Window>.onselect;
<Window>.onselect = <EventHandler>;
<new EventHandler> = <HTMLElement>.onslotchange;
<HTMLElement>.onslotchange = <EventHandler>;
<new EventHandler> = <MathMLElement>.onslotchange;
<MathMLElement>.onslotchange = <EventHandler>;
<new EventHandler> = <SVGElement>.onslotchange;
<SVGElement>.onslotchange = <EventHandler>;
<new EventHandler> = <Document>.onslotchange;
<Document>.onslotchange = <EventHandler>;
<new EventHandler> = <Window>.onslotchange;
<Window>.onslotchange = <EventHandler>;
<new EventHandler> = <HTMLElement>.onstalled;
<HTMLElement>.onstalled = <EventHandler>;
<new EventHandler> = <MathMLElement>.onstalled;
<MathMLElement>.onstalled = <EventHandler>;
<new EventHandler> = <SVGElement>.onstalled;
<SVGElement>.onstalled = <EventHandler>;
<new EventHandler> = <Document>.onstalled;
<Document>.onstalled = <EventHandler>;
<new EventHandler> = <Window>.onstalled;
<Window>.onstalled = <EventHandler>;
<new EventHandler> = <HTMLElement>.onsubmit;
<HTMLElement>.onsubmit = <EventHandler>;
<new EventHandler> = <MathMLElement>.onsubmit;
<MathMLElement>.onsubmit = <EventHandler>;
<new EventHandler> = <SVGElement>.onsubmit;
<SVGElement>.onsubmit = <EventHandler>;
<new EventHandler> = <Document>.onsubmit;
<Document>.onsubmit = <EventHandler>;
<new EventHandler> = <Window>.onsubmit;
<Window>.onsubmit = <EventHandler>;
<new EventHandler> = <HTMLElement>.onsuspend;
<HTMLElement>.onsuspend = <EventHandler>;
<new EventHandler> = <MathMLElement>.onsuspend;
<MathMLElement>.onsuspend = <EventHandler>;
<new EventHandler> = <SVGElement>.onsuspend;
<SVGElement>.onsuspend = <EventHandler>;
<new EventHandler> = <Document>.onsuspend;
<Document>.onsuspend = <EventHandler>;
<new EventHandler> = <Window>.onsuspend;
<Window>.onsuspend = <EventHandler>;
<new EventHandler> = <HTMLElement>.ontimeupdate;
<HTMLElement>.ontimeupdate = <EventHandler>;
<new EventHandler> = <MathMLElement>.ontimeupdate;
<MathMLElement>.ontimeupdate = <EventHandler>;
<new EventHandler> = <SVGElement>.ontimeupdate;
<SVGElement>.ontimeupdate = <EventHandler>;
<new EventHandler> = <Document>.ontimeupdate;
<Document>.ontimeupdate = <EventHandler>;
<new EventHandler> = <Window>.ontimeupdate;
<Window>.ontimeupdate = <EventHandler>;
<new EventHandler> = <HTMLElement>.ontoggle;
<HTMLElement>.ontoggle = <EventHandler>;
<new EventHandler> = <MathMLElement>.ontoggle;
<MathMLElement>.ontoggle = <EventHandler>;
<new EventHandler> = <SVGElement>.ontoggle;
<SVGElement>.ontoggle = <EventHandler>;
<new EventHandler> = <Document>.ontoggle;
<Document>.ontoggle = <EventHandler>;
<new EventHandler> = <Window>.ontoggle;
<Window>.ontoggle = <EventHandler>;
<new EventHandler> = <HTMLElement>.onvolumechange;
<HTMLElement>.onvolumechange = <EventHandler>;
<new EventHandler> = <MathMLElement>.onvolumechange;
<MathMLElement>.onvolumechange = <EventHandler>;
<new EventHandler> = <SVGElement>.onvolumechange;
<SVGElement>.onvolumechange = <EventHandler>;
<new EventHandler> = <Document>.onvolumechange;
<Document>.onvolumechange = <EventHandler>;
<new EventHandler> = <Window>.onvolumechange;
<Window>.onvolumechange = <EventHandler>;
<new EventHandler> = <HTMLElement>.onwaiting;
<HTMLElement>.onwaiting = <EventHandler>;
<new EventHandler> = <MathMLElement>.onwaiting;
<MathMLElement>.onwaiting = <EventHandler>;
<new EventHandler> = <SVGElement>.onwaiting;
<SVGElement>.onwaiting = <EventHandler>;
<new EventHandler> = <Document>.onwaiting;
<Document>.onwaiting = <EventHandler>;
<new EventHandler> = <Window>.onwaiting;
<Window>.onwaiting = <EventHandler>;
<new EventHandler> = <HTMLElement>.onwebkitanimationend;
<HTMLElement>.onwebkitanimationend = <EventHandler>;
<new EventHandler> = <MathMLElement>.onwebkitanimationend;
<MathMLElement>.onwebkitanimationend = <EventHandler>;
<new EventHandler> = <SVGElement>.onwebkitanimationend;
<SVGElement>.onwebkitanimationend = <EventHandler>;
<new EventHandler> = <Document>.onwebkitanimationend;
<Document>.onwebkitanimationend = <EventHandler>;
<new EventHandler> = <Window>.onwebkitanimationend;
<Window>.onwebkitanimationend = <EventHandler>;
<new EventHandler> = <HTMLElement>.onwebkitanimationiteration;
<HTMLElement>.onwebkitanimationiteration = <EventHandler>;
<new EventHandler> = <MathMLElement>.onwebkitanimationiteration;
<MathMLElement>.onwebkitanimationiteration = <EventHandler>;
<new EventHandler> = <SVGElement>.onwebkitanimationiteration;
<SVGElement>.onwebkitanimationiteration = <EventHandler>;
<new EventHandler> = <Document>.onwebkitanimationiteration;
<Document>.onwebkitanimationiteration = <EventHandler>;
<new EventHandler> = <Window>.onwebkitanimationiteration;
<Window>.onwebkitanimationiteration = <EventHandler>;
<new EventHandler> = <HTMLElement>.onwebkitanimationstart;
<HTMLElement>.onwebkitanimationstart = <EventHandler>;
<new EventHandler> = <MathMLElement>.onwebkitanimationstart;
<MathMLElement>.onwebkitanimationstart = <EventHandler>;
<new EventHandler> = <SVGElement>.onwebkitanimationstart;
<SVGElement>.onwebkitanimationstart = <EventHandler>;
<new EventHandler> = <Document>.onwebkitanimationstart;
<Document>.onwebkitanimationstart = <EventHandler>;
<new EventHandler> = <Window>.onwebkitanimationstart;
<Window>.onwebkitanimationstart = <EventHandler>;
<new EventHandler> = <HTMLElement>.onwebkittransitionend;
<HTMLElement>.onwebkittransitionend = <EventHandler>;
<new EventHandler> = <MathMLElement>.onwebkittransitionend;
<MathMLElement>.onwebkittransitionend = <EventHandler>;
<new EventHandler> = <SVGElement>.onwebkittransitionend;
<SVGElement>.onwebkittransitionend = <EventHandler>;
<new EventHandler> = <Document>.onwebkittransitionend;
<Document>.onwebkittransitionend = <EventHandler>;
<new EventHandler> = <Window>.onwebkittransitionend;
<Window>.onwebkittransitionend = <EventHandler>;
<new EventHandler> = <HTMLElement>.onwheel;
<HTMLElement>.onwheel = <EventHandler>;
<new EventHandler> = <MathMLElement>.onwheel;
<MathMLElement>.onwheel = <EventHandler>;
<new EventHandler> = <SVGElement>.onwheel;
<SVGElement>.onwheel = <EventHandler>;
<new EventHandler> = <Document>.onwheel;
<Document>.onwheel = <EventHandler>;
<new EventHandler> = <Window>.onwheel;
<Window>.onwheel = <EventHandler>;
<new EventHandler> = <SVGSVGElement>.onafterprint;
<SVGSVGElement>.onafterprint = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.onafterprint;
<HTMLFrameSetElement>.onafterprint = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.onafterprint;
<HTMLBodyElement>.onafterprint = <EventHandler>;
<new EventHandler> = <Window>.onafterprint;
<Window>.onafterprint = <EventHandler>;
<new EventHandler> = <SVGSVGElement>.onbeforeprint;
<SVGSVGElement>.onbeforeprint = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.onbeforeprint;
<HTMLFrameSetElement>.onbeforeprint = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.onbeforeprint;
<HTMLBodyElement>.onbeforeprint = <EventHandler>;
<new EventHandler> = <Window>.onbeforeprint;
<Window>.onbeforeprint = <EventHandler>;
<new OnBeforeUnloadEventHandler> = <SVGSVGElement>.onbeforeunload;
<SVGSVGElement>.onbeforeunload = <OnBeforeUnloadEventHandler>;
<new OnBeforeUnloadEventHandler> = <HTMLFrameSetElement>.onbeforeunload;
<HTMLFrameSetElement>.onbeforeunload = <OnBeforeUnloadEventHandler>;
<new OnBeforeUnloadEventHandler> = <HTMLBodyElement>.onbeforeunload;
<HTMLBodyElement>.onbeforeunload = <OnBeforeUnloadEventHandler>;
<new OnBeforeUnloadEventHandler> = <Window>.onbeforeunload;
<Window>.onbeforeunload = <OnBeforeUnloadEventHandler>;
<new EventHandler> = <SVGSVGElement>.onhashchange;
<SVGSVGElement>.onhashchange = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.onhashchange;
<HTMLFrameSetElement>.onhashchange = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.onhashchange;
<HTMLBodyElement>.onhashchange = <EventHandler>;
<new EventHandler> = <Window>.onhashchange;
<Window>.onhashchange = <EventHandler>;
<new EventHandler> = <SVGSVGElement>.onlanguagechange;
<SVGSVGElement>.onlanguagechange = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.onlanguagechange;
<HTMLFrameSetElement>.onlanguagechange = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.onlanguagechange;
<HTMLBodyElement>.onlanguagechange = <EventHandler>;
<new EventHandler> = <Window>.onlanguagechange;
<Window>.onlanguagechange = <EventHandler>;
<new EventHandler> = <SVGSVGElement>.onmessage;
<SVGSVGElement>.onmessage = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.onmessage;
<HTMLFrameSetElement>.onmessage = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.onmessage;
<HTMLBodyElement>.onmessage = <EventHandler>;
<new EventHandler> = <Window>.onmessage;
<Window>.onmessage = <EventHandler>;
<new EventHandler> = <SVGSVGElement>.onmessageerror;
<SVGSVGElement>.onmessageerror = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.onmessageerror;
<HTMLFrameSetElement>.onmessageerror = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.onmessageerror;
<HTMLBodyElement>.onmessageerror = <EventHandler>;
<new EventHandler> = <Window>.onmessageerror;
<Window>.onmessageerror = <EventHandler>;
<new EventHandler> = <SVGSVGElement>.onoffline;
<SVGSVGElement>.onoffline = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.onoffline;
<HTMLFrameSetElement>.onoffline = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.onoffline;
<HTMLBodyElement>.onoffline = <EventHandler>;
<new EventHandler> = <Window>.onoffline;
<Window>.onoffline = <EventHandler>;
<new EventHandler> = <SVGSVGElement>.ononline;
<SVGSVGElement>.ononline = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.ononline;
<HTMLFrameSetElement>.ononline = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.ononline;
<HTMLBodyElement>.ononline = <EventHandler>;
<new EventHandler> = <Window>.ononline;
<Window>.ononline = <EventHandler>;
<new EventHandler> = <SVGSVGElement>.onpagehide;
<SVGSVGElement>.onpagehide = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.onpagehide;
<HTMLFrameSetElement>.onpagehide = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.onpagehide;
<HTMLBodyElement>.onpagehide = <EventHandler>;
<new EventHandler> = <Window>.onpagehide;
<Window>.onpagehide = <EventHandler>;
<new EventHandler> = <SVGSVGElement>.onpageshow;
<SVGSVGElement>.onpageshow = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.onpageshow;
<HTMLFrameSetElement>.onpageshow = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.onpageshow;
<HTMLBodyElement>.onpageshow = <EventHandler>;
<new EventHandler> = <Window>.onpageshow;
<Window>.onpageshow = <EventHandler>;
<new EventHandler> = <SVGSVGElement>.onpopstate;
<SVGSVGElement>.onpopstate = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.onpopstate;
<HTMLFrameSetElement>.onpopstate = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.onpopstate;
<HTMLBodyElement>.onpopstate = <EventHandler>;
<new EventHandler> = <Window>.onpopstate;
<Window>.onpopstate = <EventHandler>;
<new EventHandler> = <SVGSVGElement>.onrejectionhandled;
<SVGSVGElement>.onrejectionhandled = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.onrejectionhandled;
<HTMLFrameSetElement>.onrejectionhandled = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.onrejectionhandled;
<HTMLBodyElement>.onrejectionhandled = <EventHandler>;
<new EventHandler> = <Window>.onrejectionhandled;
<Window>.onrejectionhandled = <EventHandler>;
<new EventHandler> = <SVGSVGElement>.onstorage;
<SVGSVGElement>.onstorage = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.onstorage;
<HTMLFrameSetElement>.onstorage = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.onstorage;
<HTMLBodyElement>.onstorage = <EventHandler>;
<new EventHandler> = <Window>.onstorage;
<Window>.onstorage = <EventHandler>;
<new EventHandler> = <SVGSVGElement>.onunhandledrejection;
<SVGSVGElement>.onunhandledrejection = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.onunhandledrejection;
<HTMLFrameSetElement>.onunhandledrejection = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.onunhandledrejection;
<HTMLBodyElement>.onunhandledrejection = <EventHandler>;
<new EventHandler> = <Window>.onunhandledrejection;
<Window>.onunhandledrejection = <EventHandler>;
<new EventHandler> = <SVGSVGElement>.onunload;
<SVGSVGElement>.onunload = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.onunload;
<HTMLFrameSetElement>.onunload = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.onunload;
<HTMLBodyElement>.onunload = <EventHandler>;
<new EventHandler> = <Window>.onunload;
<Window>.onunload = <EventHandler>;
<new USVString> = <WorkerGlobalScope>.origin;
<new USVString> = <Window>.origin;
<new boolean> = <WorkerGlobalScope>.isSecureContext;
<new boolean> = <Window>.isSecureContext;
<new boolean> = <WorkerGlobalScope>.crossOriginIsolated;
<new boolean> = <Window>.crossOriginIsolated;
<WorkerGlobalScope>.reportError(<any>);
<Window>.reportError(<any>);
<new DOMString> = <WorkerGlobalScope>.btoa(<DOMString>);
<new DOMString> = <Window>.btoa(<DOMString>);
<new ByteString> = <WorkerGlobalScope>.atob(<DOMString>);
<new ByteString> = <Window>.atob(<DOMString>);
<WorkerGlobalScope>.setTimeout(<TimerHandler>);
<WorkerGlobalScope>.setTimeout(<TimerHandler>,<long>);
<WorkerGlobalScope>.setTimeout(<TimerHandler>,<long>,<any>);
<Window>.setTimeout(<TimerHandler>);
<Window>.setTimeout(<TimerHandler>,<long>);
<Window>.setTimeout(<TimerHandler>,<long>,<any>);
<WorkerGlobalScope>.clearTimeout();
<WorkerGlobalScope>.clearTimeout(<long>);
<Window>.clearTimeout();
<Window>.clearTimeout(<long>);
<WorkerGlobalScope>.setInterval(<TimerHandler>);
<WorkerGlobalScope>.setInterval(<TimerHandler>,<long>);
<WorkerGlobalScope>.setInterval(<TimerHandler>,<long>,<any>);
<Window>.setInterval(<TimerHandler>);
<Window>.setInterval(<TimerHandler>,<long>);
<Window>.setInterval(<TimerHandler>,<long>,<any>);
<WorkerGlobalScope>.clearInterval();
<WorkerGlobalScope>.clearInterval(<long>);
<Window>.clearInterval();
<Window>.clearInterval(<long>);
<WorkerGlobalScope>.queueMicrotask(<VoidFunction>);
<Window>.queueMicrotask(<VoidFunction>);
<new Promise_ImageBitmap_> = <WorkerGlobalScope>.createImageBitmap(<ImageBitmapSource>);
<new Promise_ImageBitmap_> = <WorkerGlobalScope>.createImageBitmap(<ImageBitmapSource>,<ImageBitmapOptions>);
<new Promise_ImageBitmap_> = <Window>.createImageBitmap(<ImageBitmapSource>);
<new Promise_ImageBitmap_> = <Window>.createImageBitmap(<ImageBitmapSource>,<ImageBitmapOptions>);
<new Promise_ImageBitmap_> = <WorkerGlobalScope>.createImageBitmap(<ImageBitmapSource>,<long>,<long>,<long>,<long>);
<new Promise_ImageBitmap_> = <WorkerGlobalScope>.createImageBitmap(<ImageBitmapSource>,<long>,<long>,<long>,<long>,<ImageBitmapOptions>);
<new Promise_ImageBitmap_> = <Window>.createImageBitmap(<ImageBitmapSource>,<long>,<long>,<long>,<long>);
<new Promise_ImageBitmap_> = <Window>.createImageBitmap(<ImageBitmapSource>,<long>,<long>,<long>,<long>,<ImageBitmapOptions>);
<new any> = <WorkerGlobalScope>.structuredClone(<any>);
<new any> = <WorkerGlobalScope>.structuredClone(<any>,<StructuredSerializeOptions>);
<new any> = <Window>.structuredClone(<any>);
<new any> = <Window>.structuredClone(<any>,<StructuredSerializeOptions>);
<new DOMString> = <Navigator>.appCodeName;
<new DOMString> = <WorkerNavigator>.appCodeName;
<new DOMString> = <Navigator>.appName;
<new DOMString> = <WorkerNavigator>.appName;
<new DOMString> = <Navigator>.appVersion;
<new DOMString> = <WorkerNavigator>.appVersion;
<new DOMString> = <Navigator>.platform;
<new DOMString> = <WorkerNavigator>.platform;
<new DOMString> = <Navigator>.product;
<new DOMString> = <WorkerNavigator>.product;
<new DOMString> = <Navigator>.productSub;
<new DOMString> = <WorkerNavigator>.productSub;
<new DOMString> = <Navigator>.userAgent;
<new DOMString> = <WorkerNavigator>.userAgent;
<new DOMString> = <Navigator>.vendor;
<new DOMString> = <WorkerNavigator>.vendor;
<new DOMString> = <Navigator>.vendorSub;
<new DOMString> = <WorkerNavigator>.vendorSub;
<Navigator>.taintEnabled();
<WorkerNavigator>.taintEnabled();
<new DOMString> = <Navigator>.oscpu;
<new DOMString> = <WorkerNavigator>.oscpu;
<new DOMString> = <Navigator>.language;
<new DOMString> = <WorkerNavigator>.language;
<new FrozenArray_DOMString_> = <Navigator>.languages;
<new FrozenArray_DOMString_> = <WorkerNavigator>.languages;
<new boolean> = <Navigator>.onLine;
<new boolean> = <WorkerNavigator>.onLine;
<Navigator>.registerProtocolHandler(<DOMString>,<USVString>);
<Navigator>.unregisterProtocolHandler(<DOMString>,<USVString>);
<new boolean> = <Navigator>.cookieEnabled;
<new PluginArray> = <Navigator>.plugins;
<new MimeTypeArray> = <Navigator>.mimeTypes;
<Navigator>.javaEnabled();
<new boolean> = <Navigator>.pdfViewerEnabled;
<new unsigned_long> = <DedicatedWorkerGlobalScope>.requestAnimationFrame(<FrameRequestCallback>);
<new unsigned_long> = <Window>.requestAnimationFrame(<FrameRequestCallback>);
<DedicatedWorkerGlobalScope>.cancelAnimationFrame(<unsigned_long>);
<Window>.cancelAnimationFrame(<unsigned_long>);
<new EventHandler> = <SharedWorker>.onerror;
<SharedWorker>.onerror = <EventHandler>;
<new EventHandler> = <ServiceWorker>.onerror;
<ServiceWorker>.onerror = <EventHandler>;
<new EventHandler> = <Worker>.onerror;
<Worker>.onerror = <EventHandler>;
<new unsigned_long_long> = <Navigator>.hardwareConcurrency;
<new unsigned_long_long> = <WorkerNavigator>.hardwareConcurrency;
<new Storage> = <Window>.sessionStorage;
<new Storage> = <Window>.localStorage;
<new NetworkInformation> = <Navigator>.connection;
<new NetworkInformation> = <WorkerNavigator>.connection;
<new Element> = <Document>.pictureInPictureElement;
<new Element> = <ShadowRoot>.pictureInPictureElement;
<new EventHandler> = <HTMLElement>.onpointerover;
<HTMLElement>.onpointerover = <EventHandler>;
<new EventHandler> = <MathMLElement>.onpointerover;
<MathMLElement>.onpointerover = <EventHandler>;
<new EventHandler> = <SVGElement>.onpointerover;
<SVGElement>.onpointerover = <EventHandler>;
<new EventHandler> = <Document>.onpointerover;
<Document>.onpointerover = <EventHandler>;
<new EventHandler> = <Window>.onpointerover;
<Window>.onpointerover = <EventHandler>;
<new EventHandler> = <HTMLElement>.onpointerenter;
<HTMLElement>.onpointerenter = <EventHandler>;
<new EventHandler> = <MathMLElement>.onpointerenter;
<MathMLElement>.onpointerenter = <EventHandler>;
<new EventHandler> = <SVGElement>.onpointerenter;
<SVGElement>.onpointerenter = <EventHandler>;
<new EventHandler> = <Document>.onpointerenter;
<Document>.onpointerenter = <EventHandler>;
<new EventHandler> = <Window>.onpointerenter;
<Window>.onpointerenter = <EventHandler>;
<new EventHandler> = <HTMLElement>.onpointerdown;
<HTMLElement>.onpointerdown = <EventHandler>;
<new EventHandler> = <MathMLElement>.onpointerdown;
<MathMLElement>.onpointerdown = <EventHandler>;
<new EventHandler> = <SVGElement>.onpointerdown;
<SVGElement>.onpointerdown = <EventHandler>;
<new EventHandler> = <Document>.onpointerdown;
<Document>.onpointerdown = <EventHandler>;
<new EventHandler> = <Window>.onpointerdown;
<Window>.onpointerdown = <EventHandler>;
<new EventHandler> = <HTMLElement>.onpointermove;
<HTMLElement>.onpointermove = <EventHandler>;
<new EventHandler> = <MathMLElement>.onpointermove;
<MathMLElement>.onpointermove = <EventHandler>;
<new EventHandler> = <SVGElement>.onpointermove;
<SVGElement>.onpointermove = <EventHandler>;
<new EventHandler> = <Document>.onpointermove;
<Document>.onpointermove = <EventHandler>;
<new EventHandler> = <Window>.onpointermove;
<Window>.onpointermove = <EventHandler>;
<new EventHandler> = <HTMLElement>.onpointerrawupdate;
<HTMLElement>.onpointerrawupdate = <EventHandler>;
<new EventHandler> = <MathMLElement>.onpointerrawupdate;
<MathMLElement>.onpointerrawupdate = <EventHandler>;
<new EventHandler> = <SVGElement>.onpointerrawupdate;
<SVGElement>.onpointerrawupdate = <EventHandler>;
<new EventHandler> = <Document>.onpointerrawupdate;
<Document>.onpointerrawupdate = <EventHandler>;
<new EventHandler> = <Window>.onpointerrawupdate;
<Window>.onpointerrawupdate = <EventHandler>;
<new EventHandler> = <HTMLElement>.onpointerup;
<HTMLElement>.onpointerup = <EventHandler>;
<new EventHandler> = <MathMLElement>.onpointerup;
<MathMLElement>.onpointerup = <EventHandler>;
<new EventHandler> = <SVGElement>.onpointerup;
<SVGElement>.onpointerup = <EventHandler>;
<new EventHandler> = <Document>.onpointerup;
<Document>.onpointerup = <EventHandler>;
<new EventHandler> = <Window>.onpointerup;
<Window>.onpointerup = <EventHandler>;
<new EventHandler> = <HTMLElement>.onpointercancel;
<HTMLElement>.onpointercancel = <EventHandler>;
<new EventHandler> = <MathMLElement>.onpointercancel;
<MathMLElement>.onpointercancel = <EventHandler>;
<new EventHandler> = <SVGElement>.onpointercancel;
<SVGElement>.onpointercancel = <EventHandler>;
<new EventHandler> = <Document>.onpointercancel;
<Document>.onpointercancel = <EventHandler>;
<new EventHandler> = <Window>.onpointercancel;
<Window>.onpointercancel = <EventHandler>;
<new EventHandler> = <HTMLElement>.onpointerout;
<HTMLElement>.onpointerout = <EventHandler>;
<new EventHandler> = <MathMLElement>.onpointerout;
<MathMLElement>.onpointerout = <EventHandler>;
<new EventHandler> = <SVGElement>.onpointerout;
<SVGElement>.onpointerout = <EventHandler>;
<new EventHandler> = <Document>.onpointerout;
<Document>.onpointerout = <EventHandler>;
<new EventHandler> = <Window>.onpointerout;
<Window>.onpointerout = <EventHandler>;
<new EventHandler> = <HTMLElement>.onpointerleave;
<HTMLElement>.onpointerleave = <EventHandler>;
<new EventHandler> = <MathMLElement>.onpointerleave;
<MathMLElement>.onpointerleave = <EventHandler>;
<new EventHandler> = <SVGElement>.onpointerleave;
<SVGElement>.onpointerleave = <EventHandler>;
<new EventHandler> = <Document>.onpointerleave;
<Document>.onpointerleave = <EventHandler>;
<new EventHandler> = <Window>.onpointerleave;
<Window>.onpointerleave = <EventHandler>;
<new EventHandler> = <HTMLElement>.ongotpointercapture;
<HTMLElement>.ongotpointercapture = <EventHandler>;
<new EventHandler> = <MathMLElement>.ongotpointercapture;
<MathMLElement>.ongotpointercapture = <EventHandler>;
<new EventHandler> = <SVGElement>.ongotpointercapture;
<SVGElement>.ongotpointercapture = <EventHandler>;
<new EventHandler> = <Document>.ongotpointercapture;
<Document>.ongotpointercapture = <EventHandler>;
<new EventHandler> = <Window>.ongotpointercapture;
<Window>.ongotpointercapture = <EventHandler>;
<new EventHandler> = <HTMLElement>.onlostpointercapture;
<HTMLElement>.onlostpointercapture = <EventHandler>;
<new EventHandler> = <MathMLElement>.onlostpointercapture;
<MathMLElement>.onlostpointercapture = <EventHandler>;
<new EventHandler> = <SVGElement>.onlostpointercapture;
<SVGElement>.onlostpointercapture = <EventHandler>;
<new EventHandler> = <Document>.onlostpointercapture;
<Document>.onlostpointercapture = <EventHandler>;
<new EventHandler> = <Window>.onlostpointercapture;
<Window>.onlostpointercapture = <EventHandler>;
<new Element> = <Document>.pointerLockElement;
<new Element> = <ShadowRoot>.pointerLockElement;
<new EventHandler> = <SVGSVGElement>.onportalactivate;
<SVGSVGElement>.onportalactivate = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.onportalactivate;
<HTMLFrameSetElement>.onportalactivate = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.onportalactivate;
<HTMLBodyElement>.onportalactivate = <EventHandler>;
<new EventHandler> = <Window>.onportalactivate;
<Window>.onportalactivate = <EventHandler>;
<new boolean> = <NetworkInformation>.saveData;
<new Scheduler> = <WorkerGlobalScope>.scheduler;
<new Scheduler> = <Window>.scheduler;
<new EventHandler> = <HTMLElement>.onselectstart;
<HTMLElement>.onselectstart = <EventHandler>;
<new EventHandler> = <MathMLElement>.onselectstart;
<MathMLElement>.onselectstart = <EventHandler>;
<new EventHandler> = <SVGElement>.onselectstart;
<SVGElement>.onselectstart = <EventHandler>;
<new EventHandler> = <Document>.onselectstart;
<Document>.onselectstart = <EventHandler>;
<new EventHandler> = <Window>.onselectstart;
<Window>.onselectstart = <EventHandler>;
<new EventHandler> = <HTMLElement>.onselectionchange;
<HTMLElement>.onselectionchange = <EventHandler>;
<new EventHandler> = <MathMLElement>.onselectionchange;
<MathMLElement>.onselectionchange = <EventHandler>;
<new EventHandler> = <SVGElement>.onselectionchange;
<SVGElement>.onselectionchange = <EventHandler>;
<new EventHandler> = <Document>.onselectionchange;
<Document>.onselectionchange = <EventHandler>;
<new EventHandler> = <Window>.onselectionchange;
<Window>.onselectionchange = <EventHandler>;
<new CacheStorage> = <WorkerGlobalScope>.caches;
<new CacheStorage> = <Window>.caches;
<new StorageManager> = <Navigator>.storage;
<new StorageManager> = <WorkerNavigator>.storage;
<new Promise_undefined_> = <ReadableStreamBYOBReader>.closed;
<new Promise_undefined_> = <ReadableStreamDefaultReader>.closed;
<new Promise_undefined_> = <ReadableStreamBYOBReader>.cancel();
<new Promise_undefined_> = <ReadableStreamBYOBReader>.cancel(<any>);
<new Promise_undefined_> = <ReadableStreamDefaultReader>.cancel();
<new Promise_undefined_> = <ReadableStreamDefaultReader>.cancel(<any>);
<new ReadableStream> = <TextDecoderStream>.readable;
<new ReadableStream> = <SFrameTransform>.readable;
<new ReadableStream> = <DecompressionStream>.readable;
<new ReadableStream> = <CompressionStream>.readable;
<new ReadableStream> = <TextEncoderStream>.readable;
<new WritableStream> = <TextDecoderStream>.writable;
<new WritableStream> = <SFrameTransform>.writable;
<new WritableStream> = <DecompressionStream>.writable;
<new WritableStream> = <CompressionStream>.writable;
<new WritableStream> = <TextEncoderStream>.writable;
<new EventHandler> = <HTMLElement>.ontouchstart;
<HTMLElement>.ontouchstart = <EventHandler>;
<new EventHandler> = <MathMLElement>.ontouchstart;
<MathMLElement>.ontouchstart = <EventHandler>;
<new EventHandler> = <SVGElement>.ontouchstart;
<SVGElement>.ontouchstart = <EventHandler>;
<new EventHandler> = <Document>.ontouchstart;
<Document>.ontouchstart = <EventHandler>;
<new EventHandler> = <Window>.ontouchstart;
<Window>.ontouchstart = <EventHandler>;
<new EventHandler> = <HTMLElement>.ontouchend;
<HTMLElement>.ontouchend = <EventHandler>;
<new EventHandler> = <MathMLElement>.ontouchend;
<MathMLElement>.ontouchend = <EventHandler>;
<new EventHandler> = <SVGElement>.ontouchend;
<SVGElement>.ontouchend = <EventHandler>;
<new EventHandler> = <Document>.ontouchend;
<Document>.ontouchend = <EventHandler>;
<new EventHandler> = <Window>.ontouchend;
<Window>.ontouchend = <EventHandler>;
<new EventHandler> = <HTMLElement>.ontouchmove;
<HTMLElement>.ontouchmove = <EventHandler>;
<new EventHandler> = <MathMLElement>.ontouchmove;
<MathMLElement>.ontouchmove = <EventHandler>;
<new EventHandler> = <SVGElement>.ontouchmove;
<SVGElement>.ontouchmove = <EventHandler>;
<new EventHandler> = <Document>.ontouchmove;
<Document>.ontouchmove = <EventHandler>;
<new EventHandler> = <Window>.ontouchmove;
<Window>.ontouchmove = <EventHandler>;
<new EventHandler> = <HTMLElement>.ontouchcancel;
<HTMLElement>.ontouchcancel = <EventHandler>;
<new EventHandler> = <MathMLElement>.ontouchcancel;
<MathMLElement>.ontouchcancel = <EventHandler>;
<new EventHandler> = <SVGElement>.ontouchcancel;
<SVGElement>.ontouchcancel = <EventHandler>;
<new EventHandler> = <Document>.ontouchcancel;
<Document>.ontouchcancel = <EventHandler>;
<new EventHandler> = <Window>.ontouchcancel;
<Window>.ontouchcancel = <EventHandler>;
<new TrustedTypePolicyFactory> = <WorkerGlobalScope>.trustedTypes;
<new TrustedTypePolicyFactory> = <Window>.trustedTypes;
<new NavigatorUAData> = <Navigator>.userAgentData;
<new NavigatorUAData> = <WorkerNavigator>.userAgentData;
<new DOMString> = <HTMLElement>.virtualKeyboardPolicy;
<HTMLElement>.virtualKeyboardPolicy = <DOMString>;
<new DOMString> = <Element>.role;
<Element>.role = <DOMString>;
<Element>.role = null;
<new DOMString> = <ElementInternals>.role;
<ElementInternals>.role = <DOMString>;
<ElementInternals>.role = null;
<new Element> = <Element>.ariaActiveDescendantElement;
<Element>.ariaActiveDescendantElement = <Element>;
<Element>.ariaActiveDescendantElement = null;
<new Element> = <ElementInternals>.ariaActiveDescendantElement;
<ElementInternals>.ariaActiveDescendantElement = <Element>;
<ElementInternals>.ariaActiveDescendantElement = null;
<new DOMString> = <Element>.ariaAtomic;
<Element>.ariaAtomic = <DOMString>;
<Element>.ariaAtomic = null;
<new DOMString> = <ElementInternals>.ariaAtomic;
<ElementInternals>.ariaAtomic = <DOMString>;
<ElementInternals>.ariaAtomic = null;
<new DOMString> = <Element>.ariaAutoComplete;
<Element>.ariaAutoComplete = <DOMString>;
<Element>.ariaAutoComplete = null;
<new DOMString> = <ElementInternals>.ariaAutoComplete;
<ElementInternals>.ariaAutoComplete = <DOMString>;
<ElementInternals>.ariaAutoComplete = null;
<new DOMString> = <Element>.ariaBusy;
<Element>.ariaBusy = <DOMString>;
<Element>.ariaBusy = null;
<new DOMString> = <ElementInternals>.ariaBusy;
<ElementInternals>.ariaBusy = <DOMString>;
<ElementInternals>.ariaBusy = null;
<new DOMString> = <Element>.ariaChecked;
<Element>.ariaChecked = <DOMString>;
<Element>.ariaChecked = null;
<new DOMString> = <ElementInternals>.ariaChecked;
<ElementInternals>.ariaChecked = <DOMString>;
<ElementInternals>.ariaChecked = null;
<new DOMString> = <Element>.ariaColCount;
<Element>.ariaColCount = <DOMString>;
<Element>.ariaColCount = null;
<new DOMString> = <ElementInternals>.ariaColCount;
<ElementInternals>.ariaColCount = <DOMString>;
<ElementInternals>.ariaColCount = null;
<new DOMString> = <Element>.ariaColIndex;
<Element>.ariaColIndex = <DOMString>;
<Element>.ariaColIndex = null;
<new DOMString> = <ElementInternals>.ariaColIndex;
<ElementInternals>.ariaColIndex = <DOMString>;
<ElementInternals>.ariaColIndex = null;
<new DOMString> = <Element>.ariaColIndexText;
<Element>.ariaColIndexText = <DOMString>;
<Element>.ariaColIndexText = null;
<new DOMString> = <ElementInternals>.ariaColIndexText;
<ElementInternals>.ariaColIndexText = <DOMString>;
<ElementInternals>.ariaColIndexText = null;
<new DOMString> = <Element>.ariaColSpan;
<Element>.ariaColSpan = <DOMString>;
<Element>.ariaColSpan = null;
<new DOMString> = <ElementInternals>.ariaColSpan;
<ElementInternals>.ariaColSpan = <DOMString>;
<ElementInternals>.ariaColSpan = null;
<new FrozenArray_Element_> = [<Element>];
<new Element> = <FrozenArray_Element_>[0];
<new FrozenArray_Element_> = <Element>.ariaControlsElements;
<Element>.ariaControlsElements = <FrozenArray_Element_>;
<Element>.ariaControlsElements = null;
<new FrozenArray_Element_> = <ElementInternals>.ariaControlsElements;
<ElementInternals>.ariaControlsElements = <FrozenArray_Element_>;
<ElementInternals>.ariaControlsElements = null;
<new DOMString> = <Element>.ariaCurrent;
<Element>.ariaCurrent = <DOMString>;
<Element>.ariaCurrent = null;
<new DOMString> = <ElementInternals>.ariaCurrent;
<ElementInternals>.ariaCurrent = <DOMString>;
<ElementInternals>.ariaCurrent = null;
<new FrozenArray_Element_> = <Element>.ariaDescribedByElements;
<Element>.ariaDescribedByElements = <FrozenArray_Element_>;
<Element>.ariaDescribedByElements = null;
<new FrozenArray_Element_> = <ElementInternals>.ariaDescribedByElements;
<ElementInternals>.ariaDescribedByElements = <FrozenArray_Element_>;
<ElementInternals>.ariaDescribedByElements = null;
<new DOMString> = <Element>.ariaDescription;
<Element>.ariaDescription = <DOMString>;
<Element>.ariaDescription = null;
<new DOMString> = <ElementInternals>.ariaDescription;
<ElementInternals>.ariaDescription = <DOMString>;
<ElementInternals>.ariaDescription = null;
<new FrozenArray_Element_> = <Element>.ariaDetailsElements;
<Element>.ariaDetailsElements = <FrozenArray_Element_>;
<Element>.ariaDetailsElements = null;
<new FrozenArray_Element_> = <ElementInternals>.ariaDetailsElements;
<ElementInternals>.ariaDetailsElements = <FrozenArray_Element_>;
<ElementInternals>.ariaDetailsElements = null;
<new DOMString> = <Element>.ariaDisabled;
<Element>.ariaDisabled = <DOMString>;
<Element>.ariaDisabled = null;
<new DOMString> = <ElementInternals>.ariaDisabled;
<ElementInternals>.ariaDisabled = <DOMString>;
<ElementInternals>.ariaDisabled = null;
<new FrozenArray_Element_> = <Element>.ariaErrorMessageElements;
<Element>.ariaErrorMessageElements = <FrozenArray_Element_>;
<Element>.ariaErrorMessageElements = null;
<new FrozenArray_Element_> = <ElementInternals>.ariaErrorMessageElements;
<ElementInternals>.ariaErrorMessageElements = <FrozenArray_Element_>;
<ElementInternals>.ariaErrorMessageElements = null;
<new DOMString> = <Element>.ariaExpanded;
<Element>.ariaExpanded = <DOMString>;
<Element>.ariaExpanded = null;
<new DOMString> = <ElementInternals>.ariaExpanded;
<ElementInternals>.ariaExpanded = <DOMString>;
<ElementInternals>.ariaExpanded = null;
<new FrozenArray_Element_> = <Element>.ariaFlowToElements;
<Element>.ariaFlowToElements = <FrozenArray_Element_>;
<Element>.ariaFlowToElements = null;
<new FrozenArray_Element_> = <ElementInternals>.ariaFlowToElements;
<ElementInternals>.ariaFlowToElements = <FrozenArray_Element_>;
<ElementInternals>.ariaFlowToElements = null;
<new DOMString> = <Element>.ariaHasPopup;
<Element>.ariaHasPopup = <DOMString>;
<Element>.ariaHasPopup = null;
<new DOMString> = <ElementInternals>.ariaHasPopup;
<ElementInternals>.ariaHasPopup = <DOMString>;
<ElementInternals>.ariaHasPopup = null;
<new DOMString> = <Element>.ariaHidden;
<Element>.ariaHidden = <DOMString>;
<Element>.ariaHidden = null;
<new DOMString> = <ElementInternals>.ariaHidden;
<ElementInternals>.ariaHidden = <DOMString>;
<ElementInternals>.ariaHidden = null;
<new DOMString> = <Element>.ariaInvalid;
<Element>.ariaInvalid = <DOMString>;
<Element>.ariaInvalid = null;
<new DOMString> = <ElementInternals>.ariaInvalid;
<ElementInternals>.ariaInvalid = <DOMString>;
<ElementInternals>.ariaInvalid = null;
<new DOMString> = <Element>.ariaKeyShortcuts;
<Element>.ariaKeyShortcuts = <DOMString>;
<Element>.ariaKeyShortcuts = null;
<new DOMString> = <ElementInternals>.ariaKeyShortcuts;
<ElementInternals>.ariaKeyShortcuts = <DOMString>;
<ElementInternals>.ariaKeyShortcuts = null;
<new DOMString> = <Element>.ariaLabel;
<Element>.ariaLabel = <DOMString>;
<Element>.ariaLabel = null;
<new DOMString> = <ElementInternals>.ariaLabel;
<ElementInternals>.ariaLabel = <DOMString>;
<ElementInternals>.ariaLabel = null;
<new FrozenArray_Element_> = <Element>.ariaLabelledByElements;
<Element>.ariaLabelledByElements = <FrozenArray_Element_>;
<Element>.ariaLabelledByElements = null;
<new FrozenArray_Element_> = <ElementInternals>.ariaLabelledByElements;
<ElementInternals>.ariaLabelledByElements = <FrozenArray_Element_>;
<ElementInternals>.ariaLabelledByElements = null;
<new DOMString> = <Element>.ariaLevel;
<Element>.ariaLevel = <DOMString>;
<Element>.ariaLevel = null;
<new DOMString> = <ElementInternals>.ariaLevel;
<ElementInternals>.ariaLevel = <DOMString>;
<ElementInternals>.ariaLevel = null;
<new DOMString> = <Element>.ariaLive;
<Element>.ariaLive = <DOMString>;
<Element>.ariaLive = null;
<new DOMString> = <ElementInternals>.ariaLive;
<ElementInternals>.ariaLive = <DOMString>;
<ElementInternals>.ariaLive = null;
<new DOMString> = <Element>.ariaModal;
<Element>.ariaModal = <DOMString>;
<Element>.ariaModal = null;
<new DOMString> = <ElementInternals>.ariaModal;
<ElementInternals>.ariaModal = <DOMString>;
<ElementInternals>.ariaModal = null;
<new DOMString> = <Element>.ariaMultiLine;
<Element>.ariaMultiLine = <DOMString>;
<Element>.ariaMultiLine = null;
<new DOMString> = <ElementInternals>.ariaMultiLine;
<ElementInternals>.ariaMultiLine = <DOMString>;
<ElementInternals>.ariaMultiLine = null;
<new DOMString> = <Element>.ariaMultiSelectable;
<Element>.ariaMultiSelectable = <DOMString>;
<Element>.ariaMultiSelectable = null;
<new DOMString> = <ElementInternals>.ariaMultiSelectable;
<ElementInternals>.ariaMultiSelectable = <DOMString>;
<ElementInternals>.ariaMultiSelectable = null;
<new DOMString> = <Element>.ariaOrientation;
<Element>.ariaOrientation = <DOMString>;
<Element>.ariaOrientation = null;
<new DOMString> = <ElementInternals>.ariaOrientation;
<ElementInternals>.ariaOrientation = <DOMString>;
<ElementInternals>.ariaOrientation = null;
<new FrozenArray_Element_> = <Element>.ariaOwnsElements;
<Element>.ariaOwnsElements = <FrozenArray_Element_>;
<Element>.ariaOwnsElements = null;
<new FrozenArray_Element_> = <ElementInternals>.ariaOwnsElements;
<ElementInternals>.ariaOwnsElements = <FrozenArray_Element_>;
<ElementInternals>.ariaOwnsElements = null;
<new DOMString> = <Element>.ariaPlaceholder;
<Element>.ariaPlaceholder = <DOMString>;
<Element>.ariaPlaceholder = null;
<new DOMString> = <ElementInternals>.ariaPlaceholder;
<ElementInternals>.ariaPlaceholder = <DOMString>;
<ElementInternals>.ariaPlaceholder = null;
<new DOMString> = <Element>.ariaPosInSet;
<Element>.ariaPosInSet = <DOMString>;
<Element>.ariaPosInSet = null;
<new DOMString> = <ElementInternals>.ariaPosInSet;
<ElementInternals>.ariaPosInSet = <DOMString>;
<ElementInternals>.ariaPosInSet = null;
<new DOMString> = <Element>.ariaPressed;
<Element>.ariaPressed = <DOMString>;
<Element>.ariaPressed = null;
<new DOMString> = <ElementInternals>.ariaPressed;
<ElementInternals>.ariaPressed = <DOMString>;
<ElementInternals>.ariaPressed = null;
<new DOMString> = <Element>.ariaReadOnly;
<Element>.ariaReadOnly = <DOMString>;
<Element>.ariaReadOnly = null;
<new DOMString> = <ElementInternals>.ariaReadOnly;
<ElementInternals>.ariaReadOnly = <DOMString>;
<ElementInternals>.ariaReadOnly = null;
<new DOMString> = <Element>.ariaRequired;
<Element>.ariaRequired = <DOMString>;
<Element>.ariaRequired = null;
<new DOMString> = <ElementInternals>.ariaRequired;
<ElementInternals>.ariaRequired = <DOMString>;
<ElementInternals>.ariaRequired = null;
<new DOMString> = <Element>.ariaRoleDescription;
<Element>.ariaRoleDescription = <DOMString>;
<Element>.ariaRoleDescription = null;
<new DOMString> = <ElementInternals>.ariaRoleDescription;
<ElementInternals>.ariaRoleDescription = <DOMString>;
<ElementInternals>.ariaRoleDescription = null;
<new DOMString> = <Element>.ariaRowCount;
<Element>.ariaRowCount = <DOMString>;
<Element>.ariaRowCount = null;
<new DOMString> = <ElementInternals>.ariaRowCount;
<ElementInternals>.ariaRowCount = <DOMString>;
<ElementInternals>.ariaRowCount = null;
<new DOMString> = <Element>.ariaRowIndex;
<Element>.ariaRowIndex = <DOMString>;
<Element>.ariaRowIndex = null;
<new DOMString> = <ElementInternals>.ariaRowIndex;
<ElementInternals>.ariaRowIndex = <DOMString>;
<ElementInternals>.ariaRowIndex = null;
<new DOMString> = <Element>.ariaRowIndexText;
<Element>.ariaRowIndexText = <DOMString>;
<Element>.ariaRowIndexText = null;
<new DOMString> = <ElementInternals>.ariaRowIndexText;
<ElementInternals>.ariaRowIndexText = <DOMString>;
<ElementInternals>.ariaRowIndexText = null;
<new DOMString> = <Element>.ariaRowSpan;
<Element>.ariaRowSpan = <DOMString>;
<Element>.ariaRowSpan = null;
<new DOMString> = <ElementInternals>.ariaRowSpan;
<ElementInternals>.ariaRowSpan = <DOMString>;
<ElementInternals>.ariaRowSpan = null;
<new DOMString> = <Element>.ariaSelected;
<Element>.ariaSelected = <DOMString>;
<Element>.ariaSelected = null;
<new DOMString> = <ElementInternals>.ariaSelected;
<ElementInternals>.ariaSelected = <DOMString>;
<ElementInternals>.ariaSelected = null;
<new DOMString> = <Element>.ariaSetSize;
<Element>.ariaSetSize = <DOMString>;
<Element>.ariaSetSize = null;
<new DOMString> = <ElementInternals>.ariaSetSize;
<ElementInternals>.ariaSetSize = <DOMString>;
<ElementInternals>.ariaSetSize = null;
<new DOMString> = <Element>.ariaSort;
<Element>.ariaSort = <DOMString>;
<Element>.ariaSort = null;
<new DOMString> = <ElementInternals>.ariaSort;
<ElementInternals>.ariaSort = <DOMString>;
<ElementInternals>.ariaSort = null;
<new DOMString> = <Element>.ariaValueMax;
<Element>.ariaValueMax = <DOMString>;
<Element>.ariaValueMax = null;
<new DOMString> = <ElementInternals>.ariaValueMax;
<ElementInternals>.ariaValueMax = <DOMString>;
<ElementInternals>.ariaValueMax = null;
<new DOMString> = <Element>.ariaValueMin;
<Element>.ariaValueMin = <DOMString>;
<Element>.ariaValueMin = null;
<new DOMString> = <ElementInternals>.ariaValueMin;
<ElementInternals>.ariaValueMin = <DOMString>;
<ElementInternals>.ariaValueMin = null;
<new DOMString> = <Element>.ariaValueNow;
<Element>.ariaValueNow = <DOMString>;
<Element>.ariaValueNow = null;
<new DOMString> = <ElementInternals>.ariaValueNow;
<ElementInternals>.ariaValueNow = <DOMString>;
<ElementInternals>.ariaValueNow = null;
<new DOMString> = <Element>.ariaValueText;
<Element>.ariaValueText = <DOMString>;
<Element>.ariaValueText = null;
<new DOMString> = <ElementInternals>.ariaValueText;
<ElementInternals>.ariaValueText = <DOMString>;
<ElementInternals>.ariaValueText = null;
<new union_unrestricted_double1KeyframeAnimationOptions_> = <unrestricted_double>;
<new union_unrestricted_double1KeyframeAnimationOptions_> = <KeyframeAnimationOptions>;
<new Animation> = <Element>.animate(<object>);
<new Animation> = <Element>.animate(<object>,<union_unrestricted_double1KeyframeAnimationOptions_>);
<new sequence_Animation_> = [<Animation>];
<new Animation> = <sequence_Animation_>[0];
<new sequence_Animation_> = <Element>.getAnimations();
<new sequence_Animation_> = <Element>.getAnimations(<GetAnimationsOptions>);
<new sequence_Animation_> = <Document>.getAnimations();
<new sequence_Animation_> = <ShadowRoot>.getAnimations();
<new EventHandler> = <BluetoothDevice>.oncharacteristicvaluechanged;
<BluetoothDevice>.oncharacteristicvaluechanged = <EventHandler>;
<new EventHandler> = <Bluetooth>.oncharacteristicvaluechanged;
<Bluetooth>.oncharacteristicvaluechanged = <EventHandler>;
<new EventHandler> = <BluetoothRemoteGATTService>.oncharacteristicvaluechanged;
<BluetoothRemoteGATTService>.oncharacteristicvaluechanged = <EventHandler>;
<new EventHandler> = <BluetoothRemoteGATTCharacteristic>.oncharacteristicvaluechanged;
<BluetoothRemoteGATTCharacteristic>.oncharacteristicvaluechanged = <EventHandler>;
<new EventHandler> = <BluetoothDevice>.onadvertisementreceived;
<BluetoothDevice>.onadvertisementreceived = <EventHandler>;
<new EventHandler> = <Bluetooth>.onadvertisementreceived;
<Bluetooth>.onadvertisementreceived = <EventHandler>;
<new EventHandler> = <BluetoothDevice>.ongattserverdisconnected;
<BluetoothDevice>.ongattserverdisconnected = <EventHandler>;
<new EventHandler> = <Bluetooth>.ongattserverdisconnected;
<Bluetooth>.ongattserverdisconnected = <EventHandler>;
<new EventHandler> = <BluetoothDevice>.onserviceadded;
<BluetoothDevice>.onserviceadded = <EventHandler>;
<new EventHandler> = <Bluetooth>.onserviceadded;
<Bluetooth>.onserviceadded = <EventHandler>;
<new EventHandler> = <BluetoothRemoteGATTService>.onserviceadded;
<BluetoothRemoteGATTService>.onserviceadded = <EventHandler>;
<new EventHandler> = <BluetoothDevice>.onservicechanged;
<BluetoothDevice>.onservicechanged = <EventHandler>;
<new EventHandler> = <Bluetooth>.onservicechanged;
<Bluetooth>.onservicechanged = <EventHandler>;
<new EventHandler> = <BluetoothRemoteGATTService>.onservicechanged;
<BluetoothRemoteGATTService>.onservicechanged = <EventHandler>;
<new EventHandler> = <BluetoothDevice>.onserviceremoved;
<BluetoothDevice>.onserviceremoved = <EventHandler>;
<new EventHandler> = <Bluetooth>.onserviceremoved;
<Bluetooth>.onserviceremoved = <EventHandler>;
<new EventHandler> = <BluetoothRemoteGATTService>.onserviceremoved;
<BluetoothRemoteGATTService>.onserviceremoved = <EventHandler>;
<new LockManager> = <Navigator>.locks;
<new LockManager> = <WorkerNavigator>.locks;
<new boolean> = <Navigator>.webdriver;
<new GLenum> = WebGL2RenderingContext.DEPTH_BUFFER_BIT;
<new GLenum> = WebGLRenderingContext.DEPTH_BUFFER_BIT;
<new GLenum> = WebGL2RenderingContext.STENCIL_BUFFER_BIT;
<new GLenum> = WebGLRenderingContext.STENCIL_BUFFER_BIT;
<new GLenum> = WebGL2RenderingContext.COLOR_BUFFER_BIT;
<new GLenum> = WebGLRenderingContext.COLOR_BUFFER_BIT;
<new GLenum> = WebGL2RenderingContext.POINTS;
<new GLenum> = WebGLRenderingContext.POINTS;
<new GLenum> = WebGL2RenderingContext.LINES;
<new GLenum> = WebGLRenderingContext.LINES;
<new GLenum> = WebGL2RenderingContext.LINE_LOOP;
<new GLenum> = WebGLRenderingContext.LINE_LOOP;
<new GLenum> = WebGL2RenderingContext.LINE_STRIP;
<new GLenum> = WebGLRenderingContext.LINE_STRIP;
<new GLenum> = WebGL2RenderingContext.TRIANGLES;
<new GLenum> = WebGLRenderingContext.TRIANGLES;
<new GLenum> = WebGL2RenderingContext.TRIANGLE_STRIP;
<new GLenum> = WebGLRenderingContext.TRIANGLE_STRIP;
<new GLenum> = WebGL2RenderingContext.TRIANGLE_FAN;
<new GLenum> = WebGLRenderingContext.TRIANGLE_FAN;
<new GLenum> = WebGL2RenderingContext.ZERO;
<new GLenum> = WebGLRenderingContext.ZERO;
<new GLenum> = WebGL2RenderingContext.ONE;
<new GLenum> = WebGLRenderingContext.ONE;
<new GLenum> = WebGL2RenderingContext.SRC_COLOR;
<new GLenum> = WebGLRenderingContext.SRC_COLOR;
<new GLenum> = WebGL2RenderingContext.ONE_MINUS_SRC_COLOR;
<new GLenum> = WebGLRenderingContext.ONE_MINUS_SRC_COLOR;
<new GLenum> = WebGL2RenderingContext.SRC_ALPHA;
<new GLenum> = WebGLRenderingContext.SRC_ALPHA;
<new GLenum> = WebGL2RenderingContext.ONE_MINUS_SRC_ALPHA;
<new GLenum> = WebGLRenderingContext.ONE_MINUS_SRC_ALPHA;
<new GLenum> = WebGL2RenderingContext.DST_ALPHA;
<new GLenum> = WebGLRenderingContext.DST_ALPHA;
<new GLenum> = WebGL2RenderingContext.ONE_MINUS_DST_ALPHA;
<new GLenum> = WebGLRenderingContext.ONE_MINUS_DST_ALPHA;
<new GLenum> = WebGL2RenderingContext.DST_COLOR;
<new GLenum> = WebGLRenderingContext.DST_COLOR;
<new GLenum> = WebGL2RenderingContext.ONE_MINUS_DST_COLOR;
<new GLenum> = WebGLRenderingContext.ONE_MINUS_DST_COLOR;
<new GLenum> = WebGL2RenderingContext.SRC_ALPHA_SATURATE;
<new GLenum> = WebGLRenderingContext.SRC_ALPHA_SATURATE;
<new GLenum> = WebGL2RenderingContext.FUNC_ADD;
<new GLenum> = WebGLRenderingContext.FUNC_ADD;
<new GLenum> = WebGL2RenderingContext.BLEND_EQUATION;
<new GLenum> = WebGLRenderingContext.BLEND_EQUATION;
<new GLenum> = WebGL2RenderingContext.BLEND_EQUATION_RGB;
<new GLenum> = WebGLRenderingContext.BLEND_EQUATION_RGB;
<new GLenum> = WebGL2RenderingContext.BLEND_EQUATION_ALPHA;
<new GLenum> = WebGLRenderingContext.BLEND_EQUATION_ALPHA;
<new GLenum> = WebGL2RenderingContext.FUNC_SUBTRACT;
<new GLenum> = WebGLRenderingContext.FUNC_SUBTRACT;
<new GLenum> = WebGL2RenderingContext.FUNC_REVERSE_SUBTRACT;
<new GLenum> = WebGLRenderingContext.FUNC_REVERSE_SUBTRACT;
<new GLenum> = WebGL2RenderingContext.BLEND_DST_RGB;
<new GLenum> = WebGLRenderingContext.BLEND_DST_RGB;
<new GLenum> = WebGL2RenderingContext.BLEND_SRC_RGB;
<new GLenum> = WebGLRenderingContext.BLEND_SRC_RGB;
<new GLenum> = WebGL2RenderingContext.BLEND_DST_ALPHA;
<new GLenum> = WebGLRenderingContext.BLEND_DST_ALPHA;
<new GLenum> = WebGL2RenderingContext.BLEND_SRC_ALPHA;
<new GLenum> = WebGLRenderingContext.BLEND_SRC_ALPHA;
<new GLenum> = WebGL2RenderingContext.CONSTANT_COLOR;
<new GLenum> = WebGLRenderingContext.CONSTANT_COLOR;
<new GLenum> = WebGL2RenderingContext.ONE_MINUS_CONSTANT_COLOR;
<new GLenum> = WebGLRenderingContext.ONE_MINUS_CONSTANT_COLOR;
<new GLenum> = WebGL2RenderingContext.CONSTANT_ALPHA;
<new GLenum> = WebGLRenderingContext.CONSTANT_ALPHA;
<new GLenum> = WebGL2RenderingContext.ONE_MINUS_CONSTANT_ALPHA;
<new GLenum> = WebGLRenderingContext.ONE_MINUS_CONSTANT_ALPHA;
<new GLenum> = WebGL2RenderingContext.BLEND_COLOR;
<new GLenum> = WebGLRenderingContext.BLEND_COLOR;
<new GLenum> = WebGL2RenderingContext.ARRAY_BUFFER;
<new GLenum> = WebGLRenderingContext.ARRAY_BUFFER;
<new GLenum> = WebGL2RenderingContext.ELEMENT_ARRAY_BUFFER;
<new GLenum> = WebGLRenderingContext.ELEMENT_ARRAY_BUFFER;
<new GLenum> = WebGL2RenderingContext.ARRAY_BUFFER_BINDING;
<new GLenum> = WebGLRenderingContext.ARRAY_BUFFER_BINDING;
<new GLenum> = WebGL2RenderingContext.ELEMENT_ARRAY_BUFFER_BINDING;
<new GLenum> = WebGLRenderingContext.ELEMENT_ARRAY_BUFFER_BINDING;
<new GLenum> = WebGL2RenderingContext.STREAM_DRAW;
<new GLenum> = WebGLRenderingContext.STREAM_DRAW;
<new GLenum> = WebGL2RenderingContext.STATIC_DRAW;
<new GLenum> = WebGLRenderingContext.STATIC_DRAW;
<new GLenum> = WebGL2RenderingContext.DYNAMIC_DRAW;
<new GLenum> = WebGLRenderingContext.DYNAMIC_DRAW;
<new GLenum> = WebGL2RenderingContext.BUFFER_SIZE;
<new GLenum> = WebGLRenderingContext.BUFFER_SIZE;
<new GLenum> = WebGL2RenderingContext.BUFFER_USAGE;
<new GLenum> = WebGLRenderingContext.BUFFER_USAGE;
<new GLenum> = WebGL2RenderingContext.CURRENT_VERTEX_ATTRIB;
<new GLenum> = WebGLRenderingContext.CURRENT_VERTEX_ATTRIB;
<new GLenum> = WebGL2RenderingContext.FRONT;
<new GLenum> = WebGLRenderingContext.FRONT;
<new GLenum> = WebGL2RenderingContext.BACK;
<new GLenum> = WebGLRenderingContext.BACK;
<new GLenum> = WebGL2RenderingContext.FRONT_AND_BACK;
<new GLenum> = WebGLRenderingContext.FRONT_AND_BACK;
<new GLenum> = WebGL2RenderingContext.CULL_FACE;
<new GLenum> = WebGLRenderingContext.CULL_FACE;
<new GLenum> = WebGL2RenderingContext.BLEND;
<new GLenum> = WebGLRenderingContext.BLEND;
<new GLenum> = WebGL2RenderingContext.DITHER;
<new GLenum> = WebGLRenderingContext.DITHER;
<new GLenum> = WebGL2RenderingContext.STENCIL_TEST;
<new GLenum> = WebGLRenderingContext.STENCIL_TEST;
<new GLenum> = WebGL2RenderingContext.DEPTH_TEST;
<new GLenum> = WebGLRenderingContext.DEPTH_TEST;
<new GLenum> = WebGL2RenderingContext.SCISSOR_TEST;
<new GLenum> = WebGLRenderingContext.SCISSOR_TEST;
<new GLenum> = WebGL2RenderingContext.POLYGON_OFFSET_FILL;
<new GLenum> = WebGLRenderingContext.POLYGON_OFFSET_FILL;
<new GLenum> = WebGL2RenderingContext.SAMPLE_ALPHA_TO_COVERAGE;
<new GLenum> = WebGLRenderingContext.SAMPLE_ALPHA_TO_COVERAGE;
<new GLenum> = WebGL2RenderingContext.SAMPLE_COVERAGE;
<new GLenum> = WebGLRenderingContext.SAMPLE_COVERAGE;
<new GLenum> = WebGL2RenderingContext.NO_ERROR;
<new GLenum> = WebGLRenderingContext.NO_ERROR;
<new GLenum> = WebGL2RenderingContext.INVALID_ENUM;
<new GLenum> = WebGLRenderingContext.INVALID_ENUM;
<new GLenum> = WebGL2RenderingContext.INVALID_VALUE;
<new GLenum> = WebGLRenderingContext.INVALID_VALUE;
<new GLenum> = WebGL2RenderingContext.INVALID_OPERATION;
<new GLenum> = WebGLRenderingContext.INVALID_OPERATION;
<new GLenum> = WebGL2RenderingContext.OUT_OF_MEMORY;
<new GLenum> = WebGLRenderingContext.OUT_OF_MEMORY;
<new GLenum> = WebGL2RenderingContext.CW;
<new GLenum> = WebGLRenderingContext.CW;
<new GLenum> = WebGL2RenderingContext.CCW;
<new GLenum> = WebGLRenderingContext.CCW;
<new GLenum> = WebGL2RenderingContext.LINE_WIDTH;
<new GLenum> = WebGLRenderingContext.LINE_WIDTH;
<new GLenum> = WebGL2RenderingContext.ALIASED_POINT_SIZE_RANGE;
<new GLenum> = WebGLRenderingContext.ALIASED_POINT_SIZE_RANGE;
<new GLenum> = WebGL2RenderingContext.ALIASED_LINE_WIDTH_RANGE;
<new GLenum> = WebGLRenderingContext.ALIASED_LINE_WIDTH_RANGE;
<new GLenum> = WebGL2RenderingContext.CULL_FACE_MODE;
<new GLenum> = WebGLRenderingContext.CULL_FACE_MODE;
<new GLenum> = WebGL2RenderingContext.FRONT_FACE;
<new GLenum> = WebGLRenderingContext.FRONT_FACE;
<new GLenum> = WebGL2RenderingContext.DEPTH_RANGE;
<new GLenum> = WebGLRenderingContext.DEPTH_RANGE;
<new GLenum> = WebGL2RenderingContext.DEPTH_WRITEMASK;
<new GLenum> = WebGLRenderingContext.DEPTH_WRITEMASK;
<new GLenum> = WebGL2RenderingContext.DEPTH_CLEAR_VALUE;
<new GLenum> = WebGLRenderingContext.DEPTH_CLEAR_VALUE;
<new GLenum> = WebGL2RenderingContext.DEPTH_FUNC;
<new GLenum> = WebGLRenderingContext.DEPTH_FUNC;
<new GLenum> = WebGL2RenderingContext.STENCIL_CLEAR_VALUE;
<new GLenum> = WebGLRenderingContext.STENCIL_CLEAR_VALUE;
<new GLenum> = WebGL2RenderingContext.STENCIL_FUNC;
<new GLenum> = WebGLRenderingContext.STENCIL_FUNC;
<new GLenum> = WebGL2RenderingContext.STENCIL_FAIL;
<new GLenum> = WebGLRenderingContext.STENCIL_FAIL;
<new GLenum> = WebGL2RenderingContext.STENCIL_PASS_DEPTH_FAIL;
<new GLenum> = WebGLRenderingContext.STENCIL_PASS_DEPTH_FAIL;
<new GLenum> = WebGL2RenderingContext.STENCIL_PASS_DEPTH_PASS;
<new GLenum> = WebGLRenderingContext.STENCIL_PASS_DEPTH_PASS;
<new GLenum> = WebGL2RenderingContext.STENCIL_REF;
<new GLenum> = WebGLRenderingContext.STENCIL_REF;
<new GLenum> = WebGL2RenderingContext.STENCIL_VALUE_MASK;
<new GLenum> = WebGLRenderingContext.STENCIL_VALUE_MASK;
<new GLenum> = WebGL2RenderingContext.STENCIL_WRITEMASK;
<new GLenum> = WebGLRenderingContext.STENCIL_WRITEMASK;
<new GLenum> = WebGL2RenderingContext.STENCIL_BACK_FUNC;
<new GLenum> = WebGLRenderingContext.STENCIL_BACK_FUNC;
<new GLenum> = WebGL2RenderingContext.STENCIL_BACK_FAIL;
<new GLenum> = WebGLRenderingContext.STENCIL_BACK_FAIL;
<new GLenum> = WebGL2RenderingContext.STENCIL_BACK_PASS_DEPTH_FAIL;
<new GLenum> = WebGLRenderingContext.STENCIL_BACK_PASS_DEPTH_FAIL;
<new GLenum> = WebGL2RenderingContext.STENCIL_BACK_PASS_DEPTH_PASS;
<new GLenum> = WebGLRenderingContext.STENCIL_BACK_PASS_DEPTH_PASS;
<new GLenum> = WebGL2RenderingContext.STENCIL_BACK_REF;
<new GLenum> = WebGLRenderingContext.STENCIL_BACK_REF;
<new GLenum> = WebGL2RenderingContext.STENCIL_BACK_VALUE_MASK;
<new GLenum> = WebGLRenderingContext.STENCIL_BACK_VALUE_MASK;
<new GLenum> = WebGL2RenderingContext.STENCIL_BACK_WRITEMASK;
<new GLenum> = WebGLRenderingContext.STENCIL_BACK_WRITEMASK;
<new GLenum> = WebGL2RenderingContext.VIEWPORT;
<new GLenum> = WebGLRenderingContext.VIEWPORT;
<new GLenum> = WebGL2RenderingContext.SCISSOR_BOX;
<new GLenum> = WebGLRenderingContext.SCISSOR_BOX;
<new GLenum> = WebGL2RenderingContext.COLOR_CLEAR_VALUE;
<new GLenum> = WebGLRenderingContext.COLOR_CLEAR_VALUE;
<new GLenum> = WebGL2RenderingContext.COLOR_WRITEMASK;
<new GLenum> = WebGLRenderingContext.COLOR_WRITEMASK;
<new GLenum> = WebGL2RenderingContext.UNPACK_ALIGNMENT;
<new GLenum> = WebGLRenderingContext.UNPACK_ALIGNMENT;
<new GLenum> = WebGL2RenderingContext.PACK_ALIGNMENT;
<new GLenum> = WebGLRenderingContext.PACK_ALIGNMENT;
<new GLenum> = WebGL2RenderingContext.MAX_TEXTURE_SIZE;
<new GLenum> = WebGLRenderingContext.MAX_TEXTURE_SIZE;
<new GLenum> = WebGL2RenderingContext.MAX_VIEWPORT_DIMS;
<new GLenum> = WebGLRenderingContext.MAX_VIEWPORT_DIMS;
<new GLenum> = WebGL2RenderingContext.SUBPIXEL_BITS;
<new GLenum> = WebGLRenderingContext.SUBPIXEL_BITS;
<new GLenum> = WebGL2RenderingContext.RED_BITS;
<new GLenum> = WebGLRenderingContext.RED_BITS;
<new GLenum> = WebGL2RenderingContext.GREEN_BITS;
<new GLenum> = WebGLRenderingContext.GREEN_BITS;
<new GLenum> = WebGL2RenderingContext.BLUE_BITS;
<new GLenum> = WebGLRenderingContext.BLUE_BITS;
<new GLenum> = WebGL2RenderingContext.ALPHA_BITS;
<new GLenum> = WebGLRenderingContext.ALPHA_BITS;
<new GLenum> = WebGL2RenderingContext.DEPTH_BITS;
<new GLenum> = WebGLRenderingContext.DEPTH_BITS;
<new GLenum> = WebGL2RenderingContext.STENCIL_BITS;
<new GLenum> = WebGLRenderingContext.STENCIL_BITS;
<new GLenum> = WebGL2RenderingContext.POLYGON_OFFSET_UNITS;
<new GLenum> = WebGLRenderingContext.POLYGON_OFFSET_UNITS;
<new GLenum> = WebGL2RenderingContext.POLYGON_OFFSET_FACTOR;
<new GLenum> = WebGLRenderingContext.POLYGON_OFFSET_FACTOR;
<new GLenum> = WebGL2RenderingContext.TEXTURE_BINDING_2D;
<new GLenum> = WebGLRenderingContext.TEXTURE_BINDING_2D;
<new GLenum> = WebGL2RenderingContext.SAMPLE_BUFFERS;
<new GLenum> = WebGLRenderingContext.SAMPLE_BUFFERS;
<new GLenum> = WebGL2RenderingContext.SAMPLES;
<new GLenum> = WebGLRenderingContext.SAMPLES;
<new GLenum> = WebGL2RenderingContext.SAMPLE_COVERAGE_VALUE;
<new GLenum> = WebGLRenderingContext.SAMPLE_COVERAGE_VALUE;
<new GLenum> = WebGL2RenderingContext.SAMPLE_COVERAGE_INVERT;
<new GLenum> = WebGLRenderingContext.SAMPLE_COVERAGE_INVERT;
<new GLenum> = WebGL2RenderingContext.COMPRESSED_TEXTURE_FORMATS;
<new GLenum> = WebGLRenderingContext.COMPRESSED_TEXTURE_FORMATS;
<new GLenum> = WebGL2RenderingContext.DONT_CARE;
<new GLenum> = WebGLRenderingContext.DONT_CARE;
<new GLenum> = WebGL2RenderingContext.FASTEST;
<new GLenum> = WebGLRenderingContext.FASTEST;
<new GLenum> = WebGL2RenderingContext.NICEST;
<new GLenum> = WebGLRenderingContext.NICEST;
<new GLenum> = WebGL2RenderingContext.GENERATE_MIPMAP_HINT;
<new GLenum> = WebGLRenderingContext.GENERATE_MIPMAP_HINT;
<new GLenum> = WebGL2RenderingContext.BYTE;
<new GLenum> = WebGLRenderingContext.BYTE;
<new GLenum> = WebGL2RenderingContext.UNSIGNED_BYTE;
<new GLenum> = WebGLRenderingContext.UNSIGNED_BYTE;
<new GLenum> = WebGL2RenderingContext.SHORT;
<new GLenum> = WebGLRenderingContext.SHORT;
<new GLenum> = WebGL2RenderingContext.UNSIGNED_SHORT;
<new GLenum> = WebGLRenderingContext.UNSIGNED_SHORT;
<new GLenum> = WebGL2RenderingContext.INT;
<new GLenum> = WebGLRenderingContext.INT;
<new GLenum> = WebGL2RenderingContext.UNSIGNED_INT;
<new GLenum> = WebGLRenderingContext.UNSIGNED_INT;
<new GLenum> = WebGL2RenderingContext.FLOAT;
<new GLenum> = WebGLRenderingContext.FLOAT;
<new GLenum> = WebGL2RenderingContext.DEPTH_COMPONENT;
<new GLenum> = WebGLRenderingContext.DEPTH_COMPONENT;
<new GLenum> = WebGL2RenderingContext.ALPHA;
<new GLenum> = WebGLRenderingContext.ALPHA;
<new GLenum> = WebGL2RenderingContext.RGB;
<new GLenum> = WebGLRenderingContext.RGB;
<new GLenum> = WebGL2RenderingContext.RGBA;
<new GLenum> = WebGLRenderingContext.RGBA;
<new GLenum> = WebGL2RenderingContext.LUMINANCE;
<new GLenum> = WebGLRenderingContext.LUMINANCE;
<new GLenum> = WebGL2RenderingContext.LUMINANCE_ALPHA;
<new GLenum> = WebGLRenderingContext.LUMINANCE_ALPHA;
<new GLenum> = WebGL2RenderingContext.UNSIGNED_SHORT_4_4_4_4;
<new GLenum> = WebGLRenderingContext.UNSIGNED_SHORT_4_4_4_4;
<new GLenum> = WebGL2RenderingContext.UNSIGNED_SHORT_5_5_5_1;
<new GLenum> = WebGLRenderingContext.UNSIGNED_SHORT_5_5_5_1;
<new GLenum> = WebGL2RenderingContext.UNSIGNED_SHORT_5_6_5;
<new GLenum> = WebGLRenderingContext.UNSIGNED_SHORT_5_6_5;
<new GLenum> = WebGL2RenderingContext.FRAGMENT_SHADER;
<new GLenum> = WebGLRenderingContext.FRAGMENT_SHADER;
<new GLenum> = WebGL2RenderingContext.VERTEX_SHADER;
<new GLenum> = WebGLRenderingContext.VERTEX_SHADER;
<new GLenum> = WebGL2RenderingContext.MAX_VERTEX_ATTRIBS;
<new GLenum> = WebGLRenderingContext.MAX_VERTEX_ATTRIBS;
<new GLenum> = WebGL2RenderingContext.MAX_VERTEX_UNIFORM_VECTORS;
<new GLenum> = WebGLRenderingContext.MAX_VERTEX_UNIFORM_VECTORS;
<new GLenum> = WebGL2RenderingContext.MAX_VARYING_VECTORS;
<new GLenum> = WebGLRenderingContext.MAX_VARYING_VECTORS;
<new GLenum> = WebGL2RenderingContext.MAX_COMBINED_TEXTURE_IMAGE_UNITS;
<new GLenum> = WebGLRenderingContext.MAX_COMBINED_TEXTURE_IMAGE_UNITS;
<new GLenum> = WebGL2RenderingContext.MAX_VERTEX_TEXTURE_IMAGE_UNITS;
<new GLenum> = WebGLRenderingContext.MAX_VERTEX_TEXTURE_IMAGE_UNITS;
<new GLenum> = WebGL2RenderingContext.MAX_TEXTURE_IMAGE_UNITS;
<new GLenum> = WebGLRenderingContext.MAX_TEXTURE_IMAGE_UNITS;
<new GLenum> = WebGL2RenderingContext.MAX_FRAGMENT_UNIFORM_VECTORS;
<new GLenum> = WebGLRenderingContext.MAX_FRAGMENT_UNIFORM_VECTORS;
<new GLenum> = WebGL2RenderingContext.SHADER_TYPE;
<new GLenum> = WebGLRenderingContext.SHADER_TYPE;
<new GLenum> = WebGL2RenderingContext.DELETE_STATUS;
<new GLenum> = WebGLRenderingContext.DELETE_STATUS;
<new GLenum> = WebGL2RenderingContext.LINK_STATUS;
<new GLenum> = WebGLRenderingContext.LINK_STATUS;
<new GLenum> = WebGL2RenderingContext.VALIDATE_STATUS;
<new GLenum> = WebGLRenderingContext.VALIDATE_STATUS;
<new GLenum> = WebGL2RenderingContext.ATTACHED_SHADERS;
<new GLenum> = WebGLRenderingContext.ATTACHED_SHADERS;
<new GLenum> = WebGL2RenderingContext.ACTIVE_UNIFORMS;
<new GLenum> = WebGLRenderingContext.ACTIVE_UNIFORMS;
<new GLenum> = WebGL2RenderingContext.ACTIVE_ATTRIBUTES;
<new GLenum> = WebGLRenderingContext.ACTIVE_ATTRIBUTES;
<new GLenum> = WebGL2RenderingContext.SHADING_LANGUAGE_VERSION;
<new GLenum> = WebGLRenderingContext.SHADING_LANGUAGE_VERSION;
<new GLenum> = WebGL2RenderingContext.CURRENT_PROGRAM;
<new GLenum> = WebGLRenderingContext.CURRENT_PROGRAM;
<new GLenum> = WebGL2RenderingContext.NEVER;
<new GLenum> = WebGLRenderingContext.NEVER;
<new GLenum> = WebGL2RenderingContext.LESS;
<new GLenum> = WebGLRenderingContext.LESS;
<new GLenum> = WebGL2RenderingContext.EQUAL;
<new GLenum> = WebGLRenderingContext.EQUAL;
<new GLenum> = WebGL2RenderingContext.LEQUAL;
<new GLenum> = WebGLRenderingContext.LEQUAL;
<new GLenum> = WebGL2RenderingContext.GREATER;
<new GLenum> = WebGLRenderingContext.GREATER;
<new GLenum> = WebGL2RenderingContext.NOTEQUAL;
<new GLenum> = WebGLRenderingContext.NOTEQUAL;
<new GLenum> = WebGL2RenderingContext.GEQUAL;
<new GLenum> = WebGLRenderingContext.GEQUAL;
<new GLenum> = WebGL2RenderingContext.ALWAYS;
<new GLenum> = WebGLRenderingContext.ALWAYS;
<new GLenum> = WebGL2RenderingContext.KEEP;
<new GLenum> = WebGLRenderingContext.KEEP;
<new GLenum> = WebGL2RenderingContext.REPLACE;
<new GLenum> = WebGLRenderingContext.REPLACE;
<new GLenum> = WebGL2RenderingContext.INCR;
<new GLenum> = WebGLRenderingContext.INCR;
<new GLenum> = WebGL2RenderingContext.DECR;
<new GLenum> = WebGLRenderingContext.DECR;
<new GLenum> = WebGL2RenderingContext.INVERT;
<new GLenum> = WebGLRenderingContext.INVERT;
<new GLenum> = WebGL2RenderingContext.INCR_WRAP;
<new GLenum> = WebGLRenderingContext.INCR_WRAP;
<new GLenum> = WebGL2RenderingContext.DECR_WRAP;
<new GLenum> = WebGLRenderingContext.DECR_WRAP;
<new GLenum> = WebGL2RenderingContext.VENDOR;
<new GLenum> = WebGLRenderingContext.VENDOR;
<new GLenum> = WebGL2RenderingContext.RENDERER;
<new GLenum> = WebGLRenderingContext.RENDERER;
<new GLenum> = WebGL2RenderingContext.VERSION;
<new GLenum> = WebGLRenderingContext.VERSION;
<new GLenum> = WebGL2RenderingContext.NEAREST;
<new GLenum> = WebGLRenderingContext.NEAREST;
<new GLenum> = WebGL2RenderingContext.LINEAR;
<new GLenum> = WebGLRenderingContext.LINEAR;
<new GLenum> = WebGL2RenderingContext.NEAREST_MIPMAP_NEAREST;
<new GLenum> = WebGLRenderingContext.NEAREST_MIPMAP_NEAREST;
<new GLenum> = WebGL2RenderingContext.LINEAR_MIPMAP_NEAREST;
<new GLenum> = WebGLRenderingContext.LINEAR_MIPMAP_NEAREST;
<new GLenum> = WebGL2RenderingContext.NEAREST_MIPMAP_LINEAR;
<new GLenum> = WebGLRenderingContext.NEAREST_MIPMAP_LINEAR;
<new GLenum> = WebGL2RenderingContext.LINEAR_MIPMAP_LINEAR;
<new GLenum> = WebGLRenderingContext.LINEAR_MIPMAP_LINEAR;
<new GLenum> = WebGL2RenderingContext.TEXTURE_MAG_FILTER;
<new GLenum> = WebGLRenderingContext.TEXTURE_MAG_FILTER;
<new GLenum> = WebGL2RenderingContext.TEXTURE_MIN_FILTER;
<new GLenum> = WebGLRenderingContext.TEXTURE_MIN_FILTER;
<new GLenum> = WebGL2RenderingContext.TEXTURE_WRAP_S;
<new GLenum> = WebGLRenderingContext.TEXTURE_WRAP_S;
<new GLenum> = WebGL2RenderingContext.TEXTURE_WRAP_T;
<new GLenum> = WebGLRenderingContext.TEXTURE_WRAP_T;
<new GLenum> = WebGL2RenderingContext.TEXTURE_2D;
<new GLenum> = WebGLRenderingContext.TEXTURE_2D;
<new GLenum> = WebGL2RenderingContext.TEXTURE;
<new GLenum> = WebGLRenderingContext.TEXTURE;
<new GLenum> = WebGL2RenderingContext.TEXTURE_CUBE_MAP;
<new GLenum> = WebGLRenderingContext.TEXTURE_CUBE_MAP;
<new GLenum> = WebGL2RenderingContext.TEXTURE_BINDING_CUBE_MAP;
<new GLenum> = WebGLRenderingContext.TEXTURE_BINDING_CUBE_MAP;
<new GLenum> = WebGL2RenderingContext.TEXTURE_CUBE_MAP_POSITIVE_X;
<new GLenum> = WebGLRenderingContext.TEXTURE_CUBE_MAP_POSITIVE_X;
<new GLenum> = WebGL2RenderingContext.TEXTURE_CUBE_MAP_NEGATIVE_X;
<new GLenum> = WebGLRenderingContext.TEXTURE_CUBE_MAP_NEGATIVE_X;
<new GLenum> = WebGL2RenderingContext.TEXTURE_CUBE_MAP_POSITIVE_Y;
<new GLenum> = WebGLRenderingContext.TEXTURE_CUBE_MAP_POSITIVE_Y;
<new GLenum> = WebGL2RenderingContext.TEXTURE_CUBE_MAP_NEGATIVE_Y;
<new GLenum> = WebGLRenderingContext.TEXTURE_CUBE_MAP_NEGATIVE_Y;
<new GLenum> = WebGL2RenderingContext.TEXTURE_CUBE_MAP_POSITIVE_Z;
<new GLenum> = WebGLRenderingContext.TEXTURE_CUBE_MAP_POSITIVE_Z;
<new GLenum> = WebGL2RenderingContext.TEXTURE_CUBE_MAP_NEGATIVE_Z;
<new GLenum> = WebGLRenderingContext.TEXTURE_CUBE_MAP_NEGATIVE_Z;
<new GLenum> = WebGL2RenderingContext.MAX_CUBE_MAP_TEXTURE_SIZE;
<new GLenum> = WebGLRenderingContext.MAX_CUBE_MAP_TEXTURE_SIZE;
<new GLenum> = WebGL2RenderingContext.TEXTURE0;
<new GLenum> = WebGLRenderingContext.TEXTURE0;
<new GLenum> = WebGL2RenderingContext.TEXTURE1;
<new GLenum> = WebGLRenderingContext.TEXTURE1;
<new GLenum> = WebGL2RenderingContext.TEXTURE2;
<new GLenum> = WebGLRenderingContext.TEXTURE2;
<new GLenum> = WebGL2RenderingContext.TEXTURE3;
<new GLenum> = WebGLRenderingContext.TEXTURE3;
<new GLenum> = WebGL2RenderingContext.TEXTURE4;
<new GLenum> = WebGLRenderingContext.TEXTURE4;
<new GLenum> = WebGL2RenderingContext.TEXTURE5;
<new GLenum> = WebGLRenderingContext.TEXTURE5;
<new GLenum> = WebGL2RenderingContext.TEXTURE6;
<new GLenum> = WebGLRenderingContext.TEXTURE6;
<new GLenum> = WebGL2RenderingContext.TEXTURE7;
<new GLenum> = WebGLRenderingContext.TEXTURE7;
<new GLenum> = WebGL2RenderingContext.TEXTURE8;
<new GLenum> = WebGLRenderingContext.TEXTURE8;
<new GLenum> = WebGL2RenderingContext.TEXTURE9;
<new GLenum> = WebGLRenderingContext.TEXTURE9;
<new GLenum> = WebGL2RenderingContext.TEXTURE10;
<new GLenum> = WebGLRenderingContext.TEXTURE10;
<new GLenum> = WebGL2RenderingContext.TEXTURE11;
<new GLenum> = WebGLRenderingContext.TEXTURE11;
<new GLenum> = WebGL2RenderingContext.TEXTURE12;
<new GLenum> = WebGLRenderingContext.TEXTURE12;
<new GLenum> = WebGL2RenderingContext.TEXTURE13;
<new GLenum> = WebGLRenderingContext.TEXTURE13;
<new GLenum> = WebGL2RenderingContext.TEXTURE14;
<new GLenum> = WebGLRenderingContext.TEXTURE14;
<new GLenum> = WebGL2RenderingContext.TEXTURE15;
<new GLenum> = WebGLRenderingContext.TEXTURE15;
<new GLenum> = WebGL2RenderingContext.TEXTURE16;
<new GLenum> = WebGLRenderingContext.TEXTURE16;
<new GLenum> = WebGL2RenderingContext.TEXTURE17;
<new GLenum> = WebGLRenderingContext.TEXTURE17;
<new GLenum> = WebGL2RenderingContext.TEXTURE18;
<new GLenum> = WebGLRenderingContext.TEXTURE18;
<new GLenum> = WebGL2RenderingContext.TEXTURE19;
<new GLenum> = WebGLRenderingContext.TEXTURE19;
<new GLenum> = WebGL2RenderingContext.TEXTURE20;
<new GLenum> = WebGLRenderingContext.TEXTURE20;
<new GLenum> = WebGL2RenderingContext.TEXTURE21;
<new GLenum> = WebGLRenderingContext.TEXTURE21;
<new GLenum> = WebGL2RenderingContext.TEXTURE22;
<new GLenum> = WebGLRenderingContext.TEXTURE22;
<new GLenum> = WebGL2RenderingContext.TEXTURE23;
<new GLenum> = WebGLRenderingContext.TEXTURE23;
<new GLenum> = WebGL2RenderingContext.TEXTURE24;
<new GLenum> = WebGLRenderingContext.TEXTURE24;
<new GLenum> = WebGL2RenderingContext.TEXTURE25;
<new GLenum> = WebGLRenderingContext.TEXTURE25;
<new GLenum> = WebGL2RenderingContext.TEXTURE26;
<new GLenum> = WebGLRenderingContext.TEXTURE26;
<new GLenum> = WebGL2RenderingContext.TEXTURE27;
<new GLenum> = WebGLRenderingContext.TEXTURE27;
<new GLenum> = WebGL2RenderingContext.TEXTURE28;
<new GLenum> = WebGLRenderingContext.TEXTURE28;
<new GLenum> = WebGL2RenderingContext.TEXTURE29;
<new GLenum> = WebGLRenderingContext.TEXTURE29;
<new GLenum> = WebGL2RenderingContext.TEXTURE30;
<new GLenum> = WebGLRenderingContext.TEXTURE30;
<new GLenum> = WebGL2RenderingContext.TEXTURE31;
<new GLenum> = WebGLRenderingContext.TEXTURE31;
<new GLenum> = WebGL2RenderingContext.ACTIVE_TEXTURE;
<new GLenum> = WebGLRenderingContext.ACTIVE_TEXTURE;
<new GLenum> = WebGL2RenderingContext.REPEAT;
<new GLenum> = WebGLRenderingContext.REPEAT;
<new GLenum> = WebGL2RenderingContext.CLAMP_TO_EDGE;
<new GLenum> = WebGLRenderingContext.CLAMP_TO_EDGE;
<new GLenum> = WebGL2RenderingContext.MIRRORED_REPEAT;
<new GLenum> = WebGLRenderingContext.MIRRORED_REPEAT;
<new GLenum> = WebGL2RenderingContext.FLOAT_VEC2;
<new GLenum> = WebGLRenderingContext.FLOAT_VEC2;
<new GLenum> = WebGL2RenderingContext.FLOAT_VEC3;
<new GLenum> = WebGLRenderingContext.FLOAT_VEC3;
<new GLenum> = WebGL2RenderingContext.FLOAT_VEC4;
<new GLenum> = WebGLRenderingContext.FLOAT_VEC4;
<new GLenum> = WebGL2RenderingContext.INT_VEC2;
<new GLenum> = WebGLRenderingContext.INT_VEC2;
<new GLenum> = WebGL2RenderingContext.INT_VEC3;
<new GLenum> = WebGLRenderingContext.INT_VEC3;
<new GLenum> = WebGL2RenderingContext.INT_VEC4;
<new GLenum> = WebGLRenderingContext.INT_VEC4;
<new GLenum> = WebGL2RenderingContext.BOOL;
<new GLenum> = WebGLRenderingContext.BOOL;
<new GLenum> = WebGL2RenderingContext.BOOL_VEC2;
<new GLenum> = WebGLRenderingContext.BOOL_VEC2;
<new GLenum> = WebGL2RenderingContext.BOOL_VEC3;
<new GLenum> = WebGLRenderingContext.BOOL_VEC3;
<new GLenum> = WebGL2RenderingContext.BOOL_VEC4;
<new GLenum> = WebGLRenderingContext.BOOL_VEC4;
<new GLenum> = WebGL2RenderingContext.FLOAT_MAT2;
<new GLenum> = WebGLRenderingContext.FLOAT_MAT2;
<new GLenum> = WebGL2RenderingContext.FLOAT_MAT3;
<new GLenum> = WebGLRenderingContext.FLOAT_MAT3;
<new GLenum> = WebGL2RenderingContext.FLOAT_MAT4;
<new GLenum> = WebGLRenderingContext.FLOAT_MAT4;
<new GLenum> = WebGL2RenderingContext.SAMPLER_2D;
<new GLenum> = WebGLRenderingContext.SAMPLER_2D;
<new GLenum> = WebGL2RenderingContext.SAMPLER_CUBE;
<new GLenum> = WebGLRenderingContext.SAMPLER_CUBE;
<new GLenum> = WebGL2RenderingContext.VERTEX_ATTRIB_ARRAY_ENABLED;
<new GLenum> = WebGLRenderingContext.VERTEX_ATTRIB_ARRAY_ENABLED;
<new GLenum> = WebGL2RenderingContext.VERTEX_ATTRIB_ARRAY_SIZE;
<new GLenum> = WebGLRenderingContext.VERTEX_ATTRIB_ARRAY_SIZE;
<new GLenum> = WebGL2RenderingContext.VERTEX_ATTRIB_ARRAY_STRIDE;
<new GLenum> = WebGLRenderingContext.VERTEX_ATTRIB_ARRAY_STRIDE;
<new GLenum> = WebGL2RenderingContext.VERTEX_ATTRIB_ARRAY_TYPE;
<new GLenum> = WebGLRenderingContext.VERTEX_ATTRIB_ARRAY_TYPE;
<new GLenum> = WebGL2RenderingContext.VERTEX_ATTRIB_ARRAY_NORMALIZED;
<new GLenum> = WebGLRenderingContext.VERTEX_ATTRIB_ARRAY_NORMALIZED;
<new GLenum> = WebGL2RenderingContext.VERTEX_ATTRIB_ARRAY_POINTER;
<new GLenum> = WebGLRenderingContext.VERTEX_ATTRIB_ARRAY_POINTER;
<new GLenum> = WebGL2RenderingContext.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING;
<new GLenum> = WebGLRenderingContext.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING;
<new GLenum> = WebGL2RenderingContext.IMPLEMENTATION_COLOR_READ_TYPE;
<new GLenum> = WebGLRenderingContext.IMPLEMENTATION_COLOR_READ_TYPE;
<new GLenum> = WebGL2RenderingContext.IMPLEMENTATION_COLOR_READ_FORMAT;
<new GLenum> = WebGLRenderingContext.IMPLEMENTATION_COLOR_READ_FORMAT;
<new GLenum> = WebGL2RenderingContext.COMPILE_STATUS;
<new GLenum> = WebGLRenderingContext.COMPILE_STATUS;
<new GLenum> = WebGL2RenderingContext.LOW_FLOAT;
<new GLenum> = WebGLRenderingContext.LOW_FLOAT;
<new GLenum> = WebGL2RenderingContext.MEDIUM_FLOAT;
<new GLenum> = WebGLRenderingContext.MEDIUM_FLOAT;
<new GLenum> = WebGL2RenderingContext.HIGH_FLOAT;
<new GLenum> = WebGLRenderingContext.HIGH_FLOAT;
<new GLenum> = WebGL2RenderingContext.LOW_INT;
<new GLenum> = WebGLRenderingContext.LOW_INT;
<new GLenum> = WebGL2RenderingContext.MEDIUM_INT;
<new GLenum> = WebGLRenderingContext.MEDIUM_INT;
<new GLenum> = WebGL2RenderingContext.HIGH_INT;
<new GLenum> = WebGLRenderingContext.HIGH_INT;
<new GLenum> = WebGL2RenderingContext.FRAMEBUFFER;
<new GLenum> = WebGLRenderingContext.FRAMEBUFFER;
<new GLenum> = WebGL2RenderingContext.RENDERBUFFER;
<new GLenum> = WebGLRenderingContext.RENDERBUFFER;
<new GLenum> = WebGL2RenderingContext.RGBA4;
<new GLenum> = WebGLRenderingContext.RGBA4;
<new GLenum> = WebGL2RenderingContext.RGB5_A1;
<new GLenum> = WebGLRenderingContext.RGB5_A1;
<new GLenum> = WebGL2RenderingContext.RGB565;
<new GLenum> = WebGLRenderingContext.RGB565;
<new GLenum> = WebGL2RenderingContext.DEPTH_COMPONENT16;
<new GLenum> = WebGLRenderingContext.DEPTH_COMPONENT16;
<new GLenum> = WebGL2RenderingContext.STENCIL_INDEX8;
<new GLenum> = WebGLRenderingContext.STENCIL_INDEX8;
<new GLenum> = WebGL2RenderingContext.DEPTH_STENCIL;
<new GLenum> = WebGLRenderingContext.DEPTH_STENCIL;
<new GLenum> = WebGL2RenderingContext.RENDERBUFFER_WIDTH;
<new GLenum> = WebGLRenderingContext.RENDERBUFFER_WIDTH;
<new GLenum> = WebGL2RenderingContext.RENDERBUFFER_HEIGHT;
<new GLenum> = WebGLRenderingContext.RENDERBUFFER_HEIGHT;
<new GLenum> = WebGL2RenderingContext.RENDERBUFFER_INTERNAL_FORMAT;
<new GLenum> = WebGLRenderingContext.RENDERBUFFER_INTERNAL_FORMAT;
<new GLenum> = WebGL2RenderingContext.RENDERBUFFER_RED_SIZE;
<new GLenum> = WebGLRenderingContext.RENDERBUFFER_RED_SIZE;
<new GLenum> = WebGL2RenderingContext.RENDERBUFFER_GREEN_SIZE;
<new GLenum> = WebGLRenderingContext.RENDERBUFFER_GREEN_SIZE;
<new GLenum> = WebGL2RenderingContext.RENDERBUFFER_BLUE_SIZE;
<new GLenum> = WebGLRenderingContext.RENDERBUFFER_BLUE_SIZE;
<new GLenum> = WebGL2RenderingContext.RENDERBUFFER_ALPHA_SIZE;
<new GLenum> = WebGLRenderingContext.RENDERBUFFER_ALPHA_SIZE;
<new GLenum> = WebGL2RenderingContext.RENDERBUFFER_DEPTH_SIZE;
<new GLenum> = WebGLRenderingContext.RENDERBUFFER_DEPTH_SIZE;
<new GLenum> = WebGL2RenderingContext.RENDERBUFFER_STENCIL_SIZE;
<new GLenum> = WebGLRenderingContext.RENDERBUFFER_STENCIL_SIZE;
<new GLenum> = WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE;
<new GLenum> = WebGLRenderingContext.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE;
<new GLenum> = WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME;
<new GLenum> = WebGLRenderingContext.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME;
<new GLenum> = WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL;
<new GLenum> = WebGLRenderingContext.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL;
<new GLenum> = WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE;
<new GLenum> = WebGLRenderingContext.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE;
<new GLenum> = WebGL2RenderingContext.COLOR_ATTACHMENT0;
<new GLenum> = WebGLRenderingContext.COLOR_ATTACHMENT0;
<new GLenum> = WebGL2RenderingContext.DEPTH_ATTACHMENT;
<new GLenum> = WebGLRenderingContext.DEPTH_ATTACHMENT;
<new GLenum> = WebGL2RenderingContext.STENCIL_ATTACHMENT;
<new GLenum> = WebGLRenderingContext.STENCIL_ATTACHMENT;
<new GLenum> = WebGL2RenderingContext.DEPTH_STENCIL_ATTACHMENT;
<new GLenum> = WebGLRenderingContext.DEPTH_STENCIL_ATTACHMENT;
<new GLenum> = WebGL2RenderingContext.NONE;
<new GLenum> = WebGLRenderingContext.NONE;
<new GLenum> = WebGL2RenderingContext.FRAMEBUFFER_COMPLETE;
<new GLenum> = WebGLRenderingContext.FRAMEBUFFER_COMPLETE;
<new GLenum> = WebGL2RenderingContext.FRAMEBUFFER_INCOMPLETE_ATTACHMENT;
<new GLenum> = WebGLRenderingContext.FRAMEBUFFER_INCOMPLETE_ATTACHMENT;
<new GLenum> = WebGL2RenderingContext.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT;
<new GLenum> = WebGLRenderingContext.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT;
<new GLenum> = WebGL2RenderingContext.FRAMEBUFFER_INCOMPLETE_DIMENSIONS;
<new GLenum> = WebGLRenderingContext.FRAMEBUFFER_INCOMPLETE_DIMENSIONS;
<new GLenum> = WebGL2RenderingContext.FRAMEBUFFER_UNSUPPORTED;
<new GLenum> = WebGLRenderingContext.FRAMEBUFFER_UNSUPPORTED;
<new GLenum> = WebGL2RenderingContext.FRAMEBUFFER_BINDING;
<new GLenum> = WebGLRenderingContext.FRAMEBUFFER_BINDING;
<new GLenum> = WebGL2RenderingContext.RENDERBUFFER_BINDING;
<new GLenum> = WebGLRenderingContext.RENDERBUFFER_BINDING;
<new GLenum> = WebGL2RenderingContext.MAX_RENDERBUFFER_SIZE;
<new GLenum> = WebGLRenderingContext.MAX_RENDERBUFFER_SIZE;
<new GLenum> = WebGL2RenderingContext.INVALID_FRAMEBUFFER_OPERATION;
<new GLenum> = WebGLRenderingContext.INVALID_FRAMEBUFFER_OPERATION;
<new GLenum> = WebGL2RenderingContext.UNPACK_FLIP_Y_WEBGL;
<new GLenum> = WebGLRenderingContext.UNPACK_FLIP_Y_WEBGL;
<new GLenum> = WebGL2RenderingContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL;
<new GLenum> = WebGLRenderingContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL;
<new GLenum> = WebGL2RenderingContext.CONTEXT_LOST_WEBGL;
<new GLenum> = WebGLRenderingContext.CONTEXT_LOST_WEBGL;
<new GLenum> = WebGL2RenderingContext.UNPACK_COLORSPACE_CONVERSION_WEBGL;
<new GLenum> = WebGLRenderingContext.UNPACK_COLORSPACE_CONVERSION_WEBGL;
<new GLenum> = WebGL2RenderingContext.BROWSER_DEFAULT_WEBGL;
<new GLenum> = WebGLRenderingContext.BROWSER_DEFAULT_WEBGL;
<new union_HTMLCanvasElement1OffscreenCanvas_> = <WebGL2RenderingContext>.canvas;
<new union_HTMLCanvasElement1OffscreenCanvas_> = <WebGLRenderingContext>.canvas;
<new GLsizei> = <WebGL2RenderingContext>.drawingBufferWidth;
<new GLsizei> = <WebGLRenderingContext>.drawingBufferWidth;
<new GLsizei> = <WebGL2RenderingContext>.drawingBufferHeight;
<new GLsizei> = <WebGLRenderingContext>.drawingBufferHeight;
<new PredefinedColorSpace> = <WebGL2RenderingContext>.drawingBufferColorSpace;
<WebGL2RenderingContext>.drawingBufferColorSpace = <PredefinedColorSpace>;
<new PredefinedColorSpace> = <WebGLRenderingContext>.drawingBufferColorSpace;
<WebGLRenderingContext>.drawingBufferColorSpace = <PredefinedColorSpace>;
<new PredefinedColorSpace> = <WebGL2RenderingContext>.unpackColorSpace;
<WebGL2RenderingContext>.unpackColorSpace = <PredefinedColorSpace>;
<new PredefinedColorSpace> = <WebGLRenderingContext>.unpackColorSpace;
<WebGLRenderingContext>.unpackColorSpace = <PredefinedColorSpace>;
<new WebGLContextAttributes> = <WebGL2RenderingContext>.getContextAttributes();
<new WebGLContextAttributes> = <WebGLRenderingContext>.getContextAttributes();
<WebGL2RenderingContext>.isContextLost();
<WebGLRenderingContext>.isContextLost();
<new sequence_DOMString_> = <WebGL2RenderingContext>.getSupportedExtensions();
<new sequence_DOMString_> = <WebGLRenderingContext>.getSupportedExtensions();
<new object> = <WebGL2RenderingContext>.getExtension(<DOMString>);
<new object> = <WebGLRenderingContext>.getExtension(<DOMString>);
<WebGL2RenderingContext>.activeTexture(<GLenum>);
<WebGLRenderingContext>.activeTexture(<GLenum>);
<WebGL2RenderingContext>.attachShader(<WebGLProgram>,<WebGLShader>);
<WebGLRenderingContext>.attachShader(<WebGLProgram>,<WebGLShader>);
<WebGL2RenderingContext>.bindAttribLocation(<WebGLProgram>,<GLuint>,<DOMString>);
<WebGLRenderingContext>.bindAttribLocation(<WebGLProgram>,<GLuint>,<DOMString>);
<WebGL2RenderingContext>.bindBuffer(<GLenum>,<WebGLBuffer>);
<WebGLRenderingContext>.bindBuffer(<GLenum>,<WebGLBuffer>);
<WebGL2RenderingContext>.bindFramebuffer(<GLenum>,<WebGLFramebuffer>);
<WebGLRenderingContext>.bindFramebuffer(<GLenum>,<WebGLFramebuffer>);
<WebGL2RenderingContext>.bindRenderbuffer(<GLenum>,<WebGLRenderbuffer>);
<WebGLRenderingContext>.bindRenderbuffer(<GLenum>,<WebGLRenderbuffer>);
<WebGL2RenderingContext>.bindTexture(<GLenum>,<WebGLTexture>);
<WebGLRenderingContext>.bindTexture(<GLenum>,<WebGLTexture>);
<WebGL2RenderingContext>.blendColor(<GLclampf>,<GLclampf>,<GLclampf>,<GLclampf>);
<WebGLRenderingContext>.blendColor(<GLclampf>,<GLclampf>,<GLclampf>,<GLclampf>);
<WebGL2RenderingContext>.blendEquation(<GLenum>);
<WebGLRenderingContext>.blendEquation(<GLenum>);
<WebGL2RenderingContext>.blendEquationSeparate(<GLenum>,<GLenum>);
<WebGLRenderingContext>.blendEquationSeparate(<GLenum>,<GLenum>);
<WebGL2RenderingContext>.blendFunc(<GLenum>,<GLenum>);
<WebGLRenderingContext>.blendFunc(<GLenum>,<GLenum>);
<WebGL2RenderingContext>.blendFuncSeparate(<GLenum>,<GLenum>,<GLenum>,<GLenum>);
<WebGLRenderingContext>.blendFuncSeparate(<GLenum>,<GLenum>,<GLenum>,<GLenum>);
<new GLenum> = <WebGL2RenderingContext>.checkFramebufferStatus(<GLenum>);
<new GLenum> = <WebGLRenderingContext>.checkFramebufferStatus(<GLenum>);
<WebGL2RenderingContext>.clear(<GLbitfield>);
<WebGLRenderingContext>.clear(<GLbitfield>);
<WebGL2RenderingContext>.clearColor(<GLclampf>,<GLclampf>,<GLclampf>,<GLclampf>);
<WebGLRenderingContext>.clearColor(<GLclampf>,<GLclampf>,<GLclampf>,<GLclampf>);
<WebGL2RenderingContext>.clearDepth(<GLclampf>);
<WebGLRenderingContext>.clearDepth(<GLclampf>);
<WebGL2RenderingContext>.clearStencil(<GLint>);
<WebGLRenderingContext>.clearStencil(<GLint>);
<WebGL2RenderingContext>.colorMask(<GLboolean>,<GLboolean>,<GLboolean>,<GLboolean>);
<WebGLRenderingContext>.colorMask(<GLboolean>,<GLboolean>,<GLboolean>,<GLboolean>);
<WebGL2RenderingContext>.compileShader(<WebGLShader>);
<WebGLRenderingContext>.compileShader(<WebGLShader>);
<WebGL2RenderingContext>.copyTexImage2D(<GLenum>,<GLint>,<GLenum>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLint>);
<WebGLRenderingContext>.copyTexImage2D(<GLenum>,<GLint>,<GLenum>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLint>);
<WebGL2RenderingContext>.copyTexSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>);
<WebGLRenderingContext>.copyTexSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>);
<new WebGLBuffer> = <WebGL2RenderingContext>.createBuffer();
<new WebGLBuffer> = <WebGLRenderingContext>.createBuffer();
<new WebGLFramebuffer> = <WebGL2RenderingContext>.createFramebuffer();
<new WebGLFramebuffer> = <WebGLRenderingContext>.createFramebuffer();
<new WebGLProgram> = <WebGL2RenderingContext>.createProgram();
<new WebGLProgram> = <WebGLRenderingContext>.createProgram();
<new WebGLRenderbuffer> = <WebGL2RenderingContext>.createRenderbuffer();
<new WebGLRenderbuffer> = <WebGLRenderingContext>.createRenderbuffer();
<new WebGLShader> = <WebGL2RenderingContext>.createShader(<GLenum>);
<new WebGLShader> = <WebGLRenderingContext>.createShader(<GLenum>);
<new WebGLTexture> = <WebGL2RenderingContext>.createTexture();
<new WebGLTexture> = <WebGLRenderingContext>.createTexture();
<WebGL2RenderingContext>.cullFace(<GLenum>);
<WebGLRenderingContext>.cullFace(<GLenum>);
<WebGL2RenderingContext>.deleteBuffer(<WebGLBuffer>);
<WebGLRenderingContext>.deleteBuffer(<WebGLBuffer>);
<WebGL2RenderingContext>.deleteFramebuffer(<WebGLFramebuffer>);
<WebGLRenderingContext>.deleteFramebuffer(<WebGLFramebuffer>);
<WebGL2RenderingContext>.deleteProgram(<WebGLProgram>);
<WebGLRenderingContext>.deleteProgram(<WebGLProgram>);
<WebGL2RenderingContext>.deleteRenderbuffer(<WebGLRenderbuffer>);
<WebGLRenderingContext>.deleteRenderbuffer(<WebGLRenderbuffer>);
<WebGL2RenderingContext>.deleteShader(<WebGLShader>);
<WebGLRenderingContext>.deleteShader(<WebGLShader>);
<WebGL2RenderingContext>.deleteTexture(<WebGLTexture>);
<WebGLRenderingContext>.deleteTexture(<WebGLTexture>);
<WebGL2RenderingContext>.depthFunc(<GLenum>);
<WebGLRenderingContext>.depthFunc(<GLenum>);
<WebGL2RenderingContext>.depthMask(<GLboolean>);
<WebGLRenderingContext>.depthMask(<GLboolean>);
<WebGL2RenderingContext>.depthRange(<GLclampf>,<GLclampf>);
<WebGLRenderingContext>.depthRange(<GLclampf>,<GLclampf>);
<WebGL2RenderingContext>.detachShader(<WebGLProgram>,<WebGLShader>);
<WebGLRenderingContext>.detachShader(<WebGLProgram>,<WebGLShader>);
<WebGL2RenderingContext>.disable(<GLenum>);
<WebGLRenderingContext>.disable(<GLenum>);
<WebGL2RenderingContext>.disableVertexAttribArray(<GLuint>);
<WebGLRenderingContext>.disableVertexAttribArray(<GLuint>);
<WebGL2RenderingContext>.drawArrays(<GLenum>,<GLint>,<GLsizei>);
<WebGLRenderingContext>.drawArrays(<GLenum>,<GLint>,<GLsizei>);
<WebGL2RenderingContext>.drawElements(<GLenum>,<GLsizei>,<GLenum>,<GLintptr>);
<WebGLRenderingContext>.drawElements(<GLenum>,<GLsizei>,<GLenum>,<GLintptr>);
<WebGL2RenderingContext>.enable(<GLenum>);
<WebGLRenderingContext>.enable(<GLenum>);
<WebGL2RenderingContext>.enableVertexAttribArray(<GLuint>);
<WebGLRenderingContext>.enableVertexAttribArray(<GLuint>);
<WebGL2RenderingContext>.finish();
<WebGLRenderingContext>.finish();
<WebGL2RenderingContext>.flush();
<WebGLRenderingContext>.flush();
<WebGL2RenderingContext>.framebufferRenderbuffer(<GLenum>,<GLenum>,<GLenum>,<WebGLRenderbuffer>);
<WebGLRenderingContext>.framebufferRenderbuffer(<GLenum>,<GLenum>,<GLenum>,<WebGLRenderbuffer>);
<WebGL2RenderingContext>.framebufferTexture2D(<GLenum>,<GLenum>,<GLenum>,<WebGLTexture>,<GLint>);
<WebGLRenderingContext>.framebufferTexture2D(<GLenum>,<GLenum>,<GLenum>,<WebGLTexture>,<GLint>);
<WebGL2RenderingContext>.frontFace(<GLenum>);
<WebGLRenderingContext>.frontFace(<GLenum>);
<WebGL2RenderingContext>.generateMipmap(<GLenum>);
<WebGLRenderingContext>.generateMipmap(<GLenum>);
<new WebGLActiveInfo> = <WebGL2RenderingContext>.getActiveAttrib(<WebGLProgram>,<GLuint>);
<new WebGLActiveInfo> = <WebGLRenderingContext>.getActiveAttrib(<WebGLProgram>,<GLuint>);
<new WebGLActiveInfo> = <WebGL2RenderingContext>.getActiveUniform(<WebGLProgram>,<GLuint>);
<new WebGLActiveInfo> = <WebGLRenderingContext>.getActiveUniform(<WebGLProgram>,<GLuint>);
<new sequence_WebGLShader_> = [<WebGLShader>];
<new WebGLShader> = <sequence_WebGLShader_>[0];
<new sequence_WebGLShader_> = <WebGL2RenderingContext>.getAttachedShaders(<WebGLProgram>);
<new sequence_WebGLShader_> = <WebGLRenderingContext>.getAttachedShaders(<WebGLProgram>);
<new GLint> = <WebGL2RenderingContext>.getAttribLocation(<WebGLProgram>,<DOMString>);
<new GLint> = <WebGLRenderingContext>.getAttribLocation(<WebGLProgram>,<DOMString>);
<new any> = <WebGL2RenderingContext>.getBufferParameter(<GLenum>,<GLenum>);
<new any> = <WebGLRenderingContext>.getBufferParameter(<GLenum>,<GLenum>);
<new any> = <WebGL2RenderingContext>.getParameter(<GLenum>);
<new any> = <WebGLRenderingContext>.getParameter(<GLenum>);
<new GLenum> = <WebGL2RenderingContext>.getError();
<new GLenum> = <WebGLRenderingContext>.getError();
<new any> = <WebGL2RenderingContext>.getFramebufferAttachmentParameter(<GLenum>,<GLenum>,<GLenum>);
<new any> = <WebGLRenderingContext>.getFramebufferAttachmentParameter(<GLenum>,<GLenum>,<GLenum>);
<new any> = <WebGL2RenderingContext>.getProgramParameter(<WebGLProgram>,<GLenum>);
<new any> = <WebGLRenderingContext>.getProgramParameter(<WebGLProgram>,<GLenum>);
<new DOMString> = <WebGL2RenderingContext>.getProgramInfoLog(<WebGLProgram>);
<new DOMString> = <WebGLRenderingContext>.getProgramInfoLog(<WebGLProgram>);
<new any> = <WebGL2RenderingContext>.getRenderbufferParameter(<GLenum>,<GLenum>);
<new any> = <WebGLRenderingContext>.getRenderbufferParameter(<GLenum>,<GLenum>);
<new any> = <WebGL2RenderingContext>.getShaderParameter(<WebGLShader>,<GLenum>);
<new any> = <WebGLRenderingContext>.getShaderParameter(<WebGLShader>,<GLenum>);
<new WebGLShaderPrecisionFormat> = <WebGL2RenderingContext>.getShaderPrecisionFormat(<GLenum>,<GLenum>);
<new WebGLShaderPrecisionFormat> = <WebGLRenderingContext>.getShaderPrecisionFormat(<GLenum>,<GLenum>);
<new DOMString> = <WebGL2RenderingContext>.getShaderInfoLog(<WebGLShader>);
<new DOMString> = <WebGLRenderingContext>.getShaderInfoLog(<WebGLShader>);
<new DOMString> = <WebGL2RenderingContext>.getShaderSource(<WebGLShader>);
<new DOMString> = <WebGLRenderingContext>.getShaderSource(<WebGLShader>);
<new any> = <WebGL2RenderingContext>.getTexParameter(<GLenum>,<GLenum>);
<new any> = <WebGLRenderingContext>.getTexParameter(<GLenum>,<GLenum>);
<new any> = <WebGL2RenderingContext>.getUniform(<WebGLProgram>,<WebGLUniformLocation>);
<new any> = <WebGLRenderingContext>.getUniform(<WebGLProgram>,<WebGLUniformLocation>);
<new WebGLUniformLocation> = <WebGL2RenderingContext>.getUniformLocation(<WebGLProgram>,<DOMString>);
<new WebGLUniformLocation> = <WebGLRenderingContext>.getUniformLocation(<WebGLProgram>,<DOMString>);
<new any> = <WebGL2RenderingContext>.getVertexAttrib(<GLuint>,<GLenum>);
<new any> = <WebGLRenderingContext>.getVertexAttrib(<GLuint>,<GLenum>);
<new GLintptr> = <WebGL2RenderingContext>.getVertexAttribOffset(<GLuint>,<GLenum>);
<new GLintptr> = <WebGLRenderingContext>.getVertexAttribOffset(<GLuint>,<GLenum>);
<WebGL2RenderingContext>.hint(<GLenum>,<GLenum>);
<WebGLRenderingContext>.hint(<GLenum>,<GLenum>);
<new GLboolean> = <WebGL2RenderingContext>.isBuffer(<WebGLBuffer>);
<new GLboolean> = <WebGLRenderingContext>.isBuffer(<WebGLBuffer>);
<new GLboolean> = <WebGL2RenderingContext>.isEnabled(<GLenum>);
<new GLboolean> = <WebGLRenderingContext>.isEnabled(<GLenum>);
<new GLboolean> = <WebGL2RenderingContext>.isFramebuffer(<WebGLFramebuffer>);
<new GLboolean> = <WebGLRenderingContext>.isFramebuffer(<WebGLFramebuffer>);
<new GLboolean> = <WebGL2RenderingContext>.isProgram(<WebGLProgram>);
<new GLboolean> = <WebGLRenderingContext>.isProgram(<WebGLProgram>);
<new GLboolean> = <WebGL2RenderingContext>.isRenderbuffer(<WebGLRenderbuffer>);
<new GLboolean> = <WebGLRenderingContext>.isRenderbuffer(<WebGLRenderbuffer>);
<new GLboolean> = <WebGL2RenderingContext>.isShader(<WebGLShader>);
<new GLboolean> = <WebGLRenderingContext>.isShader(<WebGLShader>);
<new GLboolean> = <WebGL2RenderingContext>.isTexture(<WebGLTexture>);
<new GLboolean> = <WebGLRenderingContext>.isTexture(<WebGLTexture>);
<WebGL2RenderingContext>.lineWidth(<GLfloat>);
<WebGLRenderingContext>.lineWidth(<GLfloat>);
<WebGL2RenderingContext>.linkProgram(<WebGLProgram>);
<WebGLRenderingContext>.linkProgram(<WebGLProgram>);
<WebGL2RenderingContext>.pixelStorei(<GLenum>,<GLint>);
<WebGLRenderingContext>.pixelStorei(<GLenum>,<GLint>);
<WebGL2RenderingContext>.polygonOffset(<GLfloat>,<GLfloat>);
<WebGLRenderingContext>.polygonOffset(<GLfloat>,<GLfloat>);
<WebGL2RenderingContext>.renderbufferStorage(<GLenum>,<GLenum>,<GLsizei>,<GLsizei>);
<WebGLRenderingContext>.renderbufferStorage(<GLenum>,<GLenum>,<GLsizei>,<GLsizei>);
<WebGL2RenderingContext>.sampleCoverage(<GLclampf>,<GLboolean>);
<WebGLRenderingContext>.sampleCoverage(<GLclampf>,<GLboolean>);
<WebGL2RenderingContext>.scissor(<GLint>,<GLint>,<GLsizei>,<GLsizei>);
<WebGLRenderingContext>.scissor(<GLint>,<GLint>,<GLsizei>,<GLsizei>);
<WebGL2RenderingContext>.shaderSource(<WebGLShader>,<DOMString>);
<WebGLRenderingContext>.shaderSource(<WebGLShader>,<DOMString>);
<WebGL2RenderingContext>.stencilFunc(<GLenum>,<GLint>,<GLuint>);
<WebGLRenderingContext>.stencilFunc(<GLenum>,<GLint>,<GLuint>);
<WebGL2RenderingContext>.stencilFuncSeparate(<GLenum>,<GLenum>,<GLint>,<GLuint>);
<WebGLRenderingContext>.stencilFuncSeparate(<GLenum>,<GLenum>,<GLint>,<GLuint>);
<WebGL2RenderingContext>.stencilMask(<GLuint>);
<WebGLRenderingContext>.stencilMask(<GLuint>);
<WebGL2RenderingContext>.stencilMaskSeparate(<GLenum>,<GLuint>);
<WebGLRenderingContext>.stencilMaskSeparate(<GLenum>,<GLuint>);
<WebGL2RenderingContext>.stencilOp(<GLenum>,<GLenum>,<GLenum>);
<WebGLRenderingContext>.stencilOp(<GLenum>,<GLenum>,<GLenum>);
<WebGL2RenderingContext>.stencilOpSeparate(<GLenum>,<GLenum>,<GLenum>,<GLenum>);
<WebGLRenderingContext>.stencilOpSeparate(<GLenum>,<GLenum>,<GLenum>,<GLenum>);
<WebGL2RenderingContext>.texParameterf(<GLenum>,<GLenum>,<GLfloat>);
<WebGLRenderingContext>.texParameterf(<GLenum>,<GLenum>,<GLfloat>);
<WebGL2RenderingContext>.texParameteri(<GLenum>,<GLenum>,<GLint>);
<WebGLRenderingContext>.texParameteri(<GLenum>,<GLenum>,<GLint>);
<WebGL2RenderingContext>.uniform1f(<WebGLUniformLocation>,<GLfloat>);
<WebGLRenderingContext>.uniform1f(<WebGLUniformLocation>,<GLfloat>);
<WebGL2RenderingContext>.uniform2f(<WebGLUniformLocation>,<GLfloat>,<GLfloat>);
<WebGLRenderingContext>.uniform2f(<WebGLUniformLocation>,<GLfloat>,<GLfloat>);
<WebGL2RenderingContext>.uniform3f(<WebGLUniformLocation>,<GLfloat>,<GLfloat>,<GLfloat>);
<WebGLRenderingContext>.uniform3f(<WebGLUniformLocation>,<GLfloat>,<GLfloat>,<GLfloat>);
<WebGL2RenderingContext>.uniform4f(<WebGLUniformLocation>,<GLfloat>,<GLfloat>,<GLfloat>,<GLfloat>);
<WebGLRenderingContext>.uniform4f(<WebGLUniformLocation>,<GLfloat>,<GLfloat>,<GLfloat>,<GLfloat>);
<WebGL2RenderingContext>.uniform1i(<WebGLUniformLocation>,<GLint>);
<WebGLRenderingContext>.uniform1i(<WebGLUniformLocation>,<GLint>);
<WebGL2RenderingContext>.uniform2i(<WebGLUniformLocation>,<GLint>,<GLint>);
<WebGLRenderingContext>.uniform2i(<WebGLUniformLocation>,<GLint>,<GLint>);
<WebGL2RenderingContext>.uniform3i(<WebGLUniformLocation>,<GLint>,<GLint>,<GLint>);
<WebGLRenderingContext>.uniform3i(<WebGLUniformLocation>,<GLint>,<GLint>,<GLint>);
<WebGL2RenderingContext>.uniform4i(<WebGLUniformLocation>,<GLint>,<GLint>,<GLint>,<GLint>);
<WebGLRenderingContext>.uniform4i(<WebGLUniformLocation>,<GLint>,<GLint>,<GLint>,<GLint>);
<WebGL2RenderingContext>.useProgram(<WebGLProgram>);
<WebGLRenderingContext>.useProgram(<WebGLProgram>);
<WebGL2RenderingContext>.validateProgram(<WebGLProgram>);
<WebGLRenderingContext>.validateProgram(<WebGLProgram>);
<WebGL2RenderingContext>.vertexAttrib1f(<GLuint>,<GLfloat>);
<WebGLRenderingContext>.vertexAttrib1f(<GLuint>,<GLfloat>);
<WebGL2RenderingContext>.vertexAttrib2f(<GLuint>,<GLfloat>,<GLfloat>);
<WebGLRenderingContext>.vertexAttrib2f(<GLuint>,<GLfloat>,<GLfloat>);
<WebGL2RenderingContext>.vertexAttrib3f(<GLuint>,<GLfloat>,<GLfloat>,<GLfloat>);
<WebGLRenderingContext>.vertexAttrib3f(<GLuint>,<GLfloat>,<GLfloat>,<GLfloat>);
<WebGL2RenderingContext>.vertexAttrib4f(<GLuint>,<GLfloat>,<GLfloat>,<GLfloat>,<GLfloat>);
<WebGLRenderingContext>.vertexAttrib4f(<GLuint>,<GLfloat>,<GLfloat>,<GLfloat>,<GLfloat>);
<WebGL2RenderingContext>.vertexAttrib1fv(<GLuint>,<Float32List>);
<WebGLRenderingContext>.vertexAttrib1fv(<GLuint>,<Float32List>);
<WebGL2RenderingContext>.vertexAttrib2fv(<GLuint>,<Float32List>);
<WebGLRenderingContext>.vertexAttrib2fv(<GLuint>,<Float32List>);
<WebGL2RenderingContext>.vertexAttrib3fv(<GLuint>,<Float32List>);
<WebGLRenderingContext>.vertexAttrib3fv(<GLuint>,<Float32List>);
<WebGL2RenderingContext>.vertexAttrib4fv(<GLuint>,<Float32List>);
<WebGLRenderingContext>.vertexAttrib4fv(<GLuint>,<Float32List>);
<WebGL2RenderingContext>.vertexAttribPointer(<GLuint>,<GLint>,<GLenum>,<GLboolean>,<GLsizei>,<GLintptr>);
<WebGLRenderingContext>.vertexAttribPointer(<GLuint>,<GLint>,<GLenum>,<GLboolean>,<GLsizei>,<GLintptr>);
<WebGL2RenderingContext>.viewport(<GLint>,<GLint>,<GLsizei>,<GLsizei>);
<WebGLRenderingContext>.viewport(<GLint>,<GLint>,<GLsizei>,<GLsizei>);
<WebGLRenderingContext>.bufferData(<GLenum>,<GLsizeiptr>,<GLenum>);
<WebGLRenderingContext>.bufferData(<GLenum>,<BufferSource>,<GLenum>);
<WebGLRenderingContext>.bufferSubData(<GLenum>,<GLintptr>,<BufferSource>);
<WebGLRenderingContext>.compressedTexImage2D(<GLenum>,<GLint>,<GLenum>,<GLsizei>,<GLsizei>,<GLint>,<ArrayBufferView>);
<WebGLRenderingContext>.compressedTexSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLenum>,<ArrayBufferView>);
<WebGLRenderingContext>.readPixels(<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLenum>,<GLenum>,<ArrayBufferView>);
<WebGLRenderingContext>.texImage2D(<GLenum>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLint>,<GLenum>,<GLenum>,<ArrayBufferView>);
<WebGLRenderingContext>.texImage2D(<GLenum>,<GLint>,<GLint>,<GLenum>,<GLenum>,<TexImageSource>);
<WebGLRenderingContext>.texSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLenum>,<GLenum>,<ArrayBufferView>);
<WebGLRenderingContext>.texSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLenum>,<GLenum>,<TexImageSource>);
<WebGLRenderingContext>.uniform1fv(<WebGLUniformLocation>,<Float32List>);
<WebGLRenderingContext>.uniform2fv(<WebGLUniformLocation>,<Float32List>);
<WebGLRenderingContext>.uniform3fv(<WebGLUniformLocation>,<Float32List>);
<WebGLRenderingContext>.uniform4fv(<WebGLUniformLocation>,<Float32List>);
<WebGLRenderingContext>.uniform1iv(<WebGLUniformLocation>,<Int32List>);
<WebGLRenderingContext>.uniform2iv(<WebGLUniformLocation>,<Int32List>);
<WebGLRenderingContext>.uniform3iv(<WebGLUniformLocation>,<Int32List>);
<WebGLRenderingContext>.uniform4iv(<WebGLUniformLocation>,<Int32List>);
<WebGLRenderingContext>.uniformMatrix2fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>);
<WebGLRenderingContext>.uniformMatrix3fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>);
<WebGLRenderingContext>.uniformMatrix4fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>);
<new GLenum> = WebGL2RenderingContext.READ_BUFFER;
<new GLenum> = WebGL2RenderingContext.UNPACK_ROW_LENGTH;
<new GLenum> = WebGL2RenderingContext.UNPACK_SKIP_ROWS;
<new GLenum> = WebGL2RenderingContext.UNPACK_SKIP_PIXELS;
<new GLenum> = WebGL2RenderingContext.PACK_ROW_LENGTH;
<new GLenum> = WebGL2RenderingContext.PACK_SKIP_ROWS;
<new GLenum> = WebGL2RenderingContext.PACK_SKIP_PIXELS;
<new GLenum> = WebGL2RenderingContext.COLOR;
<new GLenum> = WebGL2RenderingContext.DEPTH;
<new GLenum> = WebGL2RenderingContext.STENCIL;
<new GLenum> = WebGL2RenderingContext.RED;
<new GLenum> = WebGL2RenderingContext.RGB8;
<new GLenum> = WebGL2RenderingContext.RGBA8;
<new GLenum> = WebGL2RenderingContext.RGB10_A2;
<new GLenum> = WebGL2RenderingContext.TEXTURE_BINDING_3D;
<new GLenum> = WebGL2RenderingContext.UNPACK_SKIP_IMAGES;
<new GLenum> = WebGL2RenderingContext.UNPACK_IMAGE_HEIGHT;
<new GLenum> = WebGL2RenderingContext.TEXTURE_3D;
<new GLenum> = WebGL2RenderingContext.TEXTURE_WRAP_R;
<new GLenum> = WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE;
<new GLenum> = WebGL2RenderingContext.UNSIGNED_INT_2_10_10_10_REV;
<new GLenum> = WebGL2RenderingContext.MAX_ELEMENTS_VERTICES;
<new GLenum> = WebGL2RenderingContext.MAX_ELEMENTS_INDICES;
<new GLenum> = WebGL2RenderingContext.TEXTURE_MIN_LOD;
<new GLenum> = WebGL2RenderingContext.TEXTURE_MAX_LOD;
<new GLenum> = WebGL2RenderingContext.TEXTURE_BASE_LEVEL;
<new GLenum> = WebGL2RenderingContext.TEXTURE_MAX_LEVEL;
<new GLenum> = WebGL2RenderingContext.MIN;
<new GLenum> = WebGL2RenderingContext.MAX;
<new GLenum> = WebGL2RenderingContext.DEPTH_COMPONENT24;
<new GLenum> = WebGL2RenderingContext.MAX_TEXTURE_LOD_BIAS;
<new GLenum> = WebGL2RenderingContext.TEXTURE_COMPARE_MODE;
<new GLenum> = WebGL2RenderingContext.TEXTURE_COMPARE_FUNC;
<new GLenum> = WebGL2RenderingContext.CURRENT_QUERY;
<new GLenum> = WebGL2RenderingContext.QUERY_RESULT;
<new GLenum> = WebGL2RenderingContext.QUERY_RESULT_AVAILABLE;
<new GLenum> = WebGL2RenderingContext.STREAM_READ;
<new GLenum> = WebGL2RenderingContext.STREAM_COPY;
<new GLenum> = WebGL2RenderingContext.STATIC_READ;
<new GLenum> = WebGL2RenderingContext.STATIC_COPY;
<new GLenum> = WebGL2RenderingContext.DYNAMIC_READ;
<new GLenum> = WebGL2RenderingContext.DYNAMIC_COPY;
<new GLenum> = WebGL2RenderingContext.MAX_DRAW_BUFFERS;
<new GLenum> = WebGL2RenderingContext.DRAW_BUFFER0;
<new GLenum> = WebGL2RenderingContext.DRAW_BUFFER1;
<new GLenum> = WebGL2RenderingContext.DRAW_BUFFER2;
<new GLenum> = WebGL2RenderingContext.DRAW_BUFFER3;
<new GLenum> = WebGL2RenderingContext.DRAW_BUFFER4;
<new GLenum> = WebGL2RenderingContext.DRAW_BUFFER5;
<new GLenum> = WebGL2RenderingContext.DRAW_BUFFER6;
<new GLenum> = WebGL2RenderingContext.DRAW_BUFFER7;
<new GLenum> = WebGL2RenderingContext.DRAW_BUFFER8;
<new GLenum> = WebGL2RenderingContext.DRAW_BUFFER9;
<new GLenum> = WebGL2RenderingContext.DRAW_BUFFER10;
<new GLenum> = WebGL2RenderingContext.DRAW_BUFFER11;
<new GLenum> = WebGL2RenderingContext.DRAW_BUFFER12;
<new GLenum> = WebGL2RenderingContext.DRAW_BUFFER13;
<new GLenum> = WebGL2RenderingContext.DRAW_BUFFER14;
<new GLenum> = WebGL2RenderingContext.DRAW_BUFFER15;
<new GLenum> = WebGL2RenderingContext.MAX_FRAGMENT_UNIFORM_COMPONENTS;
<new GLenum> = WebGL2RenderingContext.MAX_VERTEX_UNIFORM_COMPONENTS;
<new GLenum> = WebGL2RenderingContext.SAMPLER_3D;
<new GLenum> = WebGL2RenderingContext.SAMPLER_2D_SHADOW;
<new GLenum> = WebGL2RenderingContext.FRAGMENT_SHADER_DERIVATIVE_HINT;
<new GLenum> = WebGL2RenderingContext.PIXEL_PACK_BUFFER;
<new GLenum> = WebGL2RenderingContext.PIXEL_UNPACK_BUFFER;
<new GLenum> = WebGL2RenderingContext.PIXEL_PACK_BUFFER_BINDING;
<new GLenum> = WebGL2RenderingContext.PIXEL_UNPACK_BUFFER_BINDING;
<new GLenum> = WebGL2RenderingContext.FLOAT_MAT2x3;
<new GLenum> = WebGL2RenderingContext.FLOAT_MAT2x4;
<new GLenum> = WebGL2RenderingContext.FLOAT_MAT3x2;
<new GLenum> = WebGL2RenderingContext.FLOAT_MAT3x4;
<new GLenum> = WebGL2RenderingContext.FLOAT_MAT4x2;
<new GLenum> = WebGL2RenderingContext.FLOAT_MAT4x3;
<new GLenum> = WebGL2RenderingContext.SRGB;
<new GLenum> = WebGL2RenderingContext.SRGB8;
<new GLenum> = WebGL2RenderingContext.SRGB8_ALPHA8;
<new GLenum> = WebGL2RenderingContext.COMPARE_REF_TO_TEXTURE;
<new GLenum> = WebGL2RenderingContext.RGBA32F;
<new GLenum> = WebGL2RenderingContext.RGB32F;
<new GLenum> = WebGL2RenderingContext.RGBA16F;
<new GLenum> = WebGL2RenderingContext.RGB16F;
<new GLenum> = WebGL2RenderingContext.VERTEX_ATTRIB_ARRAY_INTEGER;
<new GLenum> = WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS;
<new GLenum> = WebGL2RenderingContext.MIN_PROGRAM_TEXEL_OFFSET;
<new GLenum> = WebGL2RenderingContext.MAX_PROGRAM_TEXEL_OFFSET;
<new GLenum> = WebGL2RenderingContext.MAX_VARYING_COMPONENTS;
<new GLenum> = WebGL2RenderingContext.TEXTURE_2D_ARRAY;
<new GLenum> = WebGL2RenderingContext.TEXTURE_BINDING_2D_ARRAY;
<new GLenum> = WebGL2RenderingContext.R11F_G11F_B10F;
<new GLenum> = WebGL2RenderingContext.UNSIGNED_INT_10F_11F_11F_REV;
<new GLenum> = WebGL2RenderingContext.RGB9_E5;
<new GLenum> = WebGL2RenderingContext.UNSIGNED_INT_5_9_9_9_REV;
<new GLenum> = WebGL2RenderingContext.TRANSFORM_FEEDBACK_BUFFER_MODE;
<new GLenum> = WebGL2RenderingContext.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS;
<new GLenum> = WebGL2RenderingContext.TRANSFORM_FEEDBACK_VARYINGS;
<new GLenum> = WebGL2RenderingContext.TRANSFORM_FEEDBACK_BUFFER_START;
<new GLenum> = WebGL2RenderingContext.TRANSFORM_FEEDBACK_BUFFER_SIZE;
<new GLenum> = WebGL2RenderingContext.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN;
<new GLenum> = WebGL2RenderingContext.RASTERIZER_DISCARD;
<new GLenum> = WebGL2RenderingContext.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS;
<new GLenum> = WebGL2RenderingContext.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS;
<new GLenum> = WebGL2RenderingContext.INTERLEAVED_ATTRIBS;
<new GLenum> = WebGL2RenderingContext.SEPARATE_ATTRIBS;
<new GLenum> = WebGL2RenderingContext.TRANSFORM_FEEDBACK_BUFFER;
<new GLenum> = WebGL2RenderingContext.TRANSFORM_FEEDBACK_BUFFER_BINDING;
<new GLenum> = WebGL2RenderingContext.RGBA32UI;
<new GLenum> = WebGL2RenderingContext.RGB32UI;
<new GLenum> = WebGL2RenderingContext.RGBA16UI;
<new GLenum> = WebGL2RenderingContext.RGB16UI;
<new GLenum> = WebGL2RenderingContext.RGBA8UI;
<new GLenum> = WebGL2RenderingContext.RGB8UI;
<new GLenum> = WebGL2RenderingContext.RGBA32I;
<new GLenum> = WebGL2RenderingContext.RGB32I;
<new GLenum> = WebGL2RenderingContext.RGBA16I;
<new GLenum> = WebGL2RenderingContext.RGB16I;
<new GLenum> = WebGL2RenderingContext.RGBA8I;
<new GLenum> = WebGL2RenderingContext.RGB8I;
<new GLenum> = WebGL2RenderingContext.RED_INTEGER;
<new GLenum> = WebGL2RenderingContext.RGB_INTEGER;
<new GLenum> = WebGL2RenderingContext.RGBA_INTEGER;
<new GLenum> = WebGL2RenderingContext.SAMPLER_2D_ARRAY;
<new GLenum> = WebGL2RenderingContext.SAMPLER_2D_ARRAY_SHADOW;
<new GLenum> = WebGL2RenderingContext.SAMPLER_CUBE_SHADOW;
<new GLenum> = WebGL2RenderingContext.UNSIGNED_INT_VEC2;
<new GLenum> = WebGL2RenderingContext.UNSIGNED_INT_VEC3;
<new GLenum> = WebGL2RenderingContext.UNSIGNED_INT_VEC4;
<new GLenum> = WebGL2RenderingContext.INT_SAMPLER_2D;
<new GLenum> = WebGL2RenderingContext.INT_SAMPLER_3D;
<new GLenum> = WebGL2RenderingContext.INT_SAMPLER_CUBE;
<new GLenum> = WebGL2RenderingContext.INT_SAMPLER_2D_ARRAY;
<new GLenum> = WebGL2RenderingContext.UNSIGNED_INT_SAMPLER_2D;
<new GLenum> = WebGL2RenderingContext.UNSIGNED_INT_SAMPLER_3D;
<new GLenum> = WebGL2RenderingContext.UNSIGNED_INT_SAMPLER_CUBE;
<new GLenum> = WebGL2RenderingContext.UNSIGNED_INT_SAMPLER_2D_ARRAY;
<new GLenum> = WebGL2RenderingContext.DEPTH_COMPONENT32F;
<new GLenum> = WebGL2RenderingContext.DEPTH32F_STENCIL8;
<new GLenum> = WebGL2RenderingContext.FLOAT_32_UNSIGNED_INT_24_8_REV;
<new GLenum> = WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING;
<new GLenum> = WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE;
<new GLenum> = WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_RED_SIZE;
<new GLenum> = WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE;
<new GLenum> = WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE;
<new GLenum> = WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE;
<new GLenum> = WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE;
<new GLenum> = WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE;
<new GLenum> = WebGL2RenderingContext.FRAMEBUFFER_DEFAULT;
<new GLenum> = WebGL2RenderingContext.UNSIGNED_INT_24_8;
<new GLenum> = WebGL2RenderingContext.DEPTH24_STENCIL8;
<new GLenum> = WebGL2RenderingContext.UNSIGNED_NORMALIZED;
<new GLenum> = WebGL2RenderingContext.DRAW_FRAMEBUFFER_BINDING;
<new GLenum> = WebGL2RenderingContext.READ_FRAMEBUFFER;
<new GLenum> = WebGL2RenderingContext.DRAW_FRAMEBUFFER;
<new GLenum> = WebGL2RenderingContext.READ_FRAMEBUFFER_BINDING;
<new GLenum> = WebGL2RenderingContext.RENDERBUFFER_SAMPLES;
<new GLenum> = WebGL2RenderingContext.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER;
<new GLenum> = WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS;
<new GLenum> = WebGL2RenderingContext.COLOR_ATTACHMENT1;
<new GLenum> = WebGL2RenderingContext.COLOR_ATTACHMENT2;
<new GLenum> = WebGL2RenderingContext.COLOR_ATTACHMENT3;
<new GLenum> = WebGL2RenderingContext.COLOR_ATTACHMENT4;
<new GLenum> = WebGL2RenderingContext.COLOR_ATTACHMENT5;
<new GLenum> = WebGL2RenderingContext.COLOR_ATTACHMENT6;
<new GLenum> = WebGL2RenderingContext.COLOR_ATTACHMENT7;
<new GLenum> = WebGL2RenderingContext.COLOR_ATTACHMENT8;
<new GLenum> = WebGL2RenderingContext.COLOR_ATTACHMENT9;
<new GLenum> = WebGL2RenderingContext.COLOR_ATTACHMENT10;
<new GLenum> = WebGL2RenderingContext.COLOR_ATTACHMENT11;
<new GLenum> = WebGL2RenderingContext.COLOR_ATTACHMENT12;
<new GLenum> = WebGL2RenderingContext.COLOR_ATTACHMENT13;
<new GLenum> = WebGL2RenderingContext.COLOR_ATTACHMENT14;
<new GLenum> = WebGL2RenderingContext.COLOR_ATTACHMENT15;
<new GLenum> = WebGL2RenderingContext.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE;
<new GLenum> = WebGL2RenderingContext.MAX_SAMPLES;
<new GLenum> = WebGL2RenderingContext.HALF_FLOAT;
<new GLenum> = WebGL2RenderingContext.RG;
<new GLenum> = WebGL2RenderingContext.RG_INTEGER;
<new GLenum> = WebGL2RenderingContext.R8;
<new GLenum> = WebGL2RenderingContext.RG8;
<new GLenum> = WebGL2RenderingContext.R16F;
<new GLenum> = WebGL2RenderingContext.R32F;
<new GLenum> = WebGL2RenderingContext.RG16F;
<new GLenum> = WebGL2RenderingContext.RG32F;
<new GLenum> = WebGL2RenderingContext.R8I;
<new GLenum> = WebGL2RenderingContext.R8UI;
<new GLenum> = WebGL2RenderingContext.R16I;
<new GLenum> = WebGL2RenderingContext.R16UI;
<new GLenum> = WebGL2RenderingContext.R32I;
<new GLenum> = WebGL2RenderingContext.R32UI;
<new GLenum> = WebGL2RenderingContext.RG8I;
<new GLenum> = WebGL2RenderingContext.RG8UI;
<new GLenum> = WebGL2RenderingContext.RG16I;
<new GLenum> = WebGL2RenderingContext.RG16UI;
<new GLenum> = WebGL2RenderingContext.RG32I;
<new GLenum> = WebGL2RenderingContext.RG32UI;
<new GLenum> = WebGL2RenderingContext.VERTEX_ARRAY_BINDING;
<new GLenum> = WebGL2RenderingContext.R8_SNORM;
<new GLenum> = WebGL2RenderingContext.RG8_SNORM;
<new GLenum> = WebGL2RenderingContext.RGB8_SNORM;
<new GLenum> = WebGL2RenderingContext.RGBA8_SNORM;
<new GLenum> = WebGL2RenderingContext.SIGNED_NORMALIZED;
<new GLenum> = WebGL2RenderingContext.COPY_READ_BUFFER;
<new GLenum> = WebGL2RenderingContext.COPY_WRITE_BUFFER;
<new GLenum> = WebGL2RenderingContext.COPY_READ_BUFFER_BINDING;
<new GLenum> = WebGL2RenderingContext.COPY_WRITE_BUFFER_BINDING;
<new GLenum> = WebGL2RenderingContext.UNIFORM_BUFFER;
<new GLenum> = WebGL2RenderingContext.UNIFORM_BUFFER_BINDING;
<new GLenum> = WebGL2RenderingContext.UNIFORM_BUFFER_START;
<new GLenum> = WebGL2RenderingContext.UNIFORM_BUFFER_SIZE;
<new GLenum> = WebGL2RenderingContext.MAX_VERTEX_UNIFORM_BLOCKS;
<new GLenum> = WebGL2RenderingContext.MAX_FRAGMENT_UNIFORM_BLOCKS;
<new GLenum> = WebGL2RenderingContext.MAX_COMBINED_UNIFORM_BLOCKS;
<new GLenum> = WebGL2RenderingContext.MAX_UNIFORM_BUFFER_BINDINGS;
<new GLenum> = WebGL2RenderingContext.MAX_UNIFORM_BLOCK_SIZE;
<new GLenum> = WebGL2RenderingContext.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS;
<new GLenum> = WebGL2RenderingContext.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS;
<new GLenum> = WebGL2RenderingContext.UNIFORM_BUFFER_OFFSET_ALIGNMENT;
<new GLenum> = WebGL2RenderingContext.ACTIVE_UNIFORM_BLOCKS;
<new GLenum> = WebGL2RenderingContext.UNIFORM_TYPE;
<new GLenum> = WebGL2RenderingContext.UNIFORM_SIZE;
<new GLenum> = WebGL2RenderingContext.UNIFORM_BLOCK_INDEX;
<new GLenum> = WebGL2RenderingContext.UNIFORM_OFFSET;
<new GLenum> = WebGL2RenderingContext.UNIFORM_ARRAY_STRIDE;
<new GLenum> = WebGL2RenderingContext.UNIFORM_MATRIX_STRIDE;
<new GLenum> = WebGL2RenderingContext.UNIFORM_IS_ROW_MAJOR;
<new GLenum> = WebGL2RenderingContext.UNIFORM_BLOCK_BINDING;
<new GLenum> = WebGL2RenderingContext.UNIFORM_BLOCK_DATA_SIZE;
<new GLenum> = WebGL2RenderingContext.UNIFORM_BLOCK_ACTIVE_UNIFORMS;
<new GLenum> = WebGL2RenderingContext.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES;
<new GLenum> = WebGL2RenderingContext.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER;
<new GLenum> = WebGL2RenderingContext.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER;
<new GLenum> = WebGL2RenderingContext.INVALID_INDEX;
<new GLenum> = WebGL2RenderingContext.MAX_VERTEX_OUTPUT_COMPONENTS;
<new GLenum> = WebGL2RenderingContext.MAX_FRAGMENT_INPUT_COMPONENTS;
<new GLenum> = WebGL2RenderingContext.MAX_SERVER_WAIT_TIMEOUT;
<new GLenum> = WebGL2RenderingContext.OBJECT_TYPE;
<new GLenum> = WebGL2RenderingContext.SYNC_CONDITION;
<new GLenum> = WebGL2RenderingContext.SYNC_STATUS;
<new GLenum> = WebGL2RenderingContext.SYNC_FLAGS;
<new GLenum> = WebGL2RenderingContext.SYNC_FENCE;
<new GLenum> = WebGL2RenderingContext.SYNC_GPU_COMMANDS_COMPLETE;
<new GLenum> = WebGL2RenderingContext.UNSIGNALED;
<new GLenum> = WebGL2RenderingContext.SIGNALED;
<new GLenum> = WebGL2RenderingContext.ALREADY_SIGNALED;
<new GLenum> = WebGL2RenderingContext.TIMEOUT_EXPIRED;
<new GLenum> = WebGL2RenderingContext.CONDITION_SATISFIED;
<new GLenum> = WebGL2RenderingContext.WAIT_FAILED;
<new GLenum> = WebGL2RenderingContext.SYNC_FLUSH_COMMANDS_BIT;
<new GLenum> = WebGL2RenderingContext.VERTEX_ATTRIB_ARRAY_DIVISOR;
<new GLenum> = WebGL2RenderingContext.ANY_SAMPLES_PASSED;
<new GLenum> = WebGL2RenderingContext.ANY_SAMPLES_PASSED_CONSERVATIVE;
<new GLenum> = WebGL2RenderingContext.SAMPLER_BINDING;
<new GLenum> = WebGL2RenderingContext.RGB10_A2UI;
<new GLenum> = WebGL2RenderingContext.INT_2_10_10_10_REV;
<new GLenum> = WebGL2RenderingContext.TRANSFORM_FEEDBACK;
<new GLenum> = WebGL2RenderingContext.TRANSFORM_FEEDBACK_PAUSED;
<new GLenum> = WebGL2RenderingContext.TRANSFORM_FEEDBACK_ACTIVE;
<new GLenum> = WebGL2RenderingContext.TRANSFORM_FEEDBACK_BINDING;
<new GLenum> = WebGL2RenderingContext.TEXTURE_IMMUTABLE_FORMAT;
<new GLenum> = WebGL2RenderingContext.MAX_ELEMENT_INDEX;
<new GLenum> = WebGL2RenderingContext.TEXTURE_IMMUTABLE_LEVELS;
<new GLint64> = WebGL2RenderingContext.TIMEOUT_IGNORED;
<new GLenum> = WebGL2RenderingContext.MAX_CLIENT_WAIT_TIMEOUT_WEBGL;
<WebGL2RenderingContext>.copyBufferSubData(<GLenum>,<GLenum>,<GLintptr>,<GLintptr>,<GLsizeiptr>);
<WebGL2RenderingContext>.getBufferSubData(<GLenum>,<GLintptr>,<ArrayBufferView>);
<WebGL2RenderingContext>.getBufferSubData(<GLenum>,<GLintptr>,<ArrayBufferView>,<GLuint>);
<WebGL2RenderingContext>.getBufferSubData(<GLenum>,<GLintptr>,<ArrayBufferView>,<GLuint>,<GLuint>);
<WebGL2RenderingContext>.blitFramebuffer(<GLint>,<GLint>,<GLint>,<GLint>,<GLint>,<GLint>,<GLint>,<GLint>,<GLbitfield>,<GLenum>);
<WebGL2RenderingContext>.framebufferTextureLayer(<GLenum>,<GLenum>,<WebGLTexture>,<GLint>,<GLint>);
<WebGL2RenderingContext>.invalidateFramebuffer(<GLenum>,<sequence_GLenum_>);
<WebGL2RenderingContext>.invalidateSubFramebuffer(<GLenum>,<sequence_GLenum_>,<GLint>,<GLint>,<GLsizei>,<GLsizei>);
<WebGL2RenderingContext>.readBuffer(<GLenum>);
<new any> = <WebGL2RenderingContext>.getInternalformatParameter(<GLenum>,<GLenum>,<GLenum>);
<WebGL2RenderingContext>.renderbufferStorageMultisample(<GLenum>,<GLsizei>,<GLenum>,<GLsizei>,<GLsizei>);
<WebGL2RenderingContext>.texStorage2D(<GLenum>,<GLsizei>,<GLenum>,<GLsizei>,<GLsizei>);
<WebGL2RenderingContext>.texStorage3D(<GLenum>,<GLsizei>,<GLenum>,<GLsizei>,<GLsizei>,<GLsizei>);
<WebGL2RenderingContext>.texImage3D(<GLenum>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLsizei>,<GLint>,<GLenum>,<GLenum>,<GLintptr>);
<WebGL2RenderingContext>.texImage3D(<GLenum>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLsizei>,<GLint>,<GLenum>,<GLenum>,<TexImageSource>);
<WebGL2RenderingContext>.texImage3D(<GLenum>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLsizei>,<GLint>,<GLenum>,<GLenum>,<ArrayBufferView>);
<WebGL2RenderingContext>.texImage3D(<GLenum>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLsizei>,<GLint>,<GLenum>,<GLenum>,<ArrayBufferView>,<GLuint>);
<WebGL2RenderingContext>.texSubImage3D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLsizei>,<GLenum>,<GLenum>,<GLintptr>);
<WebGL2RenderingContext>.texSubImage3D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLsizei>,<GLenum>,<GLenum>,<TexImageSource>);
<WebGL2RenderingContext>.texSubImage3D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLsizei>,<GLenum>,<GLenum>,<ArrayBufferView>);
<WebGL2RenderingContext>.texSubImage3D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLsizei>,<GLenum>,<GLenum>,<ArrayBufferView>,<GLuint>);
<WebGL2RenderingContext>.copyTexSubImage3D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>);
<WebGL2RenderingContext>.compressedTexImage3D(<GLenum>,<GLint>,<GLenum>,<GLsizei>,<GLsizei>,<GLsizei>,<GLint>,<GLsizei>,<GLintptr>);
<WebGL2RenderingContext>.compressedTexImage3D(<GLenum>,<GLint>,<GLenum>,<GLsizei>,<GLsizei>,<GLsizei>,<GLint>,<ArrayBufferView>);
<WebGL2RenderingContext>.compressedTexImage3D(<GLenum>,<GLint>,<GLenum>,<GLsizei>,<GLsizei>,<GLsizei>,<GLint>,<ArrayBufferView>,<GLuint>);
<WebGL2RenderingContext>.compressedTexImage3D(<GLenum>,<GLint>,<GLenum>,<GLsizei>,<GLsizei>,<GLsizei>,<GLint>,<ArrayBufferView>,<GLuint>,<GLuint>);
<WebGL2RenderingContext>.compressedTexSubImage3D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLsizei>,<GLenum>,<GLsizei>,<GLintptr>);
<WebGL2RenderingContext>.compressedTexSubImage3D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLsizei>,<GLenum>,<ArrayBufferView>);
<WebGL2RenderingContext>.compressedTexSubImage3D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLsizei>,<GLenum>,<ArrayBufferView>,<GLuint>);
<WebGL2RenderingContext>.compressedTexSubImage3D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLsizei>,<GLenum>,<ArrayBufferView>,<GLuint>,<GLuint>);
<new GLint> = <WebGL2RenderingContext>.getFragDataLocation(<WebGLProgram>,<DOMString>);
<WebGL2RenderingContext>.uniform1ui(<WebGLUniformLocation>,<GLuint>);
<WebGL2RenderingContext>.uniform2ui(<WebGLUniformLocation>,<GLuint>,<GLuint>);
<WebGL2RenderingContext>.uniform3ui(<WebGLUniformLocation>,<GLuint>,<GLuint>,<GLuint>);
<WebGL2RenderingContext>.uniform4ui(<WebGLUniformLocation>,<GLuint>,<GLuint>,<GLuint>,<GLuint>);
<WebGL2RenderingContext>.uniform1uiv(<WebGLUniformLocation>,<Uint32List>);
<WebGL2RenderingContext>.uniform1uiv(<WebGLUniformLocation>,<Uint32List>,<GLuint>);
<WebGL2RenderingContext>.uniform1uiv(<WebGLUniformLocation>,<Uint32List>,<GLuint>,<GLuint>);
<WebGL2RenderingContext>.uniform2uiv(<WebGLUniformLocation>,<Uint32List>);
<WebGL2RenderingContext>.uniform2uiv(<WebGLUniformLocation>,<Uint32List>,<GLuint>);
<WebGL2RenderingContext>.uniform2uiv(<WebGLUniformLocation>,<Uint32List>,<GLuint>,<GLuint>);
<WebGL2RenderingContext>.uniform3uiv(<WebGLUniformLocation>,<Uint32List>);
<WebGL2RenderingContext>.uniform3uiv(<WebGLUniformLocation>,<Uint32List>,<GLuint>);
<WebGL2RenderingContext>.uniform3uiv(<WebGLUniformLocation>,<Uint32List>,<GLuint>,<GLuint>);
<WebGL2RenderingContext>.uniform4uiv(<WebGLUniformLocation>,<Uint32List>);
<WebGL2RenderingContext>.uniform4uiv(<WebGLUniformLocation>,<Uint32List>,<GLuint>);
<WebGL2RenderingContext>.uniform4uiv(<WebGLUniformLocation>,<Uint32List>,<GLuint>,<GLuint>);
<WebGL2RenderingContext>.uniformMatrix3x2fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>);
<WebGL2RenderingContext>.uniformMatrix3x2fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>);
<WebGL2RenderingContext>.uniformMatrix3x2fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>,<GLuint>);
<WebGL2RenderingContext>.uniformMatrix4x2fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>);
<WebGL2RenderingContext>.uniformMatrix4x2fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>);
<WebGL2RenderingContext>.uniformMatrix4x2fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>,<GLuint>);
<WebGL2RenderingContext>.uniformMatrix2x3fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>);
<WebGL2RenderingContext>.uniformMatrix2x3fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>);
<WebGL2RenderingContext>.uniformMatrix2x3fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>,<GLuint>);
<WebGL2RenderingContext>.uniformMatrix4x3fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>);
<WebGL2RenderingContext>.uniformMatrix4x3fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>);
<WebGL2RenderingContext>.uniformMatrix4x3fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>,<GLuint>);
<WebGL2RenderingContext>.uniformMatrix2x4fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>);
<WebGL2RenderingContext>.uniformMatrix2x4fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>);
<WebGL2RenderingContext>.uniformMatrix2x4fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>,<GLuint>);
<WebGL2RenderingContext>.uniformMatrix3x4fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>);
<WebGL2RenderingContext>.uniformMatrix3x4fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>);
<WebGL2RenderingContext>.uniformMatrix3x4fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>,<GLuint>);
<WebGL2RenderingContext>.vertexAttribI4i(<GLuint>,<GLint>,<GLint>,<GLint>,<GLint>);
<WebGL2RenderingContext>.vertexAttribI4iv(<GLuint>,<Int32List>);
<WebGL2RenderingContext>.vertexAttribI4ui(<GLuint>,<GLuint>,<GLuint>,<GLuint>,<GLuint>);
<WebGL2RenderingContext>.vertexAttribI4uiv(<GLuint>,<Uint32List>);
<WebGL2RenderingContext>.vertexAttribIPointer(<GLuint>,<GLint>,<GLenum>,<GLsizei>,<GLintptr>);
<WebGL2RenderingContext>.vertexAttribDivisor(<GLuint>,<GLuint>);
<WebGL2RenderingContext>.drawArraysInstanced(<GLenum>,<GLint>,<GLsizei>,<GLsizei>);
<WebGL2RenderingContext>.drawElementsInstanced(<GLenum>,<GLsizei>,<GLenum>,<GLintptr>,<GLsizei>);
<WebGL2RenderingContext>.drawRangeElements(<GLenum>,<GLuint>,<GLuint>,<GLsizei>,<GLenum>,<GLintptr>);
<WebGL2RenderingContext>.drawBuffers(<sequence_GLenum_>);
<WebGL2RenderingContext>.clearBufferfv(<GLenum>,<GLint>,<Float32List>);
<WebGL2RenderingContext>.clearBufferfv(<GLenum>,<GLint>,<Float32List>,<GLuint>);
<WebGL2RenderingContext>.clearBufferiv(<GLenum>,<GLint>,<Int32List>);
<WebGL2RenderingContext>.clearBufferiv(<GLenum>,<GLint>,<Int32List>,<GLuint>);
<WebGL2RenderingContext>.clearBufferuiv(<GLenum>,<GLint>,<Uint32List>);
<WebGL2RenderingContext>.clearBufferuiv(<GLenum>,<GLint>,<Uint32List>,<GLuint>);
<WebGL2RenderingContext>.clearBufferfi(<GLenum>,<GLint>,<GLfloat>,<GLint>);
<new WebGLQuery> = <WebGL2RenderingContext>.createQuery();
<WebGL2RenderingContext>.deleteQuery(<WebGLQuery>);
<new GLboolean> = <WebGL2RenderingContext>.isQuery(<WebGLQuery>);
<WebGL2RenderingContext>.beginQuery(<GLenum>,<WebGLQuery>);
<WebGL2RenderingContext>.endQuery(<GLenum>);
<new WebGLQuery> = <WebGL2RenderingContext>.getQuery(<GLenum>,<GLenum>);
<new any> = <WebGL2RenderingContext>.getQueryParameter(<WebGLQuery>,<GLenum>);
<new WebGLSampler> = <WebGL2RenderingContext>.createSampler();
<WebGL2RenderingContext>.deleteSampler(<WebGLSampler>);
<new GLboolean> = <WebGL2RenderingContext>.isSampler(<WebGLSampler>);
<WebGL2RenderingContext>.bindSampler(<GLuint>,<WebGLSampler>);
<WebGL2RenderingContext>.samplerParameteri(<WebGLSampler>,<GLenum>,<GLint>);
<WebGL2RenderingContext>.samplerParameterf(<WebGLSampler>,<GLenum>,<GLfloat>);
<new any> = <WebGL2RenderingContext>.getSamplerParameter(<WebGLSampler>,<GLenum>);
<new WebGLSync> = <WebGL2RenderingContext>.fenceSync(<GLenum>,<GLbitfield>);
<new GLboolean> = <WebGL2RenderingContext>.isSync(<WebGLSync>);
<WebGL2RenderingContext>.deleteSync(<WebGLSync>);
<new GLenum> = <WebGL2RenderingContext>.clientWaitSync(<WebGLSync>,<GLbitfield>,<GLuint64>);
<WebGL2RenderingContext>.waitSync(<WebGLSync>,<GLbitfield>,<GLint64>);
<new any> = <WebGL2RenderingContext>.getSyncParameter(<WebGLSync>,<GLenum>);
<new WebGLTransformFeedback> = <WebGL2RenderingContext>.createTransformFeedback();
<WebGL2RenderingContext>.deleteTransformFeedback(<WebGLTransformFeedback>);
<new GLboolean> = <WebGL2RenderingContext>.isTransformFeedback(<WebGLTransformFeedback>);
<WebGL2RenderingContext>.bindTransformFeedback(<GLenum>,<WebGLTransformFeedback>);
<WebGL2RenderingContext>.beginTransformFeedback(<GLenum>);
<WebGL2RenderingContext>.endTransformFeedback();
<WebGL2RenderingContext>.transformFeedbackVaryings(<WebGLProgram>,<sequence_DOMString_>,<GLenum>);
<new WebGLActiveInfo> = <WebGL2RenderingContext>.getTransformFeedbackVarying(<WebGLProgram>,<GLuint>);
<WebGL2RenderingContext>.pauseTransformFeedback();
<WebGL2RenderingContext>.resumeTransformFeedback();
<WebGL2RenderingContext>.bindBufferBase(<GLenum>,<GLuint>,<WebGLBuffer>);
<WebGL2RenderingContext>.bindBufferRange(<GLenum>,<GLuint>,<WebGLBuffer>,<GLintptr>,<GLsizeiptr>);
<new any> = <WebGL2RenderingContext>.getIndexedParameter(<GLenum>,<GLuint>);
<new sequence_GLuint_> = <WebGL2RenderingContext>.getUniformIndices(<WebGLProgram>,<sequence_DOMString_>);
<new any> = <WebGL2RenderingContext>.getActiveUniforms(<WebGLProgram>,<sequence_GLuint_>,<GLenum>);
<new GLuint> = <WebGL2RenderingContext>.getUniformBlockIndex(<WebGLProgram>,<DOMString>);
<new any> = <WebGL2RenderingContext>.getActiveUniformBlockParameter(<WebGLProgram>,<GLuint>,<GLenum>);
<new DOMString> = <WebGL2RenderingContext>.getActiveUniformBlockName(<WebGLProgram>,<GLuint>);
<WebGL2RenderingContext>.uniformBlockBinding(<WebGLProgram>,<GLuint>,<GLuint>);
<new WebGLVertexArrayObject> = <WebGL2RenderingContext>.createVertexArray();
<WebGL2RenderingContext>.deleteVertexArray(<WebGLVertexArrayObject>);
<new GLboolean> = <WebGL2RenderingContext>.isVertexArray(<WebGLVertexArrayObject>);
<WebGL2RenderingContext>.bindVertexArray(<WebGLVertexArrayObject>);
<WebGL2RenderingContext>.bufferData(<GLenum>,<GLsizeiptr>,<GLenum>);
<WebGL2RenderingContext>.bufferData(<GLenum>,<BufferSource>,<GLenum>);
<WebGL2RenderingContext>.bufferSubData(<GLenum>,<GLintptr>,<BufferSource>);
<WebGL2RenderingContext>.bufferData(<GLenum>,<ArrayBufferView>,<GLenum>,<GLuint>);
<WebGL2RenderingContext>.bufferData(<GLenum>,<ArrayBufferView>,<GLenum>,<GLuint>,<GLuint>);
<WebGL2RenderingContext>.bufferSubData(<GLenum>,<GLintptr>,<ArrayBufferView>,<GLuint>);
<WebGL2RenderingContext>.bufferSubData(<GLenum>,<GLintptr>,<ArrayBufferView>,<GLuint>,<GLuint>);
<WebGL2RenderingContext>.texImage2D(<GLenum>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLint>,<GLenum>,<GLenum>,<ArrayBufferView>);
<WebGL2RenderingContext>.texImage2D(<GLenum>,<GLint>,<GLint>,<GLenum>,<GLenum>,<TexImageSource>);
<WebGL2RenderingContext>.texSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLenum>,<GLenum>,<ArrayBufferView>);
<WebGL2RenderingContext>.texSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLenum>,<GLenum>,<TexImageSource>);
<WebGL2RenderingContext>.texImage2D(<GLenum>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLint>,<GLenum>,<GLenum>,<GLintptr>);
<WebGL2RenderingContext>.texImage2D(<GLenum>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLint>,<GLenum>,<GLenum>,<TexImageSource>);
<WebGL2RenderingContext>.texImage2D(<GLenum>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLint>,<GLenum>,<GLenum>,<ArrayBufferView>,<GLuint>);
<WebGL2RenderingContext>.texSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLenum>,<GLenum>,<GLintptr>);
<WebGL2RenderingContext>.texSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLenum>,<GLenum>,<TexImageSource>);
<WebGL2RenderingContext>.texSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLenum>,<GLenum>,<ArrayBufferView>,<GLuint>);
<WebGL2RenderingContext>.compressedTexImage2D(<GLenum>,<GLint>,<GLenum>,<GLsizei>,<GLsizei>,<GLint>,<GLsizei>,<GLintptr>);
<WebGL2RenderingContext>.compressedTexImage2D(<GLenum>,<GLint>,<GLenum>,<GLsizei>,<GLsizei>,<GLint>,<ArrayBufferView>);
<WebGL2RenderingContext>.compressedTexImage2D(<GLenum>,<GLint>,<GLenum>,<GLsizei>,<GLsizei>,<GLint>,<ArrayBufferView>,<GLuint>);
<WebGL2RenderingContext>.compressedTexImage2D(<GLenum>,<GLint>,<GLenum>,<GLsizei>,<GLsizei>,<GLint>,<ArrayBufferView>,<GLuint>,<GLuint>);
<WebGL2RenderingContext>.compressedTexSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLenum>,<GLsizei>,<GLintptr>);
<WebGL2RenderingContext>.compressedTexSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLenum>,<ArrayBufferView>);
<WebGL2RenderingContext>.compressedTexSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLenum>,<ArrayBufferView>,<GLuint>);
<WebGL2RenderingContext>.compressedTexSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLenum>,<ArrayBufferView>,<GLuint>,<GLuint>);
<WebGL2RenderingContext>.uniform1fv(<WebGLUniformLocation>,<Float32List>);
<WebGL2RenderingContext>.uniform1fv(<WebGLUniformLocation>,<Float32List>,<GLuint>);
<WebGL2RenderingContext>.uniform1fv(<WebGLUniformLocation>,<Float32List>,<GLuint>,<GLuint>);
<WebGL2RenderingContext>.uniform2fv(<WebGLUniformLocation>,<Float32List>);
<WebGL2RenderingContext>.uniform2fv(<WebGLUniformLocation>,<Float32List>,<GLuint>);
<WebGL2RenderingContext>.uniform2fv(<WebGLUniformLocation>,<Float32List>,<GLuint>,<GLuint>);
<WebGL2RenderingContext>.uniform3fv(<WebGLUniformLocation>,<Float32List>);
<WebGL2RenderingContext>.uniform3fv(<WebGLUniformLocation>,<Float32List>,<GLuint>);
<WebGL2RenderingContext>.uniform3fv(<WebGLUniformLocation>,<Float32List>,<GLuint>,<GLuint>);
<WebGL2RenderingContext>.uniform4fv(<WebGLUniformLocation>,<Float32List>);
<WebGL2RenderingContext>.uniform4fv(<WebGLUniformLocation>,<Float32List>,<GLuint>);
<WebGL2RenderingContext>.uniform4fv(<WebGLUniformLocation>,<Float32List>,<GLuint>,<GLuint>);
<WebGL2RenderingContext>.uniform1iv(<WebGLUniformLocation>,<Int32List>);
<WebGL2RenderingContext>.uniform1iv(<WebGLUniformLocation>,<Int32List>,<GLuint>);
<WebGL2RenderingContext>.uniform1iv(<WebGLUniformLocation>,<Int32List>,<GLuint>,<GLuint>);
<WebGL2RenderingContext>.uniform2iv(<WebGLUniformLocation>,<Int32List>);
<WebGL2RenderingContext>.uniform2iv(<WebGLUniformLocation>,<Int32List>,<GLuint>);
<WebGL2RenderingContext>.uniform2iv(<WebGLUniformLocation>,<Int32List>,<GLuint>,<GLuint>);
<WebGL2RenderingContext>.uniform3iv(<WebGLUniformLocation>,<Int32List>);
<WebGL2RenderingContext>.uniform3iv(<WebGLUniformLocation>,<Int32List>,<GLuint>);
<WebGL2RenderingContext>.uniform3iv(<WebGLUniformLocation>,<Int32List>,<GLuint>,<GLuint>);
<WebGL2RenderingContext>.uniform4iv(<WebGLUniformLocation>,<Int32List>);
<WebGL2RenderingContext>.uniform4iv(<WebGLUniformLocation>,<Int32List>,<GLuint>);
<WebGL2RenderingContext>.uniform4iv(<WebGLUniformLocation>,<Int32List>,<GLuint>,<GLuint>);
<WebGL2RenderingContext>.uniformMatrix2fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>);
<WebGL2RenderingContext>.uniformMatrix2fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>);
<WebGL2RenderingContext>.uniformMatrix2fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>,<GLuint>);
<WebGL2RenderingContext>.uniformMatrix3fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>);
<WebGL2RenderingContext>.uniformMatrix3fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>);
<WebGL2RenderingContext>.uniformMatrix3fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>,<GLuint>);
<WebGL2RenderingContext>.uniformMatrix4fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>);
<WebGL2RenderingContext>.uniformMatrix4fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>);
<WebGL2RenderingContext>.uniformMatrix4fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>,<GLuint>);
<WebGL2RenderingContext>.readPixels(<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLenum>,<GLenum>,<ArrayBufferView>);
<WebGL2RenderingContext>.readPixels(<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLenum>,<GLenum>,<GLintptr>);
<WebGL2RenderingContext>.readPixels(<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLenum>,<GLenum>,<ArrayBufferView>,<GLuint>);
<new USVString> = <GPURenderBundleEncoder>.label;
<GPURenderBundleEncoder>.label = <USVString>;
<new USVString> = <GPUTexture>.label;
<GPUTexture>.label = <USVString>;
<new USVString> = <GPURenderPassEncoder>.label;
<GPURenderPassEncoder>.label = <USVString>;
<new USVString> = <GPUBindGroup>.label;
<GPUBindGroup>.label = <USVString>;
<new USVString> = <GPUComputePassEncoder>.label;
<GPUComputePassEncoder>.label = <USVString>;
<new USVString> = <GPUComputePipeline>.label;
<GPUComputePipeline>.label = <USVString>;
<new USVString> = <GPUShaderModule>.label;
<GPUShaderModule>.label = <USVString>;
<new USVString> = <GPUDevice>.label;
<GPUDevice>.label = <USVString>;
<new USVString> = <GPUTextureView>.label;
<GPUTextureView>.label = <USVString>;
<new USVString> = <GPUCommandBuffer>.label;
<GPUCommandBuffer>.label = <USVString>;
<new USVString> = <GPUCommandEncoder>.label;
<GPUCommandEncoder>.label = <USVString>;
<new USVString> = <GPURenderBundle>.label;
<GPURenderBundle>.label = <USVString>;
<new USVString> = <GPUBindGroupLayout>.label;
<GPUBindGroupLayout>.label = <USVString>;
<new USVString> = <GPUBuffer>.label;
<GPUBuffer>.label = <USVString>;
<new USVString> = <GPUQueue>.label;
<GPUQueue>.label = <USVString>;
<new USVString> = <GPUPipelineLayout>.label;
<GPUPipelineLayout>.label = <USVString>;
<new USVString> = <GPUQuerySet>.label;
<GPUQuerySet>.label = <USVString>;
<new USVString> = <GPUExternalTexture>.label;
<GPUExternalTexture>.label = <USVString>;
<new USVString> = <GPUSampler>.label;
<GPUSampler>.label = <USVString>;
<new USVString> = <GPURenderPipeline>.label;
<GPURenderPipeline>.label = <USVString>;
<new GPU> = <Navigator>.gpu;
<new GPU> = <WorkerNavigator>.gpu;
<new GPUBindGroupLayout> = <GPURenderPipeline>.getBindGroupLayout(<unsigned_long>);
<new GPUBindGroupLayout> = <GPUComputePipeline>.getBindGroupLayout(<unsigned_long>);
<new sequence_GPUBufferDynamicOffset_> = [<GPUBufferDynamicOffset>];
<new GPUBufferDynamicOffset> = <sequence_GPUBufferDynamicOffset_>[0];
<GPURenderPassEncoder>.setBindGroup(<GPUIndex32>,<GPUBindGroup>);
<GPURenderPassEncoder>.setBindGroup(<GPUIndex32>,<GPUBindGroup>,<sequence_GPUBufferDynamicOffset_>);
<GPUComputePassEncoder>.setBindGroup(<GPUIndex32>,<GPUBindGroup>);
<GPUComputePassEncoder>.setBindGroup(<GPUIndex32>,<GPUBindGroup>,<sequence_GPUBufferDynamicOffset_>);
<GPURenderBundleEncoder>.setBindGroup(<GPUIndex32>,<GPUBindGroup>);
<GPURenderBundleEncoder>.setBindGroup(<GPUIndex32>,<GPUBindGroup>,<sequence_GPUBufferDynamicOffset_>);
<GPURenderPassEncoder>.setBindGroup(<GPUIndex32>,<GPUBindGroup>,<Uint32Array>,<GPUSize64>,<GPUSize32>);
<GPUComputePassEncoder>.setBindGroup(<GPUIndex32>,<GPUBindGroup>,<Uint32Array>,<GPUSize64>,<GPUSize32>);
<GPURenderBundleEncoder>.setBindGroup(<GPUIndex32>,<GPUBindGroup>,<Uint32Array>,<GPUSize64>,<GPUSize32>);
<GPUCommandEncoder>.pushDebugGroup(<USVString>);
<GPURenderPassEncoder>.pushDebugGroup(<USVString>);
<GPUComputePassEncoder>.pushDebugGroup(<USVString>);
<GPURenderBundleEncoder>.pushDebugGroup(<USVString>);
<GPUCommandEncoder>.popDebugGroup();
<GPURenderPassEncoder>.popDebugGroup();
<GPUComputePassEncoder>.popDebugGroup();
<GPURenderBundleEncoder>.popDebugGroup();
<GPUCommandEncoder>.insertDebugMarker(<USVString>);
<GPURenderPassEncoder>.insertDebugMarker(<USVString>);
<GPUComputePassEncoder>.insertDebugMarker(<USVString>);
<GPURenderBundleEncoder>.insertDebugMarker(<USVString>);
<GPURenderPassEncoder>.setPipeline(<GPURenderPipeline>);
<GPURenderBundleEncoder>.setPipeline(<GPURenderPipeline>);
<GPURenderPassEncoder>.setIndexBuffer(<GPUBuffer>,<GPUIndexFormat>);
<GPURenderPassEncoder>.setIndexBuffer(<GPUBuffer>,<GPUIndexFormat>,<GPUSize64>);
<GPURenderPassEncoder>.setIndexBuffer(<GPUBuffer>,<GPUIndexFormat>,<GPUSize64>,<GPUSize64>);
<GPURenderBundleEncoder>.setIndexBuffer(<GPUBuffer>,<GPUIndexFormat>);
<GPURenderBundleEncoder>.setIndexBuffer(<GPUBuffer>,<GPUIndexFormat>,<GPUSize64>);
<GPURenderBundleEncoder>.setIndexBuffer(<GPUBuffer>,<GPUIndexFormat>,<GPUSize64>,<GPUSize64>);
<GPURenderPassEncoder>.setVertexBuffer(<GPUIndex32>,<GPUBuffer>);
<GPURenderPassEncoder>.setVertexBuffer(<GPUIndex32>,<GPUBuffer>,<GPUSize64>);
<GPURenderPassEncoder>.setVertexBuffer(<GPUIndex32>,<GPUBuffer>,<GPUSize64>,<GPUSize64>);
<GPURenderBundleEncoder>.setVertexBuffer(<GPUIndex32>,<GPUBuffer>);
<GPURenderBundleEncoder>.setVertexBuffer(<GPUIndex32>,<GPUBuffer>,<GPUSize64>);
<GPURenderBundleEncoder>.setVertexBuffer(<GPUIndex32>,<GPUBuffer>,<GPUSize64>,<GPUSize64>);
<GPURenderPassEncoder>.draw(<GPUSize32>);
<GPURenderPassEncoder>.draw(<GPUSize32>,<GPUSize32>);
<GPURenderPassEncoder>.draw(<GPUSize32>,<GPUSize32>,<GPUSize32>);
<GPURenderPassEncoder>.draw(<GPUSize32>,<GPUSize32>,<GPUSize32>,<GPUSize32>);
<GPURenderBundleEncoder>.draw(<GPUSize32>);
<GPURenderBundleEncoder>.draw(<GPUSize32>,<GPUSize32>);
<GPURenderBundleEncoder>.draw(<GPUSize32>,<GPUSize32>,<GPUSize32>);
<GPURenderBundleEncoder>.draw(<GPUSize32>,<GPUSize32>,<GPUSize32>,<GPUSize32>);
<GPURenderPassEncoder>.drawIndexed(<GPUSize32>);
<GPURenderPassEncoder>.drawIndexed(<GPUSize32>,<GPUSize32>);
<GPURenderPassEncoder>.drawIndexed(<GPUSize32>,<GPUSize32>,<GPUSize32>);
<GPURenderPassEncoder>.drawIndexed(<GPUSize32>,<GPUSize32>,<GPUSize32>,<GPUSignedOffset32>);
<GPURenderPassEncoder>.drawIndexed(<GPUSize32>,<GPUSize32>,<GPUSize32>,<GPUSignedOffset32>,<GPUSize32>);
<GPURenderBundleEncoder>.drawIndexed(<GPUSize32>);
<GPURenderBundleEncoder>.drawIndexed(<GPUSize32>,<GPUSize32>);
<GPURenderBundleEncoder>.drawIndexed(<GPUSize32>,<GPUSize32>,<GPUSize32>);
<GPURenderBundleEncoder>.drawIndexed(<GPUSize32>,<GPUSize32>,<GPUSize32>,<GPUSignedOffset32>);
<GPURenderBundleEncoder>.drawIndexed(<GPUSize32>,<GPUSize32>,<GPUSize32>,<GPUSignedOffset32>,<GPUSize32>);
<GPURenderPassEncoder>.drawIndirect(<GPUBuffer>,<GPUSize64>);
<GPURenderBundleEncoder>.drawIndirect(<GPUBuffer>,<GPUSize64>);
<GPURenderPassEncoder>.drawIndexedIndirect(<GPUBuffer>,<GPUSize64>);
<GPURenderBundleEncoder>.drawIndexedIndirect(<GPUBuffer>,<GPUSize64>);
<new ML> = <Navigator>.ml;
<new ML> = <WorkerNavigator>.ml;
<new EventHandler> = <HTMLElement>.onbeforexrselect;
<HTMLElement>.onbeforexrselect = <EventHandler>;
<new EventHandler> = <MathMLElement>.onbeforexrselect;
<MathMLElement>.onbeforexrselect = <EventHandler>;
<new EventHandler> = <SVGElement>.onbeforexrselect;
<SVGElement>.onbeforexrselect = <EventHandler>;
<new EventHandler> = <Document>.onbeforexrselect;
<Document>.onbeforexrselect = <EventHandler>;
<new EventHandler> = <Window>.onbeforexrselect;
<Window>.onbeforexrselect = <EventHandler>;
<new Promise_undefined_> = <WebGL2RenderingContext>.makeXRCompatible();
<new Promise_undefined_> = <WebGLRenderingContext>.makeXRCompatible();
<new SecurityPolicyViolationEventDisposition> = "enforce";
<new SecurityPolicyViolationEventDisposition> = "report";
<new EndingType> = "transparent";
<new EndingType> = "native";
<new IDBRequestReadyState> = "pending";
<new IDBRequestReadyState> = "done";
<new IDBTransactionDurability> = "default";
<new IDBTransactionDurability> = "strict";
<new IDBTransactionDurability> = "relaxed";
<new IDBCursorDirection> = "next";
<new IDBCursorDirection> = "nextunique";
<new IDBCursorDirection> = "prev";
<new IDBCursorDirection> = "prevunique";
<new IDBTransactionMode> = "readonly";
<new IDBTransactionMode> = "readwrite";
<new IDBTransactionMode> = "versionchange";
<new KeyType> = "public";
<new KeyType> = "private";
<new KeyType> = "secret";
<new KeyUsage> = "encrypt";
<new KeyUsage> = "decrypt";
<new KeyUsage> = "sign";
<new KeyUsage> = "verify";
<new KeyUsage> = "deriveKey";
<new KeyUsage> = "deriveBits";
<new KeyUsage> = "wrapKey";
<new KeyUsage> = "unwrapKey";
<new KeyFormat> = "raw";
<new KeyFormat> = "spki";
<new KeyFormat> = "pkcs8";
<new KeyFormat> = "jwk";
<new AccelerometerLocalCoordinateSystem> = "device";
<new AccelerometerLocalCoordinateSystem> = "screen";
<new AutoplayPolicy> = "allowed";
<new AutoplayPolicy> = "allowed-muted";
<new AutoplayPolicy> = "disallowed";
<new AutoplayPolicyMediaType> = "mediaelement";
<new AutoplayPolicyMediaType> = "audiocontext";
<new BackgroundFetchResult> = "";
<new BackgroundFetchResult> = "success";
<new BackgroundFetchResult> = "failure";
<new BackgroundFetchFailureReason> = "";
<new BackgroundFetchFailureReason> = "aborted";
<new BackgroundFetchFailureReason> = "bad-status";
<new BackgroundFetchFailureReason> = "fetch-error";
<new BackgroundFetchFailureReason> = "quota-exceeded";
<new BackgroundFetchFailureReason> = "download-total-exceeded";
<new PresentationStyle> = "unspecified";
<new PresentationStyle> = "inline";
<new PresentationStyle> = "attachment";
<new PressureState> = "nominal";
<new PressureState> = "fair";
<new PressureState> = "serious";
<new PressureState> = "critical";
<new PressureFactor> = "thermal";
<new PressureFactor> = "power-supply";
<new PressureSource> = "cpu";
<new ContactProperty> = "address";
<new ContactProperty> = "email";
<new ContactProperty> = "icon";
<new ContactProperty> = "name";
<new ContactProperty> = "tel";
<new ContentCategory> = "";
<new ContentCategory> = "homepage";
<new ContentCategory> = "article";
<new ContentCategory> = "video";
<new ContentCategory> = "audio";
<new CookieSameSite> = "strict";
<new CookieSameSite> = "lax";
<new CookieSameSite> = "none";
<new CredentialMediationRequirement> = "silent";
<new CredentialMediationRequirement> = "optional";
<new CredentialMediationRequirement> = "conditional";
<new CredentialMediationRequirement> = "required";
<new ScriptingPolicyViolationType> = "externalScript";
<new ScriptingPolicyViolationType> = "inlineScript";
<new ScriptingPolicyViolationType> = "inlineEventHandler";
<new ScriptingPolicyViolationType> = "eval";
<new FontFaceLoadStatus> = "unloaded";
<new FontFaceLoadStatus> = "loading";
<new FontFaceLoadStatus> = "loaded";
<new FontFaceLoadStatus> = "error";
<new FontFaceSetLoadStatus> = "loading";
<new FontFaceSetLoadStatus> = "loaded";
<new HighlightType> = "highlight";
<new HighlightType> = "spelling-error";
<new HighlightType> = "grammar-error";
<new ChildDisplayType> = "block";
<new ChildDisplayType> = "normal";
<new LayoutSizingMode> = "block-like";
<new LayoutSizingMode> = "manual";
<new BlockFragmentationType> = "none";
<new BlockFragmentationType> = "page";
<new BlockFragmentationType> = "column";
<new BlockFragmentationType> = "region";
<new BreakType> = "none";
<new BreakType> = "line";
<new BreakType> = "column";
<new BreakType> = "page";
<new BreakType> = "region";
<new SpatialNavigationDirection> = "up";
<new SpatialNavigationDirection> = "down";
<new SpatialNavigationDirection> = "left";
<new SpatialNavigationDirection> = "right";
<new FocusableAreaSearchMode> = "visible";
<new FocusableAreaSearchMode> = "all";
<new CSSNumericBaseType> = "length";
<new CSSNumericBaseType> = "angle";
<new CSSNumericBaseType> = "time";
<new CSSNumericBaseType> = "frequency";
<new CSSNumericBaseType> = "resolution";
<new CSSNumericBaseType> = "flex";
<new CSSNumericBaseType> = "percent";
<new CSSMathOperator> = "sum";
<new CSSMathOperator> = "product";
<new CSSMathOperator> = "negate";
<new CSSMathOperator> = "invert";
<new CSSMathOperator> = "min";
<new CSSMathOperator> = "max";
<new CSSMathOperator> = "clamp";
<new ScrollBehavior> = "auto";
<new ScrollBehavior> = "instant";
<new ScrollBehavior> = "smooth";
<new ScrollLogicalPosition> = "start";
<new ScrollLogicalPosition> = "center";
<new ScrollLogicalPosition> = "end";
<new ScrollLogicalPosition> = "nearest";
<new CSSBoxType> = "margin";
<new CSSBoxType> = "border";
<new CSSBoxType> = "padding";
<new CSSBoxType> = "content";
<new DevicePostureType> = "continuous";
<new DevicePostureType> = "folded";
<new DevicePostureType> = "folded-over";
<new ItemType> = "product";
<new ItemType> = "subscription";
<new ShadowRootMode> = "open";
<new ShadowRootMode> = "closed";
<new SlotAssignmentMode> = "manual";
<new SlotAssignmentMode> = "named";
<new MediaKeysRequirement> = "required";
<new MediaKeysRequirement> = "optional";
<new MediaKeysRequirement> = "not-allowed";
<new MediaKeySessionType> = "temporary";
<new MediaKeySessionType> = "persistent-license";
<new MediaKeySessionClosedReason> = "internal-error";
<new MediaKeySessionClosedReason> = "closed-by-application";
<new MediaKeySessionClosedReason> = "release-acknowledged";
<new MediaKeySessionClosedReason> = "hardware-context-reset";
<new MediaKeySessionClosedReason> = "resource-evicted";
<new MediaKeyStatus> = "usable";
<new MediaKeyStatus> = "expired";
<new MediaKeyStatus> = "released";
<new MediaKeyStatus> = "output-restricted";
<new MediaKeyStatus> = "output-downscaled";
<new MediaKeyStatus> = "usable-in-future";
<new MediaKeyStatus> = "status-pending";
<new MediaKeyStatus> = "internal-error";
<new MediaKeyMessageType> = "license-request";
<new MediaKeyMessageType> = "license-renewal";
<new MediaKeyMessageType> = "license-release";
<new MediaKeyMessageType> = "individualization-request";
<new RequestDestination> = "";
<new RequestDestination> = "audio";
<new RequestDestination> = "audioworklet";
<new RequestDestination> = "document";
<new RequestDestination> = "embed";
<new RequestDestination> = "font";
<new RequestDestination> = "frame";
<new RequestDestination> = "iframe";
<new RequestDestination> = "image";
<new RequestDestination> = "manifest";
<new RequestDestination> = "object";
<new RequestDestination> = "paintworklet";
<new RequestDestination> = "report";
<new RequestDestination> = "script";
<new RequestDestination> = "sharedworker";
<new RequestDestination> = "style";
<new RequestDestination> = "track";
<new RequestDestination> = "video";
<new RequestDestination> = "worker";
<new RequestDestination> = "xslt";
<new RequestMode> = "navigate";
<new RequestMode> = "same-origin";
<new RequestMode> = "no-cors";
<new RequestMode> = "cors";
<new RequestCredentials> = "omit";
<new RequestCredentials> = "same-origin";
<new RequestCredentials> = "include";
<new RequestCache> = "default";
<new RequestCache> = "no-store";
<new RequestCache> = "reload";
<new RequestCache> = "no-cache";
<new RequestCache> = "force-cache";
<new RequestCache> = "only-if-cached";
<new RequestRedirect> = "follow";
<new RequestRedirect> = "error";
<new RequestRedirect> = "manual";
<new RequestDuplex> = "half";
<new RequestPriority> = "high";
<new RequestPriority> = "low";
<new RequestPriority> = "auto";
<new ResponseType> = "basic";
<new ResponseType> = "cors";
<new ResponseType> = "default";
<new ResponseType> = "error";
<new ResponseType> = "opaque";
<new ResponseType> = "opaqueredirect";
<new FileSystemPermissionMode> = "read";
<new FileSystemPermissionMode> = "readwrite";
<new WellKnownDirectory> = "desktop";
<new WellKnownDirectory> = "documents";
<new WellKnownDirectory> = "downloads";
<new WellKnownDirectory> = "music";
<new WellKnownDirectory> = "pictures";
<new WellKnownDirectory> = "videos";
<new FileSystemHandleKind> = "file";
<new FileSystemHandleKind> = "directory";
<new WriteCommandType> = "write";
<new WriteCommandType> = "seek";
<new WriteCommandType> = "truncate";
<new FullscreenNavigationUI> = "auto";
<new FullscreenNavigationUI> = "show";
<new FullscreenNavigationUI> = "hide";
<new GamepadHand> = "";
<new GamepadHand> = "left";
<new GamepadHand> = "right";
<new GamepadHapticsResult> = "complete";
<new GamepadHapticsResult> = "preempted";
<new GamepadHapticActuatorType> = "vibration";
<new GamepadHapticActuatorType> = "dual-rumble";
<new GamepadHapticEffectType> = "dual-rumble";
<new GamepadMappingType> = "";
<new GamepadMappingType> = "standard";
<new GamepadMappingType> = "xr-standard";
<new MockSensorType> = "ambient-light";
<new MockSensorType> = "accelerometer";
<new MockSensorType> = "linear-acceleration";
<new MockSensorType> = "gravity";
<new MockSensorType> = "gyroscope";
<new MockSensorType> = "magnetometer";
<new MockSensorType> = "uncalibrated-magnetometer";
<new MockSensorType> = "absolute-orientation";
<new MockSensorType> = "relative-orientation";
<new MockSensorType> = "geolocation";
<new MockSensorType> = "proximity";
<new GyroscopeLocalCoordinateSystem> = "device";
<new GyroscopeLocalCoordinateSystem> = "screen";
<new DocumentReadyState> = "loading";
<new DocumentReadyState> = "interactive";
<new DocumentReadyState> = "complete";
<new DocumentVisibilityState> = "visible";
<new DocumentVisibilityState> = "hidden";
<new CanPlayTypeResult> = "";
<new CanPlayTypeResult> = "maybe";
<new CanPlayTypeResult> = "probably";
<new TextTrackMode> = "disabled";
<new TextTrackMode> = "hidden";
<new TextTrackMode> = "showing";
<new TextTrackKind> = "subtitles";
<new TextTrackKind> = "captions";
<new TextTrackKind> = "descriptions";
<new TextTrackKind> = "chapters";
<new TextTrackKind> = "metadata";
<new SelectionMode> = "select";
<new SelectionMode> = "start";
<new SelectionMode> = "end";
<new SelectionMode> = "preserve";
<new PredefinedColorSpace> = "srgb";
<new PredefinedColorSpace> = "display-p3";
<new CanvasFillRule> = "nonzero";
<new CanvasFillRule> = "evenodd";
<new ImageSmoothingQuality> = "low";
<new ImageSmoothingQuality> = "medium";
<new ImageSmoothingQuality> = "high";
<new CanvasLineCap> = "butt";
<new CanvasLineCap> = "round";
<new CanvasLineCap> = "square";
<new CanvasLineJoin> = "round";
<new CanvasLineJoin> = "bevel";
<new CanvasLineJoin> = "miter";
<new CanvasTextAlign> = "start";
<new CanvasTextAlign> = "end";
<new CanvasTextAlign> = "left";
<new CanvasTextAlign> = "right";
<new CanvasTextAlign> = "center";
<new CanvasTextBaseline> = "top";
<new CanvasTextBaseline> = "hanging";
<new CanvasTextBaseline> = "middle";
<new CanvasTextBaseline> = "alphabetic";
<new CanvasTextBaseline> = "ideographic";
<new CanvasTextBaseline> = "bottom";
<new CanvasDirection> = "ltr";
<new CanvasDirection> = "rtl";
<new CanvasDirection> = "inherit";
<new CanvasFontKerning> = "auto";
<new CanvasFontKerning> = "normal";
<new CanvasFontKerning> = "none";
<new CanvasFontStretch> = "ultra-condensed";
<new CanvasFontStretch> = "extra-condensed";
<new CanvasFontStretch> = "condensed";
<new CanvasFontStretch> = "semi-condensed";
<new CanvasFontStretch> = "normal";
<new CanvasFontStretch> = "semi-expanded";
<new CanvasFontStretch> = "expanded";
<new CanvasFontStretch> = "extra-expanded";
<new CanvasFontStretch> = "ultra-expanded";
<new CanvasFontVariantCaps> = "normal";
<new CanvasFontVariantCaps> = "small-caps";
<new CanvasFontVariantCaps> = "all-small-caps";
<new CanvasFontVariantCaps> = "petite-caps";
<new CanvasFontVariantCaps> = "all-petite-caps";
<new CanvasFontVariantCaps> = "unicase";
<new CanvasFontVariantCaps> = "titling-caps";
<new CanvasTextRendering> = "auto";
<new CanvasTextRendering> = "optimizeSpeed";
<new CanvasTextRendering> = "optimizeLegibility";
<new CanvasTextRendering> = "geometricPrecision";
<new OffscreenRenderingContextId> = "2d";
<new OffscreenRenderingContextId> = "bitmaprenderer";
<new OffscreenRenderingContextId> = "webgl";
<new OffscreenRenderingContextId> = "webgl2";
<new OffscreenRenderingContextId> = "webgpu";
<new ScrollRestoration> = "auto";
<new ScrollRestoration> = "manual";
<new DOMParserSupportedType> = "text/html";
<new DOMParserSupportedType> = "text/xml";
<new DOMParserSupportedType> = "application/xml";
<new DOMParserSupportedType> = "application/xhtml+xml";
<new DOMParserSupportedType> = "image/svg+xml";
<new ImageOrientation> = "from-image";
<new ImageOrientation> = "flipY";
<new PremultiplyAlpha> = "none";
<new PremultiplyAlpha> = "premultiply";
<new PremultiplyAlpha> = "default";
<new ColorSpaceConversion> = "none";
<new ColorSpaceConversion> = "default";
<new ResizeQuality> = "pixelated";
<new ResizeQuality> = "low";
<new ResizeQuality> = "medium";
<new ResizeQuality> = "high";
<new WorkerType> = "classic";
<new WorkerType> = "module";
<new UserIdleState> = "active";
<new UserIdleState> = "idle";
<new ScreenIdleState> = "locked";
<new ScreenIdleState> = "unlocked";
<new RedEyeReduction> = "never";
<new RedEyeReduction> = "always";
<new RedEyeReduction> = "controllable";
<new FillLightMode> = "auto";
<new FillLightMode> = "off";
<new FillLightMode> = "flash";
<new MeteringMode> = "none";
<new MeteringMode> = "manual";
<new MeteringMode> = "single-shot";
<new MeteringMode> = "continuous";
<new MagnetometerLocalCoordinateSystem> = "device";
<new MagnetometerLocalCoordinateSystem> = "screen";
<new AppBannerPromptOutcome> = "accepted";
<new AppBannerPromptOutcome> = "dismissed";
<new MediaDecodingType> = "file";
<new MediaDecodingType> = "media-source";
<new MediaDecodingType> = "webrtc";
<new MediaEncodingType> = "record";
<new MediaEncodingType> = "webrtc";
<new HdrMetadataType> = "smpteSt2086";
<new HdrMetadataType> = "smpteSt2094-10";
<new HdrMetadataType> = "smpteSt2094-40";
<new ColorGamut> = "srgb";
<new ColorGamut> = "p3";
<new ColorGamut> = "rec2020";
<new TransferFunction> = "srgb";
<new TransferFunction> = "pq";
<new TransferFunction> = "hlg";
<new ReadyState> = "closed";
<new ReadyState> = "open";
<new ReadyState> = "ended";
<new EndOfStreamError> = "network";
<new EndOfStreamError> = "decode";
<new AppendMode> = "segments";
<new AppendMode> = "sequence";
<new MockCapturePromptResult> = "granted";
<new MockCapturePromptResult> = "denied";
<new CaptureAction> = "next";
<new CaptureAction> = "previous";
<new CaptureAction> = "first";
<new CaptureAction> = "last";
<new MediaStreamTrackState> = "live";
<new MediaStreamTrackState> = "ended";
<new VideoFacingModeEnum> = "user";
<new VideoFacingModeEnum> = "environment";
<new VideoFacingModeEnum> = "left";
<new VideoFacingModeEnum> = "right";
<new VideoResizeModeEnum> = "none";
<new VideoResizeModeEnum> = "crop-and-scale";
<new MediaDeviceKind> = "audioinput";
<new MediaDeviceKind> = "audiooutput";
<new MediaDeviceKind> = "videoinput";
<new MediaSessionPlaybackState> = "none";
<new MediaSessionPlaybackState> = "paused";
<new MediaSessionPlaybackState> = "playing";
<new MediaSessionAction> = "play";
<new MediaSessionAction> = "pause";
<new MediaSessionAction> = "seekbackward";
<new MediaSessionAction> = "seekforward";
<new MediaSessionAction> = "previoustrack";
<new MediaSessionAction> = "nexttrack";
<new MediaSessionAction> = "skipad";
<new MediaSessionAction> = "stop";
<new MediaSessionAction> = "seekto";
<new MediaSessionAction> = "togglemicrophone";
<new MediaSessionAction> = "togglecamera";
<new MediaSessionAction> = "hangup";
<new MediaSessionAction> = "previousslide";
<new MediaSessionAction> = "nextslide";
<new BitrateMode> = "constant";
<new BitrateMode> = "variable";
<new RecordingState> = "inactive";
<new RecordingState> = "recording";
<new RecordingState> = "paused";
<new RTCDegradationPreference> = "maintain-framerate";
<new RTCDegradationPreference> = "maintain-resolution";
<new RTCDegradationPreference> = "balanced";
<new NavigationHistoryBehavior> = "auto";
<new NavigationHistoryBehavior> = "push";
<new NavigationHistoryBehavior> = "replace";
<new NavigationFocusReset> = "after-transition";
<new NavigationFocusReset> = "manual";
<new NavigationScrollBehavior> = "after-transition";
<new NavigationScrollBehavior> = "manual";
<new NavigationType> = "reload";
<new NavigationType> = "push";
<new NavigationType> = "replace";
<new NavigationType> = "traverse";
<new NavigationTimingType> = "navigate";
<new NavigationTimingType> = "reload";
<new NavigationTimingType> = "back_forward";
<new NavigationTimingType> = "prerender";
<new ConnectionType> = "bluetooth";
<new ConnectionType> = "cellular";
<new ConnectionType> = "ethernet";
<new ConnectionType> = "mixed";
<new ConnectionType> = "none";
<new ConnectionType> = "other";
<new ConnectionType> = "unknown";
<new ConnectionType> = "wifi";
<new ConnectionType> = "wimax";
<new EffectiveConnectionType> = "2g";
<new EffectiveConnectionType> = "3g";
<new EffectiveConnectionType> = "4g";
<new EffectiveConnectionType> = "slow-2g";
<new NotificationPermission> = "default";
<new NotificationPermission> = "denied";
<new NotificationPermission> = "granted";
<new NotificationDirection> = "auto";
<new NotificationDirection> = "ltr";
<new NotificationDirection> = "rtl";
<new OrientationSensorLocalCoordinateSystem> = "device";
<new OrientationSensorLocalCoordinateSystem> = "screen";
<new ClientLifecycleState> = "active";
<new ClientLifecycleState> = "frozen";
<new PaymentDelegation> = "shippingAddress";
<new PaymentDelegation> = "payerName";
<new PaymentDelegation> = "payerPhone";
<new PaymentDelegation> = "payerEmail";
<new PaymentShippingType> = "shipping";
<new PaymentShippingType> = "delivery";
<new PaymentShippingType> = "pickup";
<new PaymentComplete> = "fail";
<new PaymentComplete> = "success";
<new PaymentComplete> = "unknown";
<new PermissionState> = "granted";
<new PermissionState> = "denied";
<new PermissionState> = "prompt";
<new PresentationConnectionState> = "connecting";
<new PresentationConnectionState> = "connected";
<new PresentationConnectionState> = "closed";
<new PresentationConnectionState> = "terminated";
<new PresentationConnectionCloseReason> = "error";
<new PresentationConnectionCloseReason> = "closed";
<new PresentationConnectionCloseReason> = "wentaway";
<new PushEncryptionKeyName> = "p256dh";
<new PushEncryptionKeyName> = "auth";
<new ReferrerPolicy> = "";
<new ReferrerPolicy> = "no-referrer";
<new ReferrerPolicy> = "no-referrer-when-downgrade";
<new ReferrerPolicy> = "same-origin";
<new ReferrerPolicy> = "origin";
<new ReferrerPolicy> = "strict-origin";
<new ReferrerPolicy> = "origin-when-cross-origin";
<new ReferrerPolicy> = "strict-origin-when-cross-origin";
<new ReferrerPolicy> = "unsafe-url";
<new RemotePlaybackState> = "connecting";
<new RemotePlaybackState> = "connected";
<new RemotePlaybackState> = "disconnected";
<new ResizeObserverBoxOptions> = "border-box";
<new ResizeObserverBoxOptions> = "content-box";
<new ResizeObserverBoxOptions> = "device-pixel-content-box";
<new RenderBlockingStatusType> = "blocking";
<new RenderBlockingStatusType> = "non-blocking";
<new TaskPriority> = "user-blocking";
<new TaskPriority> = "user-visible";
<new TaskPriority> = "background";
<new CaptureStartFocusBehavior> = "focus-captured-surface";
<new CaptureStartFocusBehavior> = "no-focus-change";
<new SelfCapturePreferenceEnum> = "include";
<new SelfCapturePreferenceEnum> = "exclude";
<new SystemAudioPreferenceEnum> = "include";
<new SystemAudioPreferenceEnum> = "exclude";
<new SurfaceSwitchingPreferenceEnum> = "include";
<new SurfaceSwitchingPreferenceEnum> = "exclude";
<new DisplayCaptureSurfaceType> = "monitor";
<new DisplayCaptureSurfaceType> = "window";
<new DisplayCaptureSurfaceType> = "browser";
<new CursorCaptureConstraint> = "never";
<new CursorCaptureConstraint> = "always";
<new CursorCaptureConstraint> = "motion";
<new OrientationLockType> = "any";
<new OrientationLockType> = "natural";
<new OrientationLockType> = "landscape";
<new OrientationLockType> = "portrait";
<new OrientationLockType> = "portrait-primary";
<new OrientationLockType> = "portrait-secondary";
<new OrientationLockType> = "landscape-primary";
<new OrientationLockType> = "landscape-secondary";
<new OrientationType> = "portrait-primary";
<new OrientationType> = "portrait-secondary";
<new OrientationType> = "landscape-primary";
<new OrientationType> = "landscape-secondary";
<new WakeLockType> = "screen";
<new ScrollAxis> = "block";
<new ScrollAxis> = "inline";
<new ScrollAxis> = "horizontal";
<new ScrollAxis> = "vertical";
<new TransactionAutomationMode> = "none";
<new TransactionAutomationMode> = "autoAccept";
<new TransactionAutomationMode> = "autoReject";
<new TransactionAutomationMode> = "autoOptOut";
<new ParityType> = "none";
<new ParityType> = "even";
<new ParityType> = "odd";
<new FlowControlType> = "none";
<new FlowControlType> = "hardware";
<new ServiceWorkerState> = "parsed";
<new ServiceWorkerState> = "installing";
<new ServiceWorkerState> = "installed";
<new ServiceWorkerState> = "activating";
<new ServiceWorkerState> = "activated";
<new ServiceWorkerState> = "redundant";
<new ServiceWorkerUpdateViaCache> = "imports";
<new ServiceWorkerUpdateViaCache> = "all";
<new ServiceWorkerUpdateViaCache> = "none";
<new FrameType> = "auxiliary";
<new FrameType> = "top-level";
<new FrameType> = "nested";
<new FrameType> = "none";
<new ClientType> = "window";
<new ClientType> = "worker";
<new ClientType> = "sharedworker";
<new ClientType> = "all";
<new LandmarkType> = "mouth";
<new LandmarkType> = "eye";
<new LandmarkType> = "nose";
<new BarcodeFormat> = "aztec";
<new BarcodeFormat> = "code_128";
<new BarcodeFormat> = "code_39";
<new BarcodeFormat> = "code_93";
<new BarcodeFormat> = "codabar";
<new BarcodeFormat> = "data_matrix";
<new BarcodeFormat> = "ean_13";
<new BarcodeFormat> = "ean_8";
<new BarcodeFormat> = "itf";
<new BarcodeFormat> = "pdf417";
<new BarcodeFormat> = "qr_code";
<new BarcodeFormat> = "unknown";
<new BarcodeFormat> = "upc_a";
<new BarcodeFormat> = "upc_e";
<new SpeechRecognitionErrorCode> = "no-speech";
<new SpeechRecognitionErrorCode> = "aborted";
<new SpeechRecognitionErrorCode> = "audio-capture";
<new SpeechRecognitionErrorCode> = "network";
<new SpeechRecognitionErrorCode> = "not-allowed";
<new SpeechRecognitionErrorCode> = "service-not-allowed";
<new SpeechRecognitionErrorCode> = "bad-grammar";
<new SpeechRecognitionErrorCode> = "language-not-supported";
<new SpeechSynthesisErrorCode> = "canceled";
<new SpeechSynthesisErrorCode> = "interrupted";
<new SpeechSynthesisErrorCode> = "audio-busy";
<new SpeechSynthesisErrorCode> = "audio-hardware";
<new SpeechSynthesisErrorCode> = "network";
<new SpeechSynthesisErrorCode> = "synthesis-unavailable";
<new SpeechSynthesisErrorCode> = "synthesis-failed";
<new SpeechSynthesisErrorCode> = "language-unavailable";
<new SpeechSynthesisErrorCode> = "voice-unavailable";
<new SpeechSynthesisErrorCode> = "text-too-long";
<new SpeechSynthesisErrorCode> = "invalid-argument";
<new SpeechSynthesisErrorCode> = "not-allowed";
<new ReadableStreamReaderMode> = "byob";
<new ReadableStreamType> = "bytes";
<new TouchType> = "direct";
<new TouchType> = "stylus";
<new ImportExportKind> = "function";
<new ImportExportKind> = "table";
<new ImportExportKind> = "memory";
<new ImportExportKind> = "global";
<new TableKind> = "externref";
<new TableKind> = "anyfunc";
<new ValueType> = "i32";
<new ValueType> = "i64";
<new ValueType> = "f32";
<new ValueType> = "f64";
<new ValueType> = "v128";
<new ValueType> = "externref";
<new ValueType> = "anyfunc";
<new IterationCompositeOperation> = "replace";
<new IterationCompositeOperation> = "accumulate";
<new AnimationPlayState> = "idle";
<new AnimationPlayState> = "running";
<new AnimationPlayState> = "paused";
<new AnimationPlayState> = "finished";
<new AnimationReplaceState> = "active";
<new AnimationReplaceState> = "removed";
<new AnimationReplaceState> = "persisted";
<new FillMode> = "none";
<new FillMode> = "forwards";
<new FillMode> = "backwards";
<new FillMode> = "both";
<new FillMode> = "auto";
<new PlaybackDirection> = "normal";
<new PlaybackDirection> = "reverse";
<new PlaybackDirection> = "alternate";
<new PlaybackDirection> = "alternate-reverse";
<new CompositeOperation> = "replace";
<new CompositeOperation> = "add";
<new CompositeOperation> = "accumulate";
<new CompositeOperationOrAuto> = "replace";
<new CompositeOperationOrAuto> = "add";
<new CompositeOperationOrAuto> = "accumulate";
<new CompositeOperationOrAuto> = "auto";
<new LockMode> = "shared";
<new LockMode> = "exclusive";
<new OTPCredentialTransportType> = "sms";
<new AudioContextState> = "suspended";
<new AudioContextState> = "running";
<new AudioContextState> = "closed";
<new AudioContextLatencyCategory> = "balanced";
<new AudioContextLatencyCategory> = "interactive";
<new AudioContextLatencyCategory> = "playback";
<new AudioSinkType> = "none";
<new ChannelCountMode> = "max";
<new ChannelCountMode> = "clamped-max";
<new ChannelCountMode> = "explicit";
<new ChannelInterpretation> = "speakers";
<new ChannelInterpretation> = "discrete";
<new AutomationRate> = "a-rate";
<new AutomationRate> = "k-rate";
<new BiquadFilterType> = "lowpass";
<new BiquadFilterType> = "highpass";
<new BiquadFilterType> = "bandpass";
<new BiquadFilterType> = "lowshelf";
<new BiquadFilterType> = "highshelf";
<new BiquadFilterType> = "peaking";
<new BiquadFilterType> = "notch";
<new BiquadFilterType> = "allpass";
<new OscillatorType> = "sine";
<new OscillatorType> = "square";
<new OscillatorType> = "sawtooth";
<new OscillatorType> = "triangle";
<new OscillatorType> = "custom";
<new PanningModelType> = "equalpower";
<new PanningModelType> = "HRTF";
<new DistanceModelType> = "linear";
<new DistanceModelType> = "inverse";
<new DistanceModelType> = "exponential";
<new OverSampleType> = "none";
<new OverSampleType> = "2x";
<new OverSampleType> = "4x";
<new AuthenticatorAttachment> = "platform";
<new AuthenticatorAttachment> = "cross-platform";
<new ResidentKeyRequirement> = "discouraged";
<new ResidentKeyRequirement> = "preferred";
<new ResidentKeyRequirement> = "required";
<new AttestationConveyancePreference> = "none";
<new AttestationConveyancePreference> = "indirect";
<new AttestationConveyancePreference> = "direct";
<new AttestationConveyancePreference> = "enterprise";
<new TokenBindingStatus> = "present";
<new TokenBindingStatus> = "supported";
<new PublicKeyCredentialType> = "public-key";
<new AuthenticatorTransport> = "usb";
<new AuthenticatorTransport> = "nfc";
<new AuthenticatorTransport> = "ble";
<new AuthenticatorTransport> = "hybrid";
<new AuthenticatorTransport> = "internal";
<new UserVerificationRequirement> = "required";
<new UserVerificationRequirement> = "preferred";
<new UserVerificationRequirement> = "discouraged";
<new LargeBlobSupport> = "required";
<new LargeBlobSupport> = "preferred";
<new AacBitstreamFormat> = "aac";
<new AacBitstreamFormat> = "adts";
<new AvcBitstreamFormat> = "annexb";
<new AvcBitstreamFormat> = "avc";
<new HevcBitstreamFormat> = "annexb";
<new HevcBitstreamFormat> = "hevc";
<new OpusBitstreamFormat> = "opus";
<new OpusBitstreamFormat> = "ogg";
<new HardwareAcceleration> = "no-preference";
<new HardwareAcceleration> = "prefer-hardware";
<new HardwareAcceleration> = "prefer-software";
<new AlphaOption> = "keep";
<new AlphaOption> = "discard";
<new LatencyMode> = "quality";
<new LatencyMode> = "realtime";
<new CodecState> = "unconfigured";
<new CodecState> = "configured";
<new CodecState> = "closed";
<new EncodedAudioChunkType> = "key";
<new EncodedAudioChunkType> = "delta";
<new EncodedVideoChunkType> = "key";
<new EncodedVideoChunkType> = "delta";
<new AudioSampleFormat> = "u8";
<new AudioSampleFormat> = "s16";
<new AudioSampleFormat> = "s32";
<new AudioSampleFormat> = "f32";
<new AudioSampleFormat> = "u8-planar";
<new AudioSampleFormat> = "s16-planar";
<new AudioSampleFormat> = "s32-planar";
<new AudioSampleFormat> = "f32-planar";
<new VideoPixelFormat> = "I420";
<new VideoPixelFormat> = "I420A";
<new VideoPixelFormat> = "I422";
<new VideoPixelFormat> = "I444";
<new VideoPixelFormat> = "NV12";
<new VideoPixelFormat> = "RGBA";
<new VideoPixelFormat> = "RGBX";
<new VideoPixelFormat> = "BGRA";
<new VideoPixelFormat> = "BGRX";
<new VideoColorPrimaries> = "bt709";
<new VideoColorPrimaries> = "bt470bg";
<new VideoColorPrimaries> = "smpte170m";
<new VideoColorPrimaries> = "bt2020";
<new VideoColorPrimaries> = "smpte432";
<new VideoTransferCharacteristics> = "bt709";
<new VideoTransferCharacteristics> = "smpte170m";
<new VideoTransferCharacteristics> = "iec61966-2-1";
<new VideoTransferCharacteristics> = "linear";
<new VideoTransferCharacteristics> = "pq";
<new VideoTransferCharacteristics> = "hlg";
<new VideoMatrixCoefficients> = "rgb";
<new VideoMatrixCoefficients> = "bt709";
<new VideoMatrixCoefficients> = "bt470bg";
<new VideoMatrixCoefficients> = "smpte170m";
<new VideoMatrixCoefficients> = "bt2020-ncl";
<new WebGLPowerPreference> = "default";
<new WebGLPowerPreference> = "low-power";
<new WebGLPowerPreference> = "high-performance";
<new GPUPowerPreference> = "low-power";
<new GPUPowerPreference> = "high-performance";
<new GPUFeatureName> = "depth-clip-control";
<new GPUFeatureName> = "depth32float-stencil8";
<new GPUFeatureName> = "texture-compression-bc";
<new GPUFeatureName> = "texture-compression-etc2";
<new GPUFeatureName> = "texture-compression-astc";
<new GPUFeatureName> = "timestamp-query";
<new GPUFeatureName> = "indirect-first-instance";
<new GPUFeatureName> = "shader-f16";
<new GPUFeatureName> = "rg11b10ufloat-renderable";
<new GPUBufferMapState> = "unmapped";
<new GPUBufferMapState> = "pending";
<new GPUBufferMapState> = "mapped";
<new GPUTextureDimension> = "1d";
<new GPUTextureDimension> = "2d";
<new GPUTextureDimension> = "3d";
<new GPUTextureViewDimension> = "1d";
<new GPUTextureViewDimension> = "2d";
<new GPUTextureViewDimension> = "2d-array";
<new GPUTextureViewDimension> = "cube";
<new GPUTextureViewDimension> = "cube-array";
<new GPUTextureViewDimension> = "3d";
<new GPUTextureAspect> = "all";
<new GPUTextureAspect> = "stencil-only";
<new GPUTextureAspect> = "depth-only";
<new GPUTextureFormat> = "r8unorm";
<new GPUTextureFormat> = "r8snorm";
<new GPUTextureFormat> = "r8uint";
<new GPUTextureFormat> = "r8sint";
<new GPUTextureFormat> = "r16uint";
<new GPUTextureFormat> = "r16sint";
<new GPUTextureFormat> = "r16float";
<new GPUTextureFormat> = "rg8unorm";
<new GPUTextureFormat> = "rg8snorm";
<new GPUTextureFormat> = "rg8uint";
<new GPUTextureFormat> = "rg8sint";
<new GPUTextureFormat> = "r32uint";
<new GPUTextureFormat> = "r32sint";
<new GPUTextureFormat> = "r32float";
<new GPUTextureFormat> = "rg16uint";
<new GPUTextureFormat> = "rg16sint";
<new GPUTextureFormat> = "rg16float";
<new GPUTextureFormat> = "rgba8unorm";
<new GPUTextureFormat> = "rgba8unorm-srgb";
<new GPUTextureFormat> = "rgba8snorm";
<new GPUTextureFormat> = "rgba8uint";
<new GPUTextureFormat> = "rgba8sint";
<new GPUTextureFormat> = "bgra8unorm";
<new GPUTextureFormat> = "bgra8unorm-srgb";
<new GPUTextureFormat> = "rgb9e5ufloat";
<new GPUTextureFormat> = "rgb10a2unorm";
<new GPUTextureFormat> = "rg11b10ufloat";
<new GPUTextureFormat> = "rg32uint";
<new GPUTextureFormat> = "rg32sint";
<new GPUTextureFormat> = "rg32float";
<new GPUTextureFormat> = "rgba16uint";
<new GPUTextureFormat> = "rgba16sint";
<new GPUTextureFormat> = "rgba16float";
<new GPUTextureFormat> = "rgba32uint";
<new GPUTextureFormat> = "rgba32sint";
<new GPUTextureFormat> = "rgba32float";
<new GPUTextureFormat> = "stencil8";
<new GPUTextureFormat> = "depth16unorm";
<new GPUTextureFormat> = "depth24plus";
<new GPUTextureFormat> = "depth24plus-stencil8";
<new GPUTextureFormat> = "depth32float";
<new GPUTextureFormat> = "depth32float-stencil8";
<new GPUTextureFormat> = "bc1-rgba-unorm";
<new GPUTextureFormat> = "bc1-rgba-unorm-srgb";
<new GPUTextureFormat> = "bc2-rgba-unorm";
<new GPUTextureFormat> = "bc2-rgba-unorm-srgb";
<new GPUTextureFormat> = "bc3-rgba-unorm";
<new GPUTextureFormat> = "bc3-rgba-unorm-srgb";
<new GPUTextureFormat> = "bc4-r-unorm";
<new GPUTextureFormat> = "bc4-r-snorm";
<new GPUTextureFormat> = "bc5-rg-unorm";
<new GPUTextureFormat> = "bc5-rg-snorm";
<new GPUTextureFormat> = "bc6h-rgb-ufloat";
<new GPUTextureFormat> = "bc6h-rgb-float";
<new GPUTextureFormat> = "bc7-rgba-unorm";
<new GPUTextureFormat> = "bc7-rgba-unorm-srgb";
<new GPUTextureFormat> = "etc2-rgb8unorm";
<new GPUTextureFormat> = "etc2-rgb8unorm-srgb";
<new GPUTextureFormat> = "etc2-rgb8a1unorm";
<new GPUTextureFormat> = "etc2-rgb8a1unorm-srgb";
<new GPUTextureFormat> = "etc2-rgba8unorm";
<new GPUTextureFormat> = "etc2-rgba8unorm-srgb";
<new GPUTextureFormat> = "eac-r11unorm";
<new GPUTextureFormat> = "eac-r11snorm";
<new GPUTextureFormat> = "eac-rg11unorm";
<new GPUTextureFormat> = "eac-rg11snorm";
<new GPUTextureFormat> = "astc-4x4-unorm";
<new GPUTextureFormat> = "astc-4x4-unorm-srgb";
<new GPUTextureFormat> = "astc-5x4-unorm";
<new GPUTextureFormat> = "astc-5x4-unorm-srgb";
<new GPUTextureFormat> = "astc-5x5-unorm";
<new GPUTextureFormat> = "astc-5x5-unorm-srgb";
<new GPUTextureFormat> = "astc-6x5-unorm";
<new GPUTextureFormat> = "astc-6x5-unorm-srgb";
<new GPUTextureFormat> = "astc-6x6-unorm";
<new GPUTextureFormat> = "astc-6x6-unorm-srgb";
<new GPUTextureFormat> = "astc-8x5-unorm";
<new GPUTextureFormat> = "astc-8x5-unorm-srgb";
<new GPUTextureFormat> = "astc-8x6-unorm";
<new GPUTextureFormat> = "astc-8x6-unorm-srgb";
<new GPUTextureFormat> = "astc-8x8-unorm";
<new GPUTextureFormat> = "astc-8x8-unorm-srgb";
<new GPUTextureFormat> = "astc-10x5-unorm";
<new GPUTextureFormat> = "astc-10x5-unorm-srgb";
<new GPUTextureFormat> = "astc-10x6-unorm";
<new GPUTextureFormat> = "astc-10x6-unorm-srgb";
<new GPUTextureFormat> = "astc-10x8-unorm";
<new GPUTextureFormat> = "astc-10x8-unorm-srgb";
<new GPUTextureFormat> = "astc-10x10-unorm";
<new GPUTextureFormat> = "astc-10x10-unorm-srgb";
<new GPUTextureFormat> = "astc-12x10-unorm";
<new GPUTextureFormat> = "astc-12x10-unorm-srgb";
<new GPUTextureFormat> = "astc-12x12-unorm";
<new GPUTextureFormat> = "astc-12x12-unorm-srgb";
<new GPUAddressMode> = "clamp-to-edge";
<new GPUAddressMode> = "repeat";
<new GPUAddressMode> = "mirror-repeat";
<new GPUFilterMode> = "nearest";
<new GPUFilterMode> = "linear";
<new GPUMipmapFilterMode> = "nearest";
<new GPUMipmapFilterMode> = "linear";
<new GPUCompareFunction> = "never";
<new GPUCompareFunction> = "less";
<new GPUCompareFunction> = "equal";
<new GPUCompareFunction> = "less-equal";
<new GPUCompareFunction> = "greater";
<new GPUCompareFunction> = "not-equal";
<new GPUCompareFunction> = "greater-equal";
<new GPUCompareFunction> = "always";
<new GPUBufferBindingType> = "uniform";
<new GPUBufferBindingType> = "storage";
<new GPUBufferBindingType> = "read-only-storage";
<new GPUSamplerBindingType> = "filtering";
<new GPUSamplerBindingType> = "non-filtering";
<new GPUSamplerBindingType> = "comparison";
<new GPUTextureSampleType> = "float";
<new GPUTextureSampleType> = "unfilterable-float";
<new GPUTextureSampleType> = "depth";
<new GPUTextureSampleType> = "sint";
<new GPUTextureSampleType> = "uint";
<new GPUStorageTextureAccess> = "write-only";
<new GPUCompilationMessageType> = "error";
<new GPUCompilationMessageType> = "warning";
<new GPUCompilationMessageType> = "info";
<new GPUPipelineErrorReason> = "validation";
<new GPUPipelineErrorReason> = "internal";
<new GPUAutoLayoutMode> = "auto";
<new GPUPrimitiveTopology> = "point-list";
<new GPUPrimitiveTopology> = "line-list";
<new GPUPrimitiveTopology> = "line-strip";
<new GPUPrimitiveTopology> = "triangle-list";
<new GPUPrimitiveTopology> = "triangle-strip";
<new GPUFrontFace> = "ccw";
<new GPUFrontFace> = "cw";
<new GPUCullMode> = "none";
<new GPUCullMode> = "front";
<new GPUCullMode> = "back";
<new GPUBlendFactor> = "zero";
<new GPUBlendFactor> = "one";
<new GPUBlendFactor> = "src";
<new GPUBlendFactor> = "one-minus-src";
<new GPUBlendFactor> = "src-alpha";
<new GPUBlendFactor> = "one-minus-src-alpha";
<new GPUBlendFactor> = "dst";
<new GPUBlendFactor> = "one-minus-dst";
<new GPUBlendFactor> = "dst-alpha";
<new GPUBlendFactor> = "one-minus-dst-alpha";
<new GPUBlendFactor> = "src-alpha-saturated";
<new GPUBlendFactor> = "constant";
<new GPUBlendFactor> = "one-minus-constant";
<new GPUBlendOperation> = "add";
<new GPUBlendOperation> = "subtract";
<new GPUBlendOperation> = "reverse-subtract";
<new GPUBlendOperation> = "min";
<new GPUBlendOperation> = "max";
<new GPUStencilOperation> = "keep";
<new GPUStencilOperation> = "zero";
<new GPUStencilOperation> = "replace";
<new GPUStencilOperation> = "invert";
<new GPUStencilOperation> = "increment-clamp";
<new GPUStencilOperation> = "decrement-clamp";
<new GPUStencilOperation> = "increment-wrap";
<new GPUStencilOperation> = "decrement-wrap";
<new GPUIndexFormat> = "uint16";
<new GPUIndexFormat> = "uint32";
<new GPUVertexFormat> = "uint8x2";
<new GPUVertexFormat> = "uint8x4";
<new GPUVertexFormat> = "sint8x2";
<new GPUVertexFormat> = "sint8x4";
<new GPUVertexFormat> = "unorm8x2";
<new GPUVertexFormat> = "unorm8x4";
<new GPUVertexFormat> = "snorm8x2";
<new GPUVertexFormat> = "snorm8x4";
<new GPUVertexFormat> = "uint16x2";
<new GPUVertexFormat> = "uint16x4";
<new GPUVertexFormat> = "sint16x2";
<new GPUVertexFormat> = "sint16x4";
<new GPUVertexFormat> = "unorm16x2";
<new GPUVertexFormat> = "unorm16x4";
<new GPUVertexFormat> = "snorm16x2";
<new GPUVertexFormat> = "snorm16x4";
<new GPUVertexFormat> = "float16x2";
<new GPUVertexFormat> = "float16x4";
<new GPUVertexFormat> = "float32";
<new GPUVertexFormat> = "float32x2";
<new GPUVertexFormat> = "float32x3";
<new GPUVertexFormat> = "float32x4";
<new GPUVertexFormat> = "uint32";
<new GPUVertexFormat> = "uint32x2";
<new GPUVertexFormat> = "uint32x3";
<new GPUVertexFormat> = "uint32x4";
<new GPUVertexFormat> = "sint32";
<new GPUVertexFormat> = "sint32x2";
<new GPUVertexFormat> = "sint32x3";
<new GPUVertexFormat> = "sint32x4";
<new GPUVertexStepMode> = "vertex";
<new GPUVertexStepMode> = "instance";
<new GPUComputePassTimestampLocation> = "beginning";
<new GPUComputePassTimestampLocation> = "end";
<new GPURenderPassTimestampLocation> = "beginning";
<new GPURenderPassTimestampLocation> = "end";
<new GPULoadOp> = "load";
<new GPULoadOp> = "clear";
<new GPUStoreOp> = "store";
<new GPUStoreOp> = "discard";
<new GPUQueryType> = "occlusion";
<new GPUQueryType> = "timestamp";
<new GPUCanvasAlphaMode> = "opaque";
<new GPUCanvasAlphaMode> = "premultiplied";
<new GPUDeviceLostReason> = "destroyed";
<new GPUErrorFilter> = "validation";
<new GPUErrorFilter> = "out-of-memory";
<new GPUErrorFilter> = "internal";
<new HIDUnitSystem> = "none";
<new HIDUnitSystem> = "si-linear";
<new HIDUnitSystem> = "si-rotation";
<new HIDUnitSystem> = "english-linear";
<new HIDUnitSystem> = "english-rotation";
<new HIDUnitSystem> = "vendor-defined";
<new HIDUnitSystem> = "reserved";
<new MIDIPortType> = "input";
<new MIDIPortType> = "output";
<new MIDIPortDeviceState> = "disconnected";
<new MIDIPortDeviceState> = "connected";
<new MIDIPortConnectionState> = "open";
<new MIDIPortConnectionState> = "closed";
<new MIDIPortConnectionState> = "pending";
<new MLDeviceType> = "cpu";
<new MLDeviceType> = "gpu";
<new MLPowerPreference> = "default";
<new MLPowerPreference> = "high-performance";
<new MLPowerPreference> = "low-power";
<new MLInputOperandLayout> = "nchw";
<new MLInputOperandLayout> = "nhwc";
<new MLOperandType> = "float32";
<new MLOperandType> = "float16";
<new MLOperandType> = "int32";
<new MLOperandType> = "uint32";
<new MLOperandType> = "int8";
<new MLOperandType> = "uint8";
<new MLConv2dFilterOperandLayout> = "oihw";
<new MLConv2dFilterOperandLayout> = "hwio";
<new MLConv2dFilterOperandLayout> = "ohwi";
<new MLConv2dFilterOperandLayout> = "ihwo";
<new MLAutoPad> = "explicit";
<new MLAutoPad> = "same-upper";
<new MLAutoPad> = "same-lower";
<new MLConvTranspose2dFilterOperandLayout> = "iohw";
<new MLConvTranspose2dFilterOperandLayout> = "hwoi";
<new MLConvTranspose2dFilterOperandLayout> = "ohwi";
<new MLGruWeightLayout> = "zrn";
<new MLGruWeightLayout> = "rzn";
<new MLRecurrentNetworkDirection> = "forward";
<new MLRecurrentNetworkDirection> = "backward";
<new MLRecurrentNetworkDirection> = "both";
<new MLLstmWeightLayout> = "iofg";
<new MLLstmWeightLayout> = "ifgo";
<new MLPaddingMode> = "constant";
<new MLPaddingMode> = "edge";
<new MLPaddingMode> = "reflection";
<new MLPaddingMode> = "symmetric";
<new MLRoundingType> = "floor";
<new MLRoundingType> = "ceil";
<new MLInterpolationMode> = "nearest-neighbor";
<new MLInterpolationMode> = "linear";
<new SFrameTransformRole> = "encrypt";
<new SFrameTransformRole> = "decrypt";
<new SFrameTransformErrorEventType> = "authentication";
<new SFrameTransformErrorEventType> = "keyID";
<new SFrameTransformErrorEventType> = "syntax";
<new RTCEncodedVideoFrameType> = "empty";
<new RTCEncodedVideoFrameType> = "key";
<new RTCEncodedVideoFrameType> = "delta";
<new RTCErrorDetailTypeIdp> = "idp-bad-script-failure";
<new RTCErrorDetailTypeIdp> = "idp-execution-failure";
<new RTCErrorDetailTypeIdp> = "idp-load-failure";
<new RTCErrorDetailTypeIdp> = "idp-need-login";
<new RTCErrorDetailTypeIdp> = "idp-timeout";
<new RTCErrorDetailTypeIdp> = "idp-tls-failure";
<new RTCErrorDetailTypeIdp> = "idp-token-expired";
<new RTCErrorDetailTypeIdp> = "idp-token-invalid";
<new RTCPriorityType> = "very-low";
<new RTCPriorityType> = "low";
<new RTCPriorityType> = "medium";
<new RTCPriorityType> = "high";
<new RTCStatsType> = "codec";
<new RTCStatsType> = "inbound-rtp";
<new RTCStatsType> = "outbound-rtp";
<new RTCStatsType> = "remote-inbound-rtp";
<new RTCStatsType> = "remote-outbound-rtp";
<new RTCStatsType> = "media-source";
<new RTCStatsType> = "media-playout";
<new RTCStatsType> = "peer-connection";
<new RTCStatsType> = "data-channel";
<new RTCStatsType> = "stream";
<new RTCStatsType> = "track";
<new RTCStatsType> = "transport";
<new RTCStatsType> = "candidate-pair";
<new RTCStatsType> = "local-candidate";
<new RTCStatsType> = "remote-candidate";
<new RTCStatsType> = "certificate";
<new RTCQualityLimitationReason> = "none";
<new RTCQualityLimitationReason> = "cpu";
<new RTCQualityLimitationReason> = "bandwidth";
<new RTCQualityLimitationReason> = "other";
<new RTCDtlsRole> = "client";
<new RTCDtlsRole> = "server";
<new RTCDtlsRole> = "unknown";
<new RTCStatsIceCandidatePairState> = "frozen";
<new RTCStatsIceCandidatePairState> = "waiting";
<new RTCStatsIceCandidatePairState> = "in-progress";
<new RTCStatsIceCandidatePairState> = "failed";
<new RTCStatsIceCandidatePairState> = "succeeded";
<new RTCIceTransportPolicy> = "relay";
<new RTCIceTransportPolicy> = "all";
<new RTCBundlePolicy> = "balanced";
<new RTCBundlePolicy> = "max-compat";
<new RTCBundlePolicy> = "max-bundle";
<new RTCRtcpMuxPolicy> = "require";
<new RTCSignalingState> = "stable";
<new RTCSignalingState> = "have-local-offer";
<new RTCSignalingState> = "have-remote-offer";
<new RTCSignalingState> = "have-local-pranswer";
<new RTCSignalingState> = "have-remote-pranswer";
<new RTCSignalingState> = "closed";
<new RTCIceGatheringState> = "new";
<new RTCIceGatheringState> = "gathering";
<new RTCIceGatheringState> = "complete";
<new RTCPeerConnectionState> = "closed";
<new RTCPeerConnectionState> = "failed";
<new RTCPeerConnectionState> = "disconnected";
<new RTCPeerConnectionState> = "new";
<new RTCPeerConnectionState> = "connecting";
<new RTCPeerConnectionState> = "connected";
<new RTCIceConnectionState> = "closed";
<new RTCIceConnectionState> = "failed";
<new RTCIceConnectionState> = "disconnected";
<new RTCIceConnectionState> = "new";
<new RTCIceConnectionState> = "checking";
<new RTCIceConnectionState> = "completed";
<new RTCIceConnectionState> = "connected";
<new RTCSdpType> = "offer";
<new RTCSdpType> = "pranswer";
<new RTCSdpType> = "answer";
<new RTCSdpType> = "rollback";
<new RTCIceProtocol> = "udp";
<new RTCIceProtocol> = "tcp";
<new RTCIceTcpCandidateType> = "active";
<new RTCIceTcpCandidateType> = "passive";
<new RTCIceTcpCandidateType> = "so";
<new RTCIceCandidateType> = "host";
<new RTCIceCandidateType> = "srflx";
<new RTCIceCandidateType> = "prflx";
<new RTCIceCandidateType> = "relay";
<new RTCIceServerTransportProtocol> = "udp";
<new RTCIceServerTransportProtocol> = "tcp";
<new RTCIceServerTransportProtocol> = "tls";
<new RTCRtpTransceiverDirection> = "sendrecv";
<new RTCRtpTransceiverDirection> = "sendonly";
<new RTCRtpTransceiverDirection> = "recvonly";
<new RTCRtpTransceiverDirection> = "inactive";
<new RTCRtpTransceiverDirection> = "stopped";
<new RTCDtlsTransportState> = "new";
<new RTCDtlsTransportState> = "connecting";
<new RTCDtlsTransportState> = "connected";
<new RTCDtlsTransportState> = "closed";
<new RTCDtlsTransportState> = "failed";
<new RTCIceGathererState> = "new";
<new RTCIceGathererState> = "gathering";
<new RTCIceGathererState> = "complete";
<new RTCIceTransportState> = "new";
<new RTCIceTransportState> = "checking";
<new RTCIceTransportState> = "connected";
<new RTCIceTransportState> = "completed";
<new RTCIceTransportState> = "disconnected";
<new RTCIceTransportState> = "failed";
<new RTCIceTransportState> = "closed";
<new RTCIceRole> = "unknown";
<new RTCIceRole> = "controlling";
<new RTCIceRole> = "controlled";
<new RTCIceComponent> = "rtp";
<new RTCIceComponent> = "rtcp";
<new RTCSctpTransportState> = "connecting";
<new RTCSctpTransportState> = "connected";
<new RTCSctpTransportState> = "closed";
<new RTCDataChannelState> = "connecting";
<new RTCDataChannelState> = "open";
<new RTCDataChannelState> = "closing";
<new RTCDataChannelState> = "closed";
<new RTCErrorDetailType> = "data-channel-failure";
<new RTCErrorDetailType> = "dtls-failure";
<new RTCErrorDetailType> = "fingerprint-failure";
<new RTCErrorDetailType> = "sctp-failure";
<new RTCErrorDetailType> = "sdp-syntax-error";
<new RTCErrorDetailType> = "hardware-encoder-not-available";
<new RTCErrorDetailType> = "hardware-encoder-error";
<new BinaryType> = "blob";
<new BinaryType> = "arraybuffer";
<new WebTransportReliabilityMode> = "pending";
<new WebTransportReliabilityMode> = "reliable-only";
<new WebTransportReliabilityMode> = "supports-unreliable";
<new WebTransportCongestionControl> = "default";
<new WebTransportCongestionControl> = "throughput";
<new WebTransportCongestionControl> = "low-latency";
<new WebTransportErrorSource> = "stream";
<new WebTransportErrorSource> = "session";
<new USBTransferStatus> = "ok";
<new USBTransferStatus> = "stall";
<new USBTransferStatus> = "babble";
<new USBRequestType> = "standard";
<new USBRequestType> = "class";
<new USBRequestType> = "vendor";
<new USBRecipient> = "device";
<new USBRecipient> = "interface";
<new USBRecipient> = "endpoint";
<new USBRecipient> = "other";
<new USBDirection> = "in";
<new USBDirection> = "out";
<new USBEndpointType> = "bulk";
<new USBEndpointType> = "interrupt";
<new USBEndpointType> = "isochronous";
<new AutoKeyword> = "auto";
<new DirectionSetting> = "";
<new DirectionSetting> = "rl";
<new DirectionSetting> = "lr";
<new LineAlignSetting> = "start";
<new LineAlignSetting> = "center";
<new LineAlignSetting> = "end";
<new PositionAlignSetting> = "line-left";
<new PositionAlignSetting> = "center";
<new PositionAlignSetting> = "line-right";
<new PositionAlignSetting> = "auto";
<new AlignSetting> = "start";
<new AlignSetting> = "center";
<new AlignSetting> = "end";
<new AlignSetting> = "left";
<new AlignSetting> = "right";
<new ScrollSetting> = "";
<new ScrollSetting> = "up";
<new XREnvironmentBlendMode> = "opaque";
<new XREnvironmentBlendMode> = "alpha-blend";
<new XREnvironmentBlendMode> = "additive";
<new XRInteractionMode> = "screen-space";
<new XRInteractionMode> = "world-space";
<new XRDepthUsage> = "cpu-optimized";
<new XRDepthUsage> = "gpu-optimized";
<new XRDepthDataFormat> = "luminance-alpha";
<new XRDepthDataFormat> = "float32";
<new XRDOMOverlayType> = "screen";
<new XRDOMOverlayType> = "floating";
<new XRDOMOverlayType> = "head-locked";
<new XRHandJoint> = "wrist";
<new XRHandJoint> = "thumb-metacarpal";
<new XRHandJoint> = "thumb-phalanx-proximal";
<new XRHandJoint> = "thumb-phalanx-distal";
<new XRHandJoint> = "thumb-tip";
<new XRHandJoint> = "index-finger-metacarpal";
<new XRHandJoint> = "index-finger-phalanx-proximal";
<new XRHandJoint> = "index-finger-phalanx-intermediate";
<new XRHandJoint> = "index-finger-phalanx-distal";
<new XRHandJoint> = "index-finger-tip";
<new XRHandJoint> = "middle-finger-metacarpal";
<new XRHandJoint> = "middle-finger-phalanx-proximal";
<new XRHandJoint> = "middle-finger-phalanx-intermediate";
<new XRHandJoint> = "middle-finger-phalanx-distal";
<new XRHandJoint> = "middle-finger-tip";
<new XRHandJoint> = "ring-finger-metacarpal";
<new XRHandJoint> = "ring-finger-phalanx-proximal";
<new XRHandJoint> = "ring-finger-phalanx-intermediate";
<new XRHandJoint> = "ring-finger-phalanx-distal";
<new XRHandJoint> = "ring-finger-tip";
<new XRHandJoint> = "pinky-finger-metacarpal";
<new XRHandJoint> = "pinky-finger-phalanx-proximal";
<new XRHandJoint> = "pinky-finger-phalanx-intermediate";
<new XRHandJoint> = "pinky-finger-phalanx-distal";
<new XRHandJoint> = "pinky-finger-tip";
<new XRHitTestTrackableType> = "point";
<new XRHitTestTrackableType> = "plane";
<new XRHitTestTrackableType> = "mesh";
<new XRReflectionFormat> = "srgba8";
<new XRReflectionFormat> = "rgba16f";
<new XRSessionMode> = "inline";
<new XRSessionMode> = "immersive-vr";
<new XRSessionMode> = "immersive-ar";
<new XRVisibilityState> = "visible";
<new XRVisibilityState> = "visible-blurred";
<new XRVisibilityState> = "hidden";
<new XRReferenceSpaceType> = "viewer";
<new XRReferenceSpaceType> = "local";
<new XRReferenceSpaceType> = "local-floor";
<new XRReferenceSpaceType> = "bounded-floor";
<new XRReferenceSpaceType> = "unbounded";
<new XREye> = "none";
<new XREye> = "left";
<new XREye> = "right";
<new XRHandedness> = "none";
<new XRHandedness> = "left";
<new XRHandedness> = "right";
<new XRTargetRayMode> = "gaze";
<new XRTargetRayMode> = "tracked-pointer";
<new XRTargetRayMode> = "screen";
<new XRLayerLayout> = "default";
<new XRLayerLayout> = "mono";
<new XRLayerLayout> = "stereo";
<new XRLayerLayout> = "stereo-left-right";
<new XRLayerLayout> = "stereo-top-bottom";
<new XRTextureType> = "texture";
<new XRTextureType> = "texture-array";
<new XMLHttpRequestResponseType> = "";
<new XMLHttpRequestResponseType> = "arraybuffer";
<new XMLHttpRequestResponseType> = "blob";
<new XMLHttpRequestResponseType> = "document";
<new XMLHttpRequestResponseType> = "json";
<new XMLHttpRequestResponseType> = "text";

<new ApplePayContactField> = "email";
<new ApplePayContactField> = "name";
<new ApplePayContactField> = "phoneticName";
<new ApplePayContactField> = "phone";
<new ApplePayContactField> = "postalAddress";
<new ApplePayErrorCode> = "unknown";
<new ApplePayErrorCode> = "shippingContactInvalid";
<new ApplePayErrorCode> = "billingContactInvalid";
<new ApplePayErrorCode> = "addressUnserviceable";
<new ApplePayErrorCode> = "couponCodeInvalid";
<new ApplePayErrorCode> = "couponCodeExpired";
<new ApplePayErrorContactField> = "phoneNumber";
<new ApplePayErrorContactField> = "emailAddress";
<new ApplePayErrorContactField> = "name";
<new ApplePayErrorContactField> = "phoneticName";
<new ApplePayErrorContactField> = "postalAddress";
<new ApplePayErrorContactField> = "addressLines";
<new ApplePayErrorContactField> = "subLocality";
<new ApplePayErrorContactField> = "locality";
<new ApplePayErrorContactField> = "postalCode";
<new ApplePayErrorContactField> = "subAdministrativeArea";
<new ApplePayErrorContactField> = "administrativeArea";
<new ApplePayErrorContactField> = "country";
<new ApplePayErrorContactField> = "countryCode";
<new ApplePayInstallmentItemType> = "generic";
<new ApplePayInstallmentItemType> = "phone";
<new ApplePayInstallmentItemType> = "pad";
<new ApplePayInstallmentItemType> = "watch";
<new ApplePayInstallmentItemType> = "mac";
<new ApplePayInstallmentRetailChannel> = "unknown";
<new ApplePayInstallmentRetailChannel> = "app";
<new ApplePayInstallmentRetailChannel> = "web";
<new ApplePayInstallmentRetailChannel> = "inStore";
<new ApplePayLineItemType> = "pending";
<new ApplePayLineItemType> = "final";
<new ApplePayMerchantCapability> = "supports3DS";
<new ApplePayMerchantCapability> = "supportsEMV";
<new ApplePayMerchantCapability> = "supportsCredit";
<new ApplePayMerchantCapability> = "supportsDebit";
<new ApplePayPaymentMethodType> = "debit";
<new ApplePayPaymentMethodType> = "credit";
<new ApplePayPaymentMethodType> = "prepaid";
<new ApplePayPaymentMethodType> = "store";
<new ApplePayPaymentPassActivationState> = "activated";
<new ApplePayPaymentPassActivationState> = "requiresActivation";
<new ApplePayPaymentPassActivationState> = "activating";
<new ApplePayPaymentPassActivationState> = "suspended";
<new ApplePayPaymentPassActivationState> = "deactivated";
<new ApplePayShippingType> = "shipping";
<new ApplePayShippingType> = "delivery";
<new ApplePayShippingType> = "storePickup";
<new ApplePayShippingType> = "servicePickup";
<new ApplePayPaymentTiming> = "immediate";
<new ApplePayPaymentTiming> = "recurring";
<new ApplePayPaymentTiming> = "deferred";
<new ApplePayRecurringPaymentDateUnit> = "year";
<new ApplePayRecurringPaymentDateUnit> = "month";
<new ApplePayRecurringPaymentDateUnit> = "day";
<new ApplePayRecurringPaymentDateUnit> = "hour";
<new ApplePayRecurringPaymentDateUnit> = "minute";
<new ApplePaySetupFeatureState> = "unsupported";
<new ApplePaySetupFeatureState> = "supported";
<new ApplePaySetupFeatureState> = "supplementarySupported";
<new ApplePaySetupFeatureState> = "completed";
<new ApplePaySetupFeatureType> = "applePay";
<new ApplePaySetupFeatureType> = "appleCard";
<new ApplePayShippingContactEditingMode> = "enabled";
<new ApplePayShippingContactEditingMode> = "storePickup";
<new AttestationConveyancePreference> = "none";
<new AttestationConveyancePreference> = "indirect";
<new AttestationConveyancePreference> = "direct";
<new AudioContextLatencyCategory> = "balanced";
<new AudioContextLatencyCategory> = "interactive";
<new AudioContextLatencyCategory> = "playback";
<new AudioContextState> = "suspended";
<new AudioContextState> = "running";
<new AudioContextState> = "interrupted";
<new AudioContextState> = "closed";
<new AuthenticatorAttachment> = "platform";
<new AuthenticatorAttachment> = "cross-platform";
<new AuthenticatorTransport> = "usb";
<new AuthenticatorTransport> = "nfc";
<new AuthenticatorTransport> = "ble";
<new AuthenticatorTransport> = "internal";
<new AutomationRate> = "a-rate";
<new AutomationRate> = "k-rate";
<new BiquadFilterType> = "lowpass";
<new BiquadFilterType> = "highpass";
<new BiquadFilterType> = "bandpass";
<new BiquadFilterType> = "lowshelf";
<new BiquadFilterType> = "highshelf";
<new BiquadFilterType> = "peaking";
<new BiquadFilterType> = "notch";
<new BiquadFilterType> = "allpass";
<new CanvasDirection> = "ltr";
<new CanvasDirection> = "rtl";
<new CanvasDirection> = "inherit";
<new CanvasFillRule> = "nonzero";
<new CanvasFillRule> = "evenodd";
<new CanvasLineCap> = "butt";
<new CanvasLineCap> = "round";
<new CanvasLineCap> = "square";
<new CanvasLineJoin> = "round";
<new CanvasLineJoin> = "bevel";
<new CanvasLineJoin> = "miter";
<new CanvasTextAlign> = "start";
<new CanvasTextAlign> = "end";
<new CanvasTextAlign> = "left";
<new CanvasTextAlign> = "right";
<new CanvasTextAlign> = "center";
<new CanvasTextBaseline> = "top";
<new CanvasTextBaseline> = "hanging";
<new CanvasTextBaseline> = "middle";
<new CanvasTextBaseline> = "alphabetic";
<new CanvasTextBaseline> = "ideographic";
<new CanvasTextBaseline> = "bottom";
<new ChannelCountMode> = "max";
<new ChannelCountMode> = "clamped-max";
<new ChannelCountMode> = "explicit";
<new ChannelInterpretation> = "speakers";
<new ChannelInterpretation> = "discrete";
<new PresentationStyle> = "unspecified";
<new PresentationStyle> = "inline";
<new PresentationStyle> = "attachment";
<new ColorGamut> = "srgb";
<new ColorGamut> = "p3";
<new ColorGamut> = "rec2020";
<new CompositeOperation> = "replace";
<new CompositeOperation> = "add";
<new CompositeOperation> = "accumulate";
<new CompositeOperationOrAuto> = "replace";
<new CompositeOperationOrAuto> = "add";
<new CompositeOperationOrAuto> = "accumulate";
<new CompositeOperationOrAuto> = "auto";
<new ContactProperty> = "email";
<new ContactProperty> = "name";
<new ContactProperty> = "tel";
<new CredentialMediationRequirement> = "silent";
<new CredentialMediationRequirement> = "optional";
<new CredentialMediationRequirement> = "required";
<new KeyType> = "public";
<new KeyType> = "private";
<new KeyType> = "secret";
<new CryptoKeyUsage> = "encrypt";
<new CryptoKeyUsage> = "decrypt";
<new CryptoKeyUsage> = "sign";
<new CryptoKeyUsage> = "verify";
<new CryptoKeyUsage> = "deriveKey";
<new CryptoKeyUsage> = "deriveBits";
<new CryptoKeyUsage> = "wrapKey";
<new CryptoKeyUsage> = "unwrapKey";
<new DeviceOrientationOrMotionPermissionState> = "granted";
<new DeviceOrientationOrMotionPermissionState> = "denied";
<new DistanceModelType> = "linear";
<new DistanceModelType> = "inverse";
<new DistanceModelType> = "exponential";
<new DocumentReadyState> = "loading";
<new DocumentReadyState> = "interactive";
<new DocumentReadyState> = "complete";
<new EndingType> = "transparent";
<new EndingType> = "native";
<new FakeXRButtonType> = "grip";
<new FakeXRButtonType> = "touchpad";
<new FakeXRButtonType> = "thumbstick";
<new FakeXRButtonType> = "optional-button";
<new FakeXRButtonType> = "optional-thumbstick";
<new FetchReferrerPolicy> = "";
<new FetchReferrerPolicy> = "no-referrer";
<new FetchReferrerPolicy> = "no-referrer-when-downgrade";
<new FetchReferrerPolicy> = "same-origin";
<new FetchReferrerPolicy> = "origin";
<new FetchReferrerPolicy> = "strict-origin";
<new FetchReferrerPolicy> = "origin-when-cross-origin";
<new FetchReferrerPolicy> = "strict-origin-when-cross-origin";
<new FetchReferrerPolicy> = "unsafe-url";
<new FetchRequestDestination> = "";
<new FetchRequestDestination> = "audio";
<new FetchRequestDestination> = "audioworklet";
<new FetchRequestDestination> = "document";
<new FetchRequestDestination> = "embed";
<new FetchRequestDestination> = "font";
<new FetchRequestDestination> = "image";
<new FetchRequestDestination> = "manifest";
<new FetchRequestDestination> = "model";
<new FetchRequestDestination> = "object";
<new FetchRequestDestination> = "paintworklet";
<new FetchRequestDestination> = "report";
<new FetchRequestDestination> = "script";
<new FetchRequestDestination> = "serviceworker";
<new FetchRequestDestination> = "sharedworker";
<new FetchRequestDestination> = "style";
<new FetchRequestDestination> = "track";
<new FetchRequestDestination> = "video";
<new FetchRequestDestination> = "worker";
<new FetchRequestDestination> = "xslt";
<new FetchRequestCache> = "default";
<new FetchRequestCache> = "no-store";
<new FetchRequestCache> = "reload";
<new FetchRequestCache> = "no-cache";
<new FetchRequestCache> = "force-cache";
<new FetchRequestCache> = "only-if-cached";
<new FetchRequestCredentials> = "omit";
<new FetchRequestCredentials> = "same-origin";
<new FetchRequestCredentials> = "include";
<new FetchRequestMode> = "navigate";
<new FetchRequestMode> = "same-origin";
<new FetchRequestMode> = "no-cors";
<new FetchRequestMode> = "cors";
<new FetchRequestRedirect> = "follow";
<new FetchRequestRedirect> = "error";
<new FetchRequestRedirect> = "manual";
<new FetchResponseType> = "basic";
<new FetchResponseType> = "cors";
<new FetchResponseType> = "default";
<new FetchResponseType> = "error";
<new FetchResponseType> = "opaque";
<new FetchResponseType> = "opaqueredirect";
<new FillMode> = "none";
<new FillMode> = "forwards";
<new FillMode> = "backwards";
<new FillMode> = "both";
<new FillMode> = "auto";
<new FontFaceLoadStatus> = "unloaded";
<new FontFaceLoadStatus> = "loading";
<new FontFaceLoadStatus> = "loaded";
<new FontFaceLoadStatus> = "error";
<new FontFaceSetLoadStatus> = "loading";
<new FontFaceSetLoadStatus> = "loaded";
<new HdrMetadataType> = "smpteSt2086";
<new HdrMetadataType> = "smpteSt2094-10";
<new HdrMetadataType> = "smpteSt2094-40";
<new ScrollRestoration> = "auto";
<new ScrollRestoration> = "manual";
<new VideoPresentationMode> = "inline";
<new VideoPresentationMode> = "fullscreen";
<new VideoPresentationMode> = "picture-in-picture";
<new IDBCursorDirection> = "next";
<new IDBCursorDirection> = "nextunique";
<new IDBCursorDirection> = "prev";
<new IDBCursorDirection> = "prevunique";
<new IDBRequestReadyState> = "pending";
<new IDBRequestReadyState> = "done";
<new IDBTransactionDurability> = "strict";
<new IDBTransactionDurability> = "relaxed";
<new IDBTransactionDurability> = "default";
<new IDBTransactionMode> = "readonly";
<new IDBTransactionMode> = "readwrite";
<new IDBTransactionMode> = "versionchange";
<new ImageOrientation> = "none";
<new ImageOrientation> = "flipY";
<new PremultiplyAlpha> = "none";
<new PremultiplyAlpha> = "premultiply";
<new PremultiplyAlpha> = "default";
<new ColorSpaceConversion> = "none";
<new ColorSpaceConversion> = "default";
<new ResizeQuality> = "pixelated";
<new ResizeQuality> = "low";
<new ResizeQuality> = "medium";
<new ResizeQuality> = "high";
<new ImageSmoothingQuality> = "low";
<new ImageSmoothingQuality> = "medium";
<new ImageSmoothingQuality> = "high";
<new PageOverlayType> = "view";
<new PageOverlayType> = "document";
<new CachePolicy> = "UseProtocolCachePolicy";
<new CachePolicy> = "ReloadIgnoringCacheData";
<new CachePolicy> = "ReturnCacheDataElseLoad";
<new CachePolicy> = "ReturnCacheDataDontLoad";
<new ResourceLoadPriority> = "ResourceLoadPriorityVeryLow";
<new ResourceLoadPriority> = "ResourceLoadPriorityLow";
<new ResourceLoadPriority> = "ResourceLoadPriorityMedium";
<new ResourceLoadPriority> = "ResourceLoadPriorityHigh";
<new ResourceLoadPriority> = "ResourceLoadPriorityVeryHigh";
<new AutoFillButtonType> = "None";
<new AutoFillButtonType> = "Contacts";
<new AutoFillButtonType> = "Credentials";
<new AutoFillButtonType> = "StrongPassword";
<new AutoFillButtonType> = "CreditCard";
<new UserInterfaceLayoutDirection> = "LTR";
<new UserInterfaceLayoutDirection> = "RTL";
<new BaseWritingDirection> = "Natural";
<new BaseWritingDirection> = "Ltr";
<new BaseWritingDirection> = "Rtl";
<new EventThrottlingBehavior> = "responsive";
<new EventThrottlingBehavior> = "unresponsive";
<new CompositingPolicy> = "normal";
<new CompositingPolicy> = "conservative";
<new PlaybackControlsPurpose> = "ControlsManager";
<new PlaybackControlsPurpose> = "NowPlaying";
<new MediaSessionState> = "Idle";
<new MediaSessionState> = "Autoplaying";
<new MediaSessionState> = "Playing";
<new MediaSessionState> = "Paused";
<new MediaSessionState> = "Interrupted";
<new ContentSizeCategory> = "L";
<new ContentSizeCategory> = "XXXL";
<new TreeType> = "Tree";
<new TreeType> = "ShadowIncludingTree";
<new TreeType> = "ComposedTree";
<new SimulatedWebGLContextEvent> = "ContextChange";
<new SimulatedWebGLContextEvent> = "GPUStatusFailure";
<new SimulatedWebGLContextEvent> = "Timeout";
<new AutoplayPolicy> = "Default";
<new AutoplayPolicy> = "Allow";
<new AutoplayPolicy> = "AllowWithoutSound";
<new AutoplayPolicy> = "Deny";
<new RequestedGPU> = "default";
<new RequestedGPU> = "low-power";
<new RequestedGPU> = "high-performance";
<new EditingBehaviorType> = "mac";
<new EditingBehaviorType> = "windows";
<new EditingBehaviorType> = "unix";
<new EditingBehaviorType> = "ios";
<new FontLoadTimingOverride> = "None";
<new FontLoadTimingOverride> = "Block";
<new FontLoadTimingOverride> = "Swap";
<new FontLoadTimingOverride> = "Failure";
<new ForcedAccessibilityValue> = "system";
<new ForcedAccessibilityValue> = "on";
<new ForcedAccessibilityValue> = "off";
<new FrameFlatteningValue> = "Disabled";
<new FrameFlatteningValue> = "EnabledForNonFullScreenIFrames";
<new FrameFlatteningValue> = "FullyEnabled";
<new PDFImageCachingPolicy> = "Enabled";
<new PDFImageCachingPolicy> = "BelowMemoryLimit";
<new PDFImageCachingPolicy> = "Disabled";
<new PDFImageCachingPolicy> = "ClipBoundsOnly";
<new StorageBlockingPolicy> = "AllowAll";
<new StorageBlockingPolicy> = "BlockThirdParty";
<new StorageBlockingPolicy> = "BlockAll";
<new SystemLayoutDirection> = "LTR";
<new SystemLayoutDirection> = "RTL";
<new TrackKind> = "Subtitles";
<new TrackKind> = "Captions";
<new TrackKind> = "TextDescriptions";
<new UserInterfaceDirectionPolicy> = "Content";
<new UserInterfaceDirectionPolicy> = "System";
<new IterationCompositeOperation> = "replace";
<new IterationCompositeOperation> = "accumulate";
<new DeviceType> = "none";
<new DeviceType> = "airplay";
<new DeviceType> = "tvout";
<new MediaDecodingType> = "file";
<new MediaDecodingType> = "media-source";
<new MediaDeviceKind> = "audioinput";
<new MediaDeviceKind> = "audiooutput";
<new MediaDeviceKind> = "videoinput";
<new DisplayCaptureSurfaceType> = "monitor";
<new DisplayCaptureSurfaceType> = "window";
<new DisplayCaptureSurfaceType> = "application";
<new DisplayCaptureSurfaceType> = "browser";
<new MediaEncodingType> = "record";
<new MediaEncodingType> = "transmission";
<new MediaKeyEncryptionScheme> = "cenc";
<new MediaKeyEncryptionScheme> = "cbcs";
<new MediaKeyMessageType> = "license-request";
<new MediaKeyMessageType> = "license-renewal";
<new MediaKeyMessageType> = "license-release";
<new MediaKeyMessageType> = "individualization-request";
<new MediaKeySessionType> = "temporary";
<new MediaKeySessionType> = "persistent-usage-record";
<new MediaKeySessionType> = "persistent-license";
<new MediaKeysRequirement> = "required";
<new MediaKeysRequirement> = "optional";
<new MediaKeysRequirement> = "not-allowed";
<new MediaKeyStatus> = "usable";
<new MediaKeyStatus> = "expired";
<new MediaKeyStatus> = "released";
<new MediaKeyStatus> = "output-restricted";
<new MediaKeyStatus> = "output-downscaled";
<new MediaKeyStatus> = "status-pending";
<new MediaKeyStatus> = "internal-error";
<new sequence_MediaKeyStatus_> = [<MediaKeyStatus>];
<new MediaKeyStatus> = <sequence_MediaKeyStatus_>[0];
<new RecordingState> = "inactive";
<new RecordingState> = "recording";
<new RecordingState> = "paused";
<new sequence_RecordingState_> = [<RecordingState>];
<new RecordingState> = <sequence_RecordingState_>[0];
<new MediaSessionAction> = "play";
<new MediaSessionAction> = "pause";
<new MediaSessionAction> = "seekbackward";
<new MediaSessionAction> = "seekforward";
<new MediaSessionAction> = "previoustrack";
<new MediaSessionAction> = "nexttrack";
<new MediaSessionAction> = "skipad";
<new MediaSessionAction> = "stop";
<new MediaSessionAction> = "seekto";
<new MediaSessionAction> = "settrack";
<new sequence_MediaSessionAction_> = [<MediaSessionAction>];
<new MediaSessionAction> = <sequence_MediaSessionAction_>[0];
<new MediaSessionCoordinatorState> = "waiting";
<new MediaSessionCoordinatorState> = "joined";
<new MediaSessionCoordinatorState> = "closed";
<new sequence_MediaSessionCoordinatorState_> = [<MediaSessionCoordinatorState>];
<new MediaSessionCoordinatorState> = <sequence_MediaSessionCoordinatorState_>[0];
<new MediaSessionPlaybackState> = "none";
<new MediaSessionPlaybackState> = "paused";
<new MediaSessionPlaybackState> = "playing";
<new sequence_MediaSessionPlaybackState_> = [<MediaSessionPlaybackState>];
<new MediaSessionPlaybackState> = <sequence_MediaSessionPlaybackState_>[0];
<new MediaSessionReadyState> = "havenothing";
<new MediaSessionReadyState> = "havemetadata";
<new MediaSessionReadyState> = "havecurrentdata";
<new MediaSessionReadyState> = "havefuturedata";
<new MediaSessionReadyState> = "haveenoughdata";
<new sequence_MediaSessionReadyState_> = [<MediaSessionReadyState>];
<new MediaSessionReadyState> = <sequence_MediaSessionReadyState_>[0];
<new EndOfStreamError> = "network";
<new EndOfStreamError> = "decode";
<new ReadyState> = "closed";
<new ReadyState> = "open";
<new ReadyState> = "ended";
<new MediaStreamTrackState> = "live";
<new MediaStreamTrackState> = "ended";
<new sequence_MediaStreamTrackState_> = [<MediaStreamTrackState>];
<new MediaStreamTrackState> = <sequence_MediaStreamTrackState_>[0];
<new DecisionPoint> = "afterWillSendRequest";
<new DecisionPoint> = "afterRedirect";
<new DecisionPoint> = "afterResponse";
<new DecisionPoint> = "afterAddData";
<new DecisionPoint> = "afterFinishedAddingData";
<new DecisionPoint> = "never";
<new sequence_DecisionPoint_> = [<DecisionPoint>];
<new DecisionPoint> = <sequence_DecisionPoint_>[0];
<new Decision> = "allow";
<new Decision> = "block";
<new MockHidStage> = "info";
<new MockHidStage> = "request";
<new MockHidSubStage> = "init";
<new MockHidSubStage> = "msg";
<new MockHidError> = "success";
<new MockHidError> = "data-not-sent";
<new MockHidError> = "empty-report";
<new MockHidError> = "wrong-channel-id";
<new MockHidError> = "malicious-payload";
<new MockHidError> = "unsupported-options";
<new MockHidError> = "wrong-nonce";
<new sequence_MockHidError_> = [<MockHidError>];
<new MockHidError> = <sequence_MockHidError_>[0];
<new MockNfcError> = "success";
<new MockNfcError> = "no-tags";
<new MockNfcError> = "wrong-tag-type";
<new MockNfcError> = "no-connections";
<new MockNfcError> = "malicious-payload";
<new sequence_MockNfcError_> = [<MockNfcError>];
<new MockNfcError> = <sequence_MockNfcError_>[0];
<new UserVerification> = "no";
<new UserVerification> = "yes";
<new UserVerification> = "cancel";
<new UserVerification> = "presence";
<new sequence_UserVerification_> = [<UserVerification>];
<new UserVerification> = <sequence_UserVerification_>[0];
<new NotificationDirection> = "auto";
<new NotificationDirection> = "ltr";
<new NotificationDirection> = "rtl";
<new sequence_NotificationDirection_> = [<NotificationDirection>];
<new NotificationDirection> = <sequence_NotificationDirection_>[0];
<new NotificationPermission> = "default";
<new NotificationPermission> = "denied";
<new NotificationPermission> = "granted";
<new sequence_NotificationPermission_> = [<NotificationPermission>];
<new NotificationPermission> = <sequence_NotificationPermission_>[0];
<new OffscreenRenderingContextType> = "2d";
<new OffscreenRenderingContextType> = "webgl";
<new OffscreenRenderingContextType> = "webgl2";
<new sequence_OffscreenRenderingContextType_> = [<OffscreenRenderingContextType>];
<new OffscreenRenderingContextType> = <sequence_OffscreenRenderingContextType_>[0];
<new OscillatorType> = "sine";
<new OscillatorType> = "square";
<new OscillatorType> = "sawtooth";
<new OscillatorType> = "triangle";
<new OscillatorType> = "custom";
<new sequence_OscillatorType_> = [<OscillatorType>];
<new OscillatorType> = <sequence_OscillatorType_>[0];
<new OverSampleType> = "none";
<new OverSampleType> = "2x";
<new OverSampleType> = "4x";
<new sequence_OverSampleType_> = [<OverSampleType>];
<new OverSampleType> = <sequence_OverSampleType_>[0];
<new PanningModelType> = "equalpower";
<new PanningModelType> = "HRTF";
<new sequence_PanningModelType_> = [<PanningModelType>];
<new PanningModelType> = <sequence_PanningModelType_>[0];
<new PaymentComplete> = "fail";
<new PaymentComplete> = "success";
<new PaymentComplete> = "unknown";
<new sequence_PaymentComplete_> = [<PaymentComplete>];
<new PaymentComplete> = <sequence_PaymentComplete_>[0];
<new PaymentShippingType> = "shipping";
<new PaymentShippingType> = "delivery";
<new PaymentShippingType> = "pickup";
<new sequence_PaymentShippingType_> = [<PaymentShippingType>];
<new PaymentShippingType> = <sequence_PaymentShippingType_>[0];
<new NavigationType> = "navigate";
<new NavigationType> = "reload";
<new NavigationType> = "back_forward";
<new NavigationType> = "prerender";
<new sequence_NavigationType_> = [<NavigationType>];
<new NavigationType> = <sequence_NavigationType_>[0];
<new PermissionName> = "accelerometer";
<new PermissionName> = "background-fetch";
<new PermissionName> = "bluetooth";
<new PermissionName> = "camera";
<new PermissionName> = "display-capture";
<new PermissionName> = "geolocation";
<new PermissionName> = "gyroscope";
<new PermissionName> = "magnetometer";
<new PermissionName> = "microphone";
<new PermissionName> = "midi";
<new PermissionName> = "nfc";
<new PermissionName> = "notifications";
<new PermissionName> = "speaker-selection";
<new PermissionState> = "granted";
<new PermissionState> = "denied";
<new PermissionState> = "prompt";
<new PlaybackDirection> = "normal";
<new PlaybackDirection> = "reverse";
<new PlaybackDirection> = "alternate";
<new PlaybackDirection> = "alternate-reverse";
<new PredefinedColorSpace> = "srgb";
<new PredefinedColorSpace> = "display-p3";
<new PublicKeyCredentialType> = "public-key";
<new RemotePlaybackState> = "connecting";
<new RemotePlaybackState> = "connected";
<new RemotePlaybackState> = "disconnected";
<new RTCIceTransportPolicy> = "relay";
<new RTCIceTransportPolicy> = "all";
<new RTCBundlePolicy> = "balanced";
<new RTCBundlePolicy> = "max-compat";
<new RTCBundlePolicy> = "max-bundle";
<new RTCPMuxPolicy> = "negotiate";
<new RTCPMuxPolicy> = "require";
<new RTCDataChannelState> = "connecting";
<new RTCDataChannelState> = "open";
<new RTCDataChannelState> = "closing";
<new RTCDataChannelState> = "closed";
<new RTCDegradationPreference> = "maintain-framerate";
<new RTCDegradationPreference> = "maintain-resolution";
<new RTCDegradationPreference> = "balanced";
<new RTCDtlsTransportState> = "new";
<new RTCDtlsTransportState> = "connecting";
<new RTCDtlsTransportState> = "connected";
<new RTCDtlsTransportState> = "closed";
<new RTCDtlsTransportState> = "failed";
<new RTCDtxStatus> = "disabled";
<new RTCDtxStatus> = "enabled";
<new RTCEncodedVideoFrameType> = "empty";
<new RTCEncodedVideoFrameType> = "key";
<new RTCEncodedVideoFrameType> = "delta";
<new RTCIceCandidateType> = "host";
<new RTCIceCandidateType> = "srflx";
<new RTCIceCandidateType> = "prflx";
<new RTCIceCandidateType> = "relay";
<new RTCIceComponent> = "rtp";
<new RTCIceComponent> = "rtcp";
<new RTCIceConnectionState> = "new";
<new RTCIceConnectionState> = "checking";
<new RTCIceConnectionState> = "connected";
<new RTCIceConnectionState> = "completed";
<new RTCIceConnectionState> = "failed";
<new RTCIceConnectionState> = "disconnected";
<new RTCIceConnectionState> = "closed";
<new RTCIceGatheringState> = "new";
<new RTCIceGatheringState> = "gathering";
<new RTCIceGatheringState> = "complete";
<new RTCIceProtocol> = "udp";
<new RTCIceProtocol> = "tcp";
<new RTCIceTcpCandidateType> = "active";
<new RTCIceTcpCandidateType> = "passive";
<new RTCIceTcpCandidateType> = "so";
<new RTCIceTransportState> = "new";
<new RTCIceTransportState> = "checking";
<new RTCIceTransportState> = "connected";
<new RTCIceTransportState> = "completed";
<new RTCIceTransportState> = "failed";
<new RTCIceTransportState> = "disconnected";
<new RTCIceTransportState> = "closed";
<new RTCPeerConnectionState> = "new";
<new RTCPeerConnectionState> = "connecting";
<new RTCPeerConnectionState> = "connected";
<new RTCPeerConnectionState> = "disconnected";
<new RTCPeerConnectionState> = "failed";
<new RTCPeerConnectionState> = "closed";
<new RTCPriorityType> = "very-low";
<new RTCPriorityType> = "low";
<new RTCPriorityType> = "medium";
<new RTCPriorityType> = "high";
<new RTCRtpSFrameTransformRole> = "encrypt";
<new RTCRtpSFrameTransformRole> = "decrypt";
<new RTCRtpSFrameTransformCompatibilityMode> = "none";
<new RTCRtpSFrameTransformCompatibilityMode> = "H264";
<new RTCRtpSFrameTransformCompatibilityMode> = "VP8";
<new RTCRtpSFrameTransformErrorEventType> = "authentication";
<new RTCRtpSFrameTransformErrorEventType> = "keyID";
<new RTCRtpSFrameTransformErrorEventType> = "other";
<new RTCRtpSFrameTransformErrorEventType> = "syntax";
<new RTCRtpTransceiverDirection> = "sendrecv";
<new RTCRtpTransceiverDirection> = "sendonly";
<new RTCRtpTransceiverDirection> = "recvonly";
<new RTCRtpTransceiverDirection> = "inactive";
<new RTCSdpType> = "offer";
<new RTCSdpType> = "pranswer";
<new RTCSdpType> = "answer";
<new RTCSdpType> = "rollback";
<new RTCSignalingState> = "stable";
<new RTCSignalingState> = "have-local-offer";
<new RTCSignalingState> = "have-remote-offer";
<new RTCSignalingState> = "have-local-pranswer";
<new RTCSignalingState> = "have-remote-pranswer";
<new RTCSignalingState> = "closed";
<new RTCStatsType> = "candidate-pair";
<new RTCStatsType> = "certificate";
<new RTCStatsType> = "codec";
<new RTCStatsType> = "data-channel";
<new RTCStatsType> = "inbound-rtp";
<new RTCStatsType> = "local-candidate";
<new RTCStatsType> = "media-source";
<new RTCStatsType> = "outbound-rtp";
<new RTCStatsType> = "peer-connection";
<new RTCStatsType> = "remote-candidate";
<new RTCStatsType> = "remote-inbound-rtp";
<new RTCStatsType> = "track";
<new RTCStatsType> = "transport";
<new RTCStatsIceCandidatePairState> = "frozen";
<new RTCStatsIceCandidatePairState> = "waiting";
<new RTCStatsIceCandidatePairState> = "inprogress";
<new RTCStatsIceCandidatePairState> = "failed";
<new RTCStatsIceCandidatePairState> = "succeeded";
<new RTCStatsIceCandidatePairState> = "cancelled";
<new RTCCodecType> = "encode";
<new RTCCodecType> = "decode";
<new ScrollBehavior> = "auto";
<new ScrollBehavior> = "instant";
<new ScrollBehavior> = "smooth";
<new ScrollLogicalPosition> = "start";
<new ScrollLogicalPosition> = "center";
<new ScrollLogicalPosition> = "end";
<new ScrollLogicalPosition> = "nearest";
<new SecurityPolicyViolationEventDisposition> = "enforce";
<new SecurityPolicyViolationEventDisposition> = "report";
<new ServiceWorkerState> = "installing";
<new ServiceWorkerState> = "installed";
<new ServiceWorkerState> = "activating";
<new ServiceWorkerState> = "activated";
<new ServiceWorkerState> = "redundant";
<new FrameType> = "auxiliary";
<new FrameType> = "top-level";
<new FrameType> = "nested";
<new FrameType> = "none";
<new ServiceWorkerClientType> = "window";
<new ServiceWorkerClientType> = "worker";
<new ServiceWorkerClientType> = "sharedworker";
<new ServiceWorkerClientType> = "all";
<new ServiceWorkerUpdateViaCache> = "imports";
<new ServiceWorkerUpdateViaCache> = "all";
<new ServiceWorkerUpdateViaCache> = "none";
<new ShadowRootMode> = "user-agent";
<new ShadowRootMode> = "closed";
<new ShadowRootMode> = "open";
<new AppendMode> = "segments";
<new AppendMode> = "sequence";
<new SpeechRecognitionErrorCode> = "no-speech";
<new SpeechRecognitionErrorCode> = "aborted";
<new SpeechRecognitionErrorCode> = "audio-capture";
<new SpeechRecognitionErrorCode> = "network";
<new SpeechRecognitionErrorCode> = "not-allowed";
<new SpeechRecognitionErrorCode> = "service-not-allowed";
<new SpeechRecognitionErrorCode> = "bad-grammar";
<new SpeechRecognitionErrorCode> = "language-not-supported";
<new KeyFormat> = "raw";
<new KeyFormat> = "spki";
<new KeyFormat> = "pkcs8";
<new KeyFormat> = "jwk";
<new TextTrackMode> = "disabled";
<new TextTrackMode> = "hidden";
<new TextTrackMode> = "showing";
<new TextTrackKind> = "subtitles";
<new TextTrackKind> = "captions";
<new TextTrackKind> = "descriptions";
<new TextTrackKind> = "chapters";
<new TextTrackKind> = "metadata";
<new TextTrackKind> = "forced";
<new TransferFunction> = "srgb";
<new TransferFunction> = "pq";
<new TransferFunction> = "hlg";
<new UserVerificationRequirement> = "required";
<new UserVerificationRequirement> = "preferred";
<new UserVerificationRequirement> = "discouraged";
<new VisibilityState> = "hidden";
<new VisibilityState> = "visible";
<new AutoKeyword> = "auto";
<new AnimationPlayState> = "idle";
<new AnimationPlayState> = "running";
<new AnimationPlayState> = "paused";
<new AnimationPlayState> = "finished";
<new AnimationReplaceState> = "active";
<new AnimationReplaceState> = "removed";
<new AnimationReplaceState> = "persisted";
<new WebGLPowerPreference> = "default";
<new WebGLPowerPreference> = "low-power";
<new WebGLPowerPreference> = "high-performance";
<new WorkerType> = "classic";
<new WorkerType> = "module";

freememory();
freememory();
freememory();
freememory();

#ApplicationCache

#DOMParser
<new Document> = <DOMParser>.parseFromString(<DOMString>,<SupportedType>);
<new Document> = <DOMParser>.parseFromString(<htmlstring>,"text/html");

#XPathEvaluator
<new XPathExpression> = <XPathEvaluator>.createExpression("<xpath>");
<new XPathExpression> = <XPathEvaluator>.createExpression("<xpath>",<XPathNSResolver>);
<new XPathResult> = <XPathEvaluator>.evaluate("<xpath>",<Element>);
<new XPathResult> = <XPathEvaluator>.evaluate("<xpath>",<Element>,<XPathNSResolver>);
<new XPathResult> = <XPathEvaluator>.evaluate("<xpath>",<Element>,<XPathNSResolver>,<fuzzint>);
<new XPathResult> = <XPathEvaluator>.evaluate("<xpath>",<Element>,<XPathNSResolver>,<fuzzint>,<XPathResult>);
<new XPathResult> = <XPathEvaluator>.evaluate("<xpath>",document);
<new XPathResult> = <XPathEvaluator>.evaluate("<xpath>",document,null,XPathResult.ANY_TYPE,<XPathResult>);

#XPathResult

#XMLSerializer

#XSLTProcessor
<new DocumentFragment> = <XSLTProcessor>.transformToFragment(<Element>,<Document>);

#XPathNSResolver

#Document
<new XPathExpression> = <Document>.createExpression("<xpath>");
<new XPathExpression> = <Document>.createExpression("<xpath>",<XPathNSResolver>);
<new XPathResult> = <Document>.evaluate("<xpath>",<Element>);
<new XPathResult> = <Document>.evaluate("<xpath>",<Element>,<XPathNSResolver>);
<new XPathResult> = <Document>.evaluate("<xpath>",<Element>,<XPathNSResolver>,<fuzzint>);
<new XPathResult> = <Document>.evaluate("<xpath>",<Element>,<XPathNSResolver>,<fuzzint>,<XPathResult>);
<new XPathResult> = <Document>.evaluate("<xpath>",document);
<new XPathResult> = <Document>.evaluate("<xpath>",document,null,XPathResult.ANY_TYPE,<XPathResult>);

#Document

#XPathExpression
<new XPathResult> = <XPathExpression>.evaluate(<Element>,<fuzzint>);
<new XPathResult> = <XPathExpression>.evaluate(<Element>,<fuzzint>,<XPathResult>);

#AnimationEffectTiming

#AnimationTimeline

#Animation

#AnimationEffectReadOnly

#KeyframeEffectReadOnly

#AnimationEffectTimingReadOnly

#KeyframeEffect

#Element
<new Animation> = <Element>.animate(<sequence_Dictionary_>,<double>);
<new Animation> = <Element>.animate(<sequence_Dictionary_>,<KeyframeEffectOptions>);

#Document

#DocumentTimeline

#TimeRanges
<new double> = <TimeRanges>.start(<fuzzint>);
<new double> = <TimeRanges>.end(<fuzzint>);

#HTMLStyleElement
<HTMLStyleElement>.media = "<media_value>";
<HTMLStyleElement>.type = "<type_value>";

#HTMLAnchorElement
<HTMLAnchorElement>.target = "<target_value>";
<HTMLAnchorElement>.download = "<download_value>";
<HTMLAnchorElement>.ping = "<ping_value>";
<HTMLAnchorElement>.rel = "<rel_value>";
<HTMLAnchorElement>.hreflang = "<hreflang_value>";
<HTMLAnchorElement>.type = "<type_value>";
<HTMLAnchorElement>.referrerPolicy = "<referrerpolicy_value>";
<HTMLAnchorElement>.text = "<text_value>";
<HTMLAnchorElement>.coords = "<coords_value>";
<HTMLAnchorElement>.charset = "<charset_value>";
<HTMLAnchorElement>.name = "<name_value>";
<HTMLAnchorElement>.rev = "<rev_value>";
<HTMLAnchorElement>.shape = "<shape_value>";

#HTMLIFrameElement
<HTMLIFrameElement>.src = "<framesrc>";
<HTMLIFrameElement>.srcdoc = "<framesrc>";
<HTMLIFrameElement>.name = "<name_value>";
<HTMLIFrameElement>.width = "<width_value>";
<HTMLIFrameElement>.height = "<height_value>";
<HTMLIFrameElement>.referrerPolicy = "<referrerpolicy_value>";
<HTMLIFrameElement>.align = "<align_value>";
<HTMLIFrameElement>.scrolling = "<scrolling_value>";
<HTMLIFrameElement>.frameBorder = "<frameborder_value>";
<HTMLIFrameElement>.longDesc = "<longdesc_value>";
<HTMLIFrameElement>.marginHeight = "<marginheight_value>";
<HTMLIFrameElement>.marginWidth = "<marginheight_value>";

#HTMLTableElement
<HTMLTableElement>.caption = <HTMLTableCaptionElement>;
<new HTMLTableRowElement> = <HTMLTableElement>.insertRow(<fuzzint>);
<HTMLTableElement>.deleteRow(<fuzzint>);
<HTMLTableElement>.align = "<align_value>";
<HTMLTableElement>.border = "<border_value>";
<HTMLTableElement>.frame = "<frame_value>";
<HTMLTableElement>.rules = "<rules_value>";
<HTMLTableElement>.summary = "<summary_value>";
<HTMLTableElement>.width = "<width_value>";
<HTMLTableElement>.bgColor = "<bgcolor_value>";
<HTMLTableElement>.cellPadding = "<cellpadding_value>";
<HTMLTableElement>.cellSpacing = "<cellspacing_value>";

#HTMLHeadElement

#HTMLFrameElement
<HTMLFrameElement>.name = "<name_value>";
<HTMLFrameElement>.scrolling = "<scrolling_value>";
<HTMLFrameElement>.src = "<framesrc>";
<HTMLFrameElement>.frameBorder = "<frameborder_value>";
<HTMLFrameElement>.longDesc = "<longdesc_value>";
<HTMLFrameElement>.marginHeight = "<marginheight_value>";
<HTMLFrameElement>.marginWidth = "<marginwidth_value>";

#HTMLTableColElement
<HTMLTableColElement>.span = <fuzzint>;
<HTMLTableColElement>.align = "<align_value>";
<HTMLTableColElement>.vAlign = "<valign_value>";
<HTMLTableColElement>.width = "<width_value>";

#HTMLDialogElement

#HTMLTextAreaElement
<HTMLTextAreaElement>.cols = <fuzzint>;
<HTMLTextAreaElement>.dirName = "<dirname_value>";
<HTMLTextAreaElement>.inputMode = "<inputmode_value>";
<HTMLTextAreaElement>.maxLength = <fuzzint>;
<HTMLTextAreaElement>.minLength = <fuzzint>;
<HTMLTextAreaElement>.name = "<name_value>";
<HTMLTextAreaElement>.placeholder = "<placeholder_value>";
<HTMLTextAreaElement>.rows = <fuzzint>;
<HTMLTextAreaElement>.wrap = "<wrap_value>";
<HTMLTextAreaElement>.value = "<value_value>";
<HTMLTextAreaElement>.selectionStart = <fuzzint>;
<HTMLTextAreaElement>.selectionEnd = <fuzzint>;
<HTMLTextAreaElement>.setRangeText(<DOMString>,<fuzzint>,<fuzzint>);
<HTMLTextAreaElement>.setRangeText(<DOMString>,<fuzzint>,<fuzzint>,<SelectionMode>);
<HTMLTextAreaElement>.setSelectionRange(<fuzzint>);
<HTMLTextAreaElement>.setSelectionRange(<fuzzint>,<fuzzint>);
<HTMLTextAreaElement>.setSelectionRange(<fuzzint>,<fuzzint>,<DOMString>);

#HTMLButtonElement
<HTMLButtonElement>.formAction = "<formaction_value>";
<HTMLButtonElement>.formEnctype = "<formenctype_value>";
<HTMLButtonElement>.formMethod = "<formmethod_value>";
<HTMLButtonElement>.formTarget = "<formtarget_value>";
<HTMLButtonElement>.name = "<name_value>";
<HTMLButtonElement>.type = "<type_value>";
<HTMLButtonElement>.value = "<value_value>";

#HTMLOListElement
<HTMLOListElement>.start = <fuzzint>;
<HTMLOListElement>.type = "<type_value>";

#HTMLProgressElement

#HTMLQuoteElement
<HTMLQuoteElement>.cite = "<cite_value>";

#HTMLFormElement
<HTMLFormElement>.autocomplete = "<autocomplete_value>";
<HTMLFormElement>.enctype = "<enctype_value>";
<HTMLFormElement>.encoding = "<encoding_value>";
<HTMLFormElement>.method = "<method_value>";
<HTMLFormElement>.name = "<name_value>";
<HTMLFormElement>.target = "<target_value>";

#ValidityState

#HTMLHeadingElement
<HTMLHeadingElement>.align = "<align_value>";

#HTMLAudioElement

#HTMLLegendElement
<HTMLLegendElement>.align = "<align_value>";

#HTMLElement
<Element>.title = "<title_value>";
<Element>.lang = "<lang_value>";
<Element>.dir = "<dir_value>";
<Element>.tabIndex = <fuzzint>;
<Element>.accessKey = "<accesskey_value>";
<Element>.contextMenu = <HTMLMenuElement>;
<Element>.contentEditable = "<contenteditable_value>";

#HTMLSlotElement
<HTMLSlotElement>.name = "<name_value>";
<new NodeList> = <HTMLSlotElement>.assignedNodes(<AssignedNodesOptions>);

#HTMLPreElement
<HTMLPreElement>.width = <fuzzint>;

#HTMLKeygenElement
<HTMLKeygenElement>.keytype = "<keytype_value>";
<HTMLKeygenElement>.name = "<name_value>";

#HTMLSourceElement
<HTMLSourceElement>.src = "<src_value>";
<HTMLSourceElement>.type = "<type_value>";
<HTMLSourceElement>.srcset = "<srcset_value>";
<HTMLSourceElement>.sizes = "<sizes_value>";
<HTMLSourceElement>.media = "<media_value>";

#HTMLMetaElement
<HTMLMetaElement>.name = "<name_value>";
<HTMLMetaElement>.content = "<content_value>";
<HTMLMetaElement>.scheme = "<scheme_value>";

#HTMLBaseElement
<HTMLBaseElement>.href = "<href_value>";
<HTMLBaseElement>.target = "<target_value>";

#HTMLTableRowElement
<new Element> = <HTMLTableRowElement>.insertCell(<fuzzint>);
<HTMLTableRowElement>.deleteCell(<fuzzint>);
<HTMLTableRowElement>.align = "<align_value>";
<HTMLTableRowElement>.vAlign = "<valign_value>";
<HTMLTableRowElement>.bgColor = "<bgcolor_value>";

#HTMLTableCaptionElement
<HTMLTableCaptionElement>.align = "<align_value>";

#HTMLFrameSetElement
<HTMLFrameSetElement>.cols = "<cols_value>";
<HTMLFrameSetElement>.rows = "<rows_value>";

#HTMLMediaElement
<HTMLMediaElement>.src = "<audiosrc>";
<HTMLMediaElement>.src = "<videosrc>";
<HTMLMediaElement>.crossOrigin = "<crossorigin_value>";
<HTMLMediaElement>.preload = "<preload_value>";

#HTMLModElement
<HTMLModElement>.cite = "<cite_value>";
<HTMLModElement>.dateTime = "<datetime_value>";

#HTMLParagraphElement
<HTMLParagraphElement>.align = "<align_value>";

#HTMLObjectElement
<HTMLObjectElement>.data = "<data_value>";
<HTMLObjectElement>.type = "<type_value>";
<HTMLObjectElement>.name = "<name_value>";
<HTMLObjectElement>.useMap = "<usemap_value>";
<HTMLObjectElement>.width = "<width_value>";
<HTMLObjectElement>.height = "<height_value>";
<HTMLObjectElement>.align = "<align_value>";
<HTMLObjectElement>.archive = "<archive_value>";
<HTMLObjectElement>.code = "<code_value>";
<HTMLObjectElement>.hspace = <fuzzint>;
<HTMLObjectElement>.standby = "<standby_value>";
<HTMLObjectElement>.vspace = <fuzzint>;
<HTMLObjectElement>.codeBase = "<codebase_value>";
<HTMLObjectElement>.codeType = "<codetype_value>";
<HTMLObjectElement>.border = "<border_value>";

#HTMLSelectElement
<HTMLSelectElement>.name = "<name_value>";
<HTMLSelectElement>.size = <fuzzint>;
<HTMLSelectElement>.length = <fuzzint>;
<HTMLSelectElement>.add(<HTMLOptionElement>);
<HTMLSelectElement>.add(<HTMLOptionElement>,<Element>);
<HTMLSelectElement>.add(<HTMLOptionElement>);
<HTMLSelectElement>.add(<HTMLOptionElement>,<fuzzint>);
<HTMLSelectElement>.add(<HTMLOptGroupElement>);
<HTMLSelectElement>.add(<HTMLOptGroupElement>,<Element>);
<HTMLSelectElement>.add(<HTMLOptGroupElement>);
<HTMLSelectElement>.add(<HTMLOptGroupElement>,<fuzzint>);
<HTMLSelectElement>.remove(<fuzzint>);
<HTMLSelectElement>[<fuzzint>] = <HTMLOptionElement>;
<HTMLSelectElement>.selectedIndex = <fuzzint>;
<HTMLSelectElement>.value = "<value_value>";

#HTMLDirectoryElement

#HTMLParamElement
<HTMLParamElement>.name = "<name_value>";
<HTMLParamElement>.value = "<value_value>";
<HTMLParamElement>.type = "<type_value>";
<HTMLParamElement>.valueType = "<valuetype_value>";

#HTMLPictureElement

#HTMLAllCollection

#HTMLDataListElement

#HTMLHRElement
<HTMLHRElement>.align = "<align_value>";
<HTMLHRElement>.color = "<color_value>";
<HTMLHRElement>.size = "<size_value>";
<HTMLHRElement>.width = "<width_value>";

#HTMLBodyElement
<HTMLBodyElement>.text = "<text_value>";
<HTMLBodyElement>.link = "<link_value>";
<HTMLBodyElement>.vLink = "<vlink_value>";
<HTMLBodyElement>.aLink = "<alink_value>";
<HTMLBodyElement>.bgColor = "<bgcolor_value>";
<HTMLBodyElement>.background = "<background_value>";

#HTMLLinkElement
<HTMLLinkElement>.href = "<href_value>";
<HTMLLinkElement>.crossOrigin = "<crossorigin_value>";
<HTMLLinkElement>.rel = "<rel_value>";
<HTMLLinkElement>.media = "<media_value>";
<HTMLLinkElement>.hreflang = "<hreflang_value>";
<HTMLLinkElement>.type = "<type_value>";
<HTMLLinkElement>.as = "<as_value>";
<HTMLLinkElement>.charset = "<charset_value>";
<HTMLLinkElement>.rev = "<rev_value>";
<HTMLLinkElement>.target = "<target_value>";
<HTMLLinkElement>.scope = <USVString>;

#HTMLCanvasElement
<HTMLCanvasElement>.width = <fuzzint>;
<HTMLCanvasElement>.height = <fuzzint>;
<HTMLCanvasElement>.toBlob(<BlobCallback>);
<HTMLCanvasElement>.toBlob(<BlobCallback>,<DOMString>);
<HTMLCanvasElement>.toBlob(<BlobCallback>,<DOMString>,<any>);

#HTMLDListElement

#HTMLScriptElement
<HTMLScriptElement>.src = "<src_value>";
<HTMLScriptElement>.type = "<type_value>";
<HTMLScriptElement>.charset = "<charset_value>";
<HTMLScriptElement>.crossOrigin = "<crossorigin_value>";
<HTMLScriptElement>.text = "<text_value>";
<HTMLScriptElement>.nonce = "<nonce_value>";

#HTMLOutputElement
<HTMLOutputElement>.name = "<name_value>";
<HTMLOutputElement>.value = "<value_value>";

#HTMLTrackElement
<HTMLTrackElement>.kind = "<kind_value>";
<HTMLTrackElement>.src = "<src_value>";
<HTMLTrackElement>.srclang = "<srclang_value>";
<HTMLTrackElement>.label = "<label_value>";

#HTMLUListElement
<HTMLUListElement>.type = "<type_value>";

#HTMLSpanElement

#HTMLAreaElement
<HTMLAreaElement>.alt = "<alt_value>";
<HTMLAreaElement>.coords = "<coords_value>";
<HTMLAreaElement>.download = "<download_value>";
<HTMLAreaElement>.shape = "<shape_value>";
<HTMLAreaElement>.target = "<target_value>";
<HTMLAreaElement>.ping = "<ping_value>";
<HTMLAreaElement>.rel = "<rel_value>";
<HTMLAreaElement>.referrerPolicy = "<referrerpolicy_value>";

#HTMLOptionsCollection
<HTMLOptionsCollection>.length = <fuzzint>;
<HTMLOptionsCollection>[<fuzzint>] = <HTMLOptionElement>;
<HTMLOptionsCollection>.add(<HTMLOptionElement>);
<HTMLOptionsCollection>.add(<HTMLOptionElement>,<Element>);
<HTMLOptionsCollection>.add(<HTMLOptionElement>);
<HTMLOptionsCollection>.add(<HTMLOptionElement>,<fuzzint>);
<HTMLOptionsCollection>.add(<HTMLOptGroupElement>);
<HTMLOptionsCollection>.add(<HTMLOptGroupElement>,<Element>);
<HTMLOptionsCollection>.add(<HTMLOptGroupElement>);
<HTMLOptionsCollection>.add(<HTMLOptGroupElement>,<fuzzint>);
<HTMLOptionsCollection>.selectedIndex = <fuzzint>;

#HTMLBRElement
<HTMLBRElement>.clear = "<clear_value>";

#HTMLDivElement
<HTMLDivElement>.align = "<align_value>";

#HTMLUnknownElement

#HTMLLabelElement

#HTMLHyperlinkElementUtils
<HTMLHyperlinkElementUtils>.href = <USVString>;
<HTMLHyperlinkElementUtils>.protocol = <USVString>;
<HTMLHyperlinkElementUtils>.username = <USVString>;
<HTMLHyperlinkElementUtils>.password = <USVString>;
<HTMLHyperlinkElementUtils>.host = <USVString>;
<HTMLHyperlinkElementUtils>.hostname = <USVString>;
<HTMLHyperlinkElementUtils>.port = <USVString>;
<HTMLHyperlinkElementUtils>.pathname = <USVString>;
<HTMLHyperlinkElementUtils>.search = <USVString>;
<HTMLHyperlinkElementUtils>.hash = <USVString>;

#HTMLMapElement
<HTMLMapElement>.name = "<name_value>";

#FormData
<FormData>.append(<USVString>,<Blob>);
<FormData>.append(<USVString>,<Blob>,<USVString>);
<FormData>.append(<USVString>,<USVString>);
<FormData>.delete(<USVString>);
<new FormDataEntryValue> = <FormData>.get(<USVString>);
<new sequence_FormDataEntryValue_> = <FormData>.getAll(<USVString>);
<new boolean> = <FormData>.has(<USVString>);
<FormData>.set(<USVString>,<Blob>);
<FormData>.set(<USVString>,<Blob>,<USVString>);
<FormData>.set(<USVString>,<USVString>);

#MediaError

#HTMLVideoElement
<HTMLVideoElement>.width = <fuzzint>;
<HTMLVideoElement>.height = <fuzzint>;
<HTMLVideoElement>.poster = "<poster_value>";

#HTMLTableSectionElement
<new Element> = <HTMLTableSectionElement>.insertRow(<fuzzint>);
<HTMLTableSectionElement>.align = "<align_value>";
<HTMLTableSectionElement>.vAlign = "<valign_value>";

#HTMLDetailsElement

#HTMLFieldSetElement
<HTMLFieldSetElement>.name = "<name_value>";

#HTMLTableCellElement
<HTMLTableCellElement>.colSpan = <fuzzint>;
<HTMLTableCellElement>.rowSpan = <fuzzint>;
<HTMLTableCellElement>.headers = "<headers_value>";
<HTMLTableCellElement>.align = "<align_value>";
<HTMLTableCellElement>.axis = "<axis_value>";
<HTMLTableCellElement>.height = "<height_value>";
<HTMLTableCellElement>.width = "<width_value>";
<HTMLTableCellElement>.vAlign = "<valign_value>";
<HTMLTableCellElement>.bgColor = "<bgcolor_value>";
<HTMLTableCellElement>.abbr = "<abbr_value>";
<HTMLTableCellElement>.scope = "<scope_value>";

#HTMLFontElement
<HTMLFontElement>.color = "<color_value>";
<HTMLFontElement>.face = "<face_value>";
<HTMLFontElement>.size = "<size_value>";

#HTMLOptionElement
<HTMLOptionElement>.label = "<label_value>";
<HTMLOptionElement>.value = "<value_value>";
<HTMLOptionElement>.text = "<text_value>";

#HTMLMenuElement
<HTMLMenuElement>.type = "<type_value>";
<HTMLMenuElement>.label = "<label_value>";

#HTMLShadowElement

#HTMLMeterElement

#HTMLEmbedElement
<HTMLEmbedElement>.src = "<src_value>";
<HTMLEmbedElement>.type = "<type_value>";
<HTMLEmbedElement>.width = "<width_value>";
<HTMLEmbedElement>.height = "<height_value>";
<HTMLEmbedElement>.align = "<align_value>";
<HTMLEmbedElement>.name = "<name_value>";

#HTMLFormControlsCollection

#HTMLTitleElement
<HTMLTitleElement>.text = "<text_value>";

#HTMLInputElement
<HTMLInputElement>.accept = "<accept_value>";
<HTMLInputElement>.alt = "<alt_value>";
<HTMLInputElement>.autocomplete = "<autocomplete_value>";
<HTMLInputElement>.dirName = "<dirname_value>";
<HTMLInputElement>.formAction = "<formaction_value>";
<HTMLInputElement>.formEnctype = "<formenctype_value>";
<HTMLInputElement>.formMethod = "<formmethod_value>";
<HTMLInputElement>.formTarget = "<formtarget_value>";
<HTMLInputElement>.height = <fuzzint>;
<HTMLInputElement>.inputMode = "<inputmode_value>";
<HTMLInputElement>.max = "<max_value>";
<HTMLInputElement>.maxLength = <fuzzint>;
<HTMLInputElement>.min = "<min_value>";
<HTMLInputElement>.minLength = <fuzzint>;
<HTMLInputElement>.name = "<name_value>";
<HTMLInputElement>.pattern = "<pattern_value>";
<HTMLInputElement>.placeholder = "<placeholder_value>";
<HTMLInputElement>.size = <fuzzint>;
<HTMLInputElement>.src = "<src_value>";
<HTMLInputElement>.step = "<step_value>";
<HTMLInputElement>.type = "<type_value>";
<HTMLInputElement>.value = "<value_value>";
<HTMLInputElement>.width = <fuzzint>;
<HTMLInputElement>.stepUp(<fuzzint>);
<HTMLInputElement>.stepDown(<fuzzint>);
<HTMLInputElement>.selectionStart = <fuzzint>;
<HTMLInputElement>.selectionEnd = <fuzzint>;
<HTMLInputElement>.setRangeText(<DOMString>,<fuzzint>,<fuzzint>);
<HTMLInputElement>.setRangeText(<DOMString>,<fuzzint>,<fuzzint>,<SelectionMode>);
<HTMLInputElement>.setSelectionRange(<fuzzint>);
<HTMLInputElement>.setSelectionRange(<fuzzint>,<fuzzint>);
<HTMLInputElement>.setSelectionRange(<fuzzint>,<fuzzint>,<DOMString>);
<HTMLInputElement>.align = "<align_value>";
<HTMLInputElement>.useMap = "<usemap_value>";

#HTMLMenuItemElement
<HTMLMenuItemElement>.type = "<type_value>";
<HTMLMenuItemElement>.label = "<label_value>";
<HTMLMenuItemElement>.icon = "<icon_value>";
<HTMLMenuItemElement>.radiogroup = "<radiogroup_value>";

#HTMLCollection

#HTMLDataElement
<HTMLDataElement>.value = "<value_value>";

#HTMLTimeElement
<HTMLTimeElement>.dateTime = "<datetime_value>";

#HTMLMarqueeElement
<HTMLMarqueeElement>.behavior = "<behavior_value>";
<HTMLMarqueeElement>.bgColor = "<bgcolor_value>";
<HTMLMarqueeElement>.direction = "<direction_value>";
<HTMLMarqueeElement>.height = "<height_value>";
<HTMLMarqueeElement>.hspace = <fuzzint>;
<HTMLMarqueeElement>.loop = <fuzzint>;
<HTMLMarqueeElement>.scrollAmount = <fuzzint>;
<HTMLMarqueeElement>.scrollDelay = <fuzzint>;
<HTMLMarqueeElement>.vspace = <fuzzint>;
<HTMLMarqueeElement>.width = "<width_value>";

#HTMLHtmlElement
<HTMLHtmlElement>.version = "<version_value>";

#HTMLTemplateElement

#HTMLLIElement
<HTMLLIElement>.value = <fuzzint>;
<HTMLLIElement>.type = "<type_value>";

#HTMLImageElement
<HTMLImageElement>.alt = "<alt_value>";
<HTMLImageElement>.src = "<imgsrc>";
<HTMLImageElement>.srcset = "<srcset_value>";
<HTMLImageElement>.sizes = "<sizes_value>";
<HTMLImageElement>.crossOrigin = "<crossorigin_value>";
<HTMLImageElement>.useMap = "<usemap_value>";
<HTMLImageElement>.width = <fuzzint>;
<HTMLImageElement>.height = <fuzzint>;
<HTMLImageElement>.referrerPolicy = "<referrerpolicy_value>";
<HTMLImageElement>.name = "<name_value>";
<HTMLImageElement>.lowsrc = "<lowsrc_value>";
<HTMLImageElement>.align = "<align_value>";
<HTMLImageElement>.hspace = <fuzzint>;
<HTMLImageElement>.vspace = <fuzzint>;
<HTMLImageElement>.longDesc = "<longdesc_value>";
<HTMLImageElement>.border = "<border_value>";

#HTMLOptGroupElement
<HTMLOptGroupElement>.label = "<label_value>";

#HTMLContentElement
<HTMLContentElement>.select = "<select_value>";

#VideoTrackList

#TextTrack

#TextTrackCueList

#TextTrackList

#TextTrackCue

#AudioTrack

#AudioTrackList

#TrackEvent

#VideoTrack

#VTTCue

#VTTRegionList

#VTTRegion
<VTTRegion>.height = <fuzzint>;

#DataTransfer
<DataTransfer>.setDragImage(<Element>,<fuzzint>,<fuzzint>);

#DataTransferItemList

#DataTransferItem
<DataTransferItem>.getAsString(<StringCallback>);

#ResourceProgressEvent

#TextEvent

#ClipboardEvent

#ProgressEvent

#WheelEvent

#HashChangeEvent

#MouseEvent
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<fuzzint>);
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<fuzzint>,<fuzzint>);
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<fuzzint>,<fuzzint>,<fuzzint>);
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<fuzzint>,<fuzzint>,<fuzzint>,<fuzzint>);
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<fuzzint>,<fuzzint>,<fuzzint>,<fuzzint>,<fuzzint>);
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<fuzzint>,<fuzzint>,<fuzzint>,<fuzzint>,<fuzzint>,<boolean>);
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<fuzzint>,<fuzzint>,<fuzzint>,<fuzzint>,<fuzzint>,<boolean>,<boolean>);
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<fuzzint>,<fuzzint>,<fuzzint>,<fuzzint>,<fuzzint>,<boolean>,<boolean>,<boolean>);
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<fuzzint>,<fuzzint>,<fuzzint>,<fuzzint>,<fuzzint>,<boolean>,<boolean>,<boolean>,<boolean>);
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<fuzzint>,<fuzzint>,<fuzzint>,<fuzzint>,<fuzzint>,<boolean>,<boolean>,<boolean>,<boolean>,<fuzzint>);
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<fuzzint>,<fuzzint>,<fuzzint>,<fuzzint>,<fuzzint>,<boolean>,<boolean>,<boolean>,<boolean>,<fuzzint>,<EventTarget>);

#TransitionEvent

#AnimationPlaybackEvent

#PopStateEvent

#DragEvent

#Event

#UIEvent
<UIEvent>.initUIEvent(<DOMString>,<boolean>,<boolean>,<Window>,<fuzzint>);

#PointerEvent

#PromiseRejectionEvent

#FocusEvent

#CompositionEvent

#InputEvent

#PageTransitionEvent

#SecurityPolicyViolationEvent

#TouchEvent

#Navigator

#MessageEvent

#MutationEvent
<MutationEvent>.initMutationEvent(<DOMString>,<boolean>,<boolean>,<Element>,<DOMString>,<DOMString>,<DOMString>,<fuzzint>);

#AnimationEvent

#RelatedEvent

#ErrorEvent

#EventTarget
<EventTarget>.addEventListener("DOMAttrModified", <EventListener>);
<EventTarget>.addEventListener("DOMAttributeNameChanged", <EventListener>);
<EventTarget>.addEventListener("DOMCharacterDataModified", <EventListener>);
<EventTarget>.addEventListener("DOMElementNameChanged", <EventListener>);
<EventTarget>.addEventListener("DOMNodeInserted", <EventListener>);
<EventTarget>.addEventListener("DOMNodeInsertedIntoDocument", <EventListener>);
<EventTarget>.addEventListener("DOMNodeRemoved", <EventListener>);
<EventTarget>.addEventListener("DOMNodeRemovedFromDocument", <EventListener>);
<EventTarget>.addEventListener("DOMSubtreeModified", <EventListener>);
<EventTarget>.addEventListener("DOMSubtreeModified", <EventListener>);
<EventTarget>.addEventListener("DOMSubtreeModified", <EventListener>);
<EventTarget>.addEventListener(<string_event>,<EventListener>);
<EventTarget>.addEventListener(<string_event>,<EventListener>,<AddEventListenerOptions>);
<EventTarget>.addEventListener(<string_event>,<EventListener>,<boolean>);
<EventTarget>.removeEventListener(<string_event>,<EventListener>);
<EventTarget>.removeEventListener(<string_event>,<EventListener>,<EventListenerOptions>);
<EventTarget>.removeEventListener(<string_event>,<EventListener>,<boolean>);
<new boolean> = <EventTarget>.dispatchEvent(<Event>);

#KeyboardEvent
<KeyboardEvent>.initKeyboardEvent(<DOMString>,<boolean>,<boolean>,<Window>,<DOMString>,<fuzzint>);
<KeyboardEvent>.initKeyboardEvent(<DOMString>,<boolean>,<boolean>,<Window>,<DOMString>,<fuzzint>,<boolean>);
<KeyboardEvent>.initKeyboardEvent(<DOMString>,<boolean>,<boolean>,<Window>,<DOMString>,<fuzzint>,<boolean>,<boolean>);
<KeyboardEvent>.initKeyboardEvent(<DOMString>,<boolean>,<boolean>,<Window>,<DOMString>,<fuzzint>,<boolean>,<boolean>,<boolean>);
<KeyboardEvent>.initKeyboardEvent(<DOMString>,<boolean>,<boolean>,<Window>,<DOMString>,<fuzzint>,<boolean>,<boolean>,<boolean>,<boolean>);

#CustomEvent

#ApplicationCacheErrorEvent

#BeforeUnloadEvent

#InputDeviceCapabilities

#Selection   #Problem
<new Range> = <Selection>.getRangeAt(<fuzzint>);
<Selection>.collapse(<Element>,<fuzzint>);
<Selection>.setPosition(<Element>,<fuzzint>);
<Selection>.extend(<Element>,<fuzzint>);
<Selection>.setBaseAndExtent(<Element>,<fuzzint>,<Element>,<fuzzint>);
<Selection>.modify("<selectionalter>");
<Selection>.modify("<selectionalter>","<selectiondirection>");
<Selection>.modify("<selectionalter>","<selectiondirection>","<selectiongranularity>");

#FontFaceSet

#CSS
<CSS>.registerProperty(<PropertyDescriptor>);

#CSSSupportsRule
<new long> = <CSSSupportsRule>.insertRule(<DOMString>,<fuzzint>);
<CSSSupportsRule>.deleteRule(<fuzzint>);

#CSSKeyframesRule

#FontFace

#CSSViewportRule

#CSSImportRule

#CSSMediaRule

#Document

#StyleMedia

#CSSStyleRule

#CSS

#CSSFontFaceRule

#CSSPageRule

#CSSStyleDeclaration
<new DOMString> = <CSSStyleDeclaration>.getPropertyValue(<string_cssproperty>);
<new DOMString> = <CSSStyleDeclaration>.getPropertyPriority(<string_cssproperty>);

#<CSSStyleDeclaration>.setProperty(<DOMString>,<DOMString>);

#<CSSStyleDeclaration>.setProperty(<DOMString>,<DOMString>,<DOMString>);
<CSSStyleDeclaration>.cssFloat = "<cssproperty_float>";
<CSSStyleDeclaration>[<string_cssproperty>] = <string_cssvalue>;

#CSSKeyframeRule

#StyleSheetList

#CSSRuleList

#MediaQueryListEvent

#CSSNamespaceRule

#StyleSheet

#MediaList

#MediaQueryList
<MediaQueryList>.addListener(<EventListener>);
<MediaQueryList>.removeListener(<EventListener>);

#CSSRule

#CSSStyleSheet
<new long> = <CSSStyleSheet>.insertRule(<DOMString>,<fuzzint>);
<new long> = <CSSStyleSheet>.addRule(<DOMString>,<DOMString>,<fuzzint>);

#CSSGroupingRule
<new long> = <CSSGroupingRule>.insertRule(<DOMString>,<fuzzint>);
<CSSGroupingRule>.deleteRule(<fuzzint>);

#FontFaceSetLoadEvent

#Attr
<Attr>.value = <string_attrvalue>;
<Attr>.nodeValue = <string_attrvalue>;
<Attr>.textContent = <string_attrvalue>;

#ClientRectList

#StaticRange
<StaticRange>.startOffset = <fuzzint>;
<StaticRange>.endOffset = <fuzzint>;
<StaticRange>.setStart(<Element>,<fuzzint>);
<StaticRange>.setEnd(<Element>,<fuzzint>);

#DOMImplementation

#ClientRect

#Comment

#Node
<new Element> = <Element>.getRootNode(<GetRootNodeOptions>);

#XMLDocument

#DOMTokenList

#URLSearchParams
<URLSearchParams>.append(<USVString>,<USVString>);
<URLSearchParams>.delete(<USVString>);
<new USVString> = <URLSearchParams>.get(<USVString>);
<new sequence_USVString_> = <URLSearchParams>.getAll(<USVString>);
<new boolean> = <URLSearchParams>.has(<USVString>);
<URLSearchParams>.set(<USVString>,<USVString>);

#NodeFilter

#ChildNode

#MessagePort
<MessagePort>.postMessage(<any>,<sequence_Transferable_>);

#DocumentOrShadowRoot
<new Element> = <DocumentOrShadowRoot>.elementFromPoint(<fuzzint>,<fuzzint>);
<new sequence_Element_> = <DocumentOrShadowRoot>.elementsFromPoint(<fuzzint>,<fuzzint>);

#DocumentType

#ParentNode
<new Element> = <Element>.querySelector("<selector>");
<new NodeList> = <Element>.querySelectorAll("<selector>");

#Text
<new Text> = <Text>.splitText(<fuzzint>);

#Document
<new HTMLCollection> = <Document>.getElementsByTagName(<string_tag>);
<new HTMLCollection> = <Document>.getElementsByTagNameNS("http://www.w3.org/1999/xhtml",<string_tag>);
<new HTMLCollection> = <Document>.getElementsByClassName("<class>");
<new Element> = <Document>.createElement(<string_tag>);
<new Element> = <Document>.createElementNS("http://www.w3.org/1999/xhtml",<string_tag>);
<new Attr> = <Document>.createAttribute(<string_attr>);
<new Attr> = <Document>.createAttributeNS("http://www.w3.org/1999/xhtml",<string_attr>);
<new NodeIterator> = <Document>.createNodeIterator(<Element>,<fuzzint>);
<new NodeIterator> = <Document>.createNodeIterator(<Element>,<fuzzint>,<NodeFilter>);
<new TreeWalker> = <Document>.createTreeWalker(<Element>,<fuzzint>);
<new TreeWalker> = <Document>.createTreeWalker(<Element>,<fuzzint>,<NodeFilter>);

#<new Location> = <Document>.location;

#<Document>.body = <Element>;

#<Document>.open();

#<Document>.close();

#<Document>.write(<DOMString>);

#<Document>.writeln(<DOMString>);
<new boolean> = <Document>.execCommand("backColor", false, "<color>");
<new boolean> = <Document>.execCommand("bold", false);
<new boolean> = <Document>.execCommand("contentReadOnly", false, <boolean>);

#<new boolean> = <Document>.execCommand("copy", false);
<new boolean> = <Document>.execCommand("createLink", false, "<hash>foo");

#<new boolean> = <Document>.execCommand("cut", false);
<new boolean> = <Document>.execCommand("decreaseFontSize", false);
<new boolean> = <Document>.execCommand("delete", false);
<new boolean> = <Document>.execCommand("enableInlineTableEditing", false);
<new boolean> = <Document>.execCommand("enableObjectResizing", false);
<new boolean> = <Document>.execCommand("fontName", false, "<face_value>");
<new boolean> = <Document>.execCommand("fontSize", false, <int min=1 max=7>);
<new boolean> = <Document>.execCommand("foreColor", false, "<color>");
<new boolean> = <Document>.execCommand("formatBlock", false);
<new boolean> = <Document>.execCommand("forwardDelete", false);
<new boolean> = <Document>.execCommand("heading", false, "H<int min=1 max=6>");
<new boolean> = <Document>.execCommand("hiliteColor", false, "<color>");
<new boolean> = <Document>.execCommand("increaseFontSize", false);
<new boolean> = <Document>.execCommand("indent", false);
<new boolean> = <Document>.execCommand("insertBrOnReturn", false);
<new boolean> = <Document>.execCommand("insertHorizontalRule", false);
<new boolean> = <Document>.execCommand("insertHTML", false, <htmlstring>);
<new boolean> = <Document>.execCommand("insertImage", false, "<hash>foo");
<new boolean> = <Document>.execCommand("insertOrderedList", false);
<new boolean> = <Document>.execCommand("insertUnorderedList", false);

#<new boolean> = <Document>.execCommand("insertParagraph", false);
<new boolean> = <Document>.execCommand("insertText", false, <DOMString>);
<new boolean> = <Document>.execCommand("italic", false);
<new boolean> = <Document>.execCommand("justifyCenter", false);
<new boolean> = <Document>.execCommand("justifyFull", false);
<new boolean> = <Document>.execCommand("justifyLeft", false);
<new boolean> = <Document>.execCommand("justifyRight", false);
<new boolean> = <Document>.execCommand("outdent", false);

#<new boolean> = <Document>.execCommand("paste", false);
<new boolean> = <Document>.execCommand("redo", false);
<new boolean> = <Document>.execCommand("removeFormat", false);
<new boolean> = <Document>.execCommand("selectAll", false);
<new boolean> = <Document>.execCommand("selectAll", false);
<new boolean> = <Document>.execCommand("selectAll", false);
<new boolean> = <Document>.execCommand("selectAll", false);
<new boolean> = <Document>.execCommand("selectAll", false);
<new boolean> = <Document>.execCommand("strikeThrough", false);
<new boolean> = <Document>.execCommand("subscript", false);
<new boolean> = <Document>.execCommand("superscript", false);
<new boolean> = <Document>.execCommand("underline", false);
<new boolean> = <Document>.execCommand("undo", false);
<new boolean> = <Document>.execCommand("unlink", false);
<new boolean> = <Document>.execCommand("useCSS", false, <boolean>);
<new boolean> = <Document>.execCommand("styleWithCSS", false, <boolean>);
<new Touch> = <Document>.createTouch(<Window>,<EventTarget>,<fuzzint>);
<new Touch> = <Document>.createTouch(<Window>,<EventTarget>,<fuzzint>,<double>);
<new Touch> = <Document>.createTouch(<Window>,<EventTarget>,<fuzzint>,<double>,<double>);
<new Touch> = <Document>.createTouch(<Window>,<EventTarget>,<fuzzint>,<double>,<double>,<double>);
<new Touch> = <Document>.createTouch(<Window>,<EventTarget>,<fuzzint>,<double>,<double>,<double>,<double>);
<new Touch> = <Document>.createTouch(<Window>,<EventTarget>,<fuzzint>,<double>,<double>,<double>,<double>,<double>);
<new Touch> = <Document>.createTouch(<Window>,<EventTarget>,<fuzzint>,<double>,<double>,<double>,<double>,<double>,<double>);
<new Touch> = <Document>.createTouch(<Window>,<EventTarget>,<fuzzint>,<double>,<double>,<double>,<double>,<double>,<double>,<float>);
<new Touch> = <Document>.createTouch(<Window>,<EventTarget>,<fuzzint>,<double>,<double>,<double>,<double>,<double>,<double>,<float>,<float>);
<new CustomElementConstructor> = <Document>.registerElement(<DOMString>,<ElementRegistrationOptions>);
<new Element> = <Document>.createElement(<string_tag>,<DOMString>);
<new Element> = <Document>.createElementNS("http://www.w3.org/1999/xhtml",<string_tag>,<DOMString>);

#HTMLDocument
<Document>.bgColor = "<bgcolor_value>";

#NonElementParentNode
<new Element> = <Document>.getElementById("<elementid>");

#NamedNodeMap

#CDATASection

#GlobalEventHandlers

#NodeList

#MutationObserver
<MutationObserver>.observe(<Element>,<MutationObserverInit>);

#TouchList

#DOMStringMap

#MutationRecord

#CharacterData
<new DOMString> = <CharacterData>.substringData(<fuzzint>,<fuzzint>);
<CharacterData>.insertData(<fuzzint>,<DOMString>);
<CharacterData>.deleteData(<fuzzint>,<fuzzint>);
<CharacterData>.replaceData(<fuzzint>,<fuzzint>,<DOMString>);

#Range
<Range>.setStart(<Element>,<fuzzint>);
<Range>.setEnd(<Element>,<fuzzint>);
<new short> = <Range>.compareBoundaryPoints(<fuzzint>,<Range>);
<new boolean> = <Range>.isPointInRange(<Element>,<fuzzint>);
<new short> = <Range>.comparePoint(<Element>,<fuzzint>);

#Element

#URL
<URL>.href = <USVString>;
<URL>.protocol = <USVString>;
<URL>.username = <USVString>;
<URL>.password = <USVString>;
<URL>.host = <USVString>;
<URL>.hostname = <USVString>;
<URL>.port = <USVString>;
<URL>.pathname = <USVString>;
<URL>.search = <USVString>;
<URL>.hash = <USVString>;

#ProcessingInstruction

#DOMStringList

#Touch

#Document

#DocumentFragment

#NonDocumentTypeChildNode

#DOMRect

#DOMRectReadOnly

#Element
<Element>.setPointerCapture(<fuzzint>);
<Element>.releasePointerCapture(<fuzzint>);
<new boolean> = <Element>.hasPointerCapture(<fuzzint>);
<new DOMString> = <Element>.getAttribute(<string_attr>);
<new DOMString> = <Element>.getAttributeNS("http://www.w3.org/1999/xhtml",<string_attr>);

#<Element>.setAttribute(<DOMString>,<DOMString>);

#<Element>.setAttributeNS(<DOMString>,<DOMString>,<DOMString>);
<new boolean> = <Element>.hasAttribute(<string_attr>);
<new boolean> = <Element>.hasAttributeNS("http://www.w3.org/1999/xhtml",<string_attr>);
<new Attr> = <Element>.getAttributeNode(<string_attr>);
<new Attr> = <Element>.getAttributeNodeNS("http://www.w3.org/1999/xhtml",<string_attr>);
<new HTMLCollection> = <Element>.getElementsByTagName(<string_tag>);
<new HTMLCollection> = <Element>.getElementsByTagNameNS("http://www.w3.org/1999/xhtml",<string_tag>);
<new HTMLCollection> = <Element>.getElementsByClassName("<class>");
<new Element> = <Element>.insertAdjacentElement(<string_where>,<Element>);
<Element>.insertAdjacentText(<string_where>,<DOMString>);
<Element>.innerHTML = <htmlstring>;
<Element>.outerHTML = <htmlstring>;
<Element>.insertAdjacentHTML(<string_where>,<htmlstring>);
<new ShadowRoot> = <Element>.attachShadow(<ShadowRootInit>);
<Element>.scroll(<ScrollToOptions>);
<Element>.scrollTo(<ScrollToOptions>);
<Element>.scrollBy(<ScrollToOptions>);
<Element>.setApplyScroll(<ScrollStateCallback>,<NativeScrollBehavior>);
<Element>.setDistributeScroll(<ScrollStateCallback>,<NativeScrollBehavior>);

#NodeIterator

#TreeWalker

#MessageChannel

#CustomElementRegistry
<CustomElementRegistry>.define(<DOMString>,<Function>,<ElementRegistrationOptions>);

#ShadowRoot
<ShadowRoot>.innerHTML = <htmlstring>;

#NavigatorLanguage

#BarProp

#NavigatorStorageUtils

#Screen

#WindowBase64

#WindowEventHandlers

#NavigatorCPU

#NavigatorID

#Window

#<new Location> = <Window>.location;

#<Window>.close();

#<new Window> = <Window>.open(<DOMString>,<DOMString>);

#<new Window> = <Window>.open(<DOMString>,<DOMString>,<DOMString>);

#<Window>.alert();

#<Window>.alert(<DOMString>);

#<new boolean> = <Window>.confirm();

#<new boolean> = <Window>.confirm(<DOMString>);

#<new DOMString> = <Window>.prompt();

#<new DOMString> = <Window>.prompt(<DOMString>);

#<new DOMString> = <Window>.prompt(<DOMString>,<DOMString>);

#<Window>.print();
<new long> = <Window>.requestAnimationFrame(<FrameRequestCallback>);
<Window>.cancelAnimationFrame(<fuzzint>);
<new long> = <Window>.requestIdleCallback(<IdleRequestCallback>);
<new long> = <Window>.requestIdleCallback(<IdleRequestCallback>,<IdleRequestOptions>);
<Window>.cancelIdleCallback(<fuzzint>);
<Window>.postMessage(<any>,<DOMString>,<sequence_Transferable_>);
<Window>.moveTo(<fuzzint>,<fuzzint>);
<Window>.moveBy(<fuzzint>,<fuzzint>);
<Window>.resizeTo(<fuzzint>,<fuzzint>);
<Window>.resizeBy(<fuzzint>,<fuzzint>);
<Window>.scroll(<ScrollToOptions>);
<Window>.scrollTo(<ScrollToOptions>);
<Window>.scrollBy(<ScrollToOptions>);
<Window>.event = <Event>;
<new long> = <Window>.webkitRequestAnimationFrame(<FrameRequestCallback>);
<Window>.webkitCancelAnimationFrame(<fuzzint>);
<Window>.webkitCancelRequestAnimationFrame(<fuzzint>);

#History

#<History>.go();

#<History>.go(<fuzzint>);

#<History>.back();

#<History>.forward();

#VisualViewport

#Location

#<Location>.assign(<DOMString>);

#<Location>.replace(<DOMString>);

#<Location>.reload();

#<new DOMStringList> = <Location>.ancestorOrigins;

#<new DOMString> = <Location>.href;

#<Location>.href = <DOMString>;

#<new DOMString> = <Location>.toString();

#<new DOMString> = <Location>.origin;

#<new DOMString> = <Location>.protocol;

#<Location>.protocol = <DOMString>;

#<new DOMString> = <Location>.host;

#<Location>.host = <DOMString>;

#<new DOMString> = <Location>.hostname;

#<Location>.hostname = <DOMString>;

#<new DOMString> = <Location>.port;

#<Location>.port = <DOMString>;

#<new DOMString> = <Location>.pathname;

#<Location>.pathname = <DOMString>;

#<new DOMString> = <Location>.search;

#<Location>.search = <DOMString>;

#<new DOMString> = <Location>.hash;

#<Location>.hash = <DOMString>;

#<new any> = <Location>.valueOf();

#Navigator
<Navigator>.sendBeacon(<url_string>, <DOMString>)

#External

#NavigatorOnLine

#Attribute setters with correct arguments
<Element>.setAttribute("abbr", "<abbr_value>");
<Element>.setAttribute("accept", "<accept_value>");
<Element>.setAttribute("accept-charset", "<accept-charset_value>");
<Element>.setAttribute("accepts-touch", "<accepts-touch_value>");
<Element>.setAttribute("accesskey", "<accesskey_value>");
<Element>.setAttribute("accumulate", "<accumulate_value>");
<Element>.setAttribute("additive", "<additive_value>");
<Element>.setAttribute("align", "<align_value>");
<Element>.setAttribute("alink", "<alink_value>");
<Element>.setAttribute("allowfullscreen", "<allowfullscreen_value>");
<Element>.setAttribute("alt", "<alt_value>");
<Element>.setAttribute("archive", "<archive_value>");
<Element>.setAttribute("aria-activedescendant", "<aria-activedescendant_value>");
<Element>.setAttribute("aria-autocomplete", "<aria-autocomplete_value>");
<Element>.setAttribute("aria-atomic", "<aria-atomic_value>");
<Element>.setAttribute("aria-busy", "<aria-busy_value>");
<Element>.setAttribute("aria-checked", "<aria-checked_value>");
<Element>.setAttribute("aria-controls", "<aria-controls_value>");
<Element>.setAttribute("aria-describedby", "<aria-describedby_value>");
<Element>.setAttribute("aria-disabled", "<aria-disabled_value>");
<Element>.setAttribute("aria-dropeffect", "<aria-dropeffect_value>");
<Element>.setAttribute("aria-expanded", "<aria-expanded_value>");
<Element>.setAttribute("aria-flowto", "<aria-flowto_value>");
<Element>.setAttribute("aria-grabbed", "<aria-grabbed_value>");
<Element>.setAttribute("aria-haspopup", "<aria-haspopup_value>");
<Element>.setAttribute("aria-help", "<aria-help_value>");
<Element>.setAttribute("aria-hidden", "<aria-hidden_value>");
<Element>.setAttribute("aria-invalid", "<aria-invalid_value>");
<Element>.setAttribute("aria-label", "<aria-label_value>");
<Element>.setAttribute("aria-labeledby", "<aria-labeledby_value>");
<Element>.setAttribute("aria-labelledby", "<aria-labelledby_value>");
<Element>.setAttribute("aria-level", "<aria-level_value>");
<Element>.setAttribute("aria-multiline", "<aria-live_value>");
<Element>.setAttribute("aria-multiline", "<aria-multiline_value>");
<Element>.setAttribute("aria-multiselectable", "<aria-multiselectable_value>");
<Element>.setAttribute("aria-name", "<aria-name_value>");
<Element>.setAttribute("aria-orientation", "<aria-orientation_value>");
<Element>.setAttribute("aria-owns", "<aria-owns_value>");
<Element>.setAttribute("aria-posinset", "<aria-posinset_value>");
<Element>.setAttribute("aria-pressed", "<aria-pressed_value>");
<Element>.setAttribute("aria-readonly", "<aria-readonly_value>");
<Element>.setAttribute("aria-relevant", "<aria-relevant_value>");
<Element>.setAttribute("aria-required", "<aria-required_value>");
<Element>.setAttribute("aria-selected", "<aria-selected_value>");
<Element>.setAttribute("aria-setsize", "<aria-setsize_value>");
<Element>.setAttribute("aria-sort", "<aria-sort_value>");
<Element>.setAttribute("aria-valuemax", "<aria-valuemax_value>");
<Element>.setAttribute("aria-valuemin", "<aria-valuemin_value>");
<Element>.setAttribute("aria-valuenow", "<aria-valuenow_value>");
<Element>.setAttribute("aria-valuetext", "<aria-valuetext_value>");
<Element>.setAttribute("as", "<as_value>");
<Element>.setAttribute("async", "<async_value>");
<Element>.setAttribute("autocomplete", "<autocomplete_value>");
<Element>.setAttribute("autofocus", "<autofocus_value>");
<Element>.setAttribute("autoload", "<autoload_value>");
<Element>.setAttribute("autoplay", "<autoplay_value>");
<Element>.setAttribute("axis", "<axis_value>");
<Element>.setAttribute("azimuth", "<azimuth_value>");
<Element>.setAttribute("background", "<background_value>");
<Element>.setAttribute("background-color", "<background-color_value>");
<Element>.setAttribute("basefrequency", "<basefrequency_value>");
<Element>.setAttribute("baseprofile", "<baseprofile_value>");
<Element>.setAttribute("behavior", "<behavior_value>");
<Element>.setAttribute("bgcolor", "<bgcolor_value>");
<Element>.setAttribute("bgproperties", "<bgproperties_value>");
<Element>.setAttribute("border", "<border_value>");
<Element>.setAttribute("bordercolor", "<bordercolor_value>");
<Element>.setAttribute("buffered-rendering", "<buffered-rendering_value>");
<Element>.setAttribute("can-process-drag", "<can-process-drag_value>");
<Element>.setAttribute("case", "<case_value>");
<Element>.setAttribute("case", "<capture_value>");
<Element>.setAttribute("cellpadding", "<cellpadding_value>");
<Element>.setAttribute("cellspacing", "<cellspacing_value>");
<Element>.setAttribute("challenge", "<challenge_value>");
<Element>.setAttribute("char", "<char_value>");
<Element>.setAttribute("charoff", "<charoff_value>");
<Element>.setAttribute("charset", "<charset_value>");
<Element>.setAttribute("checked", "<checked_value>");
<Element>.setAttribute("cite", "<cite_value>");
<Element>.setAttribute("class", "<class_value>");
<Element>.setAttribute("classid", "<classid_value>");
<Element>.setAttribute("clear", "<clear_value>");
<Element>.setAttribute("code", "<code_value>");
<Element>.setAttribute("codebase", "<codebase_value>");
<Element>.setAttribute("codetype", "<codetype_value>");
<Element>.setAttribute("color", "<color_value>");
<Element>.setAttribute("cols", "<cols_value>");
<Element>.setAttribute("colspan", "<colspan_value>");
<Element>.setAttribute("compact", "<compact_value>");
<Element>.setAttribute("content", "<content_value>");
<Element>.setAttribute("contenteditable", "<contenteditable_value>");
<Element>.setAttribute("contextmenu", "<contextmenu_value>");
<Element>.setAttribute("controls", "<controls_value>");
<Element>.setAttribute("coords", "<coords_value>");
<Element>.setAttribute("crossorigin", "<crossorigin_value>");
<Element>.setAttribute("data", "<data_value>");
<Element>.setAttribute("datetime", "<datetime_value>");
<Element>.setAttribute("declare", "<declare_value>");
<Element>.setAttribute("default", "<default_value>");
<Element>.setAttribute("defer", "<defer_value>");
<Element>.setAttribute("desc", "<desc_value>");
<Element>.setAttribute("description", "<description_value>");
<Element>.setAttribute("dir", "<dir_value>");
<Element>.setAttribute("direction", "<direction_value>");
<Element>.setAttribute("dirname", "<dirname_value>");
<Element>.setAttribute("disabled", "<disabled_value>");
<Element>.setAttribute("display", "<display_value>");
<Element>.setAttribute("disposition", "<disposition_value>");
<Element>.setAttribute("download", "<download_value>");
<Element>.setAttribute("draggable", "<draggable_value>");
<Element>.setAttribute("encoding", "<encoding_value>");
<Element>.setAttribute("enctype", "<enctype_value>");
<Element>.setAttribute("expanded", "<expanded_value>");
<Element>.setAttribute("face", "<face_value>");
<Element>.setAttribute("focus", "<focus_value>");
<Element>.setAttribute("focused", "<focused_value>");
<Element>.setAttribute("for", "<for_value>");
<Element>.setAttribute("form", "<form_value>");
<Element>.setAttribute("formaction", "<formaction_value>");
<Element>.setAttribute("formenctype", "<formenctype_value>");
<Element>.setAttribute("formmethod", "<formmethod_value>");
<Element>.setAttribute("formnovalidate", "<formnovalidate_value>");
<Element>.setAttribute("formtarget", "<formtarget_value>");
<Element>.setAttribute("frame", "<frame_value>");
<Element>.setAttribute("frameborder", "<frameborder_value>");
<Element>.setAttribute("framemargin", "<framemargin_value>");
<Element>.setAttribute("framespacing", "<framespacing_value>");
<Element>.setAttribute("headers", "<headers_value>");
<Element>.setAttribute("height", "<height_value>");
<Element>.setAttribute("hidden", "<hidden_value>");
<Element>.setAttribute("high", "<high_value>");
<Element>.setAttribute("href", "<href_value>");
<Element>.setAttribute("hreflang", "<hreflang_value>");
<Element>.setAttribute("hspace", "<hspace_value>");
<Element>.setAttribute("http-equiv", "<http-equiv_value>");
<Element>.setAttribute("icon", "<icon_value>");
<Element>.setAttribute("incremental", "<incremental_value>");
<Element>.setAttribute("indeterminate", "<indeterminate_value>");
<Element>.setAttribute("inner", "<inner_value>");
<Element>.setAttribute("inputmode", "<inputmode_value>");
<Element>.setAttribute("is", "<is_value>");
<Element>.setAttribute("ismap", "<ismap_value>");
<Element>.setAttribute("item", "<item_value>");
<Element>.setAttribute("itemid", "<itemid_value>");
<Element>.setAttribute("itemprop", "<itemprop_value>");
<Element>.setAttribute("itemref", "<itemref_value>");
<Element>.setAttribute("itemscope", "<itemscope_value>");
<Element>.setAttribute("itemtype", "<itemtype_value>");
<Element>.setAttribute("keytype", "<keytype_value>");
<Element>.setAttribute("kind", "<kind_value>");
<Element>.setAttribute("label", "<label_value>");
<Element>.setAttribute("lang", "<lang_value>");
<Element>.setAttribute("language", "<language_value>");
<Element>.setAttribute("layout", "<layout_value>");
<Element>.setAttribute("left", "<left_value>");
<Element>.setAttribute("leftmargin", "<leftmargin_value>");
<Element>.setAttribute("link", "<link_value>");
<Element>.setAttribute("list", "<list_value>");
<Element>.setAttribute("longdesc", "<longdesc_value>");
<Element>.setAttribute("loop", "<loop_value>");
<Element>.setAttribute("loopend", "<loopend_value>");
<Element>.setAttribute("loopstart", "<loopstart_value>");
<Element>.setAttribute("low", "<low_value>");
<Element>.setAttribute("lowsrc", "<lowsrc_value>");
<Element>.setAttribute("manifest", "<manifest_value>");
<Element>.setAttribute("margin", "<margin_value>");
<Element>.setAttribute("marginheight", "<marginheight_value>");
<Element>.setAttribute("marginwidth", "<marginwidth_value>");
<Element>.setAttribute("max", "<max_value>");
<Element>.setAttribute("maxlength", "<maxlength_value>");
<Element>.setAttribute("mayscript", "<mayscript_value>");
<Element>.setAttribute("media", "<media_value>");
<Element>.setAttribute("menu", "<menu_value>");
<Element>.setAttribute("method", "<method_value>");
<Element>.setAttribute("min", "<min_value>");
<Element>.setAttribute("minlength", "<minlength_value>");
<Element>.setAttribute("mode", "<mode_value>");
<Element>.setAttribute("multiple", "<multiple_value>");
<Element>.setAttribute("muted", "<muted_value>");
<Element>.setAttribute("name", "<name_value>");
<Element>.setAttribute("nohref", "<nohref_value>");
<Element>.setAttribute("nonce", "<nonce_value>");
<Element>.setAttribute("noresize", "<noresize_value>");
<Element>.setAttribute("noshade", "<noshade_value>");
<Element>.setAttribute("novalidate", "<novalidate_value>");
<Element>.setAttribute("nowrap", "<nowrap_value>");
<Element>.setAttribute("open", "<open_value>");
<Element>.setAttribute("optimum", "<optimum_value>");
<Element>.setAttribute("pattern", "<pattern_value>");
<Element>.setAttribute("ping", "<ping_value>");
<Element>.setAttribute("placeholder", "<placeholder_value>");
<Element>.setAttribute("playcount", "<playcount_value>");
<Element>.setAttribute("pluginspage", "<pluginspage_value>");
<Element>.setAttribute("poster", "<poster_value>");
<Element>.setAttribute("preload", "<preload_value>");
<Element>.setAttribute("profile", "<profile_value>");
<Element>.setAttribute("prompt", "<prompt_value>");
<Element>.setAttribute("quality", "<quality_value>");
<Element>.setAttribute("radiogroup", "<radiogroup_value>");
<Element>.setAttribute("readonly", "<readonly_value>");
<Element>.setAttribute("ref", "<ref_value>");
<Element>.setAttribute("referrerpolicy", "<referrerpolicy_value>");
<Element>.setAttribute("rel", "<rel_value>");
<Element>.setAttribute("required", "<required_value>");
<Element>.setAttribute("results", "<results_value>");
<Element>.setAttribute("rev", "<rev_value>");
<Element>.setAttribute("reversed", "<reversed_value>");
<Element>.setAttribute("right", "<right_value>");
<Element>.setAttribute("rightmargin", "<rightmargin_value>");
<Element>.setAttribute("role", "<role_value>");
<Element>.setAttribute("row", "<row_value>");
<Element>.setAttribute("rows", "<rows_value>");
<Element>.setAttribute("rowspan", "<rowspan_value>");
<Element>.setAttribute("rules", "<rules_value>");
<Element>.setAttribute("sandbox", "<sandbox_value>");
<Element>.setAttribute("scheme", "<scheme_value>");
<Element>.setAttribute("scope", "<scope_value>");
<Element>.setAttribute("scoped", "<scoped_value>");
<Element>.setAttribute("scrollamount", "<scrollamount_value>");
<Element>.setAttribute("scrolldelay", "<scrolldelay_value>");
<Element>.setAttribute("scrolling", "<scrolling_value>");
<Element>.setAttribute("seamless", "<seamless_value>");
<Element>.setAttribute("seed", "<seed_value>");
<Element>.setAttribute("select", "<select_value>");
<Element>.setAttribute("selected", "<selected_value>");
<Element>.setAttribute("shape", "<shape_value>");
<Element>.setAttribute("shouldfocus", "<shouldfocus_value>");
<Element>.setAttribute("size", "<size_value>");
<Element>.setAttribute("sizes", "<sizes_value>");
<Element>.setAttribute("slope", "<slope_value>");
<Element>.setAttribute("slot", "<slot_value>");
<Element>.setAttribute("span", "<span_value>");
<Element>.setAttribute("spellcheck", "<spellcheck_value>");
<Element>.setAttribute("src", "<src_value>");
<Element>.setAttribute("srcdoc", "<srcdoc_value>");
<Element>.setAttribute("srcset", "<srcset_value>");
<Element>.setAttribute("srclang", "<srclang_value>");
<Element>.setAttribute("standby", "<standby_value>");
<Element>.setAttribute("start", "<start_value>");
<Element>.setAttribute("startoffset", "<startoffset_value>");
<Element>.setAttribute("startval", "<startval_value>");
<Element>.setAttribute("step", "<step_value>");
<Element>.setAttribute("summary", "<summary_value>");
<Element>.setAttribute("tabindex", "<tabindex_value>");
<Element>.setAttribute("target", "<target_value>");
<Element>.setAttribute("text", "<text_value>");
<Element>.setAttribute("title", "<title_value>");
<Element>.setAttribute("topmargin", "<topmargin_value>");
<Element>.setAttribute("translate", "<translate_value>");
<Element>.setAttribute("truespeed", "<truespeed_value>");
<Element>.setAttribute("type", "<type_value>");
<Element>.setAttribute("usemap", "<usemap_value>");
<Element>.setAttribute("valign", "<valign_value>");
<Element>.setAttribute("value", "<value_value>");
<Element>.setAttribute("valuetype", "<valuetype_value>");
<Element>.setAttribute("version", "<version_value>");
<Element>.setAttribute("vlink", "<vlink_value>");
<Element>.setAttribute("vspace", "<vspace_value>");
<Element>.setAttribute("width", "<width_value>");
<Element>.setAttribute("wrap", "<wrap_value>");
<Element>.setAttribute("onabort", "<eventhandlerstr>");
<Element>.setAttribute("onautocomplete", "<eventhandlerstr>");
<Element>.setAttribute("onautocompleteerror", "<eventhandlerstr>");
<Element>.setAttribute("onafterscriptexecute", "<eventhandlerstr>");
<Element>.setAttribute("onanimationend", "<eventhandlerstr>");
<Element>.setAttribute("onanimationiteration", "<eventhandlerstr>");
<Element>.setAttribute("onanimationstart", "<eventhandlerstr>");
<Element>.setAttribute("onbeforecopy", "<eventhandlerstr>");
<Element>.setAttribute("onbeforecut", "<eventhandlerstr>");
<Element>.setAttribute("onbeforeload", "<eventhandlerstr>");
<Element>.setAttribute("onbeforepaste", "<eventhandlerstr>");
<Element>.setAttribute("onbeforescriptexecute", "<eventhandlerstr>");
<Element>.setAttribute("onbeforeunload", "<eventhandlerstr>");
<Element>.setAttribute("onbegin", "<eventhandlerstr>");
<Element>.setAttribute("onblur", "<eventhandlerstr>");
<Element>.setAttribute("oncanplay", "<eventhandlerstr>");
<Element>.setAttribute("oncanplaythrough", "<eventhandlerstr>");
<Element>.setAttribute("onchange", "<eventhandlerstr>");
<Element>.setAttribute("onclick", "<eventhandlerstr>");
<Element>.setAttribute("oncontextmenu", "<eventhandlerstr>");
<Element>.setAttribute("oncopy", "<eventhandlerstr>");
<Element>.setAttribute("oncut", "<eventhandlerstr>");
<Element>.setAttribute("ondblclick", "<eventhandlerstr>");
<Element>.setAttribute("ondrag", "<eventhandlerstr>");
<Element>.setAttribute("ondragend", "<eventhandlerstr>");
<Element>.setAttribute("ondragenter", "<eventhandlerstr>");
<Element>.setAttribute("ondragleave", "<eventhandlerstr>");
<Element>.setAttribute("ondragover", "<eventhandlerstr>");
<Element>.setAttribute("ondragstart", "<eventhandlerstr>");
<Element>.setAttribute("ondrop", "<eventhandlerstr>");
<Element>.setAttribute("ondurationchange", "<eventhandlerstr>");
<Element>.setAttribute("onend", "<eventhandlerstr>");
<Element>.setAttribute("onemptied", "<eventhandlerstr>");
<Element>.setAttribute("onended", "<eventhandlerstr>");
<Element>.setAttribute("onerror", "<eventhandlerstr>");
<Element>.setAttribute("onfocus", "<eventhandlerstr>");
<Element>.setAttribute("onfocusin", "<eventhandlerstr>");
<Element>.setAttribute("onfocusout", "<eventhandlerstr>");
<Element>.setAttribute("onhashchange", "<eventhandlerstr>");
<Element>.setAttribute("oninput", "<eventhandlerstr>");
<Element>.setAttribute("oninvalid", "<eventhandlerstr>");
<Element>.setAttribute("onkeydown", "<eventhandlerstr>");
<Element>.setAttribute("onkeypress", "<eventhandlerstr>");
<Element>.setAttribute("onkeyup", "<eventhandlerstr>");
<Element>.setAttribute("onload", "<eventhandlerstr>");
<Element>.setAttribute("onloadeddata", "<eventhandlerstr>");
<Element>.setAttribute("onloadedmetadata", "<eventhandlerstr>");
<Element>.setAttribute("onloadstart", "<eventhandlerstr>");
<Element>.setAttribute("onmessage", "<eventhandlerstr>");
<Element>.setAttribute("onmousedown", "<eventhandlerstr>");
<Element>.setAttribute("onmouseenter", "<eventhandlerstr>");
<Element>.setAttribute("onmouseleave", "<eventhandlerstr>");
<Element>.setAttribute("onmousemove", "<eventhandlerstr>");
<Element>.setAttribute("onmouseout", "<eventhandlerstr>");
<Element>.setAttribute("onmouseover", "<eventhandlerstr>");
<Element>.setAttribute("onmouseup", "<eventhandlerstr>");
<Element>.setAttribute("onmousewheel", "<eventhandlerstr>");
<Element>.setAttribute("onoffline", "<eventhandlerstr>");
<Element>.setAttribute("ononline", "<eventhandlerstr>");
<Element>.setAttribute("onorientationchange", "<eventhandlerstr>");
<Element>.setAttribute("onpagehide", "<eventhandlerstr>");
<Element>.setAttribute("onpageshow", "<eventhandlerstr>");
<Element>.setAttribute("onpaste", "<eventhandlerstr>");
<Element>.setAttribute("onpause", "<eventhandlerstr>");
<Element>.setAttribute("onplay", "<eventhandlerstr>");
<Element>.setAttribute("onplaying", "<eventhandlerstr>");
<Element>.setAttribute("onpopstate", "<eventhandlerstr>");
<Element>.setAttribute("onprogress", "<eventhandlerstr>");
<Element>.setAttribute("onratechange", "<eventhandlerstr>");
<Element>.setAttribute("onreset", "<eventhandlerstr>");
<Element>.setAttribute("onresize", "<eventhandlerstr>");
<Element>.setAttribute("onscroll", "<eventhandlerstr>");
<Element>.setAttribute("onsearch", "<eventhandlerstr>");
<Element>.setAttribute("onseeked", "<eventhandlerstr>");
<Element>.setAttribute("onseeking", "<eventhandlerstr>");
<Element>.setAttribute("onselect", "<eventhandlerstr>");
<Element>.setAttribute("onselectionchange", "<eventhandlerstr>");
<Element>.setAttribute("onselectstart", "<eventhandlerstr>");
<Element>.setAttribute("onstalled", "<eventhandlerstr>");
<Element>.setAttribute("onstorage", "<eventhandlerstr>");
<Element>.setAttribute("onsubmit", "<eventhandlerstr>");
<Element>.setAttribute("onsuspend", "<eventhandlerstr>");
<Element>.setAttribute("ontimeupdate", "<eventhandlerstr>");
<Element>.setAttribute("ontoggle", "<eventhandlerstr>");
<Element>.setAttribute("ontouchcancel", "<eventhandlerstr>");
<Element>.setAttribute("ontouchend", "<eventhandlerstr>");
<Element>.setAttribute("ontouchmove", "<eventhandlerstr>");
<Element>.setAttribute("ontouchstart", "<eventhandlerstr>");
<Element>.setAttribute("ontransitionend", "<eventhandlerstr>");
<Element>.setAttribute("onunload", "<eventhandlerstr>");
<Element>.setAttribute("onvolumechange", "<eventhandlerstr>");
<Element>.setAttribute("onwaiting", "<eventhandlerstr>");
<Element>.setAttribute("onwebkitanimationend", "<eventhandlerstr>");
<Element>.setAttribute("onwebkitanimationiteration", "<eventhandlerstr>");
<Element>.setAttribute("onwebkitanimationstart", "<eventhandlerstr>");
<Element>.setAttribute("onwebkitfullscreenchange", "<eventhandlerstr>");
<Element>.setAttribute("onwebkitfullscreenerror", "<eventhandlerstr>");
<Element>.setAttribute("onwebkitkeyadded", "<eventhandlerstr>");
<Element>.setAttribute("onwebkitkeyerror", "<eventhandlerstr>");
<Element>.setAttribute("onwebkitkeymessage", "<eventhandlerstr>");
<Element>.setAttribute("onwebkitneedkey", "<eventhandlerstr>");
<Element>.setAttribute("onwebkitsourceclose", "<eventhandlerstr>");
<Element>.setAttribute("onwebkitsourceended", "<eventhandlerstr>");
<Element>.setAttribute("onwebkitsourceopen", "<eventhandlerstr>");
<Element>.setAttribute("onwebkitspeechchange", "<eventhandlerstr>");
<Element>.setAttribute("onwebkittransitionend", "<eventhandlerstr>");
<Element>.setAttribute("onwheel", "<eventhandlerstr>");
<CSSStyleDeclaration>.setProperty("-ms-flex-align", "<cssproperty_-ms-flex-align>");
<CSSStyleDeclaration>.setProperty("-ms-font-feature-settings", "<cssproperty_-ms-font-feature-settings>");
<CSSStyleDeclaration>.setProperty("-ms-text-combine-horizontal", "<cssproperty_-ms-text-combine-horizontal>");
<CSSStyleDeclaration>.setProperty("-ms-user-select", "<cssproperty_-ms-user-select>");
<CSSStyleDeclaration>.setProperty("-webkit-align-content", "<cssproperty_-webkit-align-content>");
<CSSStyleDeclaration>.setProperty("-webkit-align-items", "<cssproperty_-webkit-align-items>");
<CSSStyleDeclaration>.setProperty("-webkit-align-self", "<cssproperty_-webkit-align-self>");
<CSSStyleDeclaration>.setProperty("-webkit-animation", "<cssproperty_-webkit-animation>");
<CSSStyleDeclaration>.setProperty("-webkit-animation-delay", "<cssproperty_-webkit-animation-delay>");
<CSSStyleDeclaration>.setProperty("-webkit-animation-direction", "<cssproperty_-webkit-animation-direction>");
<CSSStyleDeclaration>.setProperty("-webkit-animation-duration", "<cssproperty_-webkit-animation-duration>");
<CSSStyleDeclaration>.setProperty("-webkit-animation-fill-mode", "<cssproperty_-webkit-animation-fill-mode>");
<CSSStyleDeclaration>.setProperty("-webkit-animation-iteration-count", "<cssproperty_-webkit-animation-iteration-count>");
<CSSStyleDeclaration>.setProperty("-webkit-animation-name", "<cssproperty_-webkit-animation-name>");
<CSSStyleDeclaration>.setProperty("-webkit-animation-play-state", "<cssproperty_-webkit-animation-play-state>");
<CSSStyleDeclaration>.setProperty("-webkit-animation-timing-function", "<cssproperty_-webkit-animation-timing-function>");
<CSSStyleDeclaration>.setProperty("-webkit-app-region", "<cssproperty_-webkit-app-region>");
<CSSStyleDeclaration>.setProperty("-webkit-appearance", "<cssproperty_-webkit-appearance>");
<CSSStyleDeclaration>.setProperty("-webkit-backface-visibility", "<cssproperty_-webkit-backface-visibility>");
<CSSStyleDeclaration>.setProperty("-webkit-background-clip", "<cssproperty_-webkit-background-clip>");
<CSSStyleDeclaration>.setProperty("-webkit-background-origin", "<cssproperty_-webkit-background-origin>");
<CSSStyleDeclaration>.setProperty("-webkit-background-size", "<cssproperty_-webkit-background-size>");
<CSSStyleDeclaration>.setProperty("-webkit-border-after", "<cssproperty_-webkit-border-after>");
<CSSStyleDeclaration>.setProperty("-webkit-border-after-color", "<cssproperty_-webkit-border-after-color>");
<CSSStyleDeclaration>.setProperty("-webkit-border-after-width", "<cssproperty_-webkit-border-after-width>");
<CSSStyleDeclaration>.setProperty("-webkit-border-before", "<cssproperty_-webkit-border-before>");
<CSSStyleDeclaration>.setProperty("-webkit-border-before-color", "<cssproperty_-webkit-border-before-color>");
<CSSStyleDeclaration>.setProperty("-webkit-border-before-style", "<cssproperty_-webkit-border-before-style>");
<CSSStyleDeclaration>.setProperty("-webkit-border-before-width", "<cssproperty_-webkit-border-before-width>");
<CSSStyleDeclaration>.setProperty("-webkit-border-bottom-left-radius", "<cssproperty_-webkit-border-bottom-left-radius>");
<CSSStyleDeclaration>.setProperty("-webkit-border-bottom-right-radius", "<cssproperty_-webkit-border-bottom-right-radius>");
<CSSStyleDeclaration>.setProperty("-webkit-border-end", "<cssproperty_-webkit-border-end>");
<CSSStyleDeclaration>.setProperty("-webkit-border-end-color", "<cssproperty_-webkit-border-end-color>");
<CSSStyleDeclaration>.setProperty("-webkit-border-end-width", "<cssproperty_-webkit-border-end-width>");
<CSSStyleDeclaration>.setProperty("-webkit-border-image", "<cssproperty_-webkit-border-image>");
<CSSStyleDeclaration>.setProperty("-webkit-border-radius", "<cssproperty_-webkit-border-radius>");
<CSSStyleDeclaration>.setProperty("-webkit-border-start", "<cssproperty_-webkit-border-start>");
<CSSStyleDeclaration>.setProperty("-webkit-border-start-color", "<cssproperty_-webkit-border-start-color>");
<CSSStyleDeclaration>.setProperty("-webkit-border-start-width", "<cssproperty_-webkit-border-start-width>");
<CSSStyleDeclaration>.setProperty("-webkit-border-top-left-radius", "<cssproperty_-webkit-border-top-left-radius>");
<CSSStyleDeclaration>.setProperty("-webkit-border-top-right-radius", "<cssproperty_-webkit-border-top-right-radius>");
<CSSStyleDeclaration>.setProperty("-webkit-border-vertical-spacing", "<cssproperty_-webkit-border-vertical-spacing>");
<CSSStyleDeclaration>.setProperty("-webkit-box-align", "<cssproperty_-webkit-box-align>");
<CSSStyleDeclaration>.setProperty("-webkit-box-decoration-break", "<cssproperty_-webkit-box-decoration-break>");
<CSSStyleDeclaration>.setProperty("-webkit-box-direction", "<cssproperty_-webkit-box-direction>");
<CSSStyleDeclaration>.setProperty("-webkit-box-flex", "<cssproperty_-webkit-box-flex>");
<CSSStyleDeclaration>.setProperty("-webkit-box-flex-group", "<cssproperty_-webkit-box-flex-group>");
<CSSStyleDeclaration>.setProperty("-webkit-box-lines", "<cssproperty_-webkit-box-lines>");
<CSSStyleDeclaration>.setProperty("-webkit-box-ordinal-group", "<cssproperty_-webkit-box-ordinal-group>");
<CSSStyleDeclaration>.setProperty("-webkit-box-orient", "<cssproperty_-webkit-box-orient>");
<CSSStyleDeclaration>.setProperty("-webkit-box-pack", "<cssproperty_-webkit-box-pack>");
<CSSStyleDeclaration>.setProperty("-webkit-box-reflect", "<cssproperty_-webkit-box-reflect>");
<CSSStyleDeclaration>.setProperty("-webkit-box-shadow", "<cssproperty_-webkit-box-shadow>");
<CSSStyleDeclaration>.setProperty("-webkit-box-sizing", "<cssproperty_-webkit-box-sizing>");
<CSSStyleDeclaration>.setProperty("-webkit-clip-path", "<cssproperty_-webkit-clip-path>");
<CSSStyleDeclaration>.setProperty("-webkit-color-correction", "<cssproperty_-webkit-color-correction>");
<CSSStyleDeclaration>.setProperty("-webkit-column-break-after", "<cssproperty_-webkit-column-break-after>");
<CSSStyleDeclaration>.setProperty("-webkit-column-break-before", "<cssproperty_-webkit-column-break-before>");
<CSSStyleDeclaration>.setProperty("-webkit-column-break-inside", "<cssproperty_-webkit-column-break-inside>");
<CSSStyleDeclaration>.setProperty("-webkit-column-count", "<cssproperty_-webkit-column-count>");
<CSSStyleDeclaration>.setProperty("-webkit-column-fill", "<cssproperty_-webkit-column-fill>");
<CSSStyleDeclaration>.setProperty("-webkit-column-gap", "<cssproperty_-webkit-column-gap>");
<CSSStyleDeclaration>.setProperty("-webkit-column-rule", "<cssproperty_-webkit-column-rule>");
<CSSStyleDeclaration>.setProperty("-webkit-column-rule-color", "<cssproperty_-webkit-column-rule-color>");
<CSSStyleDeclaration>.setProperty("-webkit-column-rule-style", "<cssproperty_-webkit-column-rule-style>");
<CSSStyleDeclaration>.setProperty("-webkit-column-rule-width", "<cssproperty_-webkit-column-rule-width>");
<CSSStyleDeclaration>.setProperty("-webkit-column-span", "<cssproperty_-webkit-column-span>");
<CSSStyleDeclaration>.setProperty("-webkit-column-width", "<cssproperty_-webkit-column-width>");
<CSSStyleDeclaration>.setProperty("-webkit-columns", "<cssproperty_-webkit-columns>");
<CSSStyleDeclaration>.setProperty("-webkit-direction", "<cssproperty_-webkit-direction>");
<CSSStyleDeclaration>.setProperty("-webkit-filter", "<cssproperty_-webkit-filter>");
<CSSStyleDeclaration>.setProperty("-webkit-flex", "<cssproperty_-webkit-flex>");
<CSSStyleDeclaration>.setProperty("-webkit-flex-direction", "<cssproperty_-webkit-flex-direction>");
<CSSStyleDeclaration>.setProperty("-webkit-flex-wrap", "<cssproperty_-webkit-flex-wrap>");
<CSSStyleDeclaration>.setProperty("-webkit-flow-from", "<cssproperty_-webkit-flow-from>");
<CSSStyleDeclaration>.setProperty("-webkit-flow-into", "<cssproperty_-webkit-flow-into>");
<CSSStyleDeclaration>.setProperty("-webkit-font-feature-settings", "<cssproperty_-webkit-font-feature-settings>");
<CSSStyleDeclaration>.setProperty("-webkit-font-smoothing", "<cssproperty_-webkit-font-smoothing>");
<CSSStyleDeclaration>.setProperty("-webkit-highlight", "<cssproperty_-webkit-highlight>");
<CSSStyleDeclaration>.setProperty("-webkit-hyphenate-character", "<cssproperty_-webkit-hyphenate-character>");
<CSSStyleDeclaration>.setProperty("-webkit-hyphens", "<cssproperty_-webkit-hyphens>");
<CSSStyleDeclaration>.setProperty("-webkit-justify-content", "<cssproperty_-webkit-justify-content>");
<CSSStyleDeclaration>.setProperty("-webkit-line-break", "<cssproperty_-webkit-line-break>");
<CSSStyleDeclaration>.setProperty("-webkit-line-clamp", "<cssproperty_-webkit-line-clamp>");
<CSSStyleDeclaration>.setProperty("-webkit-locale", "<cssproperty_-webkit-locale>");
<CSSStyleDeclaration>.setProperty("-webkit-logical-height", "<cssproperty_-webkit-logical-height>");
<CSSStyleDeclaration>.setProperty("-webkit-logical-width", "<cssproperty_-webkit-logical-width>");
<CSSStyleDeclaration>.setProperty("-webkit-margin-after", "<cssproperty_-webkit-margin-after>");
<CSSStyleDeclaration>.setProperty("-webkit-margin-after-collapse", "<cssproperty_-webkit-margin-after-collapse>");
<CSSStyleDeclaration>.setProperty("-webkit-margin-before", "<cssproperty_-webkit-margin-before>");
<CSSStyleDeclaration>.setProperty("-webkit-margin-before-collapse", "<cssproperty_-webkit-margin-before-collapse>");
<CSSStyleDeclaration>.setProperty("-webkit-margin-bottom-collapse", "<cssproperty_-webkit-margin-bottom-collapse>");
<CSSStyleDeclaration>.setProperty("-webkit-margin-collapse", "<cssproperty_-webkit-margin-collapse>");
<CSSStyleDeclaration>.setProperty("-webkit-margin-end", "<cssproperty_-webkit-margin-end>");
<CSSStyleDeclaration>.setProperty("-webkit-margin-start", "<cssproperty_-webkit-margin-start>");
<CSSStyleDeclaration>.setProperty("-webkit-margin-top-collapse", "<cssproperty_-webkit-margin-top-collapse>");
<CSSStyleDeclaration>.setProperty("-webkit-marquee-speed", "<cssproperty_-webkit-marquee-speed>");
<CSSStyleDeclaration>.setProperty("-webkit-mask", "<cssproperty_-webkit-mask>");
<CSSStyleDeclaration>.setProperty("-webkit-mask-box-image", "<cssproperty_-webkit-mask-box-image>");
<CSSStyleDeclaration>.setProperty("-webkit-mask-box-image-outset", "<cssproperty_-webkit-mask-box-image-outset>");
<CSSStyleDeclaration>.setProperty("-webkit-mask-box-image-repeat", "<cssproperty_-webkit-mask-box-image-repeat>");
<CSSStyleDeclaration>.setProperty("-webkit-mask-box-image-slice", "<cssproperty_-webkit-mask-box-image-slice>");
<CSSStyleDeclaration>.setProperty("-webkit-mask-box-image-source", "<cssproperty_-webkit-mask-box-image-source>");
<CSSStyleDeclaration>.setProperty("-webkit-mask-box-image-width", "<cssproperty_-webkit-mask-box-image-width>");
<CSSStyleDeclaration>.setProperty("-webkit-mask-clip", "<cssproperty_-webkit-mask-clip>");
<CSSStyleDeclaration>.setProperty("-webkit-mask-composite", "<cssproperty_-webkit-mask-composite>");
<CSSStyleDeclaration>.setProperty("-webkit-mask-image", "<cssproperty_-webkit-mask-image>");
<CSSStyleDeclaration>.setProperty("-webkit-mask-origin", "<cssproperty_-webkit-mask-origin>");
<CSSStyleDeclaration>.setProperty("-webkit-mask-position", "<cssproperty_-webkit-mask-position>");
<CSSStyleDeclaration>.setProperty("-webkit-mask-repeat", "<cssproperty_-webkit-mask-repeat>");
<CSSStyleDeclaration>.setProperty("-webkit-mask-repeat-y", "<cssproperty_-webkit-mask-repeat-y>");
<CSSStyleDeclaration>.setProperty("-webkit-mask-size", "<cssproperty_-webkit-mask-size>");
<CSSStyleDeclaration>.setProperty("-webkit-min-logical-height", "<cssproperty_-webkit-min-logical-height>");
<CSSStyleDeclaration>.setProperty("-webkit-nbsp-mode", "<cssproperty_-webkit-nbsp-mode>");
<CSSStyleDeclaration>.setProperty("-webkit-opacity", "<cssproperty_-webkit-opacity>");
<CSSStyleDeclaration>.setProperty("-webkit-overflow-scrolling", "<cssproperty_-webkit-overflow-scrolling>");
<CSSStyleDeclaration>.setProperty("-webkit-padding-after", "<cssproperty_-webkit-padding-after>");
<CSSStyleDeclaration>.setProperty("-webkit-padding-before", "<cssproperty_-webkit-padding-before>");
<CSSStyleDeclaration>.setProperty("-webkit-padding-end", "<cssproperty_-webkit-padding-end>");
<CSSStyleDeclaration>.setProperty("-webkit-padding-start", "<cssproperty_-webkit-padding-start>");
<CSSStyleDeclaration>.setProperty("-webkit-perspective", "<cssproperty_-webkit-perspective>");
<CSSStyleDeclaration>.setProperty("-webkit-perspective-origin", "<cssproperty_-webkit-perspective-origin>");
<CSSStyleDeclaration>.setProperty("-webkit-perspective-origin-x", "<cssproperty_-webkit-perspective-origin-x>");
<CSSStyleDeclaration>.setProperty("-webkit-perspective-origin-y", "<cssproperty_-webkit-perspective-origin-y>");
<CSSStyleDeclaration>.setProperty("-webkit-print-color-adjust", "<cssproperty_-webkit-print-color-adjust>");
<CSSStyleDeclaration>.setProperty("-webkit-rtl-ordering", "<cssproperty_-webkit-rtl-ordering>");
<CSSStyleDeclaration>.setProperty("-webkit-ruby-position", "<cssproperty_-webkit-ruby-position>");
<CSSStyleDeclaration>.setProperty("-webkit-shape-margin", "<cssproperty_-webkit-shape-margin>");
<CSSStyleDeclaration>.setProperty("-webkit-shape-outside", "<cssproperty_-webkit-shape-outside>");
<CSSStyleDeclaration>.setProperty("-webkit-tap-highlight-color", "<cssproperty_-webkit-tap-highlight-color>");
<CSSStyleDeclaration>.setProperty("-webkit-text-combine", "<cssproperty_-webkit-text-combine>");
<CSSStyleDeclaration>.setProperty("-webkit-text-decorations-in-effect", "<cssproperty_-webkit-text-decorations-in-effect>");
<CSSStyleDeclaration>.setProperty("-webkit-text-emphasis", "<cssproperty_-webkit-text-emphasis>");
<CSSStyleDeclaration>.setProperty("-webkit-text-emphasis-color", "<cssproperty_-webkit-text-emphasis-color>");
<CSSStyleDeclaration>.setProperty("-webkit-text-emphasis-position", "<cssproperty_-webkit-text-emphasis-position>");
<CSSStyleDeclaration>.setProperty("-webkit-text-emphasis-style", "<cssproperty_-webkit-text-emphasis-style>");
<CSSStyleDeclaration>.setProperty("-webkit-text-fill-color", "<cssproperty_-webkit-text-fill-color>");
<CSSStyleDeclaration>.setProperty("-webkit-text-orientation", "<cssproperty_-webkit-text-orientation>");
<CSSStyleDeclaration>.setProperty("-webkit-text-security", "<cssproperty_-webkit-text-security>");
<CSSStyleDeclaration>.setProperty("-webkit-text-stroke", "<cssproperty_-webkit-text-stroke>");
<CSSStyleDeclaration>.setProperty("-webkit-text-stroke-color", "<cssproperty_-webkit-text-stroke-color>");
<CSSStyleDeclaration>.setProperty("-webkit-text-stroke-width", "<cssproperty_-webkit-text-stroke-width>");
<CSSStyleDeclaration>.setProperty("-webkit-transform", "<cssproperty_-webkit-transform>");
<CSSStyleDeclaration>.setProperty("-webkit-transform-origin", "<cssproperty_-webkit-transform-origin>");
<CSSStyleDeclaration>.setProperty("-webkit-transform-style", "<cssproperty_-webkit-transform-style>");
<CSSStyleDeclaration>.setProperty("-webkit-transition", "<cssproperty_-webkit-transition>");
<CSSStyleDeclaration>.setProperty("-webkit-transition-delay", "<cssproperty_-webkit-transition-delay>");
<CSSStyleDeclaration>.setProperty("-webkit-transition-duration", "<cssproperty_-webkit-transition-duration>");
<CSSStyleDeclaration>.setProperty("-webkit-transition-property", "<cssproperty_-webkit-transition-property>");
<CSSStyleDeclaration>.setProperty("-webkit-transition-timing-function", "<cssproperty_-webkit-transition-timing-function>");
<CSSStyleDeclaration>.setProperty("-webkit-user-drag", "<cssproperty_-webkit-user-drag>");
<CSSStyleDeclaration>.setProperty("-webkit-user-modify", "<cssproperty_-webkit-user-modify>");
<CSSStyleDeclaration>.setProperty("-webkit-user-select", "<cssproperty_-webkit-user-select>");
<CSSStyleDeclaration>.setProperty("-webkit-wrap-flow", "<cssproperty_-webkit-wrap-flow>");
<CSSStyleDeclaration>.setProperty("-webkit-writing-mode", "<cssproperty_-webkit-writing-mode>");
<CSSStyleDeclaration>.setProperty("align-content", "<cssproperty_align-content>");
<CSSStyleDeclaration>.setProperty("align-items", "<cssproperty_align-items>");
<CSSStyleDeclaration>.setProperty("align-self", "<cssproperty_align-self>");
<CSSStyleDeclaration>.setProperty("alignx", "<cssproperty_alignx>");
<CSSStyleDeclaration>.setProperty("animation", "<cssproperty_animation>");
<CSSStyleDeclaration>.setProperty("animation-delay", "<cssproperty_animation-delay>");
<CSSStyleDeclaration>.setProperty("animation-direction", "<cssproperty_animation-direction>");
<CSSStyleDeclaration>.setProperty("animation-duration", "<cssproperty_animation-duration>");
<CSSStyleDeclaration>.setProperty("animation-fill-mode", "<cssproperty_animation-fill-mode>");
<CSSStyleDeclaration>.setProperty("animation-iteration-count", "<cssproperty_animation-iteration-count>");
<CSSStyleDeclaration>.setProperty("animation-name", "<cssproperty_animation-name>");
<CSSStyleDeclaration>.setProperty("animation-play-state", "<cssproperty_animation-play-state>");
<CSSStyleDeclaration>.setProperty("animation-timing-function", "<cssproperty_animation-timing-function>");
<CSSStyleDeclaration>.setProperty("backdrop-filter", "<cssproperty_backdrop-filter>");
<CSSStyleDeclaration>.setProperty("backface-visibility", "<cssproperty_backface-visibility>");
<CSSStyleDeclaration>.setProperty("background", "<cssproperty_background>");
<CSSStyleDeclaration>.setProperty("background-attachment", "<cssproperty_background-attachment>");
<CSSStyleDeclaration>.setProperty("background-blend-mode", "<cssproperty_background-blend-mode>");
<CSSStyleDeclaration>.setProperty("background-clip", "<cssproperty_background-clip>");
<CSSStyleDeclaration>.setProperty("background-color", "<cssproperty_background-color>");
<CSSStyleDeclaration>.setProperty("background-image", "<cssproperty_background-image>");
<CSSStyleDeclaration>.setProperty("background-origin", "<cssproperty_background-origin>");
<CSSStyleDeclaration>.setProperty("background-position", "<cssproperty_background-position>");
<CSSStyleDeclaration>.setProperty("background-position-x", "<cssproperty_background-position-x>");
<CSSStyleDeclaration>.setProperty("background-repeat", "<cssproperty_background-repeat>");
<CSSStyleDeclaration>.setProperty("background-repeat-x", "<cssproperty_background-repeat-x>");
<CSSStyleDeclaration>.setProperty("background-repeat-y", "<cssproperty_background-repeat-y>");
<CSSStyleDeclaration>.setProperty("background-size", "<cssproperty_background-size>");
<CSSStyleDeclaration>.setProperty("baseline-shift", "<cssproperty_baseline-shift>");
<CSSStyleDeclaration>.setProperty("border", "<cssproperty_border>");
<CSSStyleDeclaration>.setProperty("border-bottom", "<cssproperty_border-bottom>");
<CSSStyleDeclaration>.setProperty("border-bottom-color", "<cssproperty_border-bottom-color>");
<CSSStyleDeclaration>.setProperty("border-bottom-left-radius", "<cssproperty_border-bottom-left-radius>");
<CSSStyleDeclaration>.setProperty("border-bottom-right-radius", "<cssproperty_border-bottom-right-radius>");
<CSSStyleDeclaration>.setProperty("border-bottom-style", "<cssproperty_border-bottom-style>");
<CSSStyleDeclaration>.setProperty("border-bottom-width", "<cssproperty_border-bottom-width>");
<CSSStyleDeclaration>.setProperty("border-collapse", "<cssproperty_border-collapse>");
<CSSStyleDeclaration>.setProperty("border-color", "<cssproperty_border-color>");
<CSSStyleDeclaration>.setProperty("border-image", "<cssproperty_border-image>");
<CSSStyleDeclaration>.setProperty("border-image-outset", "<cssproperty_border-image-outset>");
<CSSStyleDeclaration>.setProperty("border-image-repeat", "<cssproperty_border-image-repeat>");
<CSSStyleDeclaration>.setProperty("border-image-slice", "<cssproperty_border-image-slice>");
<CSSStyleDeclaration>.setProperty("border-image-source", "<cssproperty_border-image-source>");
<CSSStyleDeclaration>.setProperty("border-image-width", "<cssproperty_border-image-width>");
<CSSStyleDeclaration>.setProperty("border-left", "<cssproperty_border-left>");
<CSSStyleDeclaration>.setProperty("border-left-color", "<cssproperty_border-left-color>");
<CSSStyleDeclaration>.setProperty("border-left-style", "<cssproperty_border-left-style>");
<CSSStyleDeclaration>.setProperty("border-left-width", "<cssproperty_border-left-width>");
<CSSStyleDeclaration>.setProperty("border-radius", "<cssproperty_border-radius>");
<CSSStyleDeclaration>.setProperty("border-right", "<cssproperty_border-right>");
<CSSStyleDeclaration>.setProperty("border-right-color", "<cssproperty_border-right-color>");
<CSSStyleDeclaration>.setProperty("border-right-style", "<cssproperty_border-right-style>");
<CSSStyleDeclaration>.setProperty("border-right-width", "<cssproperty_border-right-width>");
<CSSStyleDeclaration>.setProperty("border-size", "<cssproperty_border-size>");
<CSSStyleDeclaration>.setProperty("border-spacing", "<cssproperty_border-spacing>");
<CSSStyleDeclaration>.setProperty("border-style", "<cssproperty_border-style>");
<CSSStyleDeclaration>.setProperty("border-top", "<cssproperty_border-top>");
<CSSStyleDeclaration>.setProperty("border-top-color", "<cssproperty_border-top-color>");
<CSSStyleDeclaration>.setProperty("border-top-left-radius", "<cssproperty_border-top-left-radius>");
<CSSStyleDeclaration>.setProperty("border-top-right-radius", "<cssproperty_border-top-right-radius>");
<CSSStyleDeclaration>.setProperty("border-top-style", "<cssproperty_border-top-style>");
<CSSStyleDeclaration>.setProperty("border-top-width", "<cssproperty_border-top-width>");
<CSSStyleDeclaration>.setProperty("border-width", "<cssproperty_border-width>");
<CSSStyleDeclaration>.setProperty("bottom", "<cssproperty_bottom>");
<CSSStyleDeclaration>.setProperty("box-align", "<cssproperty_box-align>");
<CSSStyleDeclaration>.setProperty("box-decoration-break", "<cssproperty_box-decoration-break>");
<CSSStyleDeclaration>.setProperty("box-direction", "<cssproperty_box-direction>");
<CSSStyleDeclaration>.setProperty("box-flex", "<cssproperty_box-flex>");
<CSSStyleDeclaration>.setProperty("box-flex-group", "<cssproperty_box-flex-group>");
<CSSStyleDeclaration>.setProperty("box-ordinal-group", "<cssproperty_box-ordinal-group>");
<CSSStyleDeclaration>.setProperty("box-orient", "<cssproperty_box-orient>");
<CSSStyleDeclaration>.setProperty("box-pack", "<cssproperty_box-pack>");
<CSSStyleDeclaration>.setProperty("box-reflect", "<cssproperty_box-reflect>");
<CSSStyleDeclaration>.setProperty("box-shadow", "<cssproperty_box-shadow>");
<CSSStyleDeclaration>.setProperty("box-sizing", "<cssproperty_box-sizing>");
<CSSStyleDeclaration>.setProperty("break-after", "<cssproperty_break-after>");
<CSSStyleDeclaration>.setProperty("break-before", "<cssproperty_break-before>");
<CSSStyleDeclaration>.setProperty("break-inside", "<cssproperty_break-inside>");
<CSSStyleDeclaration>.setProperty("caption-side", "<cssproperty_caption-side>");
<CSSStyleDeclaration>.setProperty("cellpadding", "<cssproperty_cellpadding>");
<CSSStyleDeclaration>.setProperty("cellspacing", "<cssproperty_cellspacing>");
<CSSStyleDeclaration>.setProperty("clear", "<cssproperty_clear>");
<CSSStyleDeclaration>.setProperty("clip", "<cssproperty_clip>");
<CSSStyleDeclaration>.setProperty("clip-path", "<cssproperty_clip-path>");
<CSSStyleDeclaration>.setProperty("color", "<cssproperty_color>");
<CSSStyleDeclaration>.setProperty("color-interpolation-filters", "<cssproperty_color-interpolation-filters>");
<CSSStyleDeclaration>.setProperty("color-profile", "<cssproperty_color-profile>");
<CSSStyleDeclaration>.setProperty("column-break-after", "<cssproperty_column-break-after>");
<CSSStyleDeclaration>.setProperty("column-break-before", "<cssproperty_column-break-before>");
<CSSStyleDeclaration>.setProperty("column-count", "<cssproperty_column-count>");
<CSSStyleDeclaration>.setProperty("column-fill", "<cssproperty_column-fill>");
<CSSStyleDeclaration>.setProperty("column-gap", "<cssproperty_column-gap>");
<CSSStyleDeclaration>.setProperty("column-rule", "<cssproperty_column-rule>");
<CSSStyleDeclaration>.setProperty("column-rule-style", "<cssproperty_column-rule-style>");
<CSSStyleDeclaration>.setProperty("column-span", "<cssproperty_column-span>");
<CSSStyleDeclaration>.setProperty("column-width", "<cssproperty_column-width>");
<CSSStyleDeclaration>.setProperty("columns", "<cssproperty_columns>");
<CSSStyleDeclaration>.setProperty("contain", "<cssproperty_contain>");
<CSSStyleDeclaration>.setProperty("content", "<cssproperty_content>");
<CSSStyleDeclaration>.setProperty("counter-increment", "<cssproperty_counter-increment>");
<CSSStyleDeclaration>.setProperty("counter-reset", "<cssproperty_counter-reset>");
<CSSStyleDeclaration>.setProperty("css-float", "<cssproperty_css-float>");
<CSSStyleDeclaration>.setProperty("cursor", "<cssproperty_cursor>");
<CSSStyleDeclaration>.setProperty("cx", "<cssproperty_cx>");
<CSSStyleDeclaration>.setProperty("cy", "<cssproperty_cy>");
<CSSStyleDeclaration>.setProperty("direction", "<cssproperty_direction>");
<CSSStyleDeclaration>.setProperty("display", "<cssproperty_display>");
<CSSStyleDeclaration>.setProperty("dominant-baseline", "<cssproperty_dominant-baseline>");
<CSSStyleDeclaration>.setProperty("empty-cells", "<cssproperty_empty-cells>");
<CSSStyleDeclaration>.setProperty("fill", "<cssproperty_fill>");
<CSSStyleDeclaration>.setProperty("fill-opacity", "<cssproperty_fill-opacity>");
<CSSStyleDeclaration>.setProperty("fill-rule", "<cssproperty_fill-rule>");
<CSSStyleDeclaration>.setProperty("filter", "<cssproperty_filter>");
<CSSStyleDeclaration>.setProperty("flex", "<cssproperty_flex>");
<CSSStyleDeclaration>.setProperty("flex-basis", "<cssproperty_flex-basis>");
<CSSStyleDeclaration>.setProperty("flex-direction", "<cssproperty_flex-direction>");
<CSSStyleDeclaration>.setProperty("flex-flow", "<cssproperty_flex-flow>");
<CSSStyleDeclaration>.setProperty("flex-grow", "<cssproperty_flex-grow>");
<CSSStyleDeclaration>.setProperty("flex-shrink", "<cssproperty_flex-shrink>");
<CSSStyleDeclaration>.setProperty("flex-wrap", "<cssproperty_flex-wrap>");
<CSSStyleDeclaration>.setProperty("float", "<cssproperty_float>");
<CSSStyleDeclaration>.setProperty("flood-color", "<cssproperty_flood-color>");
<CSSStyleDeclaration>.setProperty("flood-opacity", "<cssproperty_flood-opacity>");
<CSSStyleDeclaration>.setProperty("font", "<cssproperty_font>");
<CSSStyleDeclaration>.setProperty("font-face", "<cssproperty_font-face>");
<CSSStyleDeclaration>.setProperty("font-family", "<cssproperty_font-family>");
<CSSStyleDeclaration>.setProperty("font-feature-settings", "<cssproperty_font-feature-settings>");
<CSSStyleDeclaration>.setProperty("font-kerning", "<cssproperty_font-kerning>");
<CSSStyleDeclaration>.setProperty("font-size", "<cssproperty_font-size>");
<CSSStyleDeclaration>.setProperty("font-size-adjust", "<cssproperty_font-size-adjust>");
<CSSStyleDeclaration>.setProperty("font-stretch", "<cssproperty_font-stretch>");
<CSSStyleDeclaration>.setProperty("font-style", "<cssproperty_font-style>");
<CSSStyleDeclaration>.setProperty("font-variant", "<cssproperty_font-variant>");
<CSSStyleDeclaration>.setProperty("font-variant-caps", "<cssproperty_font-variant-caps>");
<CSSStyleDeclaration>.setProperty("font-variant-ligatures", "<cssproperty_font-variant-ligatures>");
<CSSStyleDeclaration>.setProperty("font-vendor", "<cssproperty_font-vendor>");
<CSSStyleDeclaration>.setProperty("font-weight", "<cssproperty_font-weight>");
<CSSStyleDeclaration>.setProperty("grid", "<cssproperty_grid>");
<CSSStyleDeclaration>.setProperty("grid-area", "<cssproperty_grid-area>");
<CSSStyleDeclaration>.setProperty("grid-auto-columns", "<cssproperty_grid-auto-columns>");
<CSSStyleDeclaration>.setProperty("grid-auto-flow", "<cssproperty_grid-auto-flow>");
<CSSStyleDeclaration>.setProperty("grid-auto-rows", "<cssproperty_grid-auto-rows>");
<CSSStyleDeclaration>.setProperty("grid-column", "<cssproperty_grid-column>");
<CSSStyleDeclaration>.setProperty("grid-column-end", "<cssproperty_grid-column-end>");
<CSSStyleDeclaration>.setProperty("grid-column-gap", "<cssproperty_grid-column-gap>");
<CSSStyleDeclaration>.setProperty("grid-column-start", "<cssproperty_grid-column-start>");
<CSSStyleDeclaration>.setProperty("grid-gap", "<cssproperty_grid-gap>");
<CSSStyleDeclaration>.setProperty("grid-row", "<cssproperty_grid-row>");
<CSSStyleDeclaration>.setProperty("grid-row-end", "<cssproperty_grid-row-end>");
<CSSStyleDeclaration>.setProperty("grid-row-gap", "<cssproperty_grid-row-gap>");
<CSSStyleDeclaration>.setProperty("grid-row-start", "<cssproperty_grid-row-start>");
<CSSStyleDeclaration>.setProperty("grid-template", "<cssproperty_grid-template>");
<CSSStyleDeclaration>.setProperty("grid-template-areas", "<cssproperty_grid-template-areas>");
<CSSStyleDeclaration>.setProperty("grid-template-columns", "<cssproperty_grid-template-columns>");
<CSSStyleDeclaration>.setProperty("grid-template-rows", "<cssproperty_grid-template-rows>");
<CSSStyleDeclaration>.setProperty("height", "<cssproperty_height>");
<CSSStyleDeclaration>.setProperty("hyphens", "<cssproperty_hyphens>");
<CSSStyleDeclaration>.setProperty("image-orientation", "<cssproperty_image-orientation>");
<CSSStyleDeclaration>.setProperty("image-rendering", "<cssproperty_image-rendering>");
<CSSStyleDeclaration>.setProperty("isolation", "<cssproperty_isolation>");
<CSSStyleDeclaration>.setProperty("justify-content", "<cssproperty_justify-content>");
<CSSStyleDeclaration>.setProperty("justify-items", "<cssproperty_justify-items>");
<CSSStyleDeclaration>.setProperty("justify-self", "<cssproperty_justify-self>");
<CSSStyleDeclaration>.setProperty("kerning", "<cssproperty_kerning>");
<CSSStyleDeclaration>.setProperty("left", "<cssproperty_left>");
<CSSStyleDeclaration>.setProperty("letter-spacing", "<cssproperty_letter-spacing>");
<CSSStyleDeclaration>.setProperty("lighting-color", "<cssproperty_lighting-color>");
<CSSStyleDeclaration>.setProperty("line-break", "<cssproperty_line-break>");
<CSSStyleDeclaration>.setProperty("line-height", "<cssproperty_line-height>");
<CSSStyleDeclaration>.setProperty("list-style", "<cssproperty_list-style>");
<CSSStyleDeclaration>.setProperty("list-style-image", "<cssproperty_list-style-image>");
<CSSStyleDeclaration>.setProperty("list-style-position", "<cssproperty_list-style-position>");
<CSSStyleDeclaration>.setProperty("list-style-type", "<cssproperty_list-style-type>");
<CSSStyleDeclaration>.setProperty("margin", "<cssproperty_margin>");
<CSSStyleDeclaration>.setProperty("margin-bottom", "<cssproperty_margin-bottom>");
<CSSStyleDeclaration>.setProperty("margin-left", "<cssproperty_margin-left>");
<CSSStyleDeclaration>.setProperty("margin-right", "<cssproperty_margin-right>");
<CSSStyleDeclaration>.setProperty("margin-top", "<cssproperty_margin-top>");
<CSSStyleDeclaration>.setProperty("marker", "<cssproperty_marker>");
<CSSStyleDeclaration>.setProperty("marker-mid", "<cssproperty_marker-mid>");
<CSSStyleDeclaration>.setProperty("mask-source-type", "<cssproperty_mask-source-type>");
<CSSStyleDeclaration>.setProperty("max-height", "<cssproperty_max-height>");
<CSSStyleDeclaration>.setProperty("max-width", "<cssproperty_max-width>");
<CSSStyleDeclaration>.setProperty("max-zoom", "<cssproperty_max-zoom>");
<CSSStyleDeclaration>.setProperty("min-height", "<cssproperty_min-height>");
<CSSStyleDeclaration>.setProperty("min-width", "<cssproperty_min-width>");
<CSSStyleDeclaration>.setProperty("min-zoom", "<cssproperty_min-zoom>");
<CSSStyleDeclaration>.setProperty("mix-blend-mode", "<cssproperty_mix-blend-mode>");
<CSSStyleDeclaration>.setProperty("motion", "<cssproperty_motion>");
<CSSStyleDeclaration>.setProperty("motion-offset", "<cssproperty_motion-offset>");
<CSSStyleDeclaration>.setProperty("motion-path", "<cssproperty_motion-path>");
<CSSStyleDeclaration>.setProperty("motion-rotation", "<cssproperty_motion-rotation>");
<CSSStyleDeclaration>.setProperty("mso-background-source", "<cssproperty_mso-background-source>");
<CSSStyleDeclaration>.setProperty("mso-bidi-font-size", "<cssproperty_mso-bidi-font-size>");
<CSSStyleDeclaration>.setProperty("mso-border-alt", "<cssproperty_mso-border-alt>");
<CSSStyleDeclaration>.setProperty("mso-border-left-alt", "<cssproperty_mso-border-left-alt>");
<CSSStyleDeclaration>.setProperty("mso-border-top-alt", "<cssproperty_mso-border-top-alt>");
<CSSStyleDeclaration>.setProperty("mso-data-placement", "<cssproperty_mso-data-placement>");
<CSSStyleDeclaration>.setProperty("mso-displayed-decimal-separator", "<cssproperty_mso-displayed-decimal-separator>");
<CSSStyleDeclaration>.setProperty("mso-displayed-thousand-separator", "<cssproperty_mso-displayed-thousand-separator>");
<CSSStyleDeclaration>.setProperty("mso-fareast-font-family", "<cssproperty_mso-fareast-font-family>");
<CSSStyleDeclaration>.setProperty("mso-font-charset", "<cssproperty_mso-font-charset>");
<CSSStyleDeclaration>.setProperty("mso-font-kerning", "<cssproperty_mso-font-kerning>");
<CSSStyleDeclaration>.setProperty("mso-generic-font-family", "<cssproperty_mso-generic-font-family>");
<CSSStyleDeclaration>.setProperty("mso-height-source", "<cssproperty_mso-height-source>");
<CSSStyleDeclaration>.setProperty("mso-ignore", "<cssproperty_mso-ignore>");
<CSSStyleDeclaration>.setProperty("mso-number-format", "<cssproperty_mso-number-format>");
<CSSStyleDeclaration>.setProperty("mso-outline-level", "<cssproperty_mso-outline-level>");
<CSSStyleDeclaration>.setProperty("mso-padding-alt", "<cssproperty_mso-padding-alt>");
<CSSStyleDeclaration>.setProperty("mso-pagination", "<cssproperty_mso-pagination>");
<CSSStyleDeclaration>.setProperty("mso-pattern", "<cssproperty_mso-pattern>");
<CSSStyleDeclaration>.setProperty("mso-protection", "<cssproperty_mso-protection>");
<CSSStyleDeclaration>.setProperty("mso-rotate", "<cssproperty_mso-rotate>");
<CSSStyleDeclaration>.setProperty("mso-style-id", "<cssproperty_mso-style-id>");
<CSSStyleDeclaration>.setProperty("mso-style-name", "<cssproperty_mso-style-name>");
<CSSStyleDeclaration>.setProperty("mso-style-next", "<cssproperty_mso-style-next>");
<CSSStyleDeclaration>.setProperty("mso-style-parent", "<cssproperty_mso-style-parent>");
<CSSStyleDeclaration>.setProperty("mso-width-alt", "<cssproperty_mso-width-alt>");
<CSSStyleDeclaration>.setProperty("mso-width-source", "<cssproperty_mso-width-source>");
<CSSStyleDeclaration>.setProperty("object-fit", "<cssproperty_object-fit>");
<CSSStyleDeclaration>.setProperty("object-position", "<cssproperty_object-position>");
<CSSStyleDeclaration>.setProperty("offset", "<cssproperty_offset>");
<CSSStyleDeclaration>.setProperty("offset-anchor", "<cssproperty_offset-anchor>");
<CSSStyleDeclaration>.setProperty("offset-distance", "<cssproperty_offset-distance>");
<CSSStyleDeclaration>.setProperty("offset-path", "<cssproperty_offset-path>");
<CSSStyleDeclaration>.setProperty("offset-position", "<cssproperty_offset-position>");
<CSSStyleDeclaration>.setProperty("offset-rotation", "<cssproperty_offset-rotation>");
<CSSStyleDeclaration>.setProperty("opacity", "<cssproperty_opacity>");
<CSSStyleDeclaration>.setProperty("order", "<cssproperty_order>");
<CSSStyleDeclaration>.setProperty("orientation", "<cssproperty_orientation>");
<CSSStyleDeclaration>.setProperty("orphans", "<cssproperty_orphans>");
<CSSStyleDeclaration>.setProperty("outline", "<cssproperty_outline>");
<CSSStyleDeclaration>.setProperty("outline-bottom", "<cssproperty_outline-bottom>");
<CSSStyleDeclaration>.setProperty("outline-color", "<cssproperty_outline-color>");
<CSSStyleDeclaration>.setProperty("outline-offset", "<cssproperty_outline-offset>");
<CSSStyleDeclaration>.setProperty("outline-style", "<cssproperty_outline-style>");
<CSSStyleDeclaration>.setProperty("outline-width", "<cssproperty_outline-width>");
<CSSStyleDeclaration>.setProperty("overflow", "<cssproperty_overflow>");
<CSSStyleDeclaration>.setProperty("overflow-anchor", "<cssproperty_overflow-anchor>");
<CSSStyleDeclaration>.setProperty("overflow-wrap", "<cssproperty_overflow-wrap>");
<CSSStyleDeclaration>.setProperty("overflow-x", "<cssproperty_overflow-x>");
<CSSStyleDeclaration>.setProperty("overflow-y", "<cssproperty_overflow-y>");
<CSSStyleDeclaration>.setProperty("padding", "<cssproperty_padding>");
<CSSStyleDeclaration>.setProperty("padding-bottom", "<cssproperty_padding-bottom>");
<CSSStyleDeclaration>.setProperty("padding-left", "<cssproperty_padding-left>");
<CSSStyleDeclaration>.setProperty("padding-right", "<cssproperty_padding-right>");
<CSSStyleDeclaration>.setProperty("padding-top", "<cssproperty_padding-top>");
<CSSStyleDeclaration>.setProperty("page", "<cssproperty_page>");
<CSSStyleDeclaration>.setProperty("page-break-after", "<cssproperty_page-break-after>");
<CSSStyleDeclaration>.setProperty("page-break-before", "<cssproperty_page-break-before>");
<CSSStyleDeclaration>.setProperty("page-break-inside", "<cssproperty_page-break-inside>");
<CSSStyleDeclaration>.setProperty("perspective", "<cssproperty_perspective>");
<CSSStyleDeclaration>.setProperty("perspective-origin", "<cssproperty_perspective-origin>");
<CSSStyleDeclaration>.setProperty("pointer-events", "<cssproperty_pointer-events>");
<CSSStyleDeclaration>.setProperty("position", "<cssproperty_position>");
<CSSStyleDeclaration>.setProperty("prince-hyphens", "<cssproperty_prince-hyphens>");
<CSSStyleDeclaration>.setProperty("quotes", "<cssproperty_quotes>");
<CSSStyleDeclaration>.setProperty("resize", "<cssproperty_resize>");
<CSSStyleDeclaration>.setProperty("right", "<cssproperty_right>");
<CSSStyleDeclaration>.setProperty("rotate", "<cssproperty_rotate>");
<CSSStyleDeclaration>.setProperty("rotation", "<cssproperty_rotation>");
<CSSStyleDeclaration>.setProperty("rotation-code", "<cssproperty_rotation-code>");
<CSSStyleDeclaration>.setProperty("rx", "<cssproperty_rx>");
<CSSStyleDeclaration>.setProperty("ry", "<cssproperty_ry>");
<CSSStyleDeclaration>.setProperty("scale", "<cssproperty_scale>");
<CSSStyleDeclaration>.setProperty("scroll-behavior", "<cssproperty_scroll-behavior>");
<CSSStyleDeclaration>.setProperty("scroll-snap-coordinate", "<cssproperty_scroll-snap-coordinate>");
<CSSStyleDeclaration>.setProperty("scroll-snap-destination", "<cssproperty_scroll-snap-destination>");
<CSSStyleDeclaration>.setProperty("scroll-snap-points-x", "<cssproperty_scroll-snap-points-x>");
<CSSStyleDeclaration>.setProperty("scroll-snap-points-y", "<cssproperty_scroll-snap-points-y>");
<CSSStyleDeclaration>.setProperty("scroll-snap-type", "<cssproperty_scroll-snap-type>");
<CSSStyleDeclaration>.setProperty("shape-image-threshold", "<cssproperty_shape-image-threshold>");
<CSSStyleDeclaration>.setProperty("shape-inside", "<cssproperty_shape-inside>");
<CSSStyleDeclaration>.setProperty("shape-margin", "<cssproperty_shape-margin>");
<CSSStyleDeclaration>.setProperty("shape-outside", "<cssproperty_shape-outside>");
<CSSStyleDeclaration>.setProperty("snap-height", "<cssproperty_snap-height>");
<CSSStyleDeclaration>.setProperty("src", "<cssproperty_src>");
<CSSStyleDeclaration>.setProperty("stop-color", "<cssproperty_stop-color>");
<CSSStyleDeclaration>.setProperty("stop-opacity", "<cssproperty_stop-opacity>");
<CSSStyleDeclaration>.setProperty("stroke", "<cssproperty_stroke>");
<CSSStyleDeclaration>.setProperty("stroke-dasharray", "<cssproperty_stroke-dasharray>");
<CSSStyleDeclaration>.setProperty("stroke-dashoffset", "<cssproperty_stroke-dashoffset>");
<CSSStyleDeclaration>.setProperty("stroke-linecap", "<cssproperty_stroke-linecap>");
<CSSStyleDeclaration>.setProperty("stroke-linejoin", "<cssproperty_stroke-linejoin>");
<CSSStyleDeclaration>.setProperty("stroke-miterlimit", "<cssproperty_stroke-miterlimit>");
<CSSStyleDeclaration>.setProperty("stroke-opacity", "<cssproperty_stroke-opacity>");
<CSSStyleDeclaration>.setProperty("stroke-width", "<cssproperty_stroke-width>");
<CSSStyleDeclaration>.setProperty("tab-size", "<cssproperty_tab-size>");
<CSSStyleDeclaration>.setProperty("table-layout", "<cssproperty_table-layout>");
<CSSStyleDeclaration>.setProperty("text-align", "<cssproperty_text-align>");
<CSSStyleDeclaration>.setProperty("text-align-last", "<cssproperty_text-align-last>");
<CSSStyleDeclaration>.setProperty("text-anchor", "<cssproperty_text-anchor>");
<CSSStyleDeclaration>.setProperty("text-combine-upright", "<cssproperty_text-combine-upright>");
<CSSStyleDeclaration>.setProperty("text-decoration", "<cssproperty_text-decoration>");
<CSSStyleDeclaration>.setProperty("text-decoration-color", "<cssproperty_text-decoration-color>");
<CSSStyleDeclaration>.setProperty("text-decoration-line", "<cssproperty_text-decoration-line>");
<CSSStyleDeclaration>.setProperty("text-decoration-style", "<cssproperty_text-decoration-style>");
<CSSStyleDeclaration>.setProperty("text-decoration-upright", "<cssproperty_text-decoration-upright>");
<CSSStyleDeclaration>.setProperty("text-indent", "<cssproperty_text-indent>");
<CSSStyleDeclaration>.setProperty("text-justify", "<cssproperty_text-justify>");
<CSSStyleDeclaration>.setProperty("text-orientation", "<cssproperty_text-orientation>");
<CSSStyleDeclaration>.setProperty("text-overflow", "<cssproperty_text-overflow>");
<CSSStyleDeclaration>.setProperty("text-rendering", "<cssproperty_text-rendering>");
<CSSStyleDeclaration>.setProperty("text-shadow", "<cssproperty_text-shadow>");
<CSSStyleDeclaration>.setProperty("text-transform", "<cssproperty_text-transform>");
<CSSStyleDeclaration>.setProperty("text-underline", "<cssproperty_text-underline>");
<CSSStyleDeclaration>.setProperty("text-underline-position", "<cssproperty_text-underline-position>");
<CSSStyleDeclaration>.setProperty("top", "<cssproperty_top>");
<CSSStyleDeclaration>.setProperty("touch-action", "<cssproperty_touch-action>");
<CSSStyleDeclaration>.setProperty("transform", "<cssproperty_transform>");
<CSSStyleDeclaration>.setProperty("transform-origin", "<cssproperty_transform-origin>");
<CSSStyleDeclaration>.setProperty("transform-style", "<cssproperty_transform-style>");
<CSSStyleDeclaration>.setProperty("transition", "<cssproperty_transition>");
<CSSStyleDeclaration>.setProperty("transition-delay", "<cssproperty_transition-delay>");
<CSSStyleDeclaration>.setProperty("transition-duration", "<cssproperty_transition-duration>");
<CSSStyleDeclaration>.setProperty("transition-properties", "<cssproperty_transition-properties>");
<CSSStyleDeclaration>.setProperty("transition-property", "<cssproperty_transition-property>");
<CSSStyleDeclaration>.setProperty("transition-timing-function", "<cssproperty_transition-timing-function>");
<CSSStyleDeclaration>.setProperty("translate", "<cssproperty_translate>");
<CSSStyleDeclaration>.setProperty("unicode-bidi", "<cssproperty_unicode-bidi>");
<CSSStyleDeclaration>.setProperty("user-select", "<cssproperty_user-select>");
<CSSStyleDeclaration>.setProperty("user-zoom", "<cssproperty_user-zoom>");
<CSSStyleDeclaration>.setProperty("vector-effect", "<cssproperty_vector-effect>");
<CSSStyleDeclaration>.setProperty("vertical-align", "<cssproperty_vertical-align>");
<CSSStyleDeclaration>.setProperty("visibility", "<cssproperty_visibility>");
<CSSStyleDeclaration>.setProperty("weight", "<cssproperty_weight>");
<CSSStyleDeclaration>.setProperty("white", "<cssproperty_white>");
<CSSStyleDeclaration>.setProperty("white-space", "<cssproperty_white-space>");
<CSSStyleDeclaration>.setProperty("whitespace", "<cssproperty_whitespace>");
<CSSStyleDeclaration>.setProperty("widows", "<cssproperty_widows>");
<CSSStyleDeclaration>.setProperty("width", "<cssproperty_width>");
<CSSStyleDeclaration>.setProperty("will-change", "<cssproperty_will-change>");
<CSSStyleDeclaration>.setProperty("word-break", "<cssproperty_word-break>");
<CSSStyleDeclaration>.setProperty("word-space", "<cssproperty_word-space>");
<CSSStyleDeclaration>.setProperty("word-spacing", "<cssproperty_word-spacing>");
<CSSStyleDeclaration>.setProperty("word-wrap", "<cssproperty_word-wrap>");
<CSSStyleDeclaration>.setProperty("writing-mode", "<cssproperty_writing-mode>");
<CSSStyleDeclaration>.setProperty("z-index", "<cssproperty_z-index>");
<CSSStyleDeclaration>.setProperty("zoom", "<cssproperty_zoom>");
<CSSStyleDeclaration>.setProperty("<cssvar>", <string_cssvalue>);
<CSSStyleDeclaration>.setProperty(<string_cssproperty>, "var(<cssvar>)");

################################################

#SVG

################################################

#NodeList

#Node
<new SVGElement> = <SVGElement>.getRootNode(<GetRootNodeOptions>);
<new boolean> = <SVGElement>.isEqualNode(<SVGElement>);
<new boolean> = <SVGElement>.isSameNode(<SVGElement>);
<new short> = <SVGElement>.compareDocumentPosition(<SVGElement>);
<new boolean> = <SVGElement>.contains(<SVGElement>);
<new SVGElement> = <SVGElement id=1>.insertBefore(<SVGElement>,<SVGElement id=1>.childNodes[<int min=0 max=100>%<SVGElement id=1>.childNodes.length]);
<new SVGElement> = <SVGElement>.appendChild(<SVGElement>);
<new SVGElement> = <SVGElement id=1>.replaceChild(<SVGElement>,<SVGElement id=1>.childNodes[<int min=0 max=100>%<SVGElement id=1>.childNodes.length]);

#ChildNode
<SVGElement>.before(<SVGElement>);
<SVGElement>.after(<SVGElement>);
<SVGElement>.replaceWith(<SVGElement>);

#ParentNode
<SVGElement>.prepend(<SVGElement>);
<SVGElement>.append(<SVGElement>);
<new SVGElement> = <SVGElement>.querySelector("<selector>");
<new SVGNodeList> = <SVGElement>.querySelectorAll("<selector>");

#NonDocumentTypeChildNode

#Element
<SVGElement>.setPointerCapture(<fuzzint>);
<SVGElement>.releasePointerCapture(<fuzzint>);
<new boolean> = <SVGElement>.hasPointerCapture(<fuzzint>);
<new DOMString> = <SVGElement>.getAttribute(<string_attr>);
<new DOMString> = <SVGElement>.getAttributeNS("http://www.w3.org/2000/svg",<string_attr>);

#<SVGElement>.setAttribute(<DOMString>,<DOMString>);

#<SVGElement>.setAttributeNS(<DOMString>,<DOMString>,<DOMString>);
<new boolean> = <SVGElement>.hasAttribute(<string_attr>);
<new boolean> = <SVGElement>.hasAttributeNS("http://www.w3.org/2000/svg",<string_attr>);
<new Attr> = <SVGElement>.getAttributeNode(<string_attr>);
<new Attr> = <SVGElement>.getAttributeNodeNS("http://www.w3.org/2000/svg",<string_attr>);
<new HTMLCollection> = <SVGElement>.getElementsByTagName(<string_tag>);
<new HTMLCollection> = <SVGElement>.getElementsByTagNameNS("http://www.w3.org/2000/svg",<string_tag>);
<new HTMLCollection> = <SVGElement>.getElementsByClassName("<class>");
<new SVGElement> = <SVGElement>.insertAdjacentElement(<string_where>,<SVGElement>);
<SVGElement>.insertAdjacentText(<string_where>,<DOMString>);
<SVGElement>.innerHTML = <htmlstring>;
<SVGElement>.outerHTML = <htmlstring>;
<SVGElement>.insertAdjacentHTML(<string_where>,<htmlstring>);
<new ShadowRoot> = <SVGElement>.attachShadow(<ShadowRootInit>);
<SVGElement>.scroll(<ScrollToOptions>);
<SVGElement>.scrollTo(<ScrollToOptions>);
<SVGElement>.scrollBy(<ScrollToOptions>);
<SVGElement>.setApplyScroll(<ScrollStateCallback>,<NativeScrollBehavior>);
<SVGElement>.setDistributeScroll(<ScrollStateCallback>,<NativeScrollBehavior>);

#SVGTextContentElement
<new float> = <SVGTextContentElement>.getSubStringLength(<fuzzint>,<fuzzint>);
<new SVGPoint> = <SVGTextContentElement>.getStartPositionOfChar(<fuzzint>);
<new SVGPoint> = <SVGTextContentElement>.getEndPositionOfChar(<fuzzint>);
<new SVGRect> = <SVGTextContentElement>.getExtentOfChar(<fuzzint>);
<new float> = <SVGTextContentElement>.getRotationOfChar(<fuzzint>);
<SVGTextContentElement>.selectSubString(<fuzzint>,<fuzzint>);

#SVGViewElement

#SVGAnimatedLengthList

#SVGFEColorMatrixElement

#SVGDescElement

#SVGDiscardElement

#SVGNumber

#SVGAnimateElement

#SVGAnimatedInteger
<SVGAnimatedInteger>.baseVal = <fuzzint>;

#SVGAnimateMotionElement

#SVGRadialGradientElement

#SVGFEComponentTransferElement

#SVGTransformList
<new SVGTransform> = <SVGTransformList>.getItem(<fuzzint>);
<new SVGTransform> = <SVGTransformList>.insertItemBefore(<SVGTransform>,<fuzzint>);
<new SVGTransform> = <SVGTransformList>.replaceItem(<SVGTransform>,<fuzzint>);
<new SVGTransform> = <SVGTransformList>.removeItem(<fuzzint>);

#SVGFEDisplacementMapElement

#SVGGradientElement

#SVGNumberList
<new SVGNumber> = <SVGNumberList>.getItem(<fuzzint>);
<new SVGNumber> = <SVGNumberList>.insertItemBefore(<SVGNumber>,<fuzzint>);
<new SVGNumber> = <SVGNumberList>.replaceItem(<SVGNumber>,<fuzzint>);
<new SVGNumber> = <SVGNumberList>.removeItem(<fuzzint>);

#SVGFEFuncGElement

#SVGMatrix

#SVGFESpotLightElement

#SVGPatternElement

#SVGLinearGradientElement

#SVGRectElement

#SVGAnimatedRect

#SVGAnimateTransformElement

#SVGElement
<SVGElement>.tabIndex = <fuzzint>;

#SVGGraphicsElement

#SVGSVGElement
<new long> = <SVGSVGElement>.suspendRedraw(<fuzzint>);
<SVGSVGElement>.unsuspendRedraw(<fuzzint>);
<new NodeList> = <SVGSVGElement>.getIntersectionList(<SVGRect>,<SVGElement>);
<new NodeList> = <SVGSVGElement>.getEnclosureList(<SVGRect>,<SVGElement>);
<new boolean> = <SVGSVGElement>.checkIntersection(<SVGElement>,<SVGRect>);
<new boolean> = <SVGSVGElement>.checkEnclosure(<SVGElement>,<SVGRect>);

#SVGTextPathElement

#SVGFETileElement

#SVGFEPointLightElement

#SVGAnimatedNumber
<SVGAnimatedNumber>.baseVal = <fuzzint>;

#SVGForeignObjectElement

#SVGFECompositeElement

#SVGFEDropShadowElement

#SVGSetElement

#SVGRect
<SVGRect>.x = <fuzzint>;
<SVGRect>.y = <fuzzint>;
<SVGRect>.width = <fuzzint>;
<SVGRect>.height = <fuzzint>;

#SVGAngle
<SVGAngle>.newValueSpecifiedUnits(<fuzzint>,<float>);
<SVGAngle>.convertToSpecifiedUnits(<fuzzint>);

#SVGPreserveAspectRatio
<SVGPreserveAspectRatio>.align = <fuzzint>;
<SVGPreserveAspectRatio>.meetOrSlice = <fuzzint>;

#SVGFilterElement

#SVGURIReference

#SVGClipPathElement

#SVGImageElement

#SVGAnimatedTransformList

#SVGFEGaussianBlurElement

#SVGTextPositioningElement

#SVGFEFloodElement

#SVGMaskElement

#SVGMetadataElement

#SVGTitleElement

#SVGFEFuncAElement

#SVGFEDistantLightElement

#SVGAnimatedNumberList

#SVGFEFuncRElement

#SVGAnimatedAngle

#SVGViewSpec

#SVGAElement

#SVGAnimatedLength

#SVGFEMorphologyElement

#SVGLength
<SVGLength>.value = <fuzzint>;
<SVGLength>.valueInSpecifiedUnits = <fuzzint>;
<SVGLength>.newValueSpecifiedUnits(<fuzzint>,<fuzzint>);
<SVGLength>.convertToSpecifiedUnits(<fuzzint>);

#SVGMarkerElement

#SVGDefsElement

#SVGAnimationElement

#SVGFitToViewBox

#SVGPoint
<SVGPoint>.x = <fuzzint>;
<SVGPoint>.y = <fuzzint>;

#SVGUseElement

#SVGPolygonElement

#SVGSymbolElement

#SVGAnimatedPreserveAspectRatio

#SVGTextElement

#SVGFEMergeElement

#SVGFEImageElement

#SVGStringList
<new DOMString> = <SVGStringList>.getItem(<fuzzint>);
<new DOMString> = <SVGStringList>.insertItemBefore(<DOMString>,<fuzzint>);
<new DOMString> = <SVGStringList>.replaceItem(<DOMString>,<fuzzint>);
<new DOMString> = <SVGStringList>.removeItem(<fuzzint>);

#SVGLineElement

#SVGFEDiffuseLightingElement

#SVGPointList
<new SVGPoint> = <SVGPointList>.getItem(<fuzzint>);
<new SVGPoint> = <SVGPointList>.insertItemBefore(<SVGPoint>,<fuzzint>);
<new SVGPoint> = <SVGPointList>.replaceItem(<SVGPoint>,<fuzzint>);
<new SVGPoint> = <SVGPointList>.removeItem(<fuzzint>);

#SVGUnitTypes

#SVGPolylineElement

#SVGAnimatedBoolean

#SVGComponentTransferFunctionElement

#SVGFESpecularLightingElement

#SVGGeometryElement

#SVGFEConvolveMatrixElement

#SVGFilterPrimitiveStandardAttributes

#SVGEllipseElement

#SVGFEOffsetElement

#SVGTransform
<SVGTransform>.setTranslate(<fuzzint>,<fuzzint>);
<SVGTransform>.setScale(<fuzzint>,<fuzzint>);

#SVGFEBlendElement

#SVGStopElement

#SVGLengthList
<new SVGLength> = <SVGLengthList>.getItem(<fuzzint>);
<new SVGLength> = <SVGLengthList>.insertItemBefore(<SVGLength>,<fuzzint>);
<new SVGLength> = <SVGLengthList>.replaceItem(<SVGLength>,<fuzzint>);
<new SVGLength> = <SVGLengthList>.removeItem(<fuzzint>);

#SVGFEFuncBElement

#SVGAnimatedEnumeration
<SVGAnimatedEnumeration>.baseVal = <fuzzint>;

#SVGFEMergeNodeElement

#SVGCircleElement

#SVGScriptElement

#SVGMPathElement

#SVGGElement

#SVGCursorElement

#SVGPathElement
<new SVGPoint> = <SVGPathElement>.getPointAtLength(<fuzzint>);
<new long> = <SVGPathElement>.getPathSegAtLength(<fuzzint>);

#SVGTSpanElement

#SVGAnimatedString

#SVGFETurbulenceElement

#SVGSwitchElement

#SVGStyleElement
<SVGElement>.setAttribute("accumulate", "<svgattr_accumulate_value>");
<SVGElement>.setAttribute("additive", "<svgattr_additive_value>");
<SVGElement>.setAttribute("alignment-baseline", "<svgattr_alignment-baseline_value>");
<SVGElement>.setAttribute("alphabetic", "<svgattr_alphabetic_value>");
<SVGElement>.setAttribute("alt", "<svgattr_alt_value>");
<SVGElement>.setAttribute("amplitude", "<svgattr_amplitude_value>");
<SVGElement>.setAttribute("arabic-form", "<svgattr_arabic-form_value>");
<SVGElement>.setAttribute("aria-label", "<svgattr_aria-label_value>");
<SVGElement>.setAttribute("ascent", "<svgattr_ascent_value>");
<SVGElement>.setAttribute("attributeName", "<svgattr_attributeName_value>");
<SVGElement>.setAttribute("attributeType", "<svgattr_attributeType_value>");
<SVGElement>.setAttribute("azimuth", "<svgattr_azimuth_value>");
<SVGElement>.setAttribute("baseFrequency", "<svgattr_baseFrequency_value>");
<SVGElement>.setAttribute("baseProfile", "<svgattr_baseProfile_value>");
<SVGElement>.setAttribute("baseline-shift", "<svgattr_baseline-shift_value>");
<SVGElement>.setAttribute("bbox", "<svgattr_bbox_value>");
<SVGElement>.setAttribute("begin", "<svgattr_begin_value>");
<SVGElement>.setAttribute("by", "<svgattr_by_value>");
<SVGElement>.setAttribute("calcMode", "<svgattr_calcMode_value>");
<SVGElement>.setAttribute("cap-height", "<svgattr_cap-height_value>");
<SVGElement>.setAttribute("class", "<svgattr_class_value>");
<SVGElement>.setAttribute("click", "<svgattr_click_value>");
<SVGElement>.setAttribute("clip", "<svgattr_clip_value>");
<SVGElement>.setAttribute("clip-path", svg_url_clippath);
<SVGElement>.setAttribute("clip-rule", "<svgattr_clip-rule_value>");
<SVGElement>.setAttribute("clipPathUnits", "<svgattr_clipPathUnits_value>");
<SVGElement>.setAttribute("color", "<svgattr_color_value>");
<SVGElement>.setAttribute("color-interpolation", "<svgattr_color-interpolation_value>");
<SVGElement>.setAttribute("color-interpolation-filters", "<svgattr_color-interpolation-filters_value>");
<SVGElement>.setAttribute("color-profile", "<svgattr_color-profile_value>");
<SVGElement>.setAttribute("contentScriptType", "<svgattr_contentScriptType_value>");
<SVGElement>.setAttribute("contentStyleType", "<svgattr_contentStyleType_value>");
<SVGElement>.setAttribute("cursor", "<svgattr_cursor_value>");
<SVGElement>.setAttribute("cx", "<svgattr_cx_value>");
<SVGElement>.setAttribute("cy", "<svgattr_cy_value>");
<SVGElement>.setAttribute("d", "<svgattr_d_value>");
<SVGElement>.setAttribute("descent", "<svgattr_descent_value>");
<SVGElement>.setAttribute("diffuseConstant", "<svgattr_diffuseConstant_value>");
<SVGElement>.setAttribute("direction", "<svgattr_direction_value>");
<SVGElement>.setAttribute("display", "<svgattr_display_value>");
<SVGElement>.setAttribute("divisor", "<svgattr_divisor_value>");
<SVGElement>.setAttribute("dominant-baseline", "<svgattr_dominant-baseline_value>");
<SVGElement>.setAttribute("dur", "<svgattr_dur_value>");
<SVGElement>.setAttribute("dx", "<svgattr_dx_value>");
<SVGElement>.setAttribute("dy", "<svgattr_dy_value>");
<SVGElement>.setAttribute("edgeMode", "<svgattr_edgeMode_value>");
<SVGElement>.setAttribute("elevation", "<svgattr_elevation_value>");
<SVGElement>.setAttribute("enable-background", "<svgattr_enable-background_value>");
<SVGElement>.setAttribute("end", "<svgattr_end_value>");
<SVGElement>.setAttribute("exponent", "<svgattr_exponent_value>");
<SVGElement>.setAttribute("externalResourcesRequired", "<svgattr_externalResourcesRequired_value>");
<SVGElement>.setAttribute("fill", <svg_url_fill>);
<SVGElement>.setAttribute("fill", "<svgattr_fill_value>");
<SVGElement>.setAttribute("fill-opacity", "<svgattr_fill-opacity_value>");
<SVGElement>.setAttribute("fill-rule", "<svgattr_fill-rule_value>");
<SVGElement>.setAttribute("filter", <svg_url_filter>);
<SVGElement>.setAttribute("filterPrimitiveUnits", "<svgattr_filterPrimitiveUnits_value>");
<SVGElement>.setAttribute("filterRes", "<svgattr_filterRes_value>");
<SVGElement>.setAttribute("filterUnits", "<svgattr_filterUnits_value>");
<SVGElement>.setAttribute("flood-color", "<svgattr_flood-color_value>");
<SVGElement>.setAttribute("flood-opacity", "<svgattr_flood-opacity_value>");
<SVGElement>.setAttribute("font-family", "<svgattr_font-family_value>");
<SVGElement>.setAttribute("font-rendering", "<svgattr_font-rendering_value>");
<SVGElement>.setAttribute("font-size", "<svgattr_font-size_value>");
<SVGElement>.setAttribute("font-stretch", "<svgattr_font-stretch_value>");
<SVGElement>.setAttribute("font-style", "<svgattr_font-style_value>");
<SVGElement>.setAttribute("font-variant", "<svgattr_font-variant_value>");
<SVGElement>.setAttribute("font-weight", "<svgattr_font-weight_value>");
<SVGElement>.setAttribute("fr", "<svgattr_fr_value>");
<SVGElement>.setAttribute("from", "<svgattr_from_value>");
<SVGElement>.setAttribute("fx", "<svgattr_fx_value>");
<SVGElement>.setAttribute("fy", "<svgattr_fy_value>");
<SVGElement>.setAttribute("g1", "<svgattr_g1_value>");
<SVGElement>.setAttribute("g2", "<svgattr_g2_value>");
<SVGElement>.setAttribute("glyph-name", "<svgattr_glyph-name_value>");
<SVGElement>.setAttribute("glyph-orientation-horizontal", "<svgattr_glyph-orientation-horizontal_value>");
<SVGElement>.setAttribute("glyph-orientation-vertical", "<svgattr_glyph-orientation-vertical_value>");
<SVGElement>.setAttribute("glyphRef", "<svgattr_glyphRef_value>");
<SVGElement>.setAttribute("gradientTransform", "<svgattr_gradientTransform_value>");
<SVGElement>.setAttribute("gradientUnits", "<svgattr_gradientUnits_value>");
<SVGElement>.setAttribute("hanging", "<svgattr_hanging_value>");
<SVGElement>.setAttribute("height", "<svgattr_height_value>");
<SVGElement>.setAttribute("horiz-adv-x", "<svgattr_horiz-adv-x_value>");
<SVGElement>.setAttribute("horiz-origin-x", "<svgattr_horiz-origin-x_value>");
<SVGElement>.setAttribute("href", "<svgattr_href_value>");
<SVGElement>.setAttribute("id", "<svgelementid>");
<SVGElement>.setAttribute("ideographic", "<svgattr_ideographic_value>");
<SVGElement>.setAttribute("in", "<svgattr_in_value>");
<SVGElement>.setAttribute("in2", "<svgattr_in2_value>");
<SVGElement>.setAttribute("intercept", "<svgattr_intercept_value>");
<SVGElement>.setAttribute("k", "<svgattr_k_value>");
<SVGElement>.setAttribute("k1", "<svgattr_k1_value>");
<SVGElement>.setAttribute("k2", "<svgattr_k2_value>");
<SVGElement>.setAttribute("k3", "<svgattr_k3_value>");
<SVGElement>.setAttribute("k4", "<svgattr_k4_value>");
<SVGElement>.setAttribute("kernelMatrix", "<svgattr_kernelMatrix_value>");
<SVGElement>.setAttribute("kernelUnitLength", "<svgattr_kernelUnitLength_value>");
<SVGElement>.setAttribute("keyPoints", "<svgattr_keyPoints_value>");
<SVGElement>.setAttribute("keySplines", "<svgattr_keySplines_value>");
<SVGElement>.setAttribute("keyTimes", "<svgattr_keyTimes_value>");
<SVGElement>.setAttribute("lang", "<svgattr_lang_value>");
<SVGElement>.setAttribute("lengthAdjust", "<svgattr_lengthAdjust_value>");
<SVGElement>.setAttribute("letter-spacing", "<svgattr_letter-spacing_value>");
<SVGElement>.setAttribute("lighting-color", "<svgattr_lighting-color_value>");
<SVGElement>.setAttribute("limitingConeAngle", "<svgattr_limitingConeAngle_value>");
<SVGElement>.setAttribute("line-width", "<svgattr_line-width_value>");
<SVGElement>.setAttribute("marker-end", <svg_url_marker>);
<SVGElement>.setAttribute("marker-mid", <svg_url_marker>);
<SVGElement>.setAttribute("marker-start", <svg_url_marker>);
<SVGElement>.setAttribute("markerHeight", "<svgattr_markerHeight_value>");
<SVGElement>.setAttribute("markerUnits", "<svgattr_markerUnits_value>");
<SVGElement>.setAttribute("markerWidth", "<svgattr_markerWidth_value>");
<SVGElement>.setAttribute("mask", <svg_url_mask>);
<SVGElement>.setAttribute("mask-type", "<svgattr_mask-type_value>");
<SVGElement>.setAttribute("maskContentUnits", "<svgattr_maskContentUnits_value>");
<SVGElement>.setAttribute("maskUnits", "<svgattr_maskUnits_value>");
<SVGElement>.setAttribute("mathematical", "<svgattr_mathematical_value>");
<SVGElement>.setAttribute("max", "<svgattr_max_value>");
<SVGElement>.setAttribute("min", "<svgattr_min_value>");
<SVGElement>.setAttribute("mode", "<svgattr_mode_value>");
<SVGElement>.setAttribute("name", "<svgattr_name_value>");
<SVGElement>.setAttribute("numOctaves", "<svgattr_numOctaves_value>");
<SVGElement>.setAttribute("offset", "<svgattr_offset_value>");
<SVGElement>.setAttribute("onactivate", "<svgattr_onactivate_value>");
<SVGElement>.setAttribute("onbegin", "<svgattr_onbegin_value>");
<SVGElement>.setAttribute("onclick", "<svgattr_onclick_value>");
<SVGElement>.setAttribute("onend", "<svgattr_onend_value>");
<SVGElement>.setAttribute("onerror", "<svgattr_onerror_value>");
<SVGElement>.setAttribute("onfocusin", "<svgattr_onfocusin_value>");
<SVGElement>.setAttribute("onfocusout", "<svgattr_onfocusout_value>");
<SVGElement>.setAttribute("onload", "<svgattr_onload_value>");
<SVGElement>.setAttribute("onmousedown", "<svgattr_onmousedown_value>");
<SVGElement>.setAttribute("onmousemove", "<svgattr_onmousemove_value>");
<SVGElement>.setAttribute("onmouseout", "<svgattr_onmouseout_value>");
<SVGElement>.setAttribute("onmouseover", "<svgattr_onmouseover_value>");
<SVGElement>.setAttribute("onmouseup", "<svgattr_onmouseup_value>");
<SVGElement>.setAttribute("onrepeat", "<svgattr_onrepeat_value>");
<SVGElement>.setAttribute("opacity", "<svgattr_opacity_value>");
<SVGElement>.setAttribute("operator", "<svgattr_operator_value>");
<SVGElement>.setAttribute("order", "<svgattr_order_value>");
<SVGElement>.setAttribute("orient", "<svgattr_orient_value>");
<SVGElement>.setAttribute("overflow", "<svgattr_overflow_value>");
<SVGElement>.setAttribute("panose-1", "<svgattr_panose-1_value>");
<SVGElement>.setAttribute("path", "<svgattr_path_value>");
<SVGElement>.setAttribute("pathLength", "<svgattr_pathLength_value>");
<SVGElement>.setAttribute("patternContentUnits", "<svgattr_patternContentUnits_value>");
<SVGElement>.setAttribute("patternTransform", "<svgattr_patternTransform_value>");
<SVGElement>.setAttribute("patternUnits", "<svgattr_patternUnits_value>");
<SVGElement>.setAttribute("pointer-events", "<svgattr_pointer-events_value>");
<SVGElement>.setAttribute("points", "<svgattr_points_value>");
<SVGElement>.setAttribute("pointsAtX", "<svgattr_pointsAtX_value>");
<SVGElement>.setAttribute("pointsAtY", "<svgattr_pointsAtY_value>");
<SVGElement>.setAttribute("pointsAtZ", "<svgattr_pointsAtZ_value>");
<SVGElement>.setAttribute("preserveAlpha", "<svgattr_preserveAlpha_value>");
<SVGElement>.setAttribute("preserveAspectRatio", "<svgattr_preserveAspectRatio_value>");
<SVGElement>.setAttribute("primitiveUnits", "<svgattr_primitiveUnits_value>");
<SVGElement>.setAttribute("r", "<svgattr_r_value>");
<SVGElement>.setAttribute("radius", "<svgattr_radius_value>");
<SVGElement>.setAttribute("refX", "<svgattr_refX_value>");
<SVGElement>.setAttribute("refY", "<svgattr_refY_value>");
<SVGElement>.setAttribute("repeatCount", "<svgattr_repeatCount_value>");
<SVGElement>.setAttribute("repeatDur", "<svgattr_repeatDur_value>");
<SVGElement>.setAttribute("requiredExtensions", "<svgattr_requiredExtensions_value>");
<SVGElement>.setAttribute("requiredFeatures", "<svgattr_requiredFeatures_value>");
<SVGElement>.setAttribute("restart", "<svgattr_restart_value>");
<SVGElement>.setAttribute("result", "<svgattr_result_value>");
<SVGElement>.setAttribute("role", "<svgattr_role_value>");
<SVGElement>.setAttribute("rotate", "<svgattr_rotate_value>");
<SVGElement>.setAttribute("rx", "<svgattr_rx_value>");
<SVGElement>.setAttribute("ry", "<svgattr_ry_value>");
<SVGElement>.setAttribute("scale", "<svgattr_scale_value>");
<SVGElement>.setAttribute("seed", "<svgattr_seed_value>");
<SVGElement>.setAttribute("shape-rendering", "<svgattr_shape-rendering_value>");
<SVGElement>.setAttribute("slope", "<svgattr_slope_value>");
<SVGElement>.setAttribute("specularConstant", "<svgattr_specularConstant_value>");
<SVGElement>.setAttribute("specularExponent", "<svgattr_specularExponent_value>");
<SVGElement>.setAttribute("spreadMethod", "<svgattr_spreadMethod_value>");
<SVGElement>.setAttribute("startOffset", "<svgattr_startOffset_value>");
<SVGElement>.setAttribute("stdDeviation", "<svgattr_stdDeviation_value>");
<SVGElement>.setAttribute("stitchTiles", "<svgattr_stitchTiles_value>");
<SVGElement>.setAttribute("stop-color", "<svgattr_stop-color_value>");
<SVGElement>.setAttribute("stop-offset", "<svgattr_stop-offset_value>");
<SVGElement>.setAttribute("stop-opacity", "<svgattr_stop-opacity_value>");
<SVGElement>.setAttribute("stroke", <svg_url_fill>);
<SVGElement>.setAttribute("stroke", "<svgattr_stroke_value>");
<SVGElement>.setAttribute("stroke-dasharray", "<svgattr_stroke-dasharray_value>");
<SVGElement>.setAttribute("stroke-dashoffset", "<svgattr_stroke-dashoffset_value>");
<SVGElement>.setAttribute("stroke-join", "<svgattr_stroke-join_value>");
<SVGElement>.setAttribute("stroke-linecap", "<svgattr_stroke-linecap_value>");
<SVGElement>.setAttribute("stroke-linejoin", "<svgattr_stroke-linejoin_value>");
<SVGElement>.setAttribute("stroke-miterlimit", "<svgattr_stroke-miterlimit_value>");
<SVGElement>.setAttribute("stroke-opacity", "<svgattr_stroke-opacity_value>");
<SVGElement>.setAttribute("stroke-width", "<svgattr_stroke-width_value>");
<SVGElement>.setAttribute("style", "<svgattr_style_value>");
<SVGElement>.setAttribute("surfaceScale", "<svgattr_surfaceScale_value>");
<SVGElement>.setAttribute("systemLanguage", "<svgattr_systemLanguage_value>");
<SVGElement>.setAttribute("tabindex", "<svgattr_tabindex_value>");
<SVGElement>.setAttribute("tableValues", "<svgattr_tableValues_value>");
<SVGElement>.setAttribute("target", "<svgattr_target_value>");
<SVGElement>.setAttribute("targetX", "<svgattr_targetX_value>");
<SVGElement>.setAttribute("targetY", "<svgattr_targetY_value>");
<SVGElement>.setAttribute("text-anchor", "<svgattr_text-anchor_value>");
<SVGElement>.setAttribute("text-decoration", "<svgattr_text-decoration_value>");
<SVGElement>.setAttribute("text-rendering", "<svgattr_text-rendering_value>");
<SVGElement>.setAttribute("textLength", "<svgattr_textLength_value>");
<SVGElement>.setAttribute("to", "<svgattr_to_value>");
<SVGElement>.setAttribute("transform", "<svgattr_transform_value>");
<SVGElement>.setAttribute("type", "<svgattr_type_value>");
<SVGElement>.setAttribute("underline-position", "<svgattr_underline-position_value>");
<SVGElement>.setAttribute("underline-thickness", "<svgattr_underline-thickness_value>");
<SVGElement>.setAttribute("unicode", "<svgattr_unicode_value>");
<SVGElement>.setAttribute("unicode-bidi", "<svgattr_unicode-bidi_value>");
<SVGElement>.setAttribute("unicode-range", "<svgattr_unicode-range_value>");
<SVGElement>.setAttribute("units-per-em", "<svgattr_units-per-em_value>");
<SVGElement>.setAttribute("values", "<svgattr_values_value>");
<SVGElement>.setAttribute("vector-effect", "<svgattr_vector-effect_value>");
<SVGElement>.setAttribute("version", "<svgattr_version_value>");
<SVGElement>.setAttribute("vert-origin-y", "<svgattr_vert-origin-y_value>");
<SVGElement>.setAttribute("viewBox", "<svgattr_viewBox_value>");
<SVGElement>.setAttribute("viewTarget", "<svgattr_viewTarget_value>");
<SVGElement>.setAttribute("viewbox", "<svgattr_viewbox_value>");
<SVGElement>.setAttribute("visibility", "<svgattr_visibility_value>");
<SVGElement>.setAttribute("width", "<svgattr_width_value>");
<SVGElement>.setAttribute("word-spacing", "<svgattr_word-spacing_value>");
<SVGElement>.setAttribute("writing-mode", "<svgattr_writing-mode_value>");
<SVGElement>.setAttribute("x", "<svgattr_x_value>");
<SVGElement>.setAttribute("x-height", "<svgattr_x-height_value>");
<SVGElement>.setAttribute("x1", "<svgattr_x1_value>");
<SVGElement>.setAttribute("x2", "<svgattr_x2_value>");
<SVGElement>.setAttribute("xChannelSelector", "<svgattr_xChannelSelector_value>");
<SVGElement>.setAttribute("y", "<svgattr_y_value>");
<SVGElement>.setAttribute("y1", "<svgattr_y1_value>");
<SVGElement>.setAttribute("y2", "<svgattr_y2_value>");
<SVGElement>.setAttribute("yChannelSelector", "<svgattr_yChannelSelector_value>");
<SVGElement>.setAttribute("z", "<svgattr_z_value>");
<SVGElement>.setAttribute("zoomAndPan", "<svgattr_zoomAndPan_value>");
<SVGElement>.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:actuate", "<svgattr_xlink_actuate_value>");
<SVGElement>.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", "<svgattr_xlink_href_value>");
<SVGElement>.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:show", "<svgattr_xlink_show_value>");
<SVGElement>.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:title", "<svgattr_xlink_title_value>");
<SVGElement>.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:type", "<svgattr_xlink_type_value>");
<SVGElement>.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:id", "<svgattr_xml_id_value>");
<SVGElement>.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:lang", "<svgattr_xml_lang_value>");
<SVGElement>.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space", "<svgattr_xml_space_value>");
<new svg_href_path> = "<hash>" + <SVGPathElement>.id;
<new svg_url_clippath> = "url(<hash>" + <SVGClipPathElement>.id + ")";
<new svg_url_filter> = "url(<hash>" + <SVGFilterElement>.id + ")";
<new svg_url_marker> = "url(<hash>" + <SVGMarkerElement>.id + ")";
<new svg_url_mask> = "url(<hash>" + <SVGMaskElement>.id + ")";
<new svg_url_fill> = "url(<hash>" + <SVGLinearGradientElement>.id + ")";
<new svg_url_fill> = "url(<hash>" + <SVGPatternElement>.id + ")";
<new svg_url_fill> = "url(<hash>" + <SVGRadialGradientElement>.id + ")";
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;

<CSSStyleDeclaration>.setProperty("r", "<cssproperty_r>");
<CSSStyleDeclaration>.setProperty("x", "<cssproperty_x>");
<CSSStyleDeclaration>.setProperty("y", "<cssproperty_y>");
<CSSStyleDeclaration>.setProperty("d", "<cssproperty_d>");
<CSSStyleDeclaration>.setProperty("shape-subtract", "<cssproperty_shape-subtract>");
<CSSStyleDeclaration>.setProperty("marker-start", "<cssproperty_marker-start>");
<CSSStyleDeclaration>.setProperty("marker-end", "<cssproperty_marker-end>");
<CSSStyleDeclaration>.setProperty("paint-order", "<cssproperty_paint-order>");
<CSSStyleDeclaration>.setProperty("color-interpolation", "<cssproperty_color-interpolation>");
<CSSStyleDeclaration>.setProperty("shape-rendering", "<cssproperty_shape-rendering>");
<CSSStyleDeclaration>.setProperty("place-content", "<cssproperty_place-content>");
<CSSStyleDeclaration>.setProperty("place-self", "<cssproperty_place-self>");
<CSSStyleDeclaration>.setProperty("place-items", "<cssproperty_place-items>");
<CSSStyleDeclaration>.setProperty("row-gap", "<cssproperty_row-gap>");
<CSSStyleDeclaration>.setProperty("gap", "<cssproperty_gap>");
<CSSStyleDeclaration>.setProperty("anchor-scroll", "<cssproperty_anchor-scroll>");
<CSSStyleDeclaration>.setProperty("anchor-name", "<cssproperty_anchor-name>");
<CSSStyleDeclaration>.setProperty("anchor-default", "<cssproperty_anchor-default>");
<CSSStyleDeclaration>.setProperty("position-fallback", "<cssproperty_position-fallback>");
<CSSStyleDeclaration>.setProperty("animation-composition", "<cssproperty_animation-composition>");
<CSSStyleDeclaration>.setProperty("animation-timeline", "<cssproperty_animation-timeline>");
<CSSStyleDeclaration>.setProperty("background-position-y", "<cssproperty_background-position-y>");
<CSSStyleDeclaration>.setProperty("background-position-inline", "<cssproperty_background-position-inline>");
<CSSStyleDeclaration>.setProperty("background-position-block", "<cssproperty_background-position-block>");
<CSSStyleDeclaration>.setProperty("border-top-radius", "<cssproperty_border-top-radius>");
<CSSStyleDeclaration>.setProperty("border-right-radius", "<cssproperty_border-right-radius>");
<CSSStyleDeclaration>.setProperty("border-bottom-radius", "<cssproperty_border-bottom-radius>");
<CSSStyleDeclaration>.setProperty("border-left-radius", "<cssproperty_border-left-radius>");
<CSSStyleDeclaration>.setProperty("border-block-start-radius", "<cssproperty_border-block-start-radius>");
<CSSStyleDeclaration>.setProperty("border-block-end-radius", "<cssproperty_border-block-end-radius>");
<CSSStyleDeclaration>.setProperty("border-inline-start-radius", "<cssproperty_border-inline-start-radius>");
<CSSStyleDeclaration>.setProperty("border-inline-end-radius", "<cssproperty_border-inline-end-radius>");
<CSSStyleDeclaration>.setProperty("corner-shape", "<cssproperty_corner-shape>");
<CSSStyleDeclaration>.setProperty("corners", "<cssproperty_corners>");
<CSSStyleDeclaration>.setProperty("border-limit", "<cssproperty_border-limit>");
<CSSStyleDeclaration>.setProperty("border-clip", "<cssproperty_border-clip>");
<CSSStyleDeclaration>.setProperty("border-clip-top", "<cssproperty_border-clip-top>");
<CSSStyleDeclaration>.setProperty("border-clip-right", "<cssproperty_border-clip-right>");
<CSSStyleDeclaration>.setProperty("border-clip-bottom", "<cssproperty_border-clip-bottom>");
<CSSStyleDeclaration>.setProperty("border-clip-left", "<cssproperty_border-clip-left>");
<CSSStyleDeclaration>.setProperty("box-shadow-color", "<cssproperty_box-shadow-color>");
<CSSStyleDeclaration>.setProperty("box-shadow-offset", "<cssproperty_box-shadow-offset>");
<CSSStyleDeclaration>.setProperty("box-shadow-blur", "<cssproperty_box-shadow-blur>");
<CSSStyleDeclaration>.setProperty("box-shadow-spread", "<cssproperty_box-shadow-spread>");
<CSSStyleDeclaration>.setProperty("box-shadow-position", "<cssproperty_box-shadow-position>");
<CSSStyleDeclaration>.setProperty("margin-trim", "<cssproperty_margin-trim>");
<CSSStyleDeclaration>.setProperty("margin-break", "<cssproperty_margin-break>");
<CSSStyleDeclaration>.setProperty("all", "<cssproperty_all>");
<CSSStyleDeclaration>.setProperty("color-scheme", "<cssproperty_color-scheme>");
<CSSStyleDeclaration>.setProperty("forced-color-adjust", "<cssproperty_forced-color-adjust>");
<CSSStyleDeclaration>.setProperty("print-color-adjust", "<cssproperty_print-color-adjust>");
<CSSStyleDeclaration>.setProperty("color-adjust", "<cssproperty_color-adjust>");
<CSSStyleDeclaration>.setProperty("container-type", "<cssproperty_container-type>");
<CSSStyleDeclaration>.setProperty("container-name", "<cssproperty_container-name>");
<CSSStyleDeclaration>.setProperty("container", "<cssproperty_container>");
<CSSStyleDeclaration>.setProperty("content-visibility", "<cssproperty_content-visibility>");
<CSSStyleDeclaration>.setProperty("string-set", "<cssproperty_string-set>");
<CSSStyleDeclaration>.setProperty("bookmark-level", "<cssproperty_bookmark-level>");
<CSSStyleDeclaration>.setProperty("bookmark-label", "<cssproperty_bookmark-label>");
<CSSStyleDeclaration>.setProperty("bookmark-state", "<cssproperty_bookmark-state>");
<CSSStyleDeclaration>.setProperty("reading-order", "<cssproperty_reading-order>");
<CSSStyleDeclaration>.setProperty("layout-order", "<cssproperty_layout-order>");
<CSSStyleDeclaration>.setProperty("wrap-flow", "<cssproperty_wrap-flow>");
<CSSStyleDeclaration>.setProperty("wrap-through", "<cssproperty_wrap-through>");
<CSSStyleDeclaration>.setProperty("font-synthesis-weight", "<cssproperty_font-synthesis-weight>");
<CSSStyleDeclaration>.setProperty("font-synthesis-style", "<cssproperty_font-synthesis-style>");
<CSSStyleDeclaration>.setProperty("font-synthesis-small-caps", "<cssproperty_font-synthesis-small-caps>");
<CSSStyleDeclaration>.setProperty("font-synthesis", "<cssproperty_font-synthesis>");
<CSSStyleDeclaration>.setProperty("font-variant-position", "<cssproperty_font-variant-position>");
<CSSStyleDeclaration>.setProperty("font-variant-numeric", "<cssproperty_font-variant-numeric>");
<CSSStyleDeclaration>.setProperty("font-variant-alternates", "<cssproperty_font-variant-alternates>");
<CSSStyleDeclaration>.setProperty("font-variant-east-asian", "<cssproperty_font-variant-east-asian>");
<CSSStyleDeclaration>.setProperty("font-language-override", "<cssproperty_font-language-override>");
<CSSStyleDeclaration>.setProperty("font-optical-sizing", "<cssproperty_font-optical-sizing>");
<CSSStyleDeclaration>.setProperty("font-variation-settings", "<cssproperty_font-variation-settings>");
<CSSStyleDeclaration>.setProperty("font-palette", "<cssproperty_font-palette>");
<CSSStyleDeclaration>.setProperty("font-variant-emoji", "<cssproperty_font-variant-emoji>");
<CSSStyleDeclaration>.setProperty("copy-into", "<cssproperty_copy-into>");
<CSSStyleDeclaration>.setProperty("footnote-display", "<cssproperty_footnote-display>");
<CSSStyleDeclaration>.setProperty("footnote-policy", "<cssproperty_footnote-policy>");
<CSSStyleDeclaration>.setProperty("masonry-auto-flow", "<cssproperty_masonry-auto-flow>");
<CSSStyleDeclaration>.setProperty("align-tracks", "<cssproperty_align-tracks>");
<CSSStyleDeclaration>.setProperty("justify-tracks", "<cssproperty_justify-tracks>");
<CSSStyleDeclaration>.setProperty("image-resolution", "<cssproperty_image-resolution>");
<CSSStyleDeclaration>.setProperty("object-view-box", "<cssproperty_object-view-box>");
<CSSStyleDeclaration>.setProperty("baseline-source", "<cssproperty_baseline-source>");
<CSSStyleDeclaration>.setProperty("alignment-baseline", "<cssproperty_alignment-baseline>");
<CSSStyleDeclaration>.setProperty("text-edge", "<cssproperty_text-edge>");
<CSSStyleDeclaration>.setProperty("leading-trim", "<cssproperty_leading-trim>");
<CSSStyleDeclaration>.setProperty("inline-sizing", "<cssproperty_inline-sizing>");
<CSSStyleDeclaration>.setProperty("initial-letter", "<cssproperty_initial-letter>");
<CSSStyleDeclaration>.setProperty("initial-letter-align", "<cssproperty_initial-letter-align>");
<CSSStyleDeclaration>.setProperty("initial-letter-wrap", "<cssproperty_initial-letter-wrap>");
<CSSStyleDeclaration>.setProperty("line-grid", "<cssproperty_line-grid>");
<CSSStyleDeclaration>.setProperty("line-snap", "<cssproperty_line-snap>");
<CSSStyleDeclaration>.setProperty("box-snap", "<cssproperty_box-snap>");
<CSSStyleDeclaration>.setProperty("link-parameters", "<cssproperty_link-parameters>");
<CSSStyleDeclaration>.setProperty("marker-side", "<cssproperty_marker-side>");
<CSSStyleDeclaration>.setProperty("counter-set", "<cssproperty_counter-set>");
<CSSStyleDeclaration>.setProperty("block-size", "<cssproperty_block-size>");
<CSSStyleDeclaration>.setProperty("inline-size", "<cssproperty_inline-size>");
<CSSStyleDeclaration>.setProperty("min-block-size", "<cssproperty_min-block-size>");
<CSSStyleDeclaration>.setProperty("min-inline-size", "<cssproperty_min-inline-size>");
<CSSStyleDeclaration>.setProperty("max-block-size", "<cssproperty_max-block-size>");
<CSSStyleDeclaration>.setProperty("max-inline-size", "<cssproperty_max-inline-size>");
<CSSStyleDeclaration>.setProperty("margin-block-start", "<cssproperty_margin-block-start>");
<CSSStyleDeclaration>.setProperty("margin-block-end", "<cssproperty_margin-block-end>");
<CSSStyleDeclaration>.setProperty("margin-inline-start", "<cssproperty_margin-inline-start>");
<CSSStyleDeclaration>.setProperty("margin-inline-end", "<cssproperty_margin-inline-end>");
<CSSStyleDeclaration>.setProperty("margin-block", "<cssproperty_margin-block>");
<CSSStyleDeclaration>.setProperty("margin-inline", "<cssproperty_margin-inline>");
<CSSStyleDeclaration>.setProperty("padding-block-start", "<cssproperty_padding-block-start>");
<CSSStyleDeclaration>.setProperty("padding-block-end", "<cssproperty_padding-block-end>");
<CSSStyleDeclaration>.setProperty("padding-inline-start", "<cssproperty_padding-inline-start>");
<CSSStyleDeclaration>.setProperty("padding-inline-end", "<cssproperty_padding-inline-end>");
<CSSStyleDeclaration>.setProperty("padding-block", "<cssproperty_padding-block>");
<CSSStyleDeclaration>.setProperty("padding-inline", "<cssproperty_padding-inline>");
<CSSStyleDeclaration>.setProperty("border-block-start-width", "<cssproperty_border-block-start-width>");
<CSSStyleDeclaration>.setProperty("border-block-end-width", "<cssproperty_border-block-end-width>");
<CSSStyleDeclaration>.setProperty("border-inline-start-width", "<cssproperty_border-inline-start-width>");
<CSSStyleDeclaration>.setProperty("border-inline-end-width", "<cssproperty_border-inline-end-width>");
<CSSStyleDeclaration>.setProperty("border-block-width", "<cssproperty_border-block-width>");
<CSSStyleDeclaration>.setProperty("border-inline-width", "<cssproperty_border-inline-width>");
<CSSStyleDeclaration>.setProperty("border-block-start-style", "<cssproperty_border-block-start-style>");
<CSSStyleDeclaration>.setProperty("border-block-end-style", "<cssproperty_border-block-end-style>");
<CSSStyleDeclaration>.setProperty("border-inline-start-style", "<cssproperty_border-inline-start-style>");
<CSSStyleDeclaration>.setProperty("border-inline-end-style", "<cssproperty_border-inline-end-style>");
<CSSStyleDeclaration>.setProperty("border-block-style", "<cssproperty_border-block-style>");
<CSSStyleDeclaration>.setProperty("border-inline-style", "<cssproperty_border-inline-style>");
<CSSStyleDeclaration>.setProperty("border-block-start-color", "<cssproperty_border-block-start-color>");
<CSSStyleDeclaration>.setProperty("border-block-end-color", "<cssproperty_border-block-end-color>");
<CSSStyleDeclaration>.setProperty("border-inline-start-color", "<cssproperty_border-inline-start-color>");
<CSSStyleDeclaration>.setProperty("border-inline-end-color", "<cssproperty_border-inline-end-color>");
<CSSStyleDeclaration>.setProperty("border-block-color", "<cssproperty_border-block-color>");
<CSSStyleDeclaration>.setProperty("border-inline-color", "<cssproperty_border-inline-color>");
<CSSStyleDeclaration>.setProperty("border-block-start", "<cssproperty_border-block-start>");
<CSSStyleDeclaration>.setProperty("border-block-end", "<cssproperty_border-block-end>");
<CSSStyleDeclaration>.setProperty("border-inline-start", "<cssproperty_border-inline-start>");
<CSSStyleDeclaration>.setProperty("border-inline-end", "<cssproperty_border-inline-end>");
<CSSStyleDeclaration>.setProperty("border-block", "<cssproperty_border-block>");
<CSSStyleDeclaration>.setProperty("border-inline", "<cssproperty_border-inline>");
<CSSStyleDeclaration>.setProperty("border-start-start-radius", "<cssproperty_border-start-start-radius>");
<CSSStyleDeclaration>.setProperty("border-start-end-radius", "<cssproperty_border-start-end-radius>");
<CSSStyleDeclaration>.setProperty("border-end-start-radius", "<cssproperty_border-end-start-radius>");
<CSSStyleDeclaration>.setProperty("border-end-end-radius", "<cssproperty_border-end-end-radius>");
<CSSStyleDeclaration>.setProperty("clip-rule", "<cssproperty_clip-rule>");
<CSSStyleDeclaration>.setProperty("mask-image", "<cssproperty_mask-image>");
<CSSStyleDeclaration>.setProperty("mask-mode", "<cssproperty_mask-mode>");
<CSSStyleDeclaration>.setProperty("mask-repeat", "<cssproperty_mask-repeat>");
<CSSStyleDeclaration>.setProperty("mask-position", "<cssproperty_mask-position>");
<CSSStyleDeclaration>.setProperty("mask-clip", "<cssproperty_mask-clip>");
<CSSStyleDeclaration>.setProperty("mask-origin", "<cssproperty_mask-origin>");
<CSSStyleDeclaration>.setProperty("mask-size", "<cssproperty_mask-size>");
<CSSStyleDeclaration>.setProperty("mask-composite", "<cssproperty_mask-composite>");
<CSSStyleDeclaration>.setProperty("mask", "<cssproperty_mask>");
<CSSStyleDeclaration>.setProperty("mask-border-source", "<cssproperty_mask-border-source>");
<CSSStyleDeclaration>.setProperty("mask-border-mode", "<cssproperty_mask-border-mode>");
<CSSStyleDeclaration>.setProperty("mask-border-slice", "<cssproperty_mask-border-slice>");
<CSSStyleDeclaration>.setProperty("mask-border-width", "<cssproperty_mask-border-width>");
<CSSStyleDeclaration>.setProperty("mask-border-outset", "<cssproperty_mask-border-outset>");
<CSSStyleDeclaration>.setProperty("mask-border-repeat", "<cssproperty_mask-border-repeat>");
<CSSStyleDeclaration>.setProperty("mask-border", "<cssproperty_mask-border>");
<CSSStyleDeclaration>.setProperty("mask-type", "<cssproperty_mask-type>");
<CSSStyleDeclaration>.setProperty("column-rule-color", "<cssproperty_column-rule-color>");
<CSSStyleDeclaration>.setProperty("column-rule-width", "<cssproperty_column-rule-width>");
<CSSStyleDeclaration>.setProperty("spatial-navigation-contain", "<cssproperty_spatial-navigation-contain>");
<CSSStyleDeclaration>.setProperty("spatial-navigation-action", "<cssproperty_spatial-navigation-action>");
<CSSStyleDeclaration>.setProperty("spatial-navigation-function", "<cssproperty_spatial-navigation-function>");
<CSSStyleDeclaration>.setProperty("overflow-clip-margin-top", "<cssproperty_overflow-clip-margin-top>");
<CSSStyleDeclaration>.setProperty("overflow-clip-margin-right", "<cssproperty_overflow-clip-margin-right>");
<CSSStyleDeclaration>.setProperty("overflow-clip-margin-bottom", "<cssproperty_overflow-clip-margin-bottom>");
<CSSStyleDeclaration>.setProperty("overflow-clip-margin-left", "<cssproperty_overflow-clip-margin-left>");
<CSSStyleDeclaration>.setProperty("overflow-clip-margin-block-start", "<cssproperty_overflow-clip-margin-block-start>");
<CSSStyleDeclaration>.setProperty("overflow-clip-margin-inline-start", "<cssproperty_overflow-clip-margin-inline-start>");
<CSSStyleDeclaration>.setProperty("overflow-clip-margin-block-end", "<cssproperty_overflow-clip-margin-block-end>");
<CSSStyleDeclaration>.setProperty("overflow-clip-margin-inline-end", "<cssproperty_overflow-clip-margin-inline-end>");
<CSSStyleDeclaration>.setProperty("overflow-clip-margin", "<cssproperty_overflow-clip-margin>");
<CSSStyleDeclaration>.setProperty("overflow-clip-margin-inline", "<cssproperty_overflow-clip-margin-inline>");
<CSSStyleDeclaration>.setProperty("overflow-clip-margin-block", "<cssproperty_overflow-clip-margin-block>");
<CSSStyleDeclaration>.setProperty("block-ellipsis", "<cssproperty_block-ellipsis>");
<CSSStyleDeclaration>.setProperty("line-clamp", "<cssproperty_line-clamp>");
<CSSStyleDeclaration>.setProperty("continue", "<cssproperty_continue>");
<CSSStyleDeclaration>.setProperty("max-lines", "<cssproperty_max-lines>");
<CSSStyleDeclaration>.setProperty("overflow-block", "<cssproperty_overflow-block>");
<CSSStyleDeclaration>.setProperty("overflow-inline", "<cssproperty_overflow-inline>");
<CSSStyleDeclaration>.setProperty("scrollbar-gutter", "<cssproperty_scrollbar-gutter>");
<CSSStyleDeclaration>.setProperty("overscroll-behavior", "<cssproperty_overscroll-behavior>");
<CSSStyleDeclaration>.setProperty("overscroll-behavior-x", "<cssproperty_overscroll-behavior-x>");
<CSSStyleDeclaration>.setProperty("overscroll-behavior-y", "<cssproperty_overscroll-behavior-y>");
<CSSStyleDeclaration>.setProperty("overscroll-behavior-inline", "<cssproperty_overscroll-behavior-inline>");
<CSSStyleDeclaration>.setProperty("overscroll-behavior-block", "<cssproperty_overscroll-behavior-block>");
<CSSStyleDeclaration>.setProperty("float-reference", "<cssproperty_float-reference>");
<CSSStyleDeclaration>.setProperty("float-defer", "<cssproperty_float-defer>");
<CSSStyleDeclaration>.setProperty("float-offset", "<cssproperty_float-offset>");
<CSSStyleDeclaration>.setProperty("inset-block-start", "<cssproperty_inset-block-start>");
<CSSStyleDeclaration>.setProperty("inset-inline-start", "<cssproperty_inset-inline-start>");
<CSSStyleDeclaration>.setProperty("inset-block-end", "<cssproperty_inset-block-end>");
<CSSStyleDeclaration>.setProperty("inset-inline-end", "<cssproperty_inset-inline-end>");
<CSSStyleDeclaration>.setProperty("inset-block", "<cssproperty_inset-block>");
<CSSStyleDeclaration>.setProperty("inset-inline", "<cssproperty_inset-inline>");
<CSSStyleDeclaration>.setProperty("inset", "<cssproperty_inset>");
<CSSStyleDeclaration>.setProperty("flow-into", "<cssproperty_flow-into>");
<CSSStyleDeclaration>.setProperty("flow-from", "<cssproperty_flow-from>");
<CSSStyleDeclaration>.setProperty("region-fragment", "<cssproperty_region-fragment>");
<CSSStyleDeclaration>.setProperty("block-step-size", "<cssproperty_block-step-size>");
<CSSStyleDeclaration>.setProperty("block-step-insert", "<cssproperty_block-step-insert>");
<CSSStyleDeclaration>.setProperty("block-step-align", "<cssproperty_block-step-align>");
<CSSStyleDeclaration>.setProperty("block-step-round", "<cssproperty_block-step-round>");
<CSSStyleDeclaration>.setProperty("block-step", "<cssproperty_block-step>");
<CSSStyleDeclaration>.setProperty("line-height-step", "<cssproperty_line-height-step>");
<CSSStyleDeclaration>.setProperty("border-boundary", "<cssproperty_border-boundary>");
<CSSStyleDeclaration>.setProperty("ruby-position", "<cssproperty_ruby-position>");
<CSSStyleDeclaration>.setProperty("ruby-merge", "<cssproperty_ruby-merge>");
<CSSStyleDeclaration>.setProperty("ruby-align", "<cssproperty_ruby-align>");
<CSSStyleDeclaration>.setProperty("ruby-overhang", "<cssproperty_ruby-overhang>");
<CSSStyleDeclaration>.setProperty("scroll-start", "<cssproperty_scroll-start>");
<CSSStyleDeclaration>.setProperty("scroll-start-target", "<cssproperty_scroll-start-target>");
<CSSStyleDeclaration>.setProperty("scroll-start-x", "<cssproperty_scroll-start-x>");
<CSSStyleDeclaration>.setProperty("scroll-start-y", "<cssproperty_scroll-start-y>");
<CSSStyleDeclaration>.setProperty("scroll-start-inline", "<cssproperty_scroll-start-inline>");
<CSSStyleDeclaration>.setProperty("scroll-start-block", "<cssproperty_scroll-start-block>");
<CSSStyleDeclaration>.setProperty("scroll-padding", "<cssproperty_scroll-padding>");
<CSSStyleDeclaration>.setProperty("scroll-margin", "<cssproperty_scroll-margin>");
<CSSStyleDeclaration>.setProperty("scroll-snap-align", "<cssproperty_scroll-snap-align>");
<CSSStyleDeclaration>.setProperty("scroll-snap-stop", "<cssproperty_scroll-snap-stop>");
<CSSStyleDeclaration>.setProperty("scroll-padding-top", "<cssproperty_scroll-padding-top>");
<CSSStyleDeclaration>.setProperty("scroll-padding-right", "<cssproperty_scroll-padding-right>");
<CSSStyleDeclaration>.setProperty("scroll-padding-bottom", "<cssproperty_scroll-padding-bottom>");
<CSSStyleDeclaration>.setProperty("scroll-padding-left", "<cssproperty_scroll-padding-left>");
<CSSStyleDeclaration>.setProperty("scroll-padding-inline-start", "<cssproperty_scroll-padding-inline-start>");
<CSSStyleDeclaration>.setProperty("scroll-padding-block-start", "<cssproperty_scroll-padding-block-start>");
<CSSStyleDeclaration>.setProperty("scroll-padding-inline-end", "<cssproperty_scroll-padding-inline-end>");
<CSSStyleDeclaration>.setProperty("scroll-padding-block-end", "<cssproperty_scroll-padding-block-end>");
<CSSStyleDeclaration>.setProperty("scroll-padding-block", "<cssproperty_scroll-padding-block>");
<CSSStyleDeclaration>.setProperty("scroll-padding-inline", "<cssproperty_scroll-padding-inline>");
<CSSStyleDeclaration>.setProperty("scroll-margin-top", "<cssproperty_scroll-margin-top>");
<CSSStyleDeclaration>.setProperty("scroll-margin-right", "<cssproperty_scroll-margin-right>");
<CSSStyleDeclaration>.setProperty("scroll-margin-bottom", "<cssproperty_scroll-margin-bottom>");
<CSSStyleDeclaration>.setProperty("scroll-margin-left", "<cssproperty_scroll-margin-left>");
<CSSStyleDeclaration>.setProperty("scroll-margin-block-start", "<cssproperty_scroll-margin-block-start>");
<CSSStyleDeclaration>.setProperty("scroll-margin-inline-start", "<cssproperty_scroll-margin-inline-start>");
<CSSStyleDeclaration>.setProperty("scroll-margin-block-end", "<cssproperty_scroll-margin-block-end>");
<CSSStyleDeclaration>.setProperty("scroll-margin-inline-end", "<cssproperty_scroll-margin-inline-end>");
<CSSStyleDeclaration>.setProperty("scroll-margin-block", "<cssproperty_scroll-margin-block>");
<CSSStyleDeclaration>.setProperty("scroll-margin-inline", "<cssproperty_scroll-margin-inline>");
<CSSStyleDeclaration>.setProperty("scrollbar-color", "<cssproperty_scrollbar-color>");
<CSSStyleDeclaration>.setProperty("scrollbar-width", "<cssproperty_scrollbar-width>");
<CSSStyleDeclaration>.setProperty("shape-padding", "<cssproperty_shape-padding>");
<CSSStyleDeclaration>.setProperty("text-size-adjust", "<cssproperty_text-size-adjust>");
<CSSStyleDeclaration>.setProperty("aspect-ratio", "<cssproperty_aspect-ratio>");
<CSSStyleDeclaration>.setProperty("contain-intrinsic-width", "<cssproperty_contain-intrinsic-width>");
<CSSStyleDeclaration>.setProperty("contain-intrinsic-height", "<cssproperty_contain-intrinsic-height>");
<CSSStyleDeclaration>.setProperty("contain-intrinsic-block-size", "<cssproperty_contain-intrinsic-block-size>");
<CSSStyleDeclaration>.setProperty("contain-intrinsic-inline-size", "<cssproperty_contain-intrinsic-inline-size>");
<CSSStyleDeclaration>.setProperty("contain-intrinsic-size", "<cssproperty_contain-intrinsic-size>");
<CSSStyleDeclaration>.setProperty("min-intrinsic-sizing", "<cssproperty_min-intrinsic-sizing>");
<CSSStyleDeclaration>.setProperty("voice-volume", "<cssproperty_voice-volume>");
<CSSStyleDeclaration>.setProperty("voice-balance", "<cssproperty_voice-balance>");
<CSSStyleDeclaration>.setProperty("speak", "<cssproperty_speak>");
<CSSStyleDeclaration>.setProperty("speak-as", "<cssproperty_speak-as>");
<CSSStyleDeclaration>.setProperty("pause-before", "<cssproperty_pause-before>");
<CSSStyleDeclaration>.setProperty("pause-after", "<cssproperty_pause-after>");
<CSSStyleDeclaration>.setProperty("pause", "<cssproperty_pause>");
<CSSStyleDeclaration>.setProperty("rest-before", "<cssproperty_rest-before>");
<CSSStyleDeclaration>.setProperty("rest-after", "<cssproperty_rest-after>");
<CSSStyleDeclaration>.setProperty("rest", "<cssproperty_rest>");
<CSSStyleDeclaration>.setProperty("cue-before", "<cssproperty_cue-before>");
<CSSStyleDeclaration>.setProperty("cue-after", "<cssproperty_cue-after>");
<CSSStyleDeclaration>.setProperty("cue", "<cssproperty_cue>");
<CSSStyleDeclaration>.setProperty("voice-family", "<cssproperty_voice-family>");
<CSSStyleDeclaration>.setProperty("voice-rate", "<cssproperty_voice-rate>");
<CSSStyleDeclaration>.setProperty("voice-pitch", "<cssproperty_voice-pitch>");
<CSSStyleDeclaration>.setProperty("voice-range", "<cssproperty_voice-range>");
<CSSStyleDeclaration>.setProperty("voice-stress", "<cssproperty_voice-stress>");
<CSSStyleDeclaration>.setProperty("voice-duration", "<cssproperty_voice-duration>");
<CSSStyleDeclaration>.setProperty("word-boundary-detection", "<cssproperty_word-boundary-detection>");
<CSSStyleDeclaration>.setProperty("word-boundary-expansion", "<cssproperty_word-boundary-expansion>");
<CSSStyleDeclaration>.setProperty("white-space-collapse", "<cssproperty_white-space-collapse>");
<CSSStyleDeclaration>.setProperty("white-space-trim", "<cssproperty_white-space-trim>");
<CSSStyleDeclaration>.setProperty("hyphenate-character", "<cssproperty_hyphenate-character>");
<CSSStyleDeclaration>.setProperty("hyphenate-limit-zone", "<cssproperty_hyphenate-limit-zone>");
<CSSStyleDeclaration>.setProperty("hyphenate-limit-chars", "<cssproperty_hyphenate-limit-chars>");
<CSSStyleDeclaration>.setProperty("hyphenate-limit-lines", "<cssproperty_hyphenate-limit-lines>");
<CSSStyleDeclaration>.setProperty("hyphenate-limit-last", "<cssproperty_hyphenate-limit-last>");
<CSSStyleDeclaration>.setProperty("text-wrap", "<cssproperty_text-wrap>");
<CSSStyleDeclaration>.setProperty("wrap-before", "<cssproperty_wrap-before>");
<CSSStyleDeclaration>.setProperty("wrap-after", "<cssproperty_wrap-after>");
<CSSStyleDeclaration>.setProperty("wrap-inside", "<cssproperty_wrap-inside>");
<CSSStyleDeclaration>.setProperty("text-align-all", "<cssproperty_text-align-all>");
<CSSStyleDeclaration>.setProperty("text-group-align", "<cssproperty_text-group-align>");
<CSSStyleDeclaration>.setProperty("line-padding", "<cssproperty_line-padding>");
<CSSStyleDeclaration>.setProperty("text-autospace", "<cssproperty_text-autospace>");
<CSSStyleDeclaration>.setProperty("text-spacing-trim", "<cssproperty_text-spacing-trim>");
<CSSStyleDeclaration>.setProperty("text-spacing", "<cssproperty_text-spacing>");
<CSSStyleDeclaration>.setProperty("hanging-punctuation", "<cssproperty_hanging-punctuation>");
<CSSStyleDeclaration>.setProperty("text-decoration-thickness", "<cssproperty_text-decoration-thickness>");
<CSSStyleDeclaration>.setProperty("text-underline-offset", "<cssproperty_text-underline-offset>");
<CSSStyleDeclaration>.setProperty("text-decoration-trim", "<cssproperty_text-decoration-trim>");
<CSSStyleDeclaration>.setProperty("text-decoration-skip", "<cssproperty_text-decoration-skip>");
<CSSStyleDeclaration>.setProperty("text-decoration-skip-self", "<cssproperty_text-decoration-skip-self>");
<CSSStyleDeclaration>.setProperty("text-decoration-skip-box", "<cssproperty_text-decoration-skip-box>");
<CSSStyleDeclaration>.setProperty("text-decoration-skip-spaces", "<cssproperty_text-decoration-skip-spaces>");
<CSSStyleDeclaration>.setProperty("text-decoration-skip-ink", "<cssproperty_text-decoration-skip-ink>");
<CSSStyleDeclaration>.setProperty("text-emphasis-style", "<cssproperty_text-emphasis-style>");
<CSSStyleDeclaration>.setProperty("text-emphasis-color", "<cssproperty_text-emphasis-color>");
<CSSStyleDeclaration>.setProperty("text-emphasis", "<cssproperty_text-emphasis>");
<CSSStyleDeclaration>.setProperty("text-emphasis-position", "<cssproperty_text-emphasis-position>");
<CSSStyleDeclaration>.setProperty("text-emphasis-skip", "<cssproperty_text-emphasis-skip>");
<CSSStyleDeclaration>.setProperty("transform-box", "<cssproperty_transform-box>");
<CSSStyleDeclaration>.setProperty("caret-color", "<cssproperty_caret-color>");
<CSSStyleDeclaration>.setProperty("caret-shape", "<cssproperty_caret-shape>");
<CSSStyleDeclaration>.setProperty("caret", "<cssproperty_caret>");
<CSSStyleDeclaration>.setProperty("nav-up", "<cssproperty_nav-up>");
<CSSStyleDeclaration>.setProperty("nav-right", "<cssproperty_nav-right>");
<CSSStyleDeclaration>.setProperty("nav-down", "<cssproperty_nav-down>");
<CSSStyleDeclaration>.setProperty("nav-left", "<cssproperty_nav-left>");
<CSSStyleDeclaration>.setProperty("accent-color", "<cssproperty_accent-color>");
<CSSStyleDeclaration>.setProperty("appearance", "<cssproperty_appearance>");
<CSSStyleDeclaration>.setProperty("input-security", "<cssproperty_input-security>");
<CSSStyleDeclaration>.setProperty("view-transition-name", "<cssproperty_view-transition-name>");
<CSSStyleDeclaration>.setProperty("glyph-orientation-vertical", "<cssproperty_glyph-orientation-vertical>");
<CSSStyleDeclaration>.setProperty("fill-break", "<cssproperty_fill-break>");
<CSSStyleDeclaration>.setProperty("fill-color", "<cssproperty_fill-color>");
<CSSStyleDeclaration>.setProperty("fill-image", "<cssproperty_fill-image>");
<CSSStyleDeclaration>.setProperty("fill-origin", "<cssproperty_fill-origin>");
<CSSStyleDeclaration>.setProperty("fill-position", "<cssproperty_fill-position>");
<CSSStyleDeclaration>.setProperty("fill-size", "<cssproperty_fill-size>");
<CSSStyleDeclaration>.setProperty("fill-repeat", "<cssproperty_fill-repeat>");
<CSSStyleDeclaration>.setProperty("stroke-align", "<cssproperty_stroke-align>");
<CSSStyleDeclaration>.setProperty("stroke-break", "<cssproperty_stroke-break>");
<CSSStyleDeclaration>.setProperty("stroke-dash-corner", "<cssproperty_stroke-dash-corner>");
<CSSStyleDeclaration>.setProperty("stroke-dash-justify", "<cssproperty_stroke-dash-justify>");
<CSSStyleDeclaration>.setProperty("stroke-color", "<cssproperty_stroke-color>");
<CSSStyleDeclaration>.setProperty("stroke-image", "<cssproperty_stroke-image>");
<CSSStyleDeclaration>.setProperty("stroke-origin", "<cssproperty_stroke-origin>");
<CSSStyleDeclaration>.setProperty("stroke-position", "<cssproperty_stroke-position>");
<CSSStyleDeclaration>.setProperty("stroke-size", "<cssproperty_stroke-size>");
<CSSStyleDeclaration>.setProperty("stroke-repeat", "<cssproperty_stroke-repeat>");
<CSSStyleDeclaration>.setProperty("math-style", "<cssproperty_math-style>");
<CSSStyleDeclaration>.setProperty("math-shift", "<cssproperty_math-shift>");
<CSSStyleDeclaration>.setProperty("math-depth", "<cssproperty_math-depth>");
<CSSStyleDeclaration>.setProperty("offset-rotate", "<cssproperty_offset-rotate>");
<CSSStyleDeclaration>.setProperty("scroll-timeline-name", "<cssproperty_scroll-timeline-name>");
<CSSStyleDeclaration>.setProperty("scroll-timeline-axis", "<cssproperty_scroll-timeline-axis>");
<CSSStyleDeclaration>.setProperty("scroll-timeline", "<cssproperty_scroll-timeline>");
<CSSStyleDeclaration>.setProperty("view-timeline-name", "<cssproperty_view-timeline-name>");
<CSSStyleDeclaration>.setProperty("view-timeline-axis", "<cssproperty_view-timeline-axis>");
<CSSStyleDeclaration>.setProperty("view-timeline-inset", "<cssproperty_view-timeline-inset>");
<CSSStyleDeclaration>.setProperty("view-timeline", "<cssproperty_view-timeline>");
<CSSStyleDeclaration>.setProperty("animation-range", "<cssproperty_animation-range>");
<CSSStyleDeclaration>.setProperty("animation-range-start", "<cssproperty_animation-range-start>");
<CSSStyleDeclaration>.setProperty("animation-range-end", "<cssproperty_animation-range-end>");
<CSSStyleDeclaration>.setProperty("stroke-alignment", "<cssproperty_stroke-alignment>");
<CSSStyleDeclaration>.setProperty("stroke-dashcorner", "<cssproperty_stroke-dashcorner>");
<CSSStyleDeclaration>.setProperty("stroke-dashadjust", "<cssproperty_stroke-dashadjust>");

!end lines
