<root root=true> = <lines count=1000>

!lineguard try { <line> } catch(e) { }

!include common.txt
!include jshelpers2.txt
!include webkit_helper.txt

!begin lines
<new AbortController> = new AbortController();
<new AbortSignal> = <AbortController>.signal;
<new void> = <AbortController>.abort();
!extends AbortSignal EventTarget;
<new EventTarget> = <AbortSignal>;
<new AbortSignal> = <AbortSignal>.abort();
<new boolean> = <AbortSignal>.aborted;
<new EventHandler> = <AbortSignal>.onabort;
<AbortSignal>.onabort = <EventHandler>;
<new Node> = <AbstractRange>.startContainer;
<new unsigned long> = <AbstractRange>.startOffset;
<new Node> = <AbstractRange>.endContainer;
<new unsigned long> = <AbstractRange>.endOffset;
<new boolean> = <AbstractRange>.collapsed;
<new DOMString> = <AccessibleNode>.computedRole;
<new sequence_DOMString_> = [<DOMString>];
<new DOMString> = <sequence_DOMString_>[0];
<new sequence_DOMString_> = <AccessibleNode>.states;
<new sequence_DOMString_> = <AccessibleNode>.attributes;
<new Node> = <AccessibleNode>.DOMNode;
<AccessibleNode>.is();
<AccessibleNode>.is(<DOMString>);
<AccessibleNode>.has();
<AccessibleNode>.has(<DOMString>);
<new any> = <AccessibleNode>.get(<DOMString>);
<new DOMString> = <AccessibleNode>.role;
<AccessibleNode>.role = <DOMString>;
<AccessibleNode>.role = null;
<new DOMString> = <AccessibleNode>.roleDescription;
<AccessibleNode>.roleDescription = <DOMString>;
<AccessibleNode>.roleDescription = null;
<new DOMString> = <AccessibleNode>.label;
<AccessibleNode>.label = <DOMString>;
<AccessibleNode>.label = null;
<new DOMString> = <AccessibleNode>.current;
<AccessibleNode>.current = <DOMString>;
<AccessibleNode>.current = null;
<new DOMString> = <AccessibleNode>.autocomplete;
<AccessibleNode>.autocomplete = <DOMString>;
<AccessibleNode>.autocomplete = null;
<new DOMString> = <AccessibleNode>.keyShortcuts;
<AccessibleNode>.keyShortcuts = <DOMString>;
<AccessibleNode>.keyShortcuts = null;
<new boolean> = <AccessibleNode>.modal;
<AccessibleNode>.modal = <boolean>;
<AccessibleNode>.modal = null;
<new boolean> = <AccessibleNode>.multiline;
<AccessibleNode>.multiline = <boolean>;
<AccessibleNode>.multiline = null;
<new boolean> = <AccessibleNode>.multiselectable;
<AccessibleNode>.multiselectable = <boolean>;
<AccessibleNode>.multiselectable = null;
<new DOMString> = <AccessibleNode>.orientation;
<AccessibleNode>.orientation = <DOMString>;
<AccessibleNode>.orientation = null;
<new boolean> = <AccessibleNode>.readOnly;
<AccessibleNode>.readOnly = <boolean>;
<AccessibleNode>.readOnly = null;
<new boolean> = <AccessibleNode>.required;
<AccessibleNode>.required = <boolean>;
<AccessibleNode>.required = null;
<new DOMString> = <AccessibleNode>.sort;
<AccessibleNode>.sort = <DOMString>;
<AccessibleNode>.sort = null;
<new DOMString> = <AccessibleNode>.placeholder;
<AccessibleNode>.placeholder = <DOMString>;
<AccessibleNode>.placeholder = null;
<new double> = <AccessibleNode>.valueMax;
<AccessibleNode>.valueMax = <double>;
<AccessibleNode>.valueMax = null;
<new double> = <AccessibleNode>.valueMin;
<AccessibleNode>.valueMin = <double>;
<AccessibleNode>.valueMin = null;
<new double> = <AccessibleNode>.valueNow;
<AccessibleNode>.valueNow = <double>;
<AccessibleNode>.valueNow = null;
<new DOMString> = <AccessibleNode>.valueText;
<AccessibleNode>.valueText = <DOMString>;
<AccessibleNode>.valueText = null;
<new DOMString> = <AccessibleNode>.checked;
<AccessibleNode>.checked = <DOMString>;
<AccessibleNode>.checked = null;
<new boolean> = <AccessibleNode>.disabled;
<AccessibleNode>.disabled = <boolean>;
<AccessibleNode>.disabled = null;
<new boolean> = <AccessibleNode>.expanded;
<AccessibleNode>.expanded = <boolean>;
<AccessibleNode>.expanded = null;
<new DOMString> = <AccessibleNode>.hasPopUp;
<AccessibleNode>.hasPopUp = <DOMString>;
<AccessibleNode>.hasPopUp = null;
<new boolean> = <AccessibleNode>.hidden;
<AccessibleNode>.hidden = <boolean>;
<AccessibleNode>.hidden = null;
<new DOMString> = <AccessibleNode>.invalid;
<AccessibleNode>.invalid = <DOMString>;
<AccessibleNode>.invalid = null;
<new DOMString> = <AccessibleNode>.pressed;
<AccessibleNode>.pressed = <DOMString>;
<AccessibleNode>.pressed = null;
<new boolean> = <AccessibleNode>.selected;
<AccessibleNode>.selected = <boolean>;
<AccessibleNode>.selected = null;
<new boolean> = <AccessibleNode>.atomic;
<AccessibleNode>.atomic = <boolean>;
<AccessibleNode>.atomic = null;
<new boolean> = <AccessibleNode>.busy;
<AccessibleNode>.busy = <boolean>;
<AccessibleNode>.busy = null;
<new DOMString> = <AccessibleNode>.live;
<AccessibleNode>.live = <DOMString>;
<AccessibleNode>.live = null;
<new DOMString> = <AccessibleNode>.relevant;
<AccessibleNode>.relevant = <DOMString>;
<AccessibleNode>.relevant = null;
<new AccessibleNode> = <AccessibleNode>.activeDescendant;
<AccessibleNode>.activeDescendant = <AccessibleNode>;
<AccessibleNode>.activeDescendant = null;
<new AccessibleNode> = <AccessibleNode>.details;
<AccessibleNode>.details = <AccessibleNode>;
<AccessibleNode>.details = null;
<new AccessibleNode> = <AccessibleNode>.errorMessage;
<AccessibleNode>.errorMessage = <AccessibleNode>;
<AccessibleNode>.errorMessage = null;
<new long> = <AccessibleNode>.colCount;
<AccessibleNode>.colCount = <long>;
<AccessibleNode>.colCount = null;
<new unsigned long> = <AccessibleNode>.colIndex;
<AccessibleNode>.colIndex = <unsigned long>;
<AccessibleNode>.colIndex = null;
<new unsigned long> = <AccessibleNode>.colSpan;
<AccessibleNode>.colSpan = <unsigned long>;
<AccessibleNode>.colSpan = null;
<new unsigned long> = <AccessibleNode>.level;
<AccessibleNode>.level = <unsigned long>;
<AccessibleNode>.level = null;
<new unsigned long> = <AccessibleNode>.posInSet;
<AccessibleNode>.posInSet = <unsigned long>;
<AccessibleNode>.posInSet = null;
<new long> = <AccessibleNode>.rowCount;
<AccessibleNode>.rowCount = <long>;
<AccessibleNode>.rowCount = null;
<new unsigned long> = <AccessibleNode>.rowIndex;
<AccessibleNode>.rowIndex = <unsigned long>;
<AccessibleNode>.rowIndex = null;
<new unsigned long> = <AccessibleNode>.rowSpan;
<AccessibleNode>.rowSpan = <unsigned long>;
<AccessibleNode>.rowSpan = null;
<new long> = <AccessibleNode>.setSize;
<AccessibleNode>.setSize = <long>;
<AccessibleNode>.setSize = null;
!extends AddonEvent Event;
<new Event> = <AddonEvent>;
<new AddonEvent> = new AddonEvent(<DOMString>,<AddonEventInit>);
<new DOMString> = <AddonEvent>.id;
<new DOMString> = <Addon>.id;
<new DOMString> = <Addon>.version;
<new DOMString> = <Addon>.type;
<new DOMString> = <Addon>.name;
<new DOMString> = <Addon>.description;
<new boolean> = <Addon>.isEnabled;
<new boolean> = <Addon>.isActive;
<new boolean> = <Addon>.canUninstall;
<new Promise_boolean_> = new Promise(function(x){console.log("ok")});
<new Promise_boolean_> = <Addon>.uninstall();
<new Promise_void_> = new Promise(function(x){console.log("ok")});
<new Promise_void_> = <Addon>.setEnabled(<boolean>);
!extends AddonInstall EventTarget;
<new EventTarget> = <AddonInstall>;
<new DOMString> = <AddonInstall>.state;
<new DOMString> = <AddonInstall>.error;
<new long long> = <AddonInstall>.progress;
<new long long> = <AddonInstall>.maxProgress;
<new Promise_void_> = <AddonInstall>.install();
<new Promise_void_> = <AddonInstall>.cancel();
!extends AddonManager EventTarget;
<new EventTarget> = <AddonManager>;
<new Promise_Addon_> = new Promise(function(x){console.log("ok")});
<new Promise_Addon_> = <AddonManager>.getAddonByID(<DOMString>);
<new Promise_AddonInstall_> = new Promise(function(x){console.log("ok")});
<new Promise_AddonInstall_> = <AddonManager>.createInstall();
<new Promise_AddonInstall_> = <AddonManager>.createInstall(<addonInstallOptions>);
<new Promise_boolean_> = <AddonManager>.reportAbuse(<DOMString>);
<new boolean> = <AddonManager>.abuseReportPanelEnabled;
!extends AnalyserNode AudioNode;
<new AudioNode> = <AnalyserNode>;
<new AnalyserNode> = new AnalyserNode(<BaseAudioContext>);
<new AnalyserNode> = new AnalyserNode(<BaseAudioContext>,<AnalyserOptions>);
<new void> = <AnalyserNode>.getFloatFrequencyData(<Float32Array>);
<new void> = <AnalyserNode>.getByteFrequencyData(<Uint8Array>);
<new void> = <AnalyserNode>.getFloatTimeDomainData(<Float32Array>);
<new void> = <AnalyserNode>.getByteTimeDomainData(<Uint8Array>);
<new unsigned long> = <AnalyserNode>.fftSize;
<AnalyserNode>.fftSize = <unsigned long>;
<new unsigned long> = <AnalyserNode>.frequencyBinCount;
<new double> = <AnalyserNode>.minDecibels;
<AnalyserNode>.minDecibels = <double>;
<new double> = <AnalyserNode>.maxDecibels;
<AnalyserNode>.maxDecibels = <double>;
<new double> = <AnalyserNode>.smoothingTimeConstant;
<AnalyserNode>.smoothingTimeConstant = <double>;
!extends Animation EventTarget;
<new EventTarget> = <Animation>;
<new Animation> = new Animation();
<new Animation> = new Animation(<AnimationEffect>);
<new Animation> = new Animation(<AnimationEffect>,<AnimationTimeline>);
<new DOMString> = <Animation>.id;
<Animation>.id = <DOMString>;
<new AnimationEffect> = <Animation>.effect;
<Animation>.effect = <AnimationEffect>;
<Animation>.effect = null;
<new AnimationTimeline> = <Animation>.timeline;
<new double> = <Animation>.startTime;
<Animation>.startTime = <double>;
<Animation>.startTime = null;
<new double> = <Animation>.currentTime;
<Animation>.currentTime = <double>;
<Animation>.currentTime = null;
<new double> = <Animation>.playbackRate;
<Animation>.playbackRate = <double>;
<new AnimationPlayState> = <Animation>.playState;
<new boolean> = <Animation>.pending;
<new AnimationReplaceState> = <Animation>.replaceState;
<new Promise_Animation_> = new Promise(function(x){console.log("ok")});
<new Promise_Animation_> = <Animation>.ready;
<new Promise_Animation_> = <Animation>.finished;
<new EventHandler> = <Animation>.onfinish;
<Animation>.onfinish = <EventHandler>;
<new EventHandler> = <Animation>.oncancel;
<Animation>.oncancel = <EventHandler>;
<new EventHandler> = <Animation>.onremove;
<Animation>.onremove = <EventHandler>;
<new void> = <Animation>.cancel();
<new void> = <Animation>.finish();
<new void> = <Animation>.play();
<new void> = <Animation>.pause();
<new void> = <Animation>.updatePlaybackRate(<double>);
<new void> = <Animation>.reverse();
<new void> = <Animation>.persist();
<new void> = <Animation>.commitStyles();
<new boolean> = <Animation>.isRunningOnCompositor;
<new EffectTiming> = <AnimationEffect>.getTiming();
<new ComputedEffectTiming> = <AnimationEffect>.getComputedTiming();
<new void> = <AnimationEffect>.updateTiming();
<new void> = <AnimationEffect>.updateTiming(<OptionalEffectTiming>);
!extends AnimationEvent Event;
<new Event> = <AnimationEvent>;
<new AnimationEvent> = new AnimationEvent(<DOMString>);
<new AnimationEvent> = new AnimationEvent(<DOMString>,<AnimationEventInit>);
<new DOMString> = <AnimationEvent>.animationName;
<new float> = <AnimationEvent>.elapsedTime;
<new DOMString> = <AnimationEvent>.pseudoElement;
!extends AnimationPlaybackEvent Event;
<new Event> = <AnimationPlaybackEvent>;
<new AnimationPlaybackEvent> = new AnimationPlaybackEvent(<DOMString>);
<new AnimationPlaybackEvent> = new AnimationPlaybackEvent(<DOMString>,<AnimationPlaybackEventInit>);
<new double> = <AnimationPlaybackEvent>.currentTime;
<new double> = <AnimationPlaybackEvent>.timelineTime;
<new double> = <AnimationTimeline>.currentTime;
<new DOMString> = <AnonymousContent>.getTextContentForElement(<DOMString>);
<new void> = <AnonymousContent>.setTextContentForElement(<DOMString>,<DOMString>);
<new DOMString> = <AnonymousContent>.getAttributeForElement(<DOMString>,<DOMString>);
<new void> = <AnonymousContent>.setAttributeForElement(<DOMString>,<DOMString>,<DOMString>);
<new void> = <AnonymousContent>.removeAttributeForElement(<DOMString>,<DOMString>);
<new nsISupports> = <AnonymousContent>.getCanvasContext(<DOMString>,<DOMString>);
<new Animation> = <AnonymousContent>.setAnimationForElement(<DOMString>,<object>);
<new Animation> = <AnonymousContent>.setAnimationForElement(<DOMString>,<object>,<UnrestrictedDoubleOrKeyframeAnimationOptions>);
<new sequence_DOMRect_> = [<DOMRect>];
<new DOMRect> = <sequence_DOMRect_>[0];
<new void> = <AnonymousContent>.setCutoutRectsForElement(<DOMString>,<sequence_DOMRect_>);
<new UTF8String> = <AnonymousContent>.getComputedStylePropertyValue(<DOMString>,<UTF8String>);
<new DOMString> = <AnonymousContent>.getTargetIdForEvent(<Event>);
<new void> = <AnonymousContent>.setStyle(<UTF8String>,<UTF8String>);
!extends Attr Node;
<new Node> = <Attr>;
<new DOMString> = <Attr>.localName;
<new DOMString> = <Attr>.value;
<Attr>.value = <DOMString>;
<new DOMString> = <Attr>.name;
<new DOMString> = <Attr>.namespaceURI;
<new DOMString> = <Attr>.prefix;
<new boolean> = <Attr>.specified;
<new Element> = <Attr>.ownerElement;
<new AudioBuffer> = new AudioBuffer(<AudioBufferOptions>);
<new float> = <AudioBuffer>.sampleRate;
<new unsigned long> = <AudioBuffer>.length;
<new double> = <AudioBuffer>.duration;
<new unsigned long> = <AudioBuffer>.numberOfChannels;
<new Float32Array> = <AudioBuffer>.getChannelData(<unsigned long>);
<new void> = <AudioBuffer>.copyFromChannel(<Float32Array>,<unsigned long>);
<new void> = <AudioBuffer>.copyFromChannel(<Float32Array>,<unsigned long>,<unsigned long>);
<new void> = <AudioBuffer>.copyToChannel(<Float32Array>,<unsigned long>);
<new void> = <AudioBuffer>.copyToChannel(<Float32Array>,<unsigned long>,<unsigned long>);
!extends AudioBufferSourceNode AudioScheduledSourceNode;
<new AudioScheduledSourceNode> = <AudioBufferSourceNode>;
<new AudioBufferSourceNode> = new AudioBufferSourceNode(<BaseAudioContext>);
<new AudioBufferSourceNode> = new AudioBufferSourceNode(<BaseAudioContext>,<AudioBufferSourceOptions>);
<new AudioBuffer> = <AudioBufferSourceNode>.buffer;
<AudioBufferSourceNode>.buffer = <AudioBuffer>;
<AudioBufferSourceNode>.buffer = null;
<new AudioParam> = <AudioBufferSourceNode>.playbackRate;
<new AudioParam> = <AudioBufferSourceNode>.detune;
<new boolean> = <AudioBufferSourceNode>.loop;
<AudioBufferSourceNode>.loop = <boolean>;
<new double> = <AudioBufferSourceNode>.loopStart;
<AudioBufferSourceNode>.loopStart = <double>;
<new double> = <AudioBufferSourceNode>.loopEnd;
<AudioBufferSourceNode>.loopEnd = <double>;
<new void> = <AudioBufferSourceNode>.start();
<new void> = <AudioBufferSourceNode>.start(<double>);
<new void> = <AudioBufferSourceNode>.start(<double>,<double>);
<new void> = <AudioBufferSourceNode>.start(<double>,<double>,<double>);
!extends AudioContext BaseAudioContext;
<new BaseAudioContext> = <AudioContext>;
<new AudioContext> = new AudioContext();
<new AudioContext> = new AudioContext(<AudioContextOptions>);
<new double> = <AudioContext>.baseLatency;
<new double> = <AudioContext>.outputLatency;
<new AudioTimestamp> = <AudioContext>.getOutputTimestamp();
<new Promise_void_> = <AudioContext>.suspend();
<new Promise_void_> = <AudioContext>.close();
<new MediaElementAudioSourceNode> = <AudioContext>.createMediaElementSource(<HTMLMediaElement>);
<new MediaStreamAudioSourceNode> = <AudioContext>.createMediaStreamSource(<MediaStream>);
<new MediaStreamTrackAudioSourceNode> = <AudioContext>.createMediaStreamTrackSource(<MediaStreamTrack>);
<new MediaStreamAudioDestinationNode> = <AudioContext>.createMediaStreamDestination();
!extends AudioDestinationNode AudioNode;
<new AudioNode> = <AudioDestinationNode>;
<new unsigned long> = <AudioDestinationNode>.maxChannelCount;
<new void> = <AudioListener>.setPosition(<double>,<double>,<double>);
<new void> = <AudioListener>.setOrientation(<double>,<double>,<double>,<double>,<double>,<double>);
!extends AudioNode EventTarget;
<new EventTarget> = <AudioNode>;
<new AudioNode> = <AudioNode>.connect(<AudioNode>);
<new AudioNode> = <AudioNode>.connect(<AudioNode>,<unsigned long>);
<new AudioNode> = <AudioNode>.connect(<AudioNode>,<unsigned long>,<unsigned long>);
<new void> = <AudioNode>.connect(<AudioParam>);
<new void> = <AudioNode>.connect(<AudioParam>,<unsigned long>);
<new void> = <AudioNode>.disconnect();
<new void> = <AudioNode>.disconnect(<unsigned long>);
<new void> = <AudioNode>.disconnect(<AudioNode>);
<new void> = <AudioNode>.disconnect(<AudioNode>,<unsigned long>);
<new void> = <AudioNode>.disconnect(<AudioNode>,<unsigned long>,<unsigned long>);
<new void> = <AudioNode>.disconnect(<AudioParam>);
<new void> = <AudioNode>.disconnect(<AudioParam>,<unsigned long>);
<new BaseAudioContext> = <AudioNode>.context;
<new unsigned long> = <AudioNode>.numberOfInputs;
<new unsigned long> = <AudioNode>.numberOfOutputs;
<new unsigned long> = <AudioNode>.channelCount;
<AudioNode>.channelCount = <unsigned long>;
<new ChannelCountMode> = <AudioNode>.channelCountMode;
<AudioNode>.channelCountMode = <ChannelCountMode>;
<new ChannelInterpretation> = <AudioNode>.channelInterpretation;
<AudioNode>.channelInterpretation = <ChannelInterpretation>;
<new unsigned long> = <AudioNode>.id;
<new float> = <AudioParam>.value;
<AudioParam>.value = <float>;
<new float> = <AudioParam>.defaultValue;
<new float> = <AudioParam>.minValue;
<new float> = <AudioParam>.maxValue;
<new AudioParam> = <AudioParam>.setValueAtTime(<float>,<double>);
<new AudioParam> = <AudioParam>.linearRampToValueAtTime(<float>,<double>);
<new AudioParam> = <AudioParam>.exponentialRampToValueAtTime(<float>,<double>);
<new AudioParam> = <AudioParam>.setTargetAtTime(<float>,<double>,<double>);
<new sequence_float_> = [<float>];
<new float> = <sequence_float_>[0];
<new AudioParam> = <AudioParam>.setValueCurveAtTime(<sequence_float_>,<double>,<double>);
<new AudioParam> = <AudioParam>.cancelScheduledValues(<double>);
<new unsigned long> = <AudioParam>.parentNodeId;
<new DOMString> = <AudioParam>.name;
<new boolean> = <AudioParam>.isTrackSuspended;
!extends AudioProcessingEvent Event;
<new Event> = <AudioProcessingEvent>;
<new double> = <AudioProcessingEvent>.playbackTime;
<new AudioBuffer> = <AudioProcessingEvent>.inputBuffer;
<new AudioBuffer> = <AudioProcessingEvent>.outputBuffer;
!extends AudioScheduledSourceNode AudioNode;
<new AudioNode> = <AudioScheduledSourceNode>;
<new EventHandler> = <AudioScheduledSourceNode>.onended;
<AudioScheduledSourceNode>.onended = <EventHandler>;
<new void> = <AudioScheduledSourceNode>.start();
<new void> = <AudioScheduledSourceNode>.start(<double>);
<new void> = <AudioScheduledSourceNode>.stop();
<new void> = <AudioScheduledSourceNode>.stop(<double>);
<new DOMString> = <AudioTrack>.id;
<new DOMString> = <AudioTrack>.kind;
<new DOMString> = <AudioTrack>.label;
<new DOMString> = <AudioTrack>.language;
<new boolean> = <AudioTrack>.enabled;
<AudioTrack>.enabled = <boolean>;
!extends AudioTrackList EventTarget;
<new EventTarget> = <AudioTrackList>;
<new unsigned long> = <AudioTrackList>.length;
<new AudioTrack> = <AudioTrackList>(<unsigned long>);
<new AudioTrack> = <AudioTrackList>.getTrackById(<DOMString>);
<new EventHandler> = <AudioTrackList>.onchange;
<AudioTrackList>.onchange = <EventHandler>;
<new EventHandler> = <AudioTrackList>.onaddtrack;
<AudioTrackList>.onaddtrack = <EventHandler>;
<new EventHandler> = <AudioTrackList>.onremovetrack;
<AudioTrackList>.onremovetrack = <EventHandler>;
!extends AudioWorklet Worklet;
<new Worklet> = <AudioWorklet>;
!extends AudioWorkletNode AudioNode;
<new AudioNode> = <AudioWorkletNode>;
<new AudioWorkletNode> = new AudioWorkletNode(<BaseAudioContext>,<DOMString>);
<new AudioWorkletNode> = new AudioWorkletNode(<BaseAudioContext>,<DOMString>,<AudioWorkletNodeOptions>);
<new AudioParamMap> = <AudioWorkletNode>.parameters;
<new MessagePort> = <AudioWorkletNode>.port;
<new EventHandler> = <AudioWorkletNode>.onprocessorerror;
<AudioWorkletNode>.onprocessorerror = <EventHandler>;
<new AudioWorkletProcessor> = new AudioWorkletProcessor();
<new MessagePort> = <AudioWorkletProcessor>.port;
<new boolean> = <BarProp>.visible;
<BarProp>.visible = <boolean>;
!extends BaseAudioContext EventTarget;
<new EventTarget> = <BaseAudioContext>;
<new AudioDestinationNode> = <BaseAudioContext>.destination;
<new float> = <BaseAudioContext>.sampleRate;
<new double> = <BaseAudioContext>.currentTime;
<new AudioListener> = <BaseAudioContext>.listener;
<new AudioContextState> = <BaseAudioContext>.state;
<new AudioWorklet> = <BaseAudioContext>.audioWorklet;
<new Promise_void_> = <BaseAudioContext>.resume();
<new EventHandler> = <BaseAudioContext>.onstatechange;
<BaseAudioContext>.onstatechange = <EventHandler>;
<new AudioBuffer> = <BaseAudioContext>.createBuffer(<unsigned long>,<unsigned long>,<float>);
<new Promise_AudioBuffer_> = new Promise(function(x){console.log("ok")});
<new Promise_AudioBuffer_> = <BaseAudioContext>.decodeAudioData(<ArrayBuffer>);
<new Promise_AudioBuffer_> = <BaseAudioContext>.decodeAudioData(<ArrayBuffer>,<DecodeSuccessCallback>);
<new Promise_AudioBuffer_> = <BaseAudioContext>.decodeAudioData(<ArrayBuffer>,<DecodeSuccessCallback>,<DecodeErrorCallback>);
<new AudioBufferSourceNode> = <BaseAudioContext>.createBufferSource();
<new ConstantSourceNode> = <BaseAudioContext>.createConstantSource();
<new ScriptProcessorNode> = <BaseAudioContext>.createScriptProcessor();
<new ScriptProcessorNode> = <BaseAudioContext>.createScriptProcessor(<unsigned long>);
<new ScriptProcessorNode> = <BaseAudioContext>.createScriptProcessor(<unsigned long>,<unsigned long>);
<new ScriptProcessorNode> = <BaseAudioContext>.createScriptProcessor(<unsigned long>,<unsigned long>,<unsigned long>);
<new AnalyserNode> = <BaseAudioContext>.createAnalyser();
<new GainNode> = <BaseAudioContext>.createGain();
<new DelayNode> = <BaseAudioContext>.createDelay();
<new DelayNode> = <BaseAudioContext>.createDelay(<double>);
<new BiquadFilterNode> = <BaseAudioContext>.createBiquadFilter();
<new sequence_double_> = [<double>];
<new double> = <sequence_double_>[0];
<new IIRFilterNode> = <BaseAudioContext>.createIIRFilter(<sequence_double_>,<sequence_double_>);
<new WaveShaperNode> = <BaseAudioContext>.createWaveShaper();
<new PannerNode> = <BaseAudioContext>.createPanner();
<new StereoPannerNode> = <BaseAudioContext>.createStereoPanner();
<new ConvolverNode> = <BaseAudioContext>.createConvolver();
<new ChannelSplitterNode> = <BaseAudioContext>.createChannelSplitter();
<new ChannelSplitterNode> = <BaseAudioContext>.createChannelSplitter(<unsigned long>);
<new ChannelMergerNode> = <BaseAudioContext>.createChannelMerger();
<new ChannelMergerNode> = <BaseAudioContext>.createChannelMerger(<unsigned long>);
<new DynamicsCompressorNode> = <BaseAudioContext>.createDynamicsCompressor();
<new OscillatorNode> = <BaseAudioContext>.createOscillator();
<new PeriodicWave> = <BaseAudioContext>.createPeriodicWave(<Float32Array>,<Float32Array>);
<new PeriodicWave> = <BaseAudioContext>.createPeriodicWave(<Float32Array>,<Float32Array>,<PeriodicWaveConstraints>);
!extends BatteryManager EventTarget;
<new EventTarget> = <BatteryManager>;
<new boolean> = <BatteryManager>.charging;
<new unrestricted double> = <BatteryManager>.chargingTime;
<new unrestricted double> = <BatteryManager>.dischargingTime;
<new double> = <BatteryManager>.level;
<new EventHandler> = <BatteryManager>.onchargingchange;
<BatteryManager>.onchargingchange = <EventHandler>;
<new EventHandler> = <BatteryManager>.onchargingtimechange;
<BatteryManager>.onchargingtimechange = <EventHandler>;
<new EventHandler> = <BatteryManager>.ondischargingtimechange;
<BatteryManager>.ondischargingtimechange = <EventHandler>;
<new EventHandler> = <BatteryManager>.onlevelchange;
<BatteryManager>.onlevelchange = <EventHandler>;
!extends BeforeUnloadEvent Event;
<new Event> = <BeforeUnloadEvent>;
<new DOMString> = <BeforeUnloadEvent>.returnValue;
<BeforeUnloadEvent>.returnValue = <DOMString>;
!extends BiquadFilterNode AudioNode;
<new AudioNode> = <BiquadFilterNode>;
<new BiquadFilterNode> = new BiquadFilterNode(<BaseAudioContext>);
<new BiquadFilterNode> = new BiquadFilterNode(<BaseAudioContext>,<BiquadFilterOptions>);
<new BiquadFilterType> = <BiquadFilterNode>.type;
<BiquadFilterNode>.type = <BiquadFilterType>;
<new AudioParam> = <BiquadFilterNode>.frequency;
<new AudioParam> = <BiquadFilterNode>.detune;
<new AudioParam> = <BiquadFilterNode>.Q;
<new AudioParam> = <BiquadFilterNode>.gain;
<new void> = <BiquadFilterNode>.getFrequencyResponse(<Float32Array>,<Float32Array>,<Float32Array>);
<new sequence_BlobPart_> = [<BlobPart>];
<new BlobPart> = <sequence_BlobPart_>[0];
<new Blob> = new Blob();
<new Blob> = new Blob(<sequence_BlobPart_>);
<new Blob> = new Blob(<sequence_BlobPart_>,<BlobPropertyBag>);
<new unsigned long long> = <Blob>.size;
<new DOMString> = <Blob>.type;
<new Blob> = <Blob>.slice();
<new Blob> = <Blob>.slice(<long long>);
<new Blob> = <Blob>.slice(<long long>,<long long>);
<new Blob> = <Blob>.slice(<long long>,<long long>,<DOMString>);
<new ReadableStream> = <Blob>.stream();
<new Promise_USVString_> = new Promise(function(x){console.log("ok")});
<new Promise_USVString_> = <Blob>.text();
<new Promise_ArrayBuffer_> = new Promise(function(x){console.log("ok")});
<new Promise_ArrayBuffer_> = <Blob>.arrayBuffer();
<new DOMString> = <Blob>.blobImplType;
!extends BlobEvent Event;
<new Event> = <BlobEvent>;
<new BlobEvent> = new BlobEvent(<DOMString>,<BlobEventInit>);
<new Blob> = <BlobEvent>.data;
!extends BroadcastChannel EventTarget;
<new EventTarget> = <BroadcastChannel>;
<new BroadcastChannel> = new BroadcastChannel(<DOMString>);
<new DOMString> = <BroadcastChannel>.name;
<new void> = <BroadcastChannel>.postMessage(<any>);
<new void> = <BroadcastChannel>.close();
<new EventHandler> = <BroadcastChannel>.onmessage;
<BroadcastChannel>.onmessage = <EventHandler>;
<new EventHandler> = <BroadcastChannel>.onmessageerror;
<BroadcastChannel>.onmessageerror = <EventHandler>;
<new Promise_Response_> = new Promise(function(x){console.log("ok")});
<new Promise_Response_> = <Cache>.match(<RequestInfo>);
<new Promise_Response_> = <Cache>.match(<RequestInfo>,<CacheQueryOptions>);
<new sequence_Response_> = [<Response>];
<new Response> = <sequence_Response_>[0];
<new Promise_sequence_Response__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_Response__> = <Cache>.matchAll();
<new Promise_sequence_Response__> = <Cache>.matchAll(<RequestInfo>);
<new Promise_sequence_Response__> = <Cache>.matchAll(<RequestInfo>,<CacheQueryOptions>);
<new Promise_void_> = <Cache>.add(<RequestInfo>);
<new sequence_RequestInfo_> = [<RequestInfo>];
<new RequestInfo> = <sequence_RequestInfo_>[0];
<new Promise_void_> = <Cache>.addAll(<sequence_RequestInfo_>);
<new Promise_void_> = <Cache>.put(<RequestInfo>,<Response>);
<new Promise_boolean_> = <Cache>.delete(<RequestInfo>);
<new Promise_boolean_> = <Cache>.delete(<RequestInfo>,<CacheQueryOptions>);
<new sequence_Request_> = [<Request>];
<new Request> = <sequence_Request_>[0];
<new Promise_sequence_Request__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_Request__> = <Cache>.keys();
<new Promise_sequence_Request__> = <Cache>.keys(<RequestInfo>);
<new Promise_sequence_Request__> = <Cache>.keys(<RequestInfo>,<CacheQueryOptions>);
<new CacheStorage> = new CacheStorage(<CacheStorageNamespace>,<Principal>);
<new Promise_Response_> = <CacheStorage>.match(<RequestInfo>);
<new Promise_Response_> = <CacheStorage>.match(<RequestInfo>,<MultiCacheQueryOptions>);
<new Promise_boolean_> = <CacheStorage>.has(<DOMString>);
<new Promise_Cache_> = new Promise(function(x){console.log("ok")});
<new Promise_Cache_> = <CacheStorage>.open(<DOMString>);
<new Promise_boolean_> = <CacheStorage>.delete(<DOMString>);
<new Promise_sequence_DOMString__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_DOMString__> = <CacheStorage>.keys();
!extends CanvasCaptureMediaStream MediaStream;
<new MediaStream> = <CanvasCaptureMediaStream>;
<new HTMLCanvasElement> = <CanvasCaptureMediaStream>.canvas;
<new void> = <CanvasCaptureMediaStream>.requestFrame();
<new HTMLCanvasElement> = <CanvasRenderingContext2D>.canvas;
<new object> = <CanvasRenderingContext2D>.mozCurrentTransform;
<CanvasRenderingContext2D>.mozCurrentTransform = <object>;
<new object> = <CanvasRenderingContext2D>.mozCurrentTransformInverse;
<CanvasRenderingContext2D>.mozCurrentTransformInverse = <object>;
<new UTF8String> = <CanvasRenderingContext2D>.mozTextStyle;
<CanvasRenderingContext2D>.mozTextStyle = <UTF8String>;
<new boolean> = <CanvasRenderingContext2D>.mozImageSmoothingEnabled;
<CanvasRenderingContext2D>.mozImageSmoothingEnabled = <boolean>;
<new unsigned long> = <CanvasRenderingContext2D>.DRAWWINDOW_DRAW_CARET;
<new unsigned long> = <CanvasRenderingContext2D>.DRAWWINDOW_DO_NOT_FLUSH;
<new unsigned long> = <CanvasRenderingContext2D>.DRAWWINDOW_DRAW_VIEW;
<new unsigned long> = <CanvasRenderingContext2D>.DRAWWINDOW_USE_WIDGET_LAYERS;
<new unsigned long> = <CanvasRenderingContext2D>.DRAWWINDOW_ASYNC_DECODE_IMAGES;
<new void> = <CanvasRenderingContext2D>.drawWindow(<Window>,<double>,<double>,<double>,<double>,<UTF8String>);
<new void> = <CanvasRenderingContext2D>.drawWindow(<Window>,<double>,<double>,<double>,<double>,<UTF8String>,<unsigned long>);
<new void> = <CanvasRenderingContext2D>.demote();
<new void> = <CanvasGradient>.addColorStop(<float>,<UTF8String>);
<new void> = <CanvasPattern>.setTransform();
<new void> = <CanvasPattern>.setTransform(<DOMMatrix2DInit>);
<new double> = <TextMetrics>.width;
<new double> = <TextMetrics>.actualBoundingBoxLeft;
<new double> = <TextMetrics>.actualBoundingBoxRight;
<new double> = <TextMetrics>.fontBoundingBoxAscent;
<new double> = <TextMetrics>.fontBoundingBoxDescent;
<new double> = <TextMetrics>.actualBoundingBoxAscent;
<new double> = <TextMetrics>.actualBoundingBoxDescent;
<new double> = <TextMetrics>.emHeightAscent;
<new double> = <TextMetrics>.emHeightDescent;
<new double> = <TextMetrics>.hangingBaseline;
<new double> = <TextMetrics>.alphabeticBaseline;
<new double> = <TextMetrics>.ideographicBaseline;
<new Path2D> = new Path2D();
<new Path2D> = new Path2D(<Path2D>);
<new Path2D> = new Path2D(<DOMString>);
<new void> = <Path2D>.addPath(<Path2D>);
<new void> = <Path2D>.addPath(<Path2D>,<DOMMatrix2DInit>);
<new Node> = <CaretPosition>.offsetNode;
<new unsigned long> = <CaretPosition>.offset;
<new DOMRect> = <CaretPosition>.getClientRect();
!extends CaretStateChangedEvent Event;
<new Event> = <CaretStateChangedEvent>;
<new CaretStateChangedEvent> = new CaretStateChangedEvent(<DOMString>);
<new CaretStateChangedEvent> = new CaretStateChangedEvent(<DOMString>,<CaretStateChangedEventInit>);
<new boolean> = <CaretStateChangedEvent>.collapsed;
<new DOMRectReadOnly> = <CaretStateChangedEvent>.boundingClientRect;
<new CaretChangedReason> = <CaretStateChangedEvent>.reason;
<new boolean> = <CaretStateChangedEvent>.caretVisible;
<new boolean> = <CaretStateChangedEvent>.caretVisuallyVisible;
<new boolean> = <CaretStateChangedEvent>.selectionVisible;
<new boolean> = <CaretStateChangedEvent>.selectionEditable;
<new DOMString> = <CaretStateChangedEvent>.selectedTextContent;
!extends CDATASection Text;
<new Text> = <CDATASection>;
!extends ChannelMergerNode AudioNode;
<new AudioNode> = <ChannelMergerNode>;
<new ChannelMergerNode> = new ChannelMergerNode(<BaseAudioContext>);
<new ChannelMergerNode> = new ChannelMergerNode(<BaseAudioContext>,<ChannelMergerOptions>);
!extends ChannelSplitterNode AudioNode;
<new AudioNode> = <ChannelSplitterNode>;
<new ChannelSplitterNode> = new ChannelSplitterNode(<BaseAudioContext>);
<new ChannelSplitterNode> = new ChannelSplitterNode(<BaseAudioContext>,<ChannelSplitterOptions>);
!extends CharacterData Node;
<new Node> = <CharacterData>;
<new DOMString> = <CharacterData>.data;
<CharacterData>.data = <DOMString>;
<new unsigned long> = <CharacterData>.length;
<new DOMString> = <CharacterData>.substringData(<unsigned long>,<unsigned long>);
<new void> = <CharacterData>.appendData(<DOMString>);
<new void> = <CharacterData>.insertData(<unsigned long>,<DOMString>);
<new void> = <CharacterData>.deleteData(<unsigned long>,<unsigned long>);
<new void> = <CharacterData>.replaceData(<unsigned long>,<unsigned long>,<DOMString>);
<new CheckerboardReportService> = new CheckerboardReportService();
<new sequence_CheckerboardReport_> = [<CheckerboardReport>];
<new CheckerboardReport> = <sequence_CheckerboardReport_>[0];
<new sequence_CheckerboardReport_> = <CheckerboardReportService>.getReports();
<CheckerboardReportService>.isRecordingEnabled();
<new void> = <CheckerboardReportService>.setRecordingEnabled(<boolean>);
<new void> = <CheckerboardReportService>.flushActiveReports();
<new long> = <ChildSHistory>.count;
<new long> = <ChildSHistory>.index;
<ChildSHistory>.canGo(<long>);
<new void> = <ChildSHistory>.go(<long>);
<new void> = <ChildSHistory>.go(<long>,<boolean>);
<new void> = <ChildSHistory>.go(<long>,<boolean>,<boolean>);
<new void> = <ChildSHistory>.reload(<unsigned long>);
<new nsISHistory> = <ChildSHistory>.legacySHistory;
!extends ChromeNodeList NodeList;
<new NodeList> = <ChromeNodeList>;
<new ChromeNodeList> = new ChromeNodeList();
<new void> = <ChromeNodeList>.append(<Node>);
<new void> = <ChromeNodeList>.remove(<Node>);
<new USVString> = <Client>.url;
<new FrameType> = <Client>.frameType;
<new ClientType> = <Client>.type;
<new DOMString> = <Client>.id;
<new sequence_object_> = [<object>];
<new object> = <sequence_object_>[0];
<new void> = <Client>.postMessage(<any>,<sequence_object_>);
<new void> = <Client>.postMessage(<any>);
<new void> = <Client>.postMessage(<any>,<StructuredSerializeOptions>);
!extends WindowClient Client;
<new Client> = <WindowClient>;
<new VisibilityState> = <WindowClient>.visibilityState;
<new boolean> = <WindowClient>.focused;
<new Promise_WindowClient_> = new Promise(function(x){console.log("ok")});
<new Promise_WindowClient_> = <WindowClient>.focus();
<new Promise_WindowClient_> = <WindowClient>.navigate(<USVString>);
<new Promise_any_> = new Promise(function(x){console.log("ok")});
<new Promise_any_> = <Clients>.get(<DOMString>);
<new sequence_Client_> = [<Client>];
<new Client> = <sequence_Client_>[0];
<new Promise_sequence_Client__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_Client__> = <Clients>.matchAll();
<new Promise_sequence_Client__> = <Clients>.matchAll(<ClientQueryOptions>);
<new Promise_WindowClient_> = <Clients>.openWindow(<USVString>);
<new Promise_void_> = <Clients>.claim();
!extends Clipboard EventTarget;
<new EventTarget> = <Clipboard>;
<new Promise_ClipboardItems_> = new Promise(function(x){console.log("ok")});
<new Promise_ClipboardItems_> = <Clipboard>.read();
<new Promise_DOMString_> = new Promise(function(x){console.log("ok")});
<new Promise_DOMString_> = <Clipboard>.readText();
<new Promise_void_> = <Clipboard>.write(<ClipboardItems>);
<new Promise_void_> = <Clipboard>.writeText(<DOMString>);
<new record_DOMString1ClipboardItemDataType_> = {a: <ClipboardItemDataType>};
<new ClipboardItemDataType> = <record_DOMString1ClipboardItemDataType_>[<DOMString>];
<new ClipboardItem> = new ClipboardItem(<record_DOMString1ClipboardItemDataType_>);
<new ClipboardItem> = new ClipboardItem(<record_DOMString1ClipboardItemDataType_>,<ClipboardItemOptions>);
<new PresentationStyle> = <ClipboardItem>.presentationStyle;
<new sequence_DOMString_> = <ClipboardItem>.types;
<new Promise_Blob_> = new Promise(function(x){console.log("ok")});
<new Promise_Blob_> = <ClipboardItem>.getType(<DOMString>);
!extends ClipboardEvent Event;
<new Event> = <ClipboardEvent>;
<new ClipboardEvent> = new ClipboardEvent(<DOMString>);
<new ClipboardEvent> = new ClipboardEvent(<DOMString>,<ClipboardEventInit>);
<new DataTransfer> = <ClipboardEvent>.clipboardData;
!extends CloseEvent Event;
<new Event> = <CloseEvent>;
<new CloseEvent> = new CloseEvent(<DOMString>);
<new CloseEvent> = new CloseEvent(<DOMString>,<CloseEventInit>);
<new boolean> = <CloseEvent>.wasClean;
<new unsigned short> = <CloseEvent>.code;
<new DOMString> = <CloseEvent>.reason;
!extends CommandEvent Event;
<new Event> = <CommandEvent>;
<new DOMString> = <CommandEvent>.command;
!extends Comment CharacterData;
<new CharacterData> = <Comment>;
<new Comment> = new Comment();
<new Comment> = new Comment(<DOMString>);
!extends CompositionEvent UIEvent;
<new UIEvent> = <CompositionEvent>;
<new CompositionEvent> = new CompositionEvent(<DOMString>);
<new CompositionEvent> = new CompositionEvent(<DOMString>,<CompositionEventInit>);
<new DOMString> = <CompositionEvent>.data;
<new DOMString> = <CompositionEvent>.locale;
<new sequence_TextClause_> = [<TextClause>];
<new TextClause> = <sequence_TextClause_>[0];
<new sequence_TextClause_> = <CompositionEvent>.ranges;
<new void> = <CompositionEvent>.initCompositionEvent(<DOMString>);
<new void> = <CompositionEvent>.initCompositionEvent(<DOMString>,<boolean>);
<new void> = <CompositionEvent>.initCompositionEvent(<DOMString>,<boolean>,<boolean>);
<new void> = <CompositionEvent>.initCompositionEvent(<DOMString>,<boolean>,<boolean>,<Window>);
<new void> = <CompositionEvent>.initCompositionEvent(<DOMString>,<boolean>,<boolean>,<Window>,<DOMString>);
<new void> = <CompositionEvent>.initCompositionEvent(<DOMString>,<boolean>,<boolean>,<Window>,<DOMString>,<DOMString>);
<new void> = <ConsoleInstance>.assert();
<new void> = <ConsoleInstance>.assert(<boolean>);
<new void> = <ConsoleInstance>.assert(<boolean>,<any>);
<new void> = <ConsoleInstance>.clear();
<new void> = <ConsoleInstance>.count();
<new void> = <ConsoleInstance>.count(<DOMString>);
<new void> = <ConsoleInstance>.countReset();
<new void> = <ConsoleInstance>.countReset(<DOMString>);
<new void> = <ConsoleInstance>.debug();
<new void> = <ConsoleInstance>.debug(<any>);
<new void> = <ConsoleInstance>.error();
<new void> = <ConsoleInstance>.error(<any>);
<new void> = <ConsoleInstance>.info();
<new void> = <ConsoleInstance>.info(<any>);
<new void> = <ConsoleInstance>.log();
<new void> = <ConsoleInstance>.log(<any>);
<new void> = <ConsoleInstance>.table();
<new void> = <ConsoleInstance>.table(<any>);
<new void> = <ConsoleInstance>.trace();
<new void> = <ConsoleInstance>.trace(<any>);
<new void> = <ConsoleInstance>.warn();
<new void> = <ConsoleInstance>.warn(<any>);
<new void> = <ConsoleInstance>.dir();
<new void> = <ConsoleInstance>.dir(<any>);
<new void> = <ConsoleInstance>.dirxml();
<new void> = <ConsoleInstance>.dirxml(<any>);
<new void> = <ConsoleInstance>.group();
<new void> = <ConsoleInstance>.group(<any>);
<new void> = <ConsoleInstance>.groupCollapsed();
<new void> = <ConsoleInstance>.groupCollapsed(<any>);
<new void> = <ConsoleInstance>.groupEnd();
<new void> = <ConsoleInstance>.time();
<new void> = <ConsoleInstance>.time(<DOMString>);
<new void> = <ConsoleInstance>.timeLog();
<new void> = <ConsoleInstance>.timeLog(<DOMString>);
<new void> = <ConsoleInstance>.timeLog(<DOMString>,<any>);
<new void> = <ConsoleInstance>.timeEnd();
<new void> = <ConsoleInstance>.timeEnd(<DOMString>);
<new void> = <ConsoleInstance>.exception();
<new void> = <ConsoleInstance>.exception(<any>);
<new void> = <ConsoleInstance>.timeStamp();
<new void> = <ConsoleInstance>.timeStamp(<any>);
<new void> = <ConsoleInstance>.profile();
<new void> = <ConsoleInstance>.profile(<any>);
<new void> = <ConsoleInstance>.profileEnd();
<new void> = <ConsoleInstance>.profileEnd(<any>);
<new void> = <ConsoleInstance>.reportForServiceWorkerScope(<DOMString>,<DOMString>,<DOMString>,<unsigned long>,<unsigned long>,<ConsoleLevel>);
!extends ConstantSourceNode AudioScheduledSourceNode;
<new AudioScheduledSourceNode> = <ConstantSourceNode>;
<new ConstantSourceNode> = new ConstantSourceNode(<BaseAudioContext>);
<new ConstantSourceNode> = new ConstantSourceNode(<BaseAudioContext>,<ConstantSourceOptions>);
<new AudioParam> = <ConstantSourceNode>.offset;
!extends ConvolverNode AudioNode;
<new AudioNode> = <ConvolverNode>;
<new ConvolverNode> = new ConvolverNode(<BaseAudioContext>);
<new ConvolverNode> = new ConvolverNode(<BaseAudioContext>,<ConvolverOptions>);
<new AudioBuffer> = <ConvolverNode>.buffer;
<ConvolverNode>.buffer = <AudioBuffer>;
<ConvolverNode>.buffer = null;
<new boolean> = <ConvolverNode>.normalize;
<ConvolverNode>.normalize = <boolean>;
<new unsigned long long> = <CreateOfferRequest>.windowID;
<new unsigned long long> = <CreateOfferRequest>.innerWindowID;
<new DOMString> = <CreateOfferRequest>.callID;
<new boolean> = <CreateOfferRequest>.isSecure;
<new USVString> = <Credential>.id;
<new DOMString> = <Credential>.type;
<new Promise_Credential_> = new Promise(function(x){console.log("ok")});
<new Promise_Credential_> = <CredentialsContainer>.get();
<new Promise_Credential_> = <CredentialsContainer>.get(<CredentialRequestOptions>);
<new Promise_Credential_> = <CredentialsContainer>.create();
<new Promise_Credential_> = <CredentialsContainer>.create(<CredentialCreationOptions>);
<new Promise_Credential_> = <CredentialsContainer>.store(<Credential>);
<new Promise_void_> = <CredentialsContainer>.preventSilentAccess();
<new SubtleCrypto> = <Crypto>.subtle;
<new ArrayBufferView> = <Crypto>.getRandomValues(<ArrayBufferView>);
<new DOMString> = <Crypto>.randomUUID();
!extends CSSAnimation Animation;
<new Animation> = <CSSAnimation>;
<new DOMString> = <CSSAnimation>.animationName;
!extends CSSConditionRule CSSGroupingRule;
<new CSSGroupingRule> = <CSSConditionRule>;
<new UTF8String> = <CSSConditionRule>.conditionText;
<CSSConditionRule>.conditionText = <UTF8String>;
!extends CSSCounterStyleRule CSSRule;
<new CSSRule> = <CSSCounterStyleRule>;
<new DOMString> = <CSSCounterStyleRule>.name;
<CSSCounterStyleRule>.name = <DOMString>;
<new UTF8String> = <CSSCounterStyleRule>.system;
<CSSCounterStyleRule>.system = <UTF8String>;
<new UTF8String> = <CSSCounterStyleRule>.symbols;
<CSSCounterStyleRule>.symbols = <UTF8String>;
<new UTF8String> = <CSSCounterStyleRule>.additiveSymbols;
<CSSCounterStyleRule>.additiveSymbols = <UTF8String>;
<new UTF8String> = <CSSCounterStyleRule>.negative;
<CSSCounterStyleRule>.negative = <UTF8String>;
<new UTF8String> = <CSSCounterStyleRule>.prefix;
<CSSCounterStyleRule>.prefix = <UTF8String>;
<new UTF8String> = <CSSCounterStyleRule>.suffix;
<CSSCounterStyleRule>.suffix = <UTF8String>;
<new UTF8String> = <CSSCounterStyleRule>.range;
<CSSCounterStyleRule>.range = <UTF8String>;
<new UTF8String> = <CSSCounterStyleRule>.pad;
<CSSCounterStyleRule>.pad = <UTF8String>;
<new UTF8String> = <CSSCounterStyleRule>.speakAs;
<CSSCounterStyleRule>.speakAs = <UTF8String>;
<new UTF8String> = <CSSCounterStyleRule>.fallback;
<CSSCounterStyleRule>.fallback = <UTF8String>;
!extends CSSFontFaceRule CSSRule;
<new CSSRule> = <CSSFontFaceRule>;
<new CSSStyleDeclaration> = <CSSFontFaceRule>.style;
!extends CSSFontFeatureValuesRule CSSRule;
<new CSSRule> = <CSSFontFeatureValuesRule>;
<new UTF8String> = <CSSFontFeatureValuesRule>.fontFamily;
<CSSFontFeatureValuesRule>.fontFamily = <UTF8String>;
<new UTF8String> = <CSSFontFeatureValuesRule>.valueText;
<CSSFontFeatureValuesRule>.valueText = <UTF8String>;
!extends CSSGroupingRule CSSRule;
<new CSSRule> = <CSSGroupingRule>;
<new CSSRuleList> = <CSSGroupingRule>.cssRules;
<CSSGroupingRule>.insertRule(<UTF8String>);
<CSSGroupingRule>.insertRule(<UTF8String>,<unsigned long>);
<new void> = <CSSGroupingRule>.deleteRule(<unsigned long>);
!extends CSSImportRule CSSRule;
<new CSSRule> = <CSSImportRule>;
<new DOMString> = <CSSImportRule>.href;
<new MediaList> = <CSSImportRule>.media;
<new CSSStyleSheet> = <CSSImportRule>.styleSheet;
!extends CSSKeyframeRule CSSRule;
<new CSSRule> = <CSSKeyframeRule>;
<new UTF8String> = <CSSKeyframeRule>.keyText;
<CSSKeyframeRule>.keyText = <UTF8String>;
<new CSSStyleDeclaration> = <CSSKeyframeRule>.style;
!extends CSSKeyframesRule CSSRule;
<new CSSRule> = <CSSKeyframesRule>;
<new DOMString> = <CSSKeyframesRule>.name;
<CSSKeyframesRule>.name = <DOMString>;
<new CSSRuleList> = <CSSKeyframesRule>.cssRules;
<new void> = <CSSKeyframesRule>.appendRule(<DOMString>);
<new void> = <CSSKeyframesRule>.deleteRule(<DOMString>);
<new CSSKeyframeRule> = <CSSKeyframesRule>.findRule(<DOMString>);
!extends CSSLayerRule CSSGroupingRule;
<new CSSGroupingRule> = <CSSLayerRule>;
!extends CSSMediaRule CSSConditionRule;
<new CSSConditionRule> = <CSSMediaRule>;
<new MediaList> = <CSSMediaRule>.media;
!extends CSSMozDocumentRule CSSConditionRule;
<new CSSConditionRule> = <CSSMozDocumentRule>;
!extends CSSNamespaceRule CSSRule;
<new CSSRule> = <CSSNamespaceRule>;
<new DOMString> = <CSSNamespaceRule>.namespaceURI;
<new DOMString> = <CSSNamespaceRule>.prefix;
!extends CSSPageRule CSSRule;
<new CSSRule> = <CSSPageRule>;
<new CSSStyleDeclaration> = <CSSPageRule>.style;
<new DOMString> = <CSSPseudoElement>.type;
<new Element> = <CSSPseudoElement>.element;
<new unsigned short> = <CSSRule>.STYLE_RULE;
<new unsigned short> = <CSSRule>.CHARSET_RULE;
<new unsigned short> = <CSSRule>.IMPORT_RULE;
<new unsigned short> = <CSSRule>.MEDIA_RULE;
<new unsigned short> = <CSSRule>.FONT_FACE_RULE;
<new unsigned short> = <CSSRule>.PAGE_RULE;
<new unsigned short> = <CSSRule>.NAMESPACE_RULE;
<new unsigned short> = <CSSRule>.type;
<new UTF8String> = <CSSRule>.cssText;
<CSSRule>.cssText = <UTF8String>;
<new CSSRule> = <CSSRule>.parentRule;
<new CSSStyleSheet> = <CSSRule>.parentStyleSheet;
<new unsigned short> = <CSSRule>.KEYFRAMES_RULE;
<new unsigned short> = <CSSRule>.KEYFRAME_RULE;
<new unsigned short> = <CSSRule>.COUNTER_STYLE_RULE;
<new unsigned short> = <CSSRule>.SUPPORTS_RULE;
<new unsigned short> = <CSSRule>.DOCUMENT_RULE;
<new unsigned short> = <CSSRule>.FONT_FEATURE_VALUES_RULE;
<new unsigned long> = <CSSRuleList>.length;
<new CSSRule> = <CSSRuleList>.item(<unsigned long>);
!extends CSSScrollTimelineRule CSSRule;
<new CSSRule> = <CSSScrollTimelineRule>;
<new DOMString> = <CSSScrollTimelineRule>.name;
<new DOMString> = <CSSScrollTimelineRule>.source;
<new DOMString> = <CSSScrollTimelineRule>.orientation;
<new DOMString> = <CSSScrollTimelineRule>.scrollOffsets;
<new UTF8String> = <CSSStyleDeclaration>.cssText;
<CSSStyleDeclaration>.cssText = <UTF8String>;
<new unsigned long> = <CSSStyleDeclaration>.length;
<new UTF8String> = <CSSStyleDeclaration>.item(<unsigned long>);
<new sequence_UTF8String_> = [<UTF8String>];
<new UTF8String> = <sequence_UTF8String_>[0];
<new sequence_UTF8String_> = <CSSStyleDeclaration>.getCSSImageURLs(<UTF8String>);
<new UTF8String> = <CSSStyleDeclaration>.getPropertyValue(<UTF8String>);
<new UTF8String> = <CSSStyleDeclaration>.getPropertyPriority(<UTF8String>);
<new void> = <CSSStyleDeclaration>.setProperty(<UTF8String>,<UTF8String>);
<new void> = <CSSStyleDeclaration>.setProperty(<UTF8String>,<UTF8String>,<UTF8String>);
<new UTF8String> = <CSSStyleDeclaration>.removeProperty(<UTF8String>);
<new CSSRule> = <CSSStyleDeclaration>.parentRule;
!extends CSSStyleRule CSSRule;
<new CSSRule> = <CSSStyleRule>;
<new UTF8String> = <CSSStyleRule>.selectorText;
<CSSStyleRule>.selectorText = <UTF8String>;
<new CSSStyleDeclaration> = <CSSStyleRule>.style;
!extends CSSStyleSheet StyleSheet;
<new StyleSheet> = <CSSStyleSheet>;
<new CSSStyleSheet> = new CSSStyleSheet();
<new CSSStyleSheet> = new CSSStyleSheet(<CSSStyleSheetInit>);
<new CSSRule> = <CSSStyleSheet>.ownerRule;
<new CSSRuleList> = <CSSStyleSheet>.cssRules;
<new CSSStyleSheetParsingMode> = <CSSStyleSheet>.parsingMode;
<CSSStyleSheet>.insertRule(<UTF8String>);
<CSSStyleSheet>.insertRule(<UTF8String>,<unsigned long>);
<new void> = <CSSStyleSheet>.deleteRule(<unsigned long>);
<new Promise_CSSStyleSheet_> = new Promise(function(x){console.log("ok")});
<new Promise_CSSStyleSheet_> = <CSSStyleSheet>.replace(<UTF8String>);
<new void> = <CSSStyleSheet>.replaceSync(<UTF8String>);
<new CSSRuleList> = <CSSStyleSheet>.rules;
<new void> = <CSSStyleSheet>.removeRule();
<new void> = <CSSStyleSheet>.removeRule(<unsigned long>);
<CSSStyleSheet>.addRule();
<CSSStyleSheet>.addRule(<UTF8String>);
<CSSStyleSheet>.addRule(<UTF8String>,<UTF8String>);
<CSSStyleSheet>.addRule(<UTF8String>,<UTF8String>,<unsigned long>);
!extends CSSSupportsRule CSSConditionRule;
<new CSSConditionRule> = <CSSSupportsRule>;
!extends CSSTransition Animation;
<new Animation> = <CSSTransition>;
<new DOMString> = <CSSTransition>.transitionProperty;
!extends CustomEvent Event;
<new Event> = <CustomEvent>;
<new CustomEvent> = new CustomEvent(<DOMString>);
<new CustomEvent> = new CustomEvent(<DOMString>,<CustomEventInit>);
<new any> = <CustomEvent>.detail;
<new void> = <CustomEvent>.initCustomEvent(<DOMString>);
<new void> = <CustomEvent>.initCustomEvent(<DOMString>,<boolean>);
<new void> = <CustomEvent>.initCustomEvent(<DOMString>,<boolean>,<boolean>);
<new void> = <CustomEvent>.initCustomEvent(<DOMString>,<boolean>,<boolean>,<any>);
<new DataTransfer> = new DataTransfer();
<new DOMString> = <DataTransfer>.dropEffect;
<DataTransfer>.dropEffect = <DOMString>;
<new DOMString> = <DataTransfer>.effectAllowed;
<DataTransfer>.effectAllowed = <DOMString>;
<new DataTransferItemList> = <DataTransfer>.items;
<new void> = <DataTransfer>.setDragImage(<Element>,<long>,<long>);
<new sequence_DOMString_> = <DataTransfer>.types;
<new DOMString> = <DataTransfer>.getData(<DOMString>);
<new void> = <DataTransfer>.setData(<DOMString>,<DOMString>);
<new void> = <DataTransfer>.clearData();
<new void> = <DataTransfer>.clearData(<DOMString>);
<new FileList> = <DataTransfer>.files;
<new union_File1Directory_> = <File>;
<new union_File1Directory_> = <Directory>;
<new sequence_union_File1Directory__> = [<union_File1Directory_>];
<new union_File1Directory_> = <sequence_union_File1Directory__>[0];
<new Promise_sequence_union_File1Directory___> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_union_File1Directory___> = <DataTransfer>.getFilesAndDirectories();
<new sequence_File_> = [<File>];
<new File> = <sequence_File_>[0];
<new Promise_sequence_File__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_File__> = <DataTransfer>.getFiles();
<new Promise_sequence_File__> = <DataTransfer>.getFiles(<boolean>);
<new void> = <DataTransfer>.addElement(<Element>);
<new unsigned long> = <DataTransfer>.mozItemCount;
<new DOMString> = <DataTransfer>.mozCursor;
<DataTransfer>.mozCursor = <DOMString>;
<new DOMStringList> = <DataTransfer>.mozTypesAt(<unsigned long>);
<new void> = <DataTransfer>.mozClearDataAt(<DOMString>,<unsigned long>);
<new void> = <DataTransfer>.mozSetDataAt(<DOMString>,<any>,<unsigned long>);
<new any> = <DataTransfer>.mozGetDataAt(<DOMString>,<unsigned long>);
<new void> = <DataTransfer>.updateDragImage(<Element>,<long>,<long>);
<new boolean> = <DataTransfer>.mozUserCancelled;
<new Node> = <DataTransfer>.mozSourceNode;
<new DOMString> = <DataTransfer>.mozTriggeringPrincipalURISpec;
<new ContentSecurityPolicy> = <DataTransfer>.mozCSP;
<new DataTransfer> = <DataTransfer>.mozCloneForEvent(<DOMString>);
<new DOMString> = <DataTransferItem>.kind;
<new DOMString> = <DataTransferItem>.type;
<new void> = <DataTransferItem>.getAsString(<FunctionStringCallback>);
<new File> = <DataTransferItem>.getAsFile();
<new FileSystemEntry> = <DataTransferItem>.webkitGetAsEntry();
<new unsigned long> = <DataTransferItemList>.length;
<new DataTransferItem> = <DataTransferItemList>(<unsigned long>);
<new DataTransferItem> = <DataTransferItemList>.add(<DOMString>,<DOMString>);
<new DataTransferItem> = <DataTransferItemList>.add(<File>);
<new void> = <DataTransferItemList>.remove(<unsigned long>);
<new void> = <DataTransferItemList>.clear();
!extends DedicatedWorkerGlobalScope WorkerGlobalScope;
<new WorkerGlobalScope> = <DedicatedWorkerGlobalScope>;
<new DOMString> = <DedicatedWorkerGlobalScope>.name;
<new void> = <DedicatedWorkerGlobalScope>.postMessage(<any>,<sequence_object_>);
<new void> = <DedicatedWorkerGlobalScope>.postMessage(<any>);
<new void> = <DedicatedWorkerGlobalScope>.postMessage(<any>,<StructuredSerializeOptions>);
<new void> = <DedicatedWorkerGlobalScope>.close();
<new EventHandler> = <DedicatedWorkerGlobalScope>.onmessage;
<DedicatedWorkerGlobalScope>.onmessage = <EventHandler>;
<new EventHandler> = <DedicatedWorkerGlobalScope>.onmessageerror;
<DedicatedWorkerGlobalScope>.onmessageerror = <EventHandler>;
!extends DelayNode AudioNode;
<new AudioNode> = <DelayNode>;
<new DelayNode> = new DelayNode(<BaseAudioContext>);
<new DelayNode> = new DelayNode(<BaseAudioContext>,<DelayOptions>);
<new AudioParam> = <DelayNode>.delayTime;
!extends DeviceLightEvent Event;
<new Event> = <DeviceLightEvent>;
<new DeviceLightEvent> = new DeviceLightEvent(<DOMString>);
<new DeviceLightEvent> = new DeviceLightEvent(<DOMString>,<DeviceLightEventInit>);
<new unrestricted double> = <DeviceLightEvent>.value;
<new double> = <DeviceAcceleration>.x;
<new double> = <DeviceAcceleration>.y;
<new double> = <DeviceAcceleration>.z;
<new double> = <DeviceRotationRate>.alpha;
<new double> = <DeviceRotationRate>.beta;
<new double> = <DeviceRotationRate>.gamma;
!extends DeviceMotionEvent Event;
<new Event> = <DeviceMotionEvent>;
<new DeviceMotionEvent> = new DeviceMotionEvent(<DOMString>);
<new DeviceMotionEvent> = new DeviceMotionEvent(<DOMString>,<DeviceMotionEventInit>);
<new DeviceAcceleration> = <DeviceMotionEvent>.acceleration;
<new DeviceAcceleration> = <DeviceMotionEvent>.accelerationIncludingGravity;
<new DeviceRotationRate> = <DeviceMotionEvent>.rotationRate;
<new double> = <DeviceMotionEvent>.interval;
<new void> = <DeviceMotionEvent>.initDeviceMotionEvent(<DOMString>);
<new void> = <DeviceMotionEvent>.initDeviceMotionEvent(<DOMString>,<boolean>);
<new void> = <DeviceMotionEvent>.initDeviceMotionEvent(<DOMString>,<boolean>,<boolean>);
<new void> = <DeviceMotionEvent>.initDeviceMotionEvent(<DOMString>,<boolean>,<boolean>,<DeviceAccelerationInit>);
<new void> = <DeviceMotionEvent>.initDeviceMotionEvent(<DOMString>,<boolean>,<boolean>,<DeviceAccelerationInit>,<DeviceAccelerationInit>);
<new void> = <DeviceMotionEvent>.initDeviceMotionEvent(<DOMString>,<boolean>,<boolean>,<DeviceAccelerationInit>,<DeviceAccelerationInit>,<DeviceRotationRateInit>);
<new void> = <DeviceMotionEvent>.initDeviceMotionEvent(<DOMString>,<boolean>,<boolean>,<DeviceAccelerationInit>,<DeviceAccelerationInit>,<DeviceRotationRateInit>,<double>);
!extends DeviceOrientationEvent Event;
<new Event> = <DeviceOrientationEvent>;
<new DeviceOrientationEvent> = new DeviceOrientationEvent(<DOMString>);
<new DeviceOrientationEvent> = new DeviceOrientationEvent(<DOMString>,<DeviceOrientationEventInit>);
<new double> = <DeviceOrientationEvent>.alpha;
<new double> = <DeviceOrientationEvent>.beta;
<new double> = <DeviceOrientationEvent>.gamma;
<new boolean> = <DeviceOrientationEvent>.absolute;
<new void> = <DeviceOrientationEvent>.initDeviceOrientationEvent(<DOMString>);
<new void> = <DeviceOrientationEvent>.initDeviceOrientationEvent(<DOMString>,<boolean>);
<new void> = <DeviceOrientationEvent>.initDeviceOrientationEvent(<DOMString>,<boolean>,<boolean>);
<new void> = <DeviceOrientationEvent>.initDeviceOrientationEvent(<DOMString>,<boolean>,<boolean>,<double>);
<new void> = <DeviceOrientationEvent>.initDeviceOrientationEvent(<DOMString>,<boolean>,<boolean>,<double>,<double>);
<new void> = <DeviceOrientationEvent>.initDeviceOrientationEvent(<DOMString>,<boolean>,<boolean>,<double>,<double>,<double>);
<new void> = <DeviceOrientationEvent>.initDeviceOrientationEvent(<DOMString>,<boolean>,<boolean>,<double>,<double>,<double>,<boolean>);
<new Directory> = new Directory(<DOMString>);
<new DOMString> = <Directory>.name;
<new DOMString> = <Directory>.path;
<new Promise_sequence_union_File1Directory___> = <Directory>.getFilesAndDirectories();
<new Promise_sequence_File__> = <Directory>.getFiles();
<new Promise_sequence_File__> = <Directory>.getFiles(<boolean>);
!extends Document Node;
<new Node> = <Document>;
<new Document> = new Document();
<new DOMImplementation> = <Document>.implementation;
<new DOMString> = <Document>.URL;
<new DOMString> = <Document>.documentURI;
<new DOMString> = <Document>.compatMode;
<new DOMString> = <Document>.characterSet;
<new DOMString> = <Document>.charset;
<new DOMString> = <Document>.inputEncoding;
<new DOMString> = <Document>.contentType;
<new DocumentType> = <Document>.doctype;
<new Element> = <Document>.documentElement;
<new HTMLCollection> = <Document>.getElementsByTagName(<DOMString>);
<new HTMLCollection> = <Document>.getElementsByTagNameNS(<DOMString>,<DOMString>);
<new HTMLCollection> = <Document>.getElementsByClassName(<DOMString>);
<new Element> = <Document>.getElementById(<DOMString>);
<new union_ElementCreationOptions1DOMString_> = <ElementCreationOptions>;
<new union_ElementCreationOptions1DOMString_> = <DOMString>;
<new Element> = <Document>.createElement(<DOMString>);
<new Element> = <Document>.createElement(<DOMString>,<union_ElementCreationOptions1DOMString_>);
<new Element> = <Document>.createElementNS(<DOMString>,<DOMString>);
<new Element> = <Document>.createElementNS(<DOMString>,<DOMString>,<union_ElementCreationOptions1DOMString_>);
<new DocumentFragment> = <Document>.createDocumentFragment();
<new Text> = <Document>.createTextNode(<DOMString>);
<new Comment> = <Document>.createComment(<DOMString>);
<new ProcessingInstruction> = <Document>.createProcessingInstruction(<DOMString>,<DOMString>);
<new Node> = <Document>.importNode(<Node>);
<new Node> = <Document>.importNode(<Node>,<boolean>);
<new Node> = <Document>.adoptNode(<Node>);
<new Event> = <Document>.createEvent(<DOMString>);
<new Range> = <Document>.createRange();
<new NodeIterator> = <Document>.createNodeIterator(<Node>);
<new NodeIterator> = <Document>.createNodeIterator(<Node>,<unsigned long>);
<new NodeIterator> = <Document>.createNodeIterator(<Node>,<unsigned long>,<NodeFilter>);
<new TreeWalker> = <Document>.createTreeWalker(<Node>);
<new TreeWalker> = <Document>.createTreeWalker(<Node>,<unsigned long>);
<new TreeWalker> = <Document>.createTreeWalker(<Node>,<unsigned long>,<NodeFilter>);
<new CDATASection> = <Document>.createCDATASection(<DOMString>);
<new Attr> = <Document>.createAttribute(<DOMString>);
<new Attr> = <Document>.createAttributeNS(<DOMString>,<DOMString>);
<new Location> = <Document>.location;
<new DOMString> = <Document>.domain;
<Document>.domain = <DOMString>;
<new DOMString> = <Document>.referrer;
<new DOMString> = <Document>.cookie;
<Document>.cookie = <DOMString>;
<new DOMString> = <Document>.lastModified;
<new DOMString> = <Document>.readyState;
<new DOMString> = <Document>.title;
<Document>.title = <DOMString>;
<new DOMString> = <Document>.dir;
<Document>.dir = <DOMString>;
<new HTMLElement> = <Document>.body;
<Document>.body = <HTMLElement>;
<Document>.body = null;
<new HTMLHeadElement> = <Document>.head;
<new HTMLCollection> = <Document>.images;
<new HTMLCollection> = <Document>.embeds;
<new HTMLCollection> = <Document>.plugins;
<new HTMLCollection> = <Document>.links;
<new HTMLCollection> = <Document>.forms;
<new HTMLCollection> = <Document>.scripts;
<new NodeList> = <Document>.getElementsByName(<DOMString>);
# <new Document> = <Document>.open();
# <new Document> = <Document>.open(<DOMString>);
# <new Document> = <Document>.open(<DOMString>,<DOMString>);
# <new WindowProxy> = <Document>.open(<USVString>,<DOMString>,<DOMString>);
# <new void> = <Document>.close();
<new void> = <Document>.write();
<new void> = <Document>.write(<DOMString>);
<new void> = <Document>.writeln();
<new void> = <Document>.writeln(<DOMString>);
<new WindowProxy> = <Document>.defaultView;
<Document>.hasFocus();
<new DOMString> = <Document>.designMode;
<Document>.designMode = <DOMString>;
<Document>.execCommand(<DOMString>);
<Document>.execCommand(<DOMString>,<boolean>);
<Document>.execCommand(<DOMString>,<boolean>,<DOMString>);
<Document>.queryCommandEnabled(<DOMString>);
<Document>.queryCommandIndeterm(<DOMString>);
<Document>.queryCommandState(<DOMString>);
<Document>.queryCommandSupported(<DOMString>);
<new DOMString> = <Document>.queryCommandValue(<DOMString>);
<new EventHandler> = <Document>.onreadystatechange;
<Document>.onreadystatechange = <EventHandler>;
<new EventHandler> = <Document>.onbeforescriptexecute;
<Document>.onbeforescriptexecute = <EventHandler>;
<new EventHandler> = <Document>.onafterscriptexecute;
<Document>.onafterscriptexecute = <EventHandler>;
<new boolean> = <Document>.mozSyntheticDocument;
<new Element> = <Document>.currentScript;
<new void> = <Document>.releaseCapture();
<new void> = <Document>.mozSetImageElement(<DOMString>,<Element>);
<new URI> = <Document>.documentURIObject;
<new ReferrerPolicy> = <Document>.referrerPolicy;
<new nsIReferrerInfo> = <Document>.referrerInfo;
<new DOMString> = <Document>.fgColor;
<Document>.fgColor = <DOMString>;
<new DOMString> = <Document>.linkColor;
<Document>.linkColor = <DOMString>;
<new DOMString> = <Document>.vlinkColor;
<Document>.vlinkColor = <DOMString>;
<new DOMString> = <Document>.alinkColor;
<Document>.alinkColor = <DOMString>;
<new DOMString> = <Document>.bgColor;
<Document>.bgColor = <DOMString>;
<new HTMLCollection> = <Document>.anchors;
<new HTMLCollection> = <Document>.applets;
<new void> = <Document>.clear();
<new void> = <Document>.captureEvents();
<new void> = <Document>.releaseEvents();
<new HTMLAllCollection> = <Document>.all;
<new boolean> = <Document>.fullscreen;
<new boolean> = <Document>.mozFullScreen;
<new boolean> = <Document>.fullscreenEnabled;
<new boolean> = <Document>.mozFullScreenEnabled;
<new Promise_void_> = <Document>.exitFullscreen();
<new Promise_void_> = <Document>.mozCancelFullScreen();
<new EventHandler> = <Document>.onfullscreenchange;
<Document>.onfullscreenchange = <EventHandler>;
<new EventHandler> = <Document>.onfullscreenerror;
<Document>.onfullscreenerror = <EventHandler>;
<new void> = <Document>.exitPointerLock();
<new EventHandler> = <Document>.onpointerlockchange;
<Document>.onpointerlockchange = <EventHandler>;
<new EventHandler> = <Document>.onpointerlockerror;
<Document>.onpointerlockerror = <EventHandler>;
<new Promise_any_> = <Document>.addCertException(<boolean>);
<new void> = <Document>.reloadWithHttpsOnlyException();
<new FailedCertSecurityInfo> = <Document>.getFailedCertSecurityInfo();
<new NetErrorInfo> = <Document>.getNetErrorInfo();
<new boolean> = <Document>.allowDeprecatedTls;
<Document>.allowDeprecatedTls = <boolean>;
<new boolean> = <Document>.hidden;
<new VisibilityState> = <Document>.visibilityState;
<new EventHandler> = <Document>.onvisibilitychange;
<Document>.onvisibilitychange = <EventHandler>;
<new DOMString> = <Document>.selectedStyleSheetSet;
<Document>.selectedStyleSheetSet = <DOMString>;
<Document>.selectedStyleSheetSet = null;
<new DOMString> = <Document>.lastStyleSheetSet;
<new DOMString> = <Document>.preferredStyleSheetSet;
<new DOMStringList> = <Document>.styleSheetSets;
<new void> = <Document>.enableStyleSheetsForSet(<DOMString>);
<new CaretPosition> = <Document>.caretPositionFromPoint(<float>,<float>);
<new Element> = <Document>.scrollingElement;
<new Element> = <Document>.querySelector(<UTF8String>);
<new NodeList> = <Document>.querySelectorAll(<UTF8String>);
<new DocumentTimeline> = <Document>.timeline;
<new SVGSVGElement> = <Document>.rootElement;
<new Element> = <Document>.createXULElement(<DOMString>);
<new Element> = <Document>.createXULElement(<DOMString>,<union_ElementCreationOptions1DOMString_>);
<new boolean> = <Document>.loadedFromPrototype;
<new Principal> = <Document>.effectiveStoragePrincipal;
<new Principal> = <Document>.partitionedPrincipal;
<new nsICookieJarSettings> = <Document>.cookieJarSettings;
<new Touch> = <Document>.createTouch();
<new Touch> = <Document>.createTouch(<Window>);
<new Touch> = <Document>.createTouch(<Window>,<EventTarget>);
<new Touch> = <Document>.createTouch(<Window>,<EventTarget>,<long>);
<new Touch> = <Document>.createTouch(<Window>,<EventTarget>,<long>,<long>);
<new Touch> = <Document>.createTouch(<Window>,<EventTarget>,<long>,<long>,<long>);
<new Touch> = <Document>.createTouch(<Window>,<EventTarget>,<long>,<long>,<long>,<long>);
<new Touch> = <Document>.createTouch(<Window>,<EventTarget>,<long>,<long>,<long>,<long>,<long>);
<new Touch> = <Document>.createTouch(<Window>,<EventTarget>,<long>,<long>,<long>,<long>,<long>,<long>);
<new Touch> = <Document>.createTouch(<Window>,<EventTarget>,<long>,<long>,<long>,<long>,<long>,<long>,<long>);
<new Touch> = <Document>.createTouch(<Window>,<EventTarget>,<long>,<long>,<long>,<long>,<long>,<long>,<long>,<long>);
<new Touch> = <Document>.createTouch(<Window>,<EventTarget>,<long>,<long>,<long>,<long>,<long>,<long>,<long>,<long>,<long>);
<new Touch> = <Document>.createTouch(<Window>,<EventTarget>,<long>,<long>,<long>,<long>,<long>,<long>,<long>,<long>,<long>,<float>);
<new Touch> = <Document>.createTouch(<Window>,<EventTarget>,<long>,<long>,<long>,<long>,<long>,<long>,<long>,<long>,<long>,<float>,<float>);
<new TouchList> = <Document>.createTouchList(<Touch>);
<new TouchList> = <Document>.createTouchList(<Touch>,<Touch>);
<new TouchList> = <Document>.createTouchList();
<new sequence_Touch_> = [<Touch>];
<new Touch> = <sequence_Touch_>[0];
<new TouchList> = <Document>.createTouchList(<sequence_Touch_>);
<new boolean> = <Document>.styleSheetChangeEventsEnabled;
<Document>.styleSheetChangeEventsEnabled = <boolean>;
<new boolean> = <Document>.shadowRootAttachedEventEnabled;
<Document>.shadowRootAttachedEventEnabled = <boolean>;
<new DOMString> = <Document>.contentLanguage;
<new nsILoadGroup> = <Document>.documentLoadGroup;
<new Promise_any_> = <Document>.blockParsing(<Promise_any_>);
<new Promise_any_> = <Document>.blockParsing(<Promise_any_>,<BlockParsingOptions>);
<new void> = <Document>.blockUnblockOnload(<boolean>);
<new URI> = <Document>.mozDocumentURIIfNotForErrorPages;
<new Promise_Document_> = new Promise(function(x){console.log("ok")});
<new Promise_Document_> = <Document>.documentReadyForIdle;
<new XULCommandDispatcher> = <Document>.commandDispatcher;
<new boolean> = <Document>.devToolsWatchingDOMMutations;
<Document>.devToolsWatchingDOMMutations = <boolean>;
<new sequence_ShadowRoot_> = [<ShadowRoot>];
<new ShadowRoot> = <sequence_ShadowRoot_>[0];
<new sequence_ShadowRoot_> = <Document>.getConnectedShadowRoots();
<new boolean> = <Document>.isSrcdocDocument;
<new DOMString> = <Document>.sandboxFlagsAsString;
<new AnonymousContent> = <Document>.insertAnonymousContent(<Element>);
<new void> = <Document>.removeAnonymousContent(<AnonymousContent>);
<new Selection> = <Document>.getSelection();
<new Promise_boolean_> = <Document>.hasStorageAccess();
<new Promise_void_> = <Document>.requestStorageAccess();
<new Promise_void_> = <Document>.requestStorageAccessForOrigin(<DOMString>);
<new DocumentAutoplayPolicy> = <Document>.autoplayPolicy;
<new boolean> = <Document>.userHasInteracted;
<new void> = <Document>.notifyUserGestureActivation();
<new void> = <Document>.clearUserGestureActivation();
<new boolean> = <Document>.hasBeenUserGestureActivated;
<new boolean> = <Document>.hasValidTransientUserGestureActivation;
<Document>.consumeTransientUserGestureActivation();
<new void> = <Document>.setSuppressedEventListener(<EventListener>);
<new ContentSecurityPolicy> = <Document>.csp;
<new DOMString> = <Document>.cspJSON;
<new FlashClassification> = <Document>.documentFlashClassification;
<new DocumentL10n> = <Document>.l10n;
<new FeaturePolicy> = <Document>.featurePolicy;
<new unsigned short> = <Document>.KEYPRESS_EVENT_MODEL_DEFAULT;
<new unsigned short> = <Document>.KEYPRESS_EVENT_MODEL_SPLIT;
<new unsigned short> = <Document>.KEYPRESS_EVENT_MODEL_CONFLATED;
<new void> = <Document>.setKeyPressEventModel(<unsigned short>);
<new long> = <Document>.blockedNodeByClassifierCount;
<new NodeList> = <Document>.blockedNodesByClassifier;
<new void> = <Document>.userInteractionForTesting();
<new nsIPermissionDelegateHandler> = <Document>.permDelegateHandler;
<new void> = <Document>.setNotifyFetchSuccess(<boolean>);
<new void> = <Document>.setNotifyFormOrPasswordRemoved(<boolean>);
<new boolean> = <Document>.isInitialDocument;
<new Wireframe> = <Document>.getWireframe();
<new Wireframe> = <Document>.getWireframe(<boolean>);
!extends DocumentFragment Node;
<new Node> = <DocumentFragment>;
<new DocumentFragment> = new DocumentFragment();
<new Element> = <DocumentFragment>.getElementById(<DOMString>);
<new Element> = <DocumentFragment>.querySelector(<UTF8String>);
<new NodeList> = <DocumentFragment>.querySelectorAll(<UTF8String>);
!extends DocumentTimeline AnimationTimeline;
<new AnimationTimeline> = <DocumentTimeline>;
<new DocumentTimeline> = new DocumentTimeline();
<new DocumentTimeline> = new DocumentTimeline(<DocumentTimelineOptions>);
!extends DocumentType Node;
<new Node> = <DocumentType>;
<new DOMString> = <DocumentType>.name;
<new DOMString> = <DocumentType>.publicId;
<new DOMString> = <DocumentType>.systemId;
<new DOMString> = <Exception>.name;
<new DOMString> = <Exception>.message;
<new DOMException> = new DOMException();
<new DOMException> = new DOMException(<DOMString>);
<new DOMException> = new DOMException(<DOMString>,<DOMString>);
<new DOMString> = <DOMException>.name;
<new DOMString> = <DOMException>.message;
<new unsigned short> = <DOMException>.code;
<new unsigned short> = <DOMException>.INDEX_SIZE_ERR;
<new unsigned short> = <DOMException>.DOMSTRING_SIZE_ERR;
<new unsigned short> = <DOMException>.HIERARCHY_REQUEST_ERR;
<new unsigned short> = <DOMException>.WRONG_DOCUMENT_ERR;
<new unsigned short> = <DOMException>.INVALID_CHARACTER_ERR;
<new unsigned short> = <DOMException>.NO_DATA_ALLOWED_ERR;
<new unsigned short> = <DOMException>.NO_MODIFICATION_ALLOWED_ERR;
<new unsigned short> = <DOMException>.NOT_FOUND_ERR;
<new unsigned short> = <DOMException>.NOT_SUPPORTED_ERR;
<new unsigned short> = <DOMException>.INUSE_ATTRIBUTE_ERR;
<new unsigned short> = <DOMException>.INVALID_STATE_ERR;
<new unsigned short> = <DOMException>.SYNTAX_ERR;
<new unsigned short> = <DOMException>.INVALID_MODIFICATION_ERR;
<new unsigned short> = <DOMException>.NAMESPACE_ERR;
<new unsigned short> = <DOMException>.INVALID_ACCESS_ERR;
<new unsigned short> = <DOMException>.VALIDATION_ERR;
<new unsigned short> = <DOMException>.TYPE_MISMATCH_ERR;
<new unsigned short> = <DOMException>.SECURITY_ERR;
<new unsigned short> = <DOMException>.NETWORK_ERR;
<new unsigned short> = <DOMException>.ABORT_ERR;
<new unsigned short> = <DOMException>.URL_MISMATCH_ERR;
<new unsigned short> = <DOMException>.QUOTA_EXCEEDED_ERR;
<new unsigned short> = <DOMException>.TIMEOUT_ERR;
<new unsigned short> = <DOMException>.INVALID_NODE_TYPE_ERR;
<new unsigned short> = <DOMException>.DATA_CLONE_ERR;
<DOMImplementation>.hasFeature();
<new DocumentType> = <DOMImplementation>.createDocumentType(<DOMString>,<DOMString>,<DOMString>);
<new Document> = <DOMImplementation>.createDocument(<DOMString>,<DOMString>);
<new Document> = <DOMImplementation>.createDocument(<DOMString>,<DOMString>,<DocumentType>);
<new Document> = <DOMImplementation>.createHTMLDocument();
<new Document> = <DOMImplementation>.createHTMLDocument(<DOMString>);
!extends DOMLocalization Localization;
<new Localization> = <DOMLocalization>;
<new DOMLocalization> = new DOMLocalization(<sequence_UTF8String_>);
<new DOMLocalization> = new DOMLocalization(<sequence_UTF8String_>,<boolean>);
<new DOMLocalization> = new DOMLocalization(<sequence_UTF8String_>,<boolean>,<L10nRegistry>);
<new DOMLocalization> = new DOMLocalization(<sequence_UTF8String_>,<boolean>,<L10nRegistry>,<sequence_UTF8String_>);
<new void> = <DOMLocalization>.connectRoot(<Node>);
<new void> = <DOMLocalization>.disconnectRoot(<Node>);
<new void> = <DOMLocalization>.pauseObserving();
<new void> = <DOMLocalization>.resumeObserving();
<new void> = <DOMLocalization>.setAttributes(<Element>,<DOMString>);
<new void> = <DOMLocalization>.setAttributes(<Element>,<DOMString>,<object>);
<new L10nIdArgs> = <DOMLocalization>.getAttributes(<Element>);
<new Promise_any_> = <DOMLocalization>.translateFragment(<Node>);
<new sequence_Element_> = [<Element>];
<new Element> = <sequence_Element_>[0];
<new Promise_void_> = <DOMLocalization>.translateElements(<sequence_Element_>);
<new Promise_void_> = <DOMLocalization>.translateRoots();
<new sequence_unrestricted double_> = [<unrestricted double>];
<new unrestricted double> = <sequence_unrestricted double_>[0];
<new union_UTF8String1sequence_unrestricted double_1DOMMatrixReadOnly_> = <UTF8String>;
<new union_UTF8String1sequence_unrestricted double_1DOMMatrixReadOnly_> = <sequence_unrestricted double_>;
<new union_UTF8String1sequence_unrestricted double_1DOMMatrixReadOnly_> = <DOMMatrixReadOnly>;
<new DOMMatrixReadOnly> = new DOMMatrixReadOnly();
<new DOMMatrixReadOnly> = new DOMMatrixReadOnly(<union_UTF8String1sequence_unrestricted double_1DOMMatrixReadOnly_>);
<new DOMMatrixReadOnly> = <DOMMatrixReadOnly>.fromMatrix();
<new DOMMatrixReadOnly> = <DOMMatrixReadOnly>.fromMatrix(<DOMMatrixInit>);
<new DOMMatrixReadOnly> = <DOMMatrixReadOnly>.fromFloat32Array(<Float32Array>);
<new DOMMatrixReadOnly> = <DOMMatrixReadOnly>.fromFloat64Array(<Float64Array>);
<new unrestricted double> = <DOMMatrixReadOnly>.a;
<new unrestricted double> = <DOMMatrixReadOnly>.b;
<new unrestricted double> = <DOMMatrixReadOnly>.c;
<new unrestricted double> = <DOMMatrixReadOnly>.d;
<new unrestricted double> = <DOMMatrixReadOnly>.e;
<new unrestricted double> = <DOMMatrixReadOnly>.f;
<new unrestricted double> = <DOMMatrixReadOnly>.m11;
<new unrestricted double> = <DOMMatrixReadOnly>.m12;
<new unrestricted double> = <DOMMatrixReadOnly>.m13;
<new unrestricted double> = <DOMMatrixReadOnly>.m14;
<new unrestricted double> = <DOMMatrixReadOnly>.m21;
<new unrestricted double> = <DOMMatrixReadOnly>.m22;
<new unrestricted double> = <DOMMatrixReadOnly>.m23;
<new unrestricted double> = <DOMMatrixReadOnly>.m24;
<new unrestricted double> = <DOMMatrixReadOnly>.m31;
<new unrestricted double> = <DOMMatrixReadOnly>.m32;
<new unrestricted double> = <DOMMatrixReadOnly>.m33;
<new unrestricted double> = <DOMMatrixReadOnly>.m34;
<new unrestricted double> = <DOMMatrixReadOnly>.m41;
<new unrestricted double> = <DOMMatrixReadOnly>.m42;
<new unrestricted double> = <DOMMatrixReadOnly>.m43;
<new unrestricted double> = <DOMMatrixReadOnly>.m44;
<new DOMMatrix> = <DOMMatrixReadOnly>.translate();
<new DOMMatrix> = <DOMMatrixReadOnly>.translate(<unrestricted double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.translate(<unrestricted double>,<unrestricted double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.translate(<unrestricted double>,<unrestricted double>,<unrestricted double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.scale();
<new DOMMatrix> = <DOMMatrixReadOnly>.scale(<unrestricted double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.scale(<unrestricted double>,<unrestricted double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.scale(<unrestricted double>,<unrestricted double>,<unrestricted double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.scale(<unrestricted double>,<unrestricted double>,<unrestricted double>,<unrestricted double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.scale(<unrestricted double>,<unrestricted double>,<unrestricted double>,<unrestricted double>,<unrestricted double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.scale(<unrestricted double>,<unrestricted double>,<unrestricted double>,<unrestricted double>,<unrestricted double>,<unrestricted double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.scaleNonUniform();
<new DOMMatrix> = <DOMMatrixReadOnly>.scaleNonUniform(<unrestricted double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.scaleNonUniform(<unrestricted double>,<unrestricted double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.scale3d();
<new DOMMatrix> = <DOMMatrixReadOnly>.scale3d(<unrestricted double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.scale3d(<unrestricted double>,<unrestricted double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.scale3d(<unrestricted double>,<unrestricted double>,<unrestricted double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.scale3d(<unrestricted double>,<unrestricted double>,<unrestricted double>,<unrestricted double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.rotate();
<new DOMMatrix> = <DOMMatrixReadOnly>.rotate(<unrestricted double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.rotate(<unrestricted double>,<unrestricted double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.rotate(<unrestricted double>,<unrestricted double>,<unrestricted double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.rotateFromVector();
<new DOMMatrix> = <DOMMatrixReadOnly>.rotateFromVector(<unrestricted double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.rotateFromVector(<unrestricted double>,<unrestricted double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.rotateAxisAngle();
<new DOMMatrix> = <DOMMatrixReadOnly>.rotateAxisAngle(<unrestricted double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.rotateAxisAngle(<unrestricted double>,<unrestricted double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.rotateAxisAngle(<unrestricted double>,<unrestricted double>,<unrestricted double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.rotateAxisAngle(<unrestricted double>,<unrestricted double>,<unrestricted double>,<unrestricted double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.skewX();
<new DOMMatrix> = <DOMMatrixReadOnly>.skewX(<unrestricted double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.skewY();
<new DOMMatrix> = <DOMMatrixReadOnly>.skewY(<unrestricted double>);
<new DOMMatrix> = <DOMMatrixReadOnly>.multiply();
<new DOMMatrix> = <DOMMatrixReadOnly>.multiply(<DOMMatrixInit>);
<new DOMMatrix> = <DOMMatrixReadOnly>.flipX();
<new DOMMatrix> = <DOMMatrixReadOnly>.flipY();
<new DOMMatrix> = <DOMMatrixReadOnly>.inverse();
<new boolean> = <DOMMatrixReadOnly>.is2D;
<new boolean> = <DOMMatrixReadOnly>.isIdentity;
<new DOMPoint> = <DOMMatrixReadOnly>.transformPoint();
<new DOMPoint> = <DOMMatrixReadOnly>.transformPoint(<DOMPointInit>);
<new Float32Array> = <DOMMatrixReadOnly>.toFloat32Array();
<new Float64Array> = <DOMMatrixReadOnly>.toFloat64Array();
<new object> = <DOMMatrixReadOnly>.toJSON();
!extends DOMMatrix DOMMatrixReadOnly;
<new DOMMatrixReadOnly> = <DOMMatrix>;
<new DOMMatrix> = new DOMMatrix();
<new DOMMatrix> = new DOMMatrix(<union_UTF8String1sequence_unrestricted double_1DOMMatrixReadOnly_>);
<new DOMMatrix> = <DOMMatrix>.fromMatrix();
<new DOMMatrix> = <DOMMatrix>.fromMatrix(<DOMMatrixInit>);
<new DOMMatrix> = <DOMMatrix>.fromFloat32Array(<Float32Array>);
<new DOMMatrix> = <DOMMatrix>.fromFloat64Array(<Float64Array>);
<new unrestricted double> = <DOMMatrix>.a;
<DOMMatrix>.a = <unrestricted double>;
<new unrestricted double> = <DOMMatrix>.b;
<DOMMatrix>.b = <unrestricted double>;
<new unrestricted double> = <DOMMatrix>.c;
<DOMMatrix>.c = <unrestricted double>;
<new unrestricted double> = <DOMMatrix>.d;
<DOMMatrix>.d = <unrestricted double>;
<new unrestricted double> = <DOMMatrix>.e;
<DOMMatrix>.e = <unrestricted double>;
<new unrestricted double> = <DOMMatrix>.f;
<DOMMatrix>.f = <unrestricted double>;
<new unrestricted double> = <DOMMatrix>.m11;
<DOMMatrix>.m11 = <unrestricted double>;
<new unrestricted double> = <DOMMatrix>.m12;
<DOMMatrix>.m12 = <unrestricted double>;
<new unrestricted double> = <DOMMatrix>.m13;
<DOMMatrix>.m13 = <unrestricted double>;
<new unrestricted double> = <DOMMatrix>.m14;
<DOMMatrix>.m14 = <unrestricted double>;
<new unrestricted double> = <DOMMatrix>.m21;
<DOMMatrix>.m21 = <unrestricted double>;
<new unrestricted double> = <DOMMatrix>.m22;
<DOMMatrix>.m22 = <unrestricted double>;
<new unrestricted double> = <DOMMatrix>.m23;
<DOMMatrix>.m23 = <unrestricted double>;
<new unrestricted double> = <DOMMatrix>.m24;
<DOMMatrix>.m24 = <unrestricted double>;
<new unrestricted double> = <DOMMatrix>.m31;
<DOMMatrix>.m31 = <unrestricted double>;
<new unrestricted double> = <DOMMatrix>.m32;
<DOMMatrix>.m32 = <unrestricted double>;
<new unrestricted double> = <DOMMatrix>.m33;
<DOMMatrix>.m33 = <unrestricted double>;
<new unrestricted double> = <DOMMatrix>.m34;
<DOMMatrix>.m34 = <unrestricted double>;
<new unrestricted double> = <DOMMatrix>.m41;
<DOMMatrix>.m41 = <unrestricted double>;
<new unrestricted double> = <DOMMatrix>.m42;
<DOMMatrix>.m42 = <unrestricted double>;
<new unrestricted double> = <DOMMatrix>.m43;
<DOMMatrix>.m43 = <unrestricted double>;
<new unrestricted double> = <DOMMatrix>.m44;
<DOMMatrix>.m44 = <unrestricted double>;
<new DOMMatrix> = <DOMMatrix>.multiplySelf();
<new DOMMatrix> = <DOMMatrix>.multiplySelf(<DOMMatrixInit>);
<new DOMMatrix> = <DOMMatrix>.preMultiplySelf();
<new DOMMatrix> = <DOMMatrix>.preMultiplySelf(<DOMMatrixInit>);
<new DOMMatrix> = <DOMMatrix>.translateSelf();
<new DOMMatrix> = <DOMMatrix>.translateSelf(<unrestricted double>);
<new DOMMatrix> = <DOMMatrix>.translateSelf(<unrestricted double>,<unrestricted double>);
<new DOMMatrix> = <DOMMatrix>.translateSelf(<unrestricted double>,<unrestricted double>,<unrestricted double>);
<new DOMMatrix> = <DOMMatrix>.scaleSelf();
<new DOMMatrix> = <DOMMatrix>.scaleSelf(<unrestricted double>);
<new DOMMatrix> = <DOMMatrix>.scaleSelf(<unrestricted double>,<unrestricted double>);
<new DOMMatrix> = <DOMMatrix>.scaleSelf(<unrestricted double>,<unrestricted double>,<unrestricted double>);
<new DOMMatrix> = <DOMMatrix>.scaleSelf(<unrestricted double>,<unrestricted double>,<unrestricted double>,<unrestricted double>);
<new DOMMatrix> = <DOMMatrix>.scaleSelf(<unrestricted double>,<unrestricted double>,<unrestricted double>,<unrestricted double>,<unrestricted double>);
<new DOMMatrix> = <DOMMatrix>.scaleSelf(<unrestricted double>,<unrestricted double>,<unrestricted double>,<unrestricted double>,<unrestricted double>,<unrestricted double>);
<new DOMMatrix> = <DOMMatrix>.scale3dSelf();
<new DOMMatrix> = <DOMMatrix>.scale3dSelf(<unrestricted double>);
<new DOMMatrix> = <DOMMatrix>.scale3dSelf(<unrestricted double>,<unrestricted double>);
<new DOMMatrix> = <DOMMatrix>.scale3dSelf(<unrestricted double>,<unrestricted double>,<unrestricted double>);
<new DOMMatrix> = <DOMMatrix>.scale3dSelf(<unrestricted double>,<unrestricted double>,<unrestricted double>,<unrestricted double>);
<new DOMMatrix> = <DOMMatrix>.rotateSelf();
<new DOMMatrix> = <DOMMatrix>.rotateSelf(<unrestricted double>);
<new DOMMatrix> = <DOMMatrix>.rotateSelf(<unrestricted double>,<unrestricted double>);
<new DOMMatrix> = <DOMMatrix>.rotateSelf(<unrestricted double>,<unrestricted double>,<unrestricted double>);
<new DOMMatrix> = <DOMMatrix>.rotateFromVectorSelf();
<new DOMMatrix> = <DOMMatrix>.rotateFromVectorSelf(<unrestricted double>);
<new DOMMatrix> = <DOMMatrix>.rotateFromVectorSelf(<unrestricted double>,<unrestricted double>);
<new DOMMatrix> = <DOMMatrix>.rotateAxisAngleSelf();
<new DOMMatrix> = <DOMMatrix>.rotateAxisAngleSelf(<unrestricted double>);
<new DOMMatrix> = <DOMMatrix>.rotateAxisAngleSelf(<unrestricted double>,<unrestricted double>);
<new DOMMatrix> = <DOMMatrix>.rotateAxisAngleSelf(<unrestricted double>,<unrestricted double>,<unrestricted double>);
<new DOMMatrix> = <DOMMatrix>.rotateAxisAngleSelf(<unrestricted double>,<unrestricted double>,<unrestricted double>,<unrestricted double>);
<new DOMMatrix> = <DOMMatrix>.skewXSelf();
<new DOMMatrix> = <DOMMatrix>.skewXSelf(<unrestricted double>);
<new DOMMatrix> = <DOMMatrix>.skewYSelf();
<new DOMMatrix> = <DOMMatrix>.skewYSelf(<unrestricted double>);
<new DOMMatrix> = <DOMMatrix>.invertSelf();
<new DOMMatrix> = <DOMMatrix>.setMatrixValue(<UTF8String>);
<new DOMParser> = new DOMParser();
<new Document> = <DOMParser>.parseFromString(<DOMString>,<SupportedType>);
<new Document> = <DOMParser>.parseFromSafeString(<DOMString>,<SupportedType>);
<new sequence_octet_> = [<octet>];
<new octet> = <sequence_octet_>[0];
<new Document> = <DOMParser>.parseFromBuffer(<sequence_octet_>,<SupportedType>);
<new Document> = <DOMParser>.parseFromBuffer(<Uint8Array>,<SupportedType>);
<new Document> = <DOMParser>.parseFromStream(<InputStream>,<DOMString>,<long>,<SupportedType>);
<new void> = <DOMParser>.forceEnableXULXBL();
<new void> = <DOMParser>.forceEnableDTD();
<new DOMPointReadOnly> = new DOMPointReadOnly();
<new DOMPointReadOnly> = new DOMPointReadOnly(<unrestricted double>);
<new DOMPointReadOnly> = new DOMPointReadOnly(<unrestricted double>,<unrestricted double>);
<new DOMPointReadOnly> = new DOMPointReadOnly(<unrestricted double>,<unrestricted double>,<unrestricted double>);
<new DOMPointReadOnly> = new DOMPointReadOnly(<unrestricted double>,<unrestricted double>,<unrestricted double>,<unrestricted double>);
<new DOMPointReadOnly> = <DOMPointReadOnly>.fromPoint();
<new DOMPointReadOnly> = <DOMPointReadOnly>.fromPoint(<DOMPointInit>);
<new unrestricted double> = <DOMPointReadOnly>.x;
<new unrestricted double> = <DOMPointReadOnly>.y;
<new unrestricted double> = <DOMPointReadOnly>.z;
<new unrestricted double> = <DOMPointReadOnly>.w;
<new DOMPoint> = <DOMPointReadOnly>.matrixTransform();
<new DOMPoint> = <DOMPointReadOnly>.matrixTransform(<DOMMatrixInit>);
<new object> = <DOMPointReadOnly>.toJSON();
!extends DOMPoint DOMPointReadOnly;
<new DOMPointReadOnly> = <DOMPoint>;
<new DOMPoint> = new DOMPoint();
<new DOMPoint> = new DOMPoint(<unrestricted double>);
<new DOMPoint> = new DOMPoint(<unrestricted double>,<unrestricted double>);
<new DOMPoint> = new DOMPoint(<unrestricted double>,<unrestricted double>,<unrestricted double>);
<new DOMPoint> = new DOMPoint(<unrestricted double>,<unrestricted double>,<unrestricted double>,<unrestricted double>);
<new DOMPoint> = <DOMPoint>.fromPoint();
<new DOMPoint> = <DOMPoint>.fromPoint(<DOMPointInit>);
<new unrestricted double> = <DOMPoint>.x;
<DOMPoint>.x = <unrestricted double>;
<new unrestricted double> = <DOMPoint>.y;
<DOMPoint>.y = <unrestricted double>;
<new unrestricted double> = <DOMPoint>.z;
<DOMPoint>.z = <unrestricted double>;
<new unrestricted double> = <DOMPoint>.w;
<DOMPoint>.w = <unrestricted double>;
<new DOMQuad> = new DOMQuad();
<new DOMQuad> = new DOMQuad(<DOMPointInit>);
<new DOMQuad> = new DOMQuad(<DOMPointInit>,<DOMPointInit>);
<new DOMQuad> = new DOMQuad(<DOMPointInit>,<DOMPointInit>,<DOMPointInit>);
<new DOMQuad> = new DOMQuad(<DOMPointInit>,<DOMPointInit>,<DOMPointInit>,<DOMPointInit>);
<new DOMQuad> = new DOMQuad(<DOMRectReadOnly>);
<new DOMQuad> = <DOMQuad>.fromRect();
<new DOMQuad> = <DOMQuad>.fromRect(<DOMRectInit>);
<new DOMQuad> = <DOMQuad>.fromQuad();
<new DOMQuad> = <DOMQuad>.fromQuad(<DOMQuadInit>);
<new DOMPoint> = <DOMQuad>.p1;
<new DOMPoint> = <DOMQuad>.p2;
<new DOMPoint> = <DOMQuad>.p3;
<new DOMPoint> = <DOMQuad>.p4;
<new DOMRectReadOnly> = <DOMQuad>.getBounds();
<new object> = <DOMQuad>.toJSON();
!extends DOMRect DOMRectReadOnly;
<new DOMRectReadOnly> = <DOMRect>;
<new DOMRect> = new DOMRect();
<new DOMRect> = new DOMRect(<unrestricted double>);
<new DOMRect> = new DOMRect(<unrestricted double>,<unrestricted double>);
<new DOMRect> = new DOMRect(<unrestricted double>,<unrestricted double>,<unrestricted double>);
<new DOMRect> = new DOMRect(<unrestricted double>,<unrestricted double>,<unrestricted double>,<unrestricted double>);
<new DOMRect> = <DOMRect>.fromRect();
<new DOMRect> = <DOMRect>.fromRect(<DOMRectInit>);
<new unrestricted double> = <DOMRect>.x;
<DOMRect>.x = <unrestricted double>;
<new unrestricted double> = <DOMRect>.y;
<DOMRect>.y = <unrestricted double>;
<new unrestricted double> = <DOMRect>.width;
<DOMRect>.width = <unrestricted double>;
<new unrestricted double> = <DOMRect>.height;
<DOMRect>.height = <unrestricted double>;
<new DOMRectReadOnly> = new DOMRectReadOnly();
<new DOMRectReadOnly> = new DOMRectReadOnly(<unrestricted double>);
<new DOMRectReadOnly> = new DOMRectReadOnly(<unrestricted double>,<unrestricted double>);
<new DOMRectReadOnly> = new DOMRectReadOnly(<unrestricted double>,<unrestricted double>,<unrestricted double>);
<new DOMRectReadOnly> = new DOMRectReadOnly(<unrestricted double>,<unrestricted double>,<unrestricted double>,<unrestricted double>);
<new DOMRectReadOnly> = <DOMRectReadOnly>.fromRect();
<new DOMRectReadOnly> = <DOMRectReadOnly>.fromRect(<DOMRectInit>);
<new unrestricted double> = <DOMRectReadOnly>.x;
<new unrestricted double> = <DOMRectReadOnly>.y;
<new unrestricted double> = <DOMRectReadOnly>.width;
<new unrestricted double> = <DOMRectReadOnly>.height;
<new unrestricted double> = <DOMRectReadOnly>.top;
<new unrestricted double> = <DOMRectReadOnly>.right;
<new unrestricted double> = <DOMRectReadOnly>.bottom;
<new unrestricted double> = <DOMRectReadOnly>.left;
<new object> = <DOMRectReadOnly>.toJSON();
<new unsigned long> = <DOMRectList>.length;
<new DOMRect> = <DOMRectList>.item(<unsigned long>);
!extends DOMRequest EventTarget;
<new EventTarget> = <DOMRequest>;
<new any> = <DOMRequest>.then();
<new any> = <DOMRequest>.then(<AnyCallback>);
<new any> = <DOMRequest>.then(<AnyCallback>,<AnyCallback>);
<new void> = <DOMRequest>.fireDetailedError(<DOMException>);
<new unsigned long> = <DOMStringList>.length;
<new DOMString> = <DOMStringList>.item(<unsigned long>);
<DOMStringList>.contains(<DOMString>);
<new DOMString> = <DOMStringMap>(<DOMString>);
<new void> = <DOMStringMap>(<DOMString>,<DOMString>);
<new void> = <DOMStringMap>(<DOMString>);
<new unsigned long> = <DOMTokenList>.length;
<new DOMString> = <DOMTokenList>.item(<unsigned long>);
<DOMTokenList>.contains(<DOMString>);
<new void> = <DOMTokenList>.add();
<new void> = <DOMTokenList>.add(<DOMString>);
<new void> = <DOMTokenList>.remove();
<new void> = <DOMTokenList>.remove(<DOMString>);
<DOMTokenList>.replace(<DOMString>,<DOMString>);
<DOMTokenList>.toggle(<DOMString>);
<DOMTokenList>.toggle(<DOMString>,<boolean>);
<DOMTokenList>.supports(<DOMString>);
<new DOMString> = <DOMTokenList>.value;
<DOMTokenList>.value = <DOMString>;
!extends DragEvent MouseEvent;
<new MouseEvent> = <DragEvent>;
<new DragEvent> = new DragEvent(<DOMString>);
<new DragEvent> = new DragEvent(<DOMString>,<DragEventInit>);
<new DataTransfer> = <DragEvent>.dataTransfer;
<new void> = <DragEvent>.initDragEvent(<DOMString>);
<new void> = <DragEvent>.initDragEvent(<DOMString>,<boolean>);
<new void> = <DragEvent>.initDragEvent(<DOMString>,<boolean>,<boolean>);
<new void> = <DragEvent>.initDragEvent(<DOMString>,<boolean>,<boolean>,<Window>);
<new void> = <DragEvent>.initDragEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>);
<new void> = <DragEvent>.initDragEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>);
<new void> = <DragEvent>.initDragEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>);
<new void> = <DragEvent>.initDragEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>);
<new void> = <DragEvent>.initDragEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>);
<new void> = <DragEvent>.initDragEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>);
<new void> = <DragEvent>.initDragEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>);
<new void> = <DragEvent>.initDragEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>,<boolean>);
<new void> = <DragEvent>.initDragEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>,<boolean>,<boolean>);
<new void> = <DragEvent>.initDragEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>,<boolean>,<boolean>,<unsigned short>);
<new void> = <DragEvent>.initDragEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>,<boolean>,<boolean>,<unsigned short>,<EventTarget>);
<new void> = <DragEvent>.initDragEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>,<boolean>,<boolean>,<unsigned short>,<EventTarget>,<DataTransfer>);
!extends DynamicsCompressorNode AudioNode;
<new AudioNode> = <DynamicsCompressorNode>;
<new DynamicsCompressorNode> = new DynamicsCompressorNode(<BaseAudioContext>);
<new DynamicsCompressorNode> = new DynamicsCompressorNode(<BaseAudioContext>,<DynamicsCompressorOptions>);
<new AudioParam> = <DynamicsCompressorNode>.threshold;
<new AudioParam> = <DynamicsCompressorNode>.knee;
<new AudioParam> = <DynamicsCompressorNode>.ratio;
<new float> = <DynamicsCompressorNode>.reduction;
<new AudioParam> = <DynamicsCompressorNode>.attack;
<new AudioParam> = <DynamicsCompressorNode>.release;
!extends Element Node;
<new Node> = <Element>;
<new DOMString> = <Element>.namespaceURI;
<new DOMString> = <Element>.prefix;
<new DOMString> = <Element>.localName;
<new DOMString> = <Element>.tagName;
<new DOMString> = <Element>.id;
<Element>.id = <DOMString>;
<new DOMString> = <Element>.className;
<Element>.className = <DOMString>;
<new DOMTokenList> = <Element>.classList;
<new DOMTokenList> = <Element>.part;
<new NamedNodeMap> = <Element>.attributes;
<new sequence_DOMString_> = <Element>.getAttributeNames();
<new DOMString> = <Element>.getAttribute(<DOMString>);
<new DOMString> = <Element>.getAttributeNS(<DOMString>,<DOMString>);
<Element>.toggleAttribute(<DOMString>);
<Element>.toggleAttribute(<DOMString>,<boolean>);
<new void> = <Element>.setAttribute(<DOMString>,<DOMString>);
<new void> = <Element>.setAttributeNS(<DOMString>,<DOMString>,<DOMString>);
<new void> = <Element>.removeAttribute(<DOMString>);
<new void> = <Element>.removeAttributeNS(<DOMString>,<DOMString>);
<Element>.hasAttribute(<DOMString>);
<Element>.hasAttributeNS(<DOMString>,<DOMString>);
<Element>.hasAttributes();
<new Element> = <Element>.closest(<UTF8String>);
<Element>.matches(<UTF8String>);
<Element>.webkitMatchesSelector(<UTF8String>);
<new HTMLCollection> = <Element>.getElementsByTagName(<DOMString>);
<new HTMLCollection> = <Element>.getElementsByTagNameNS(<DOMString>,<DOMString>);
<new HTMLCollection> = <Element>.getElementsByClassName(<DOMString>);
<new Element> = <Element>.insertAdjacentElement(<DOMString>,<Element>);
<new void> = <Element>.insertAdjacentText(<DOMString>,<DOMString>);
<new float> = <Element>.fontSizeInflation;
<new DOMString> = <Element>.implementedPseudoElement;
<Element>.mozMatchesSelector(<UTF8String>);
<new void> = <Element>.setPointerCapture(<long>);
<new void> = <Element>.releasePointerCapture(<long>);
<Element>.hasPointerCapture(<long>);
<new void> = <Element>.setCapture();
<new void> = <Element>.setCapture(<boolean>);
<new void> = <Element>.releaseCapture();
<new void> = <Element>.setCaptureAlways();
<new void> = <Element>.setCaptureAlways(<boolean>);
<new Attr> = <Element>.getAttributeNode(<DOMString>);
<new Attr> = <Element>.setAttributeNode(<Attr>);
<new Attr> = <Element>.removeAttributeNode(<Attr>);
<new Attr> = <Element>.getAttributeNodeNS(<DOMString>,<DOMString>);
<new Attr> = <Element>.setAttributeNodeNS(<Attr>);
<new DOMMatrixReadOnly> = <Element>.getTransformToAncestor(<Element>);
<new DOMMatrixReadOnly> = <Element>.getTransformToParent();
<new DOMMatrixReadOnly> = <Element>.getTransformToViewport();
<new DOMRectList> = <Element>.getClientRects();
<new DOMRect> = <Element>.getBoundingClientRect();
<new union_boolean1ScrollIntoViewOptions_> = <boolean>;
<new union_boolean1ScrollIntoViewOptions_> = <ScrollIntoViewOptions>;
<new void> = <Element>.scrollIntoView();
<new void> = <Element>.scrollIntoView(<union_boolean1ScrollIntoViewOptions_>);
<new long> = <Element>.scrollTop;
<Element>.scrollTop = <long>;
<new long> = <Element>.scrollLeft;
<Element>.scrollLeft = <long>;
<new long> = <Element>.scrollWidth;
<new long> = <Element>.scrollHeight;
<new void> = <Element>.scroll(<unrestricted double>,<unrestricted double>);
<new void> = <Element>.scroll();
<new void> = <Element>.scroll(<ScrollToOptions>);
<new void> = <Element>.scrollTo(<unrestricted double>,<unrestricted double>);
<new void> = <Element>.scrollTo();
<new void> = <Element>.scrollTo(<ScrollToOptions>);
<new void> = <Element>.scrollBy(<unrestricted double>,<unrestricted double>);
<new void> = <Element>.scrollBy();
<new void> = <Element>.scrollBy(<ScrollToOptions>);
<new void> = <Element>.mozScrollSnap();
<new long> = <Element>.clientTop;
<new long> = <Element>.clientLeft;
<new long> = <Element>.clientWidth;
<new long> = <Element>.clientHeight;
<new long> = <Element>.scrollTopMin;
<new long> = <Element>.scrollTopMax;
<new long> = <Element>.scrollLeftMin;
<new long> = <Element>.scrollLeftMax;
<new DOMString> = <Element>.innerHTML;
<Element>.innerHTML = <DOMString>;
<new DOMString> = <Element>.outerHTML;
<Element>.outerHTML = <DOMString>;
<new void> = <Element>.insertAdjacentHTML(<DOMString>,<DOMString>);
<new Element> = <Element>.querySelector(<UTF8String>);
<new NodeList> = <Element>.querySelectorAll(<UTF8String>);
<new ShadowRoot> = <Element>.attachShadow(<ShadowRootInit>);
<new ShadowRoot> = <Element>.shadowRoot;
<new ShadowRoot> = <Element>.openOrClosedShadowRoot;
<new HTMLSlotElement> = <Element>.assignedSlot;
<new HTMLSlotElement> = <Element>.openOrClosedAssignedSlot;
<new DOMString> = <Element>.slot;
<Element>.slot = <DOMString>;
<new Promise_void_> = <Element>.requestFullscreen();
<new Promise_void_> = <Element>.mozRequestFullScreen();
<new EventHandler> = <Element>.onfullscreenchange;
<Element>.onfullscreenchange = <EventHandler>;
<new EventHandler> = <Element>.onfullscreenerror;
<Element>.onfullscreenerror = <EventHandler>;
<new void> = <Element>.requestPointerLock();
<new Flex> = <Element>.getAsFlexContainer();
<new sequence_Grid_> = [<Grid>];
<new Grid> = <sequence_Grid_>[0];
<new sequence_Grid_> = <Element>.getGridFragments();
<Element>.hasGridFragments();
<new sequence_Element_> = <Element>.getElementsWithGrid();
<new void> = <Element>.setAttributeDevtools(<DOMString>,<DOMString>);
<new void> = <Element>.setAttributeDevtoolsNS(<DOMString>,<DOMString>,<DOMString>);
<new boolean> = <Element>.hasVisibleScrollbars;
<new double> = <Element>.clientHeightDouble;
<new double> = <Element>.clientWidthDouble;
<new double> = <Element>.firstLineBoxBSize;
<new void> = <Element>.setHTML(<DOMString>);
<new void> = <Element>.setHTML(<DOMString>,<SetHTMLOptions>);
<new ShadowRoot> = <ElementInternals>.shadowRoot;
<new union_File1USVString1FormData_> = <File>;
<new union_File1USVString1FormData_> = <USVString>;
<new union_File1USVString1FormData_> = <FormData>;
<new void> = <ElementInternals>.setFormValue(<union_File1USVString1FormData_>);
<new void> = <ElementInternals>.setFormValue(<union_File1USVString1FormData_>,<union_File1USVString1FormData_>);
<new HTMLFormElement> = <ElementInternals>.form;
<new NodeList> = <ElementInternals>.labels;
!extends ErrorEvent Event;
<new Event> = <ErrorEvent>;
<new ErrorEvent> = new ErrorEvent(<DOMString>);
<new ErrorEvent> = new ErrorEvent(<DOMString>,<ErrorEventInit>);
<new DOMString> = <ErrorEvent>.message;
<new DOMString> = <ErrorEvent>.filename;
<new unsigned long> = <ErrorEvent>.lineno;
<new unsigned long> = <ErrorEvent>.colno;
<new any> = <ErrorEvent>.error;
<new Event> = new Event(<DOMString>);
<new Event> = new Event(<DOMString>,<EventInit>);
<new DOMString> = <Event>.type;
<new EventTarget> = <Event>.target;
<new EventTarget> = <Event>.currentTarget;
<new sequence_EventTarget_> = [<EventTarget>];
<new EventTarget> = <sequence_EventTarget_>[0];
<new sequence_EventTarget_> = <Event>.composedPath();
<new unsigned short> = <Event>.NONE;
<new unsigned short> = <Event>.CAPTURING_PHASE;
<new unsigned short> = <Event>.AT_TARGET;
<new unsigned short> = <Event>.BUBBLING_PHASE;
<new unsigned short> = <Event>.eventPhase;
<new void> = <Event>.stopPropagation();
<new void> = <Event>.stopImmediatePropagation();
<new boolean> = <Event>.bubbles;
<new boolean> = <Event>.cancelable;
<new boolean> = <Event>.returnValue;
<Event>.returnValue = <boolean>;
<new void> = <Event>.preventDefault();
<new boolean> = <Event>.defaultPrevented;
<new boolean> = <Event>.defaultPreventedByChrome;
<new boolean> = <Event>.defaultPreventedByContent;
<new boolean> = <Event>.composed;
<new boolean> = <Event>.isTrusted;
<new DOMHighResTimeStamp> = <Event>.timeStamp;
<new void> = <Event>.initEvent(<DOMString>);
<new void> = <Event>.initEvent(<DOMString>,<boolean>);
<new void> = <Event>.initEvent(<DOMString>,<boolean>,<boolean>);
<new boolean> = <Event>.cancelBubble;
<Event>.cancelBubble = <boolean>;
<new long> = <Event>.ALT_MASK;
<new long> = <Event>.CONTROL_MASK;
<new long> = <Event>.SHIFT_MASK;
<new long> = <Event>.META_MASK;
<new EventTarget> = <Event>.originalTarget;
<new EventTarget> = <Event>.explicitOriginalTarget;
<new EventTarget> = <Event>.composedTarget;
<new void> = <Event>.preventMultipleActions();
<new boolean> = <Event>.multipleActionsPrevented;
<new boolean> = <Event>.isSynthesized;
<new void> = <Event>.requestReplyFromRemoteContent();
<new boolean> = <Event>.isWaitingReplyFromRemoteContent;
<new boolean> = <Event>.isReplyEventFromRemoteContent;
!extends EventSource EventTarget;
<new EventTarget> = <EventSource>;
<new EventSource> = new EventSource(<USVString>);
<new EventSource> = new EventSource(<USVString>,<EventSourceInit>);
<new DOMString> = <EventSource>.url;
<new boolean> = <EventSource>.withCredentials;
<new unsigned short> = <EventSource>.CONNECTING;
<new unsigned short> = <EventSource>.OPEN;
<new unsigned short> = <EventSource>.CLOSED;
<new unsigned short> = <EventSource>.readyState;
<new EventHandler> = <EventSource>.onopen;
<EventSource>.onopen = <EventHandler>;
<new EventHandler> = <EventSource>.onmessage;
<EventSource>.onmessage = <EventHandler>;
<new EventHandler> = <EventSource>.onerror;
<EventSource>.onerror = <EventHandler>;
<new void> = <EventSource>.close();
<new EventTarget> = new EventTarget();
<new union_AddEventListenerOptions1boolean_> = <AddEventListenerOptions>;
<new union_AddEventListenerOptions1boolean_> = <boolean>;
<new void> = <EventTarget>.addEventListener(<DOMString>,<EventListener>);
<new void> = <EventTarget>.addEventListener(<DOMString>,<EventListener>,<union_AddEventListenerOptions1boolean_>);
<new void> = <EventTarget>.addEventListener(<DOMString>,<EventListener>,<union_AddEventListenerOptions1boolean_>,<boolean>);
<new union_EventListenerOptions1boolean_> = <EventListenerOptions>;
<new union_EventListenerOptions1boolean_> = <boolean>;
<new void> = <EventTarget>.removeEventListener(<DOMString>,<EventListener>);
<new void> = <EventTarget>.removeEventListener(<DOMString>,<EventListener>,<union_EventListenerOptions1boolean_>);
<EventTarget>.dispatchEvent(<Event>);
<new void> = <EventTarget>.setEventHandler(<DOMString>,<EventHandler>);
<new EventHandler> = <EventTarget>.getEventHandler(<DOMString>);
<new WindowProxy> = <EventTarget>.ownerGlobal;
!extends ExtendableEvent Event;
<new Event> = <ExtendableEvent>;
<new ExtendableEvent> = new ExtendableEvent(<DOMString>);
<new ExtendableEvent> = new ExtendableEvent(<DOMString>,<ExtendableEventInit>);
<new void> = <ExtendableEvent>.waitUntil(<Promise_any_>);
!extends ExtendableMessageEvent ExtendableEvent;
<new ExtendableEvent> = <ExtendableMessageEvent>;
<new ExtendableMessageEvent> = new ExtendableMessageEvent(<DOMString>);
<new ExtendableMessageEvent> = new ExtendableMessageEvent(<DOMString>,<ExtendableMessageEventInit>);
<new any> = <ExtendableMessageEvent>.data;
<new DOMString> = <ExtendableMessageEvent>.origin;
<new DOMString> = <ExtendableMessageEvent>.lastEventId;
<new union_Client1ServiceWorker1MessagePort_> = <Client>;
<new union_Client1ServiceWorker1MessagePort_> = <ServiceWorker>;
<new union_Client1ServiceWorker1MessagePort_> = <MessagePort>;
<new union_Client1ServiceWorker1MessagePort_> = <ExtendableMessageEvent>.source;
<new sequence_MessagePort_> = [<MessagePort>];
<new MessagePort> = <sequence_MessagePort_>[0];
<new sequence_MessagePort_> = <ExtendableMessageEvent>.ports;
<new void> = <ExtensionAlarms>.create();
<new void> = <ExtensionAlarms>.create(<DOMString>);
<new void> = <ExtensionAlarms>.create(<DOMString>,<any>);
<new any> = <ExtensionAlarms>.get();
<new any> = <ExtensionAlarms>.get(<DOMString>);
<new any> = <ExtensionAlarms>.get(<DOMString>,<Function>);
<new any> = <ExtensionAlarms>.getAll();
<new any> = <ExtensionAlarms>.getAll(<Function>);
<new any> = <ExtensionAlarms>.clear();
<new any> = <ExtensionAlarms>.clear(<DOMString>);
<new any> = <ExtensionAlarms>.clear(<DOMString>,<Function>);
<new any> = <ExtensionAlarms>.clearAll();
<new any> = <ExtensionAlarms>.clearAll(<Function>);
<new ExtensionEventManager> = <ExtensionAlarms>.onAlarm;
<new ExtensionMockAPI> = <ExtensionBrowser>.mockExtensionAPI;
<new ExtensionAlarms> = <ExtensionBrowser>.alarms;
<new ExtensionRuntime> = <ExtensionBrowser>.runtime;
<new ExtensionTest> = <ExtensionBrowser>.test;
<new void> = <ExtensionEventManager>.addListener(<Function>);
<new void> = <ExtensionEventManager>.addListener(<Function>,<object>);
<new void> = <ExtensionEventManager>.removeListener(<Function>);
<ExtensionEventManager>.hasListener(<Function>);
<ExtensionEventManager>.hasListeners();
<new any> = <ExtensionMockAPI>.methodSyncWithReturn();
<new any> = <ExtensionMockAPI>.methodSyncWithReturn(<any>);
<new void> = <ExtensionMockAPI>.methodNoReturn();
<new void> = <ExtensionMockAPI>.methodNoReturn(<any>);
<new any> = <ExtensionMockAPI>.methodAsync(<any>);
<new any> = <ExtensionMockAPI>.methodAsync(<any>,<Function>);
<new any> = <ExtensionMockAPI>.methodAmbiguousArgsAsync();
<new any> = <ExtensionMockAPI>.methodAmbiguousArgsAsync(<any>);
<new ExtensionPort> = <ExtensionMockAPI>.methodReturnsPort(<DOMString>);
<new any> = <ExtensionMockAPI>.propertyAsErrorObject;
<new DOMString> = <ExtensionMockAPI>.propertyAsString;
<new ExtensionEventManager> = <ExtensionMockAPI>.onTestEvent;
<new DOMString> = <ExtensionPort>.name;
<new any> = <ExtensionPort>.sender;
<new any> = <ExtensionPort>.error;
<new void> = <ExtensionPort>.disconnect();
<new void> = <ExtensionPort>.postMessage(<any>);
<new ExtensionEventManager> = <ExtensionPort>.onDisconnect;
<new ExtensionEventManager> = <ExtensionPort>.onMessage;
<new any> = <ExtensionRuntime>.openOptionsPage();
<new any> = <ExtensionRuntime>.openOptionsPage(<Function>);
<new any> = <ExtensionRuntime>.getManifest();
<new DOMString> = <ExtensionRuntime>.getURL(<DOMString>);
<new any> = <ExtensionRuntime>.setUninstallURL();
<new any> = <ExtensionRuntime>.setUninstallURL(<DOMString>);
<new any> = <ExtensionRuntime>.setUninstallURL(<DOMString>,<Function>);
<new void> = <ExtensionRuntime>.reload();
<new ExtensionPort> = <ExtensionRuntime>.connect();
<new ExtensionPort> = <ExtensionRuntime>.connect(<DOMString>);
<new ExtensionPort> = <ExtensionRuntime>.connect(<DOMString>,<any>);
<new ExtensionPort> = <ExtensionRuntime>.connectNative(<DOMString>);
<new any> = <ExtensionRuntime>.sendMessage();
<new any> = <ExtensionRuntime>.sendMessage(<any>);
<new any> = <ExtensionRuntime>.sendNativeMessage(<DOMString>,<any>);
<new any> = <ExtensionRuntime>.sendNativeMessage(<DOMString>,<any>,<Function>);
<new any> = <ExtensionRuntime>.getBrowserInfo();
<new any> = <ExtensionRuntime>.getBrowserInfo(<Function>);
<new any> = <ExtensionRuntime>.getPlatformInfo();
<new any> = <ExtensionRuntime>.getPlatformInfo(<Function>);
<new ExtensionEventManager> = <ExtensionRuntime>.onStartup;
<new ExtensionEventManager> = <ExtensionRuntime>.onInstalled;
<new ExtensionEventManager> = <ExtensionRuntime>.onUpdateAvailable;
<new ExtensionEventManager> = <ExtensionRuntime>.onConnect;
<new ExtensionEventManager> = <ExtensionRuntime>.onConnectExternal;
<new ExtensionEventManager> = <ExtensionRuntime>.onMessage;
<new ExtensionEventManager> = <ExtensionRuntime>.onMessageExternal;
<new any> = <ExtensionRuntime>.lastError;
<new DOMString> = <ExtensionRuntime>.id;
<new void> = <ExtensionTest>.withHandlingUserInput(<Function>);
<new void> = <ExtensionTest>.notifyFail(<DOMString>);
<new void> = <ExtensionTest>.notifyPass();
<new void> = <ExtensionTest>.notifyPass(<DOMString>);
<new void> = <ExtensionTest>.log(<DOMString>);
<new void> = <ExtensionTest>.sendMessage();
<new void> = <ExtensionTest>.sendMessage(<any>);
<new void> = <ExtensionTest>.fail();
<new void> = <ExtensionTest>.fail(<any>);
<new void> = <ExtensionTest>.succeed();
<new void> = <ExtensionTest>.succeed(<any>);
<new void> = <ExtensionTest>.assertTrue();
<new void> = <ExtensionTest>.assertTrue(<any>);
<new void> = <ExtensionTest>.assertFalse();
<new void> = <ExtensionTest>.assertFalse(<any>);
<new void> = <ExtensionTest>.assertEq();
<new void> = <ExtensionTest>.assertEq(<any>);
<new any> = <ExtensionTest>.assertRejects(<Promise_any_>,<any>);
<new any> = <ExtensionTest>.assertRejects(<Promise_any_>,<any>,<DOMString>);
<new any> = <ExtensionTest>.assertRejects(<Promise_any_>,<any>,<DOMString>,<Function>);
<new void> = <ExtensionTest>.assertThrows(<Function>,<any>);
<new void> = <ExtensionTest>.assertThrows(<Function>,<any>,<DOMString>);
<new ExtensionEventManager> = <ExtensionTest>.onMessage;
<new void> = <External>.AddSearchProvider();
<new void> = <External>.IsSearchProviderInstalled();
<FeaturePolicy>.allowsFeature(<DOMString>);
<FeaturePolicy>.allowsFeature(<DOMString>,<DOMString>);
<new sequence_DOMString_> = <FeaturePolicy>.features();
<new sequence_DOMString_> = <FeaturePolicy>.allowedFeatures();
<new sequence_DOMString_> = <FeaturePolicy>.getAllowlistForFeature(<DOMString>);
!extends FeaturePolicyViolationReportBody ReportBody;
<new ReportBody> = <FeaturePolicyViolationReportBody>;
<new DOMString> = <FeaturePolicyViolationReportBody>.featureId;
<new DOMString> = <FeaturePolicyViolationReportBody>.sourceFile;
<new long> = <FeaturePolicyViolationReportBody>.lineNumber;
<new long> = <FeaturePolicyViolationReportBody>.columnNumber;
<new DOMString> = <FeaturePolicyViolationReportBody>.disposition;
!extends FetchEvent ExtendableEvent;
<new ExtendableEvent> = <FetchEvent>;
<new FetchEvent> = new FetchEvent(<DOMString>,<FetchEventInit>);
<new Request> = <FetchEvent>.request;
<new DOMString> = <FetchEvent>.clientId;
<new DOMString> = <FetchEvent>.resultingClientId;
<new Promise_void_> = <FetchEvent>.handled;
<new void> = <FetchEvent>.respondWith(<Promise_Response_>);
!extends FetchObserver EventTarget;
<new EventTarget> = <FetchObserver>;
<new FetchState> = <FetchObserver>.state;
<new EventHandler> = <FetchObserver>.onstatechange;
<FetchObserver>.onstatechange = <EventHandler>;
<new EventHandler> = <FetchObserver>.onrequestprogress;
<FetchObserver>.onrequestprogress = <EventHandler>;
<new EventHandler> = <FetchObserver>.onresponseprogress;
<FetchObserver>.onresponseprogress = <EventHandler>;
!extends File Blob;
<new Blob> = <File>;
<new File> = new File(<sequence_BlobPart_>,<USVString>);
<new File> = new File(<sequence_BlobPart_>,<USVString>,<FilePropertyBag>);
<new DOMString> = <File>.name;
<new long long> = <File>.lastModified;
<new USVString> = <File>.webkitRelativePath;
<new DOMString> = <File>.mozFullPath;
<new Promise_File_> = new Promise(function(x){console.log("ok")});
<new Promise_File_> = <File>.createFromNsIFile(<nsIFile>);
<new Promise_File_> = <File>.createFromNsIFile(<nsIFile>,<ChromeFilePropertyBag>);
<new Promise_File_> = <File>.createFromFileName(<USVString>);
<new Promise_File_> = <File>.createFromFileName(<USVString>,<ChromeFilePropertyBag>);
<new File> = <FileList>.item(<unsigned long>);
<new unsigned long> = <FileList>.length;
!extends FileReader EventTarget;
<new EventTarget> = <FileReader>;
<new FileReader> = new FileReader();
<new void> = <FileReader>.readAsArrayBuffer(<Blob>);
<new void> = <FileReader>.readAsBinaryString(<Blob>);
<new void> = <FileReader>.readAsText(<Blob>);
<new void> = <FileReader>.readAsText(<Blob>,<DOMString>);
<new void> = <FileReader>.readAsDataURL(<Blob>);
<new void> = <FileReader>.abort();
<new unsigned short> = <FileReader>.EMPTY;
<new unsigned short> = <FileReader>.LOADING;
<new unsigned short> = <FileReader>.DONE;
<new unsigned short> = <FileReader>.readyState;
<new union_DOMString1ArrayBuffer_> = <DOMString>;
<new union_DOMString1ArrayBuffer_> = <ArrayBuffer>;
<new union_DOMString1ArrayBuffer_> = <FileReader>.result;
<new DOMException> = <FileReader>.error;
<new EventHandler> = <FileReader>.onloadstart;
<FileReader>.onloadstart = <EventHandler>;
<new EventHandler> = <FileReader>.onprogress;
<FileReader>.onprogress = <EventHandler>;
<new EventHandler> = <FileReader>.onload;
<FileReader>.onload = <EventHandler>;
<new EventHandler> = <FileReader>.onabort;
<FileReader>.onabort = <EventHandler>;
<new EventHandler> = <FileReader>.onerror;
<FileReader>.onerror = <EventHandler>;
<new EventHandler> = <FileReader>.onloadend;
<FileReader>.onloadend = <EventHandler>;
<new FileReaderSync> = new FileReaderSync();
<new ArrayBuffer> = <FileReaderSync>.readAsArrayBuffer(<Blob>);
<new DOMString> = <FileReaderSync>.readAsBinaryString(<Blob>);
<new DOMString> = <FileReaderSync>.readAsText(<Blob>);
<new DOMString> = <FileReaderSync>.readAsText(<Blob>,<DOMString>);
<new DOMString> = <FileReaderSync>.readAsDataURL(<Blob>);
<new USVString> = <FileSystem>.name;
<new FileSystemDirectoryEntry> = <FileSystem>.root;
!extends FileSystemDirectoryEntry FileSystemEntry;
<new FileSystemEntry> = <FileSystemDirectoryEntry>;
<new FileSystemDirectoryReader> = <FileSystemDirectoryEntry>.createReader();
<new void> = <FileSystemDirectoryEntry>.getFile();
<new void> = <FileSystemDirectoryEntry>.getFile(<USVString>);
<new void> = <FileSystemDirectoryEntry>.getFile(<USVString>,<FileSystemFlags>);
<new void> = <FileSystemDirectoryEntry>.getFile(<USVString>,<FileSystemFlags>,<FileSystemEntryCallback>);
<new void> = <FileSystemDirectoryEntry>.getFile(<USVString>,<FileSystemFlags>,<FileSystemEntryCallback>,<ErrorCallback>);
<new void> = <FileSystemDirectoryEntry>.getDirectory();
<new void> = <FileSystemDirectoryEntry>.getDirectory(<USVString>);
<new void> = <FileSystemDirectoryEntry>.getDirectory(<USVString>,<FileSystemFlags>);
<new void> = <FileSystemDirectoryEntry>.getDirectory(<USVString>,<FileSystemFlags>,<FileSystemEntryCallback>);
<new void> = <FileSystemDirectoryEntry>.getDirectory(<USVString>,<FileSystemFlags>,<FileSystemEntryCallback>,<ErrorCallback>);
<new void> = <FileSystemDirectoryReader>.readEntries(<FileSystemEntriesCallback>);
<new void> = <FileSystemDirectoryReader>.readEntries(<FileSystemEntriesCallback>,<ErrorCallback>);
<new boolean> = <FileSystemEntry>.isFile;
<new boolean> = <FileSystemEntry>.isDirectory;
<new USVString> = <FileSystemEntry>.name;
<new USVString> = <FileSystemEntry>.fullPath;
<new FileSystem> = <FileSystemEntry>.filesystem;
<new void> = <FileSystemEntry>.getParent();
<new void> = <FileSystemEntry>.getParent(<FileSystemEntryCallback>);
<new void> = <FileSystemEntry>.getParent(<FileSystemEntryCallback>,<ErrorCallback>);
!extends FileSystemFileEntry FileSystemEntry;
<new FileSystemEntry> = <FileSystemFileEntry>;
<new void> = <FileSystemFileEntry>.file(<FileCallback>);
<new void> = <FileSystemFileEntry>.file(<FileCallback>,<ErrorCallback>);
!extends FocusEvent UIEvent;
<new UIEvent> = <FocusEvent>;
<new FocusEvent> = new FocusEvent(<DOMString>);
<new FocusEvent> = new FocusEvent(<DOMString>,<FocusEventInit>);
<new EventTarget> = <FocusEvent>.relatedTarget;
<new union_UTF8String1BinaryData_> = <UTF8String>;
<new union_UTF8String1BinaryData_> = <BinaryData>;
<new FontFace> = new FontFace(<UTF8String>,<union_UTF8String1BinaryData_>);
<new FontFace> = new FontFace(<UTF8String>,<union_UTF8String1BinaryData_>,<FontFaceDescriptors>);
<new UTF8String> = <FontFace>.family;
<FontFace>.family = <UTF8String>;
<new UTF8String> = <FontFace>.style;
<FontFace>.style = <UTF8String>;
<new UTF8String> = <FontFace>.weight;
<FontFace>.weight = <UTF8String>;
<new UTF8String> = <FontFace>.stretch;
<FontFace>.stretch = <UTF8String>;
<new UTF8String> = <FontFace>.unicodeRange;
<FontFace>.unicodeRange = <UTF8String>;
<new UTF8String> = <FontFace>.variant;
<FontFace>.variant = <UTF8String>;
<new UTF8String> = <FontFace>.featureSettings;
<FontFace>.featureSettings = <UTF8String>;
<new UTF8String> = <FontFace>.variationSettings;
<FontFace>.variationSettings = <UTF8String>;
<new UTF8String> = <FontFace>.display;
<FontFace>.display = <UTF8String>;
<new UTF8String> = <FontFace>.ascentOverride;
<FontFace>.ascentOverride = <UTF8String>;
<new UTF8String> = <FontFace>.descentOverride;
<FontFace>.descentOverride = <UTF8String>;
<new UTF8String> = <FontFace>.lineGapOverride;
<FontFace>.lineGapOverride = <UTF8String>;
<new UTF8String> = <FontFace>.sizeAdjust;
<FontFace>.sizeAdjust = <UTF8String>;
<new FontFaceLoadStatus> = <FontFace>.status;
<new Promise_FontFace_> = new Promise(function(x){console.log("ok")});
<new Promise_FontFace_> = <FontFace>.load();
<new Promise_FontFace_> = <FontFace>.loaded;
<new FontFaceSetIteratorResult> = <FontFaceSetIterator>.next();
!extends FontFaceSet EventTarget;
<new EventTarget> = <FontFaceSet>;
<new unsigned long> = <FontFaceSet>.size;
<new void> = <FontFaceSet>.add(<FontFace>);
<FontFaceSet>.has(<FontFace>);
<FontFaceSet>.delete(<FontFace>);
<new void> = <FontFaceSet>.clear();
<new FontFaceSetIterator> = <FontFaceSet>.entries();
<new FontFaceSetIterator> = <FontFaceSet>.values();
<new void> = <FontFaceSet>.forEach(<FontFaceSetForEachCallback>);
<new void> = <FontFaceSet>.forEach(<FontFaceSetForEachCallback>,<any>);
<new EventHandler> = <FontFaceSet>.onloading;
<FontFaceSet>.onloading = <EventHandler>;
<new EventHandler> = <FontFaceSet>.onloadingdone;
<FontFaceSet>.onloadingdone = <EventHandler>;
<new EventHandler> = <FontFaceSet>.onloadingerror;
<FontFaceSet>.onloadingerror = <EventHandler>;
<new sequence_FontFace_> = [<FontFace>];
<new FontFace> = <sequence_FontFace_>[0];
<new Promise_sequence_FontFace__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_FontFace__> = <FontFaceSet>.load(<UTF8String>);
<new Promise_sequence_FontFace__> = <FontFaceSet>.load(<UTF8String>,<DOMString>);
<FontFaceSet>.check(<UTF8String>);
<FontFaceSet>.check(<UTF8String>,<DOMString>);
<new Promise_void_> = <FontFaceSet>.ready;
<new FontFaceSetLoadStatus> = <FontFaceSet>.status;
!extends FontFaceSetLoadEvent Event;
<new Event> = <FontFaceSetLoadEvent>;
<new FontFaceSetLoadEvent> = new FontFaceSetLoadEvent(<DOMString>);
<new FontFaceSetLoadEvent> = new FontFaceSetLoadEvent(<DOMString>,<FontFaceSetLoadEventInit>);
<new sequence_FontFace_> = <FontFaceSetLoadEvent>.fontfaces;
<new FormData> = new FormData();
<new FormData> = new FormData(<HTMLFormElement>);
<new void> = <FormData>.append(<USVString>,<Blob>);
<new void> = <FormData>.append(<USVString>,<Blob>,<USVString>);
<new void> = <FormData>.append(<USVString>,<USVString>);
<new void> = <FormData>.delete(<USVString>);
<new FormDataEntryValue> = <FormData>.get(<USVString>);
<new sequence_FormDataEntryValue_> = [<FormDataEntryValue>];
<new FormDataEntryValue> = <sequence_FormDataEntryValue_>[0];
<new sequence_FormDataEntryValue_> = <FormData>.getAll(<USVString>);
<FormData>.has(<USVString>);
<new void> = <FormData>.set(<USVString>,<Blob>);
<new void> = <FormData>.set(<USVString>,<Blob>,<USVString>);
<new void> = <FormData>.set(<USVString>,<USVString>);
!extends FormDataEvent Event;
<new Event> = <FormDataEvent>;
<new FormDataEvent> = new FormDataEvent(<DOMString>);
<new FormDataEvent> = new FormDataEvent(<DOMString>,<FormDataEventInit>);
<new FormData> = <FormDataEvent>.formData;
!extends FrameCrashedEvent Event;
<new Event> = <FrameCrashedEvent>;
<new FrameCrashedEvent> = new FrameCrashedEvent(<DOMString>);
<new FrameCrashedEvent> = new FrameCrashedEvent(<DOMString>,<FrameCrashedEventInit>);
<new unsigned long long> = <FrameCrashedEvent>.browsingContextId;
<new boolean> = <FrameCrashedEvent>.isTopFrame;
<new unsigned long long> = <FrameCrashedEvent>.childID;
<new void> = <FuzzingFunctions>.garbageCollect();
<new void> = <FuzzingFunctions>.garbageCollectCompacting();
<new void> = <FuzzingFunctions>.crash();
<new void> = <FuzzingFunctions>.crash(<DOMString>);
<new void> = <FuzzingFunctions>.cycleCollect();
<new void> = <FuzzingFunctions>.memoryPressure();
<new void> = <FuzzingFunctions>.enableAccessibility();
<new void> = <FuzzingFunctions>.synthesizeKeyboardEvents(<DOMString>);
<new void> = <FuzzingFunctions>.synthesizeKeyboardEvents(<DOMString>,<KeyboardEventInit>);
!extends GainNode AudioNode;
<new AudioNode> = <GainNode>;
<new GainNode> = new GainNode(<BaseAudioContext>);
<new GainNode> = new GainNode(<BaseAudioContext>,<GainOptions>);
<new AudioParam> = <GainNode>.gain;
<new boolean> = <GamepadButton>.pressed;
<new boolean> = <GamepadButton>.touched;
<new double> = <GamepadButton>.value;
<new DOMString> = <Gamepad>.id;
<new long> = <Gamepad>.index;
<new GamepadMappingType> = <Gamepad>.mapping;
<new GamepadHand> = <Gamepad>.hand;
<new unsigned long> = <Gamepad>.displayId;
<new boolean> = <Gamepad>.connected;
<new sequence_GamepadButton_> = [<GamepadButton>];
<new GamepadButton> = <sequence_GamepadButton_>[0];
<new sequence_GamepadButton_> = <Gamepad>.buttons;
<new sequence_double_> = <Gamepad>.axes;
<new DOMHighResTimeStamp> = <Gamepad>.timestamp;
<new GamepadPose> = <Gamepad>.pose;
<new sequence_GamepadHapticActuator_> = [<GamepadHapticActuator>];
<new GamepadHapticActuator> = <sequence_GamepadHapticActuator_>[0];
<new sequence_GamepadHapticActuator_> = <Gamepad>.hapticActuators;
<new sequence_GamepadLightIndicator_> = [<GamepadLightIndicator>];
<new GamepadLightIndicator> = <sequence_GamepadLightIndicator_>[0];
<new sequence_GamepadLightIndicator_> = <Gamepad>.lightIndicators;
<new sequence_GamepadTouch_> = [<GamepadTouch>];
<new GamepadTouch> = <sequence_GamepadTouch_>[0];
<new sequence_GamepadTouch_> = <Gamepad>.touchEvents;
!extends GamepadAxisMoveEvent GamepadEvent;
<new GamepadEvent> = <GamepadAxisMoveEvent>;
<new GamepadAxisMoveEvent> = new GamepadAxisMoveEvent(<DOMString>);
<new GamepadAxisMoveEvent> = new GamepadAxisMoveEvent(<DOMString>,<GamepadAxisMoveEventInit>);
<new unsigned long> = <GamepadAxisMoveEvent>.axis;
<new double> = <GamepadAxisMoveEvent>.value;
!extends GamepadButtonEvent GamepadEvent;
<new GamepadEvent> = <GamepadButtonEvent>;
<new GamepadButtonEvent> = new GamepadButtonEvent(<DOMString>);
<new GamepadButtonEvent> = new GamepadButtonEvent(<DOMString>,<GamepadButtonEventInit>);
<new unsigned long> = <GamepadButtonEvent>.button;
!extends GamepadEvent Event;
<new Event> = <GamepadEvent>;
<new GamepadEvent> = new GamepadEvent(<DOMString>);
<new GamepadEvent> = new GamepadEvent(<DOMString>,<GamepadEventInit>);
<new Gamepad> = <GamepadEvent>.gamepad;
<new GamepadHapticActuatorType> = <GamepadHapticActuator>.type;
<new Promise_boolean_> = <GamepadHapticActuator>.pulse(<double>,<double>);
<new GamepadLightIndicatorType> = <GamepadLightIndicator>.type;
<new Promise_boolean_> = <GamepadLightIndicator>.setColor(<GamepadLightColor>);
<new boolean> = <GamepadPose>.hasOrientation;
<new boolean> = <GamepadPose>.hasPosition;
<new Float32Array> = <GamepadPose>.position;
<new Float32Array> = <GamepadPose>.linearVelocity;
<new Float32Array> = <GamepadPose>.linearAcceleration;
<new Float32Array> = <GamepadPose>.orientation;
<new Float32Array> = <GamepadPose>.angularVelocity;
<new Float32Array> = <GamepadPose>.angularAcceleration;
<new GamepadMappingType> = <GamepadServiceTest>.noMapping;
<new GamepadMappingType> = <GamepadServiceTest>.standardMapping;
<new GamepadHand> = <GamepadServiceTest>.noHand;
<new GamepadHand> = <GamepadServiceTest>.leftHand;
<new GamepadHand> = <GamepadServiceTest>.rightHand;
<new Promise_unsigned long_> = new Promise(function(x){console.log("ok")});
<new Promise_unsigned long_> = <GamepadServiceTest>.addGamepad(<DOMString>,<GamepadMappingType>,<GamepadHand>,<unsigned long>,<unsigned long>,<unsigned long>,<unsigned long>,<unsigned long>);
<new Promise_unsigned long_> = <GamepadServiceTest>.removeGamepad(<unsigned long>);
<new Promise_unsigned long_> = <GamepadServiceTest>.newButtonEvent(<unsigned long>,<unsigned long>,<boolean>,<boolean>);
<new Promise_unsigned long_> = <GamepadServiceTest>.newButtonValueEvent(<unsigned long>,<unsigned long>,<boolean>,<boolean>,<double>);
<new Promise_unsigned long_> = <GamepadServiceTest>.newAxisMoveEvent(<unsigned long>,<unsigned long>,<double>);
<new Promise_unsigned long_> = <GamepadServiceTest>.newPoseMove(<unsigned long>,<Float32Array>,<Float32Array>,<Float32Array>,<Float32Array>,<Float32Array>,<Float32Array>);
<new Promise_unsigned long_> = <GamepadServiceTest>.newTouch(<unsigned long>,<unsigned long>,<unsigned long>,<octet>,<Float32Array>,<Float32Array>);
<new unsigned long> = <GamepadTouch>.touchId;
<new octet> = <GamepadTouch>.surfaceId;
<new Float32Array> = <GamepadTouch>.position;
<new Uint32Array> = <GamepadTouch>.surfaceDimensions;
<new void> = <Geolocation>.getCurrentPosition(<PositionCallback>);
<new void> = <Geolocation>.getCurrentPosition(<PositionCallback>,<PositionErrorCallback>);
<new void> = <Geolocation>.getCurrentPosition(<PositionCallback>,<PositionErrorCallback>,<PositionOptions>);
<Geolocation>.watchPosition(<PositionCallback>);
<Geolocation>.watchPosition(<PositionCallback>,<PositionErrorCallback>);
<Geolocation>.watchPosition(<PositionCallback>,<PositionErrorCallback>,<PositionOptions>);
<new void> = <Geolocation>.clearWatch(<long>);
<new double> = <GeolocationCoordinates>.latitude;
<new double> = <GeolocationCoordinates>.longitude;
<new double> = <GeolocationCoordinates>.altitude;
<new double> = <GeolocationCoordinates>.accuracy;
<new double> = <GeolocationCoordinates>.altitudeAccuracy;
<new double> = <GeolocationCoordinates>.heading;
<new double> = <GeolocationCoordinates>.speed;
<new GeolocationCoordinates> = <GeolocationPosition>.coords;
<new DOMTimeStamp> = <GeolocationPosition>.timestamp;
<new unsigned short> = <GeolocationPositionError>.PERMISSION_DENIED;
<new unsigned short> = <GeolocationPositionError>.POSITION_UNAVAILABLE;
<new unsigned short> = <GeolocationPositionError>.TIMEOUT;
<new unsigned short> = <GeolocationPositionError>.code;
<new DOMString> = <GeolocationPositionError>.message;
<new GetUserMediaRequestType> = <GetUserMediaRequest>.type;
<new unsigned long long> = <GetUserMediaRequest>.windowID;
<new unsigned long long> = <GetUserMediaRequest>.innerWindowID;
<new DOMString> = <GetUserMediaRequest>.callID;
<new DOMString> = <GetUserMediaRequest>.rawID;
<new DOMString> = <GetUserMediaRequest>.mediaSource;
<new sequence_nsIMediaDevice_> = [<nsIMediaDevice>];
<new nsIMediaDevice> = <sequence_nsIMediaDevice_>[0];
<new sequence_nsIMediaDevice_> = <GetUserMediaRequest>.devices;
<new MediaStreamConstraints> = <GetUserMediaRequest>.getConstraints();
<new AudioOutputOptions> = <GetUserMediaRequest>.getAudioOutputOptions();
<new boolean> = <GetUserMediaRequest>.isSecure;
<new boolean> = <GetUserMediaRequest>.isHandlingUserInput;
!extends GPUUncapturedErrorEvent Event;
<new Event> = <GPUUncapturedErrorEvent>;
<new GPUUncapturedErrorEvent> = new GPUUncapturedErrorEvent(<DOMString>,<GPUUncapturedErrorEventInit>);
<new GPUError> = <GPUUncapturedErrorEvent>.error;
<new GridDimension> = <Grid>.rows;
<new GridDimension> = <Grid>.cols;
<new sequence_GridArea_> = [<GridArea>];
<new GridArea> = <sequence_GridArea_>[0];
<new sequence_GridArea_> = <Grid>.areas;
<new GridLines> = <GridDimension>.lines;
<new GridTracks> = <GridDimension>.tracks;
<new unsigned long> = <GridLines>.length;
<new GridLine> = <GridLines>.item(<unsigned long>);
<new sequence_DOMString_> = <GridLine>.names;
<new double> = <GridLine>.start;
<new double> = <GridLine>.breadth;
<new GridDeclaration> = <GridLine>.type;
<new unsigned long> = <GridLine>.number;
<new long> = <GridLine>.negativeNumber;
<new unsigned long> = <GridTracks>.length;
<new GridTrack> = <GridTracks>.item(<unsigned long>);
<new double> = <GridTrack>.start;
<new double> = <GridTrack>.breadth;
<new GridDeclaration> = <GridTrack>.type;
<new GridTrackState> = <GridTrack>.state;
<new DOMString> = <GridArea>.name;
<new GridDeclaration> = <GridArea>.type;
<new unsigned long> = <GridArea>.rowStart;
<new unsigned long> = <GridArea>.rowEnd;
<new unsigned long> = <GridArea>.columnStart;
<new unsigned long> = <GridArea>.columnEnd;
!extends HashChangeEvent Event;
<new Event> = <HashChangeEvent>;
<new HashChangeEvent> = new HashChangeEvent(<DOMString>);
<new HashChangeEvent> = new HashChangeEvent(<DOMString>,<HashChangeEventInit>);
<new DOMString> = <HashChangeEvent>.oldURL;
<new DOMString> = <HashChangeEvent>.newURL;
<new void> = <HashChangeEvent>.initHashChangeEvent(<DOMString>);
<new void> = <HashChangeEvent>.initHashChangeEvent(<DOMString>,<boolean>);
<new void> = <HashChangeEvent>.initHashChangeEvent(<DOMString>,<boolean>,<boolean>);
<new void> = <HashChangeEvent>.initHashChangeEvent(<DOMString>,<boolean>,<boolean>,<DOMString>);
<new void> = <HashChangeEvent>.initHashChangeEvent(<DOMString>,<boolean>,<boolean>,<DOMString>,<DOMString>);
<new Headers> = new Headers();
<new Headers> = new Headers(<HeadersInit>);
<new void> = <Headers>.append(<ByteString>,<ByteString>);
<new void> = <Headers>.delete(<ByteString>);
<new ByteString> = <Headers>.get(<ByteString>);
<Headers>.has(<ByteString>);
<new void> = <Headers>.set(<ByteString>,<ByteString>);
<new HeadersGuardEnum> = <Headers>.guard;
<Headers>.guard = <HeadersGuardEnum>;
<new unsigned long> = <History>.length;
<new ScrollRestoration> = <History>.scrollRestoration;
<History>.scrollRestoration = <ScrollRestoration>;
<new any> = <History>.state;
<new void> = <History>.go();
<new void> = <History>.go(<long>);
<new void> = <History>.back();
<new void> = <History>.forward();
<new void> = <History>.pushState(<any>,<DOMString>);
<new void> = <History>.pushState(<any>,<DOMString>,<DOMString>);
<new void> = <History>.replaceState(<any>,<DOMString>);
<new void> = <History>.replaceState(<any>,<DOMString>,<DOMString>);
<new unsigned long> = <HTMLAllCollection>.length;
<new Element> = <HTMLAllCollection>(<unsigned long>);
<new union_HTMLCollection1Element_> = <HTMLCollection>;
<new union_HTMLCollection1Element_> = <Element>;
<new union_HTMLCollection1Element_> = <HTMLAllCollection>.namedItem(<DOMString>);
<new union_HTMLCollection1Element_> = <HTMLAllCollection>.item();
<new union_HTMLCollection1Element_> = <HTMLAllCollection>.item(<DOMString>);
!extends HTMLAnchorElement HTMLElement;
<new HTMLElement> = <HTMLAnchorElement>;
<new HTMLAnchorElement> = new HTMLAnchorElement();
<new DOMString> = <HTMLAnchorElement>.target;
<HTMLAnchorElement>.target = <DOMString>;
<new DOMString> = <HTMLAnchorElement>.download;
<HTMLAnchorElement>.download = <DOMString>;
<new DOMString> = <HTMLAnchorElement>.ping;
<HTMLAnchorElement>.ping = <DOMString>;
<new DOMString> = <HTMLAnchorElement>.rel;
<HTMLAnchorElement>.rel = <DOMString>;
<new DOMString> = <HTMLAnchorElement>.referrerPolicy;
<HTMLAnchorElement>.referrerPolicy = <DOMString>;
<new DOMTokenList> = <HTMLAnchorElement>.relList;
<new DOMString> = <HTMLAnchorElement>.hreflang;
<HTMLAnchorElement>.hreflang = <DOMString>;
<new DOMString> = <HTMLAnchorElement>.type;
<HTMLAnchorElement>.type = <DOMString>;
<new DOMString> = <HTMLAnchorElement>.text;
<HTMLAnchorElement>.text = <DOMString>;
<new DOMString> = <HTMLAnchorElement>.coords;
<HTMLAnchorElement>.coords = <DOMString>;
<new DOMString> = <HTMLAnchorElement>.charset;
<HTMLAnchorElement>.charset = <DOMString>;
<new DOMString> = <HTMLAnchorElement>.name;
<HTMLAnchorElement>.name = <DOMString>;
<new DOMString> = <HTMLAnchorElement>.rev;
<HTMLAnchorElement>.rev = <DOMString>;
<new DOMString> = <HTMLAnchorElement>.shape;
<HTMLAnchorElement>.shape = <DOMString>;
!extends HTMLAreaElement HTMLElement;
<new HTMLElement> = <HTMLAreaElement>;
<new HTMLAreaElement> = new HTMLAreaElement();
<new DOMString> = <HTMLAreaElement>.alt;
<HTMLAreaElement>.alt = <DOMString>;
<new DOMString> = <HTMLAreaElement>.coords;
<HTMLAreaElement>.coords = <DOMString>;
<new DOMString> = <HTMLAreaElement>.shape;
<HTMLAreaElement>.shape = <DOMString>;
<new DOMString> = <HTMLAreaElement>.target;
<HTMLAreaElement>.target = <DOMString>;
<new DOMString> = <HTMLAreaElement>.download;
<HTMLAreaElement>.download = <DOMString>;
<new DOMString> = <HTMLAreaElement>.ping;
<HTMLAreaElement>.ping = <DOMString>;
<new DOMString> = <HTMLAreaElement>.rel;
<HTMLAreaElement>.rel = <DOMString>;
<new DOMString> = <HTMLAreaElement>.referrerPolicy;
<HTMLAreaElement>.referrerPolicy = <DOMString>;
<new DOMTokenList> = <HTMLAreaElement>.relList;
<new boolean> = <HTMLAreaElement>.noHref;
<HTMLAreaElement>.noHref = <boolean>;
!extends HTMLAudioElement HTMLMediaElement;
<new HTMLMediaElement> = <HTMLAudioElement>;
<new HTMLAudioElement> = new HTMLAudioElement();
!extends HTMLBaseElement HTMLElement;
<new HTMLElement> = <HTMLBaseElement>;
<new HTMLBaseElement> = new HTMLBaseElement();
<new DOMString> = <HTMLBaseElement>.href;
<HTMLBaseElement>.href = <DOMString>;
<new DOMString> = <HTMLBaseElement>.target;
<HTMLBaseElement>.target = <DOMString>;
!extends HTMLBodyElement HTMLElement;
<new HTMLElement> = <HTMLBodyElement>;
<new HTMLBodyElement> = new HTMLBodyElement();
<new DOMString> = <HTMLBodyElement>.text;
<HTMLBodyElement>.text = <DOMString>;
<new DOMString> = <HTMLBodyElement>.link;
<HTMLBodyElement>.link = <DOMString>;
<new DOMString> = <HTMLBodyElement>.vLink;
<HTMLBodyElement>.vLink = <DOMString>;
<new DOMString> = <HTMLBodyElement>.aLink;
<HTMLBodyElement>.aLink = <DOMString>;
<new DOMString> = <HTMLBodyElement>.bgColor;
<HTMLBodyElement>.bgColor = <DOMString>;
<new DOMString> = <HTMLBodyElement>.background;
<HTMLBodyElement>.background = <DOMString>;
!extends HTMLBRElement HTMLElement;
<new HTMLElement> = <HTMLBRElement>;
<new HTMLBRElement> = new HTMLBRElement();
<new DOMString> = <HTMLBRElement>.clear;
<HTMLBRElement>.clear = <DOMString>;
<new boolean> = <HTMLBRElement>.isPaddingForEmptyEditor;
<new boolean> = <HTMLBRElement>.isPaddingForEmptyLastLine;
!extends HTMLButtonElement HTMLElement;
<new HTMLElement> = <HTMLButtonElement>;
<new HTMLButtonElement> = new HTMLButtonElement();
<new boolean> = <HTMLButtonElement>.autofocus;
<HTMLButtonElement>.autofocus = <boolean>;
<new boolean> = <HTMLButtonElement>.disabled;
<HTMLButtonElement>.disabled = <boolean>;
<new HTMLFormElement> = <HTMLButtonElement>.form;
<new DOMString> = <HTMLButtonElement>.formAction;
<HTMLButtonElement>.formAction = <DOMString>;
<new DOMString> = <HTMLButtonElement>.formEnctype;
<HTMLButtonElement>.formEnctype = <DOMString>;
<new DOMString> = <HTMLButtonElement>.formMethod;
<HTMLButtonElement>.formMethod = <DOMString>;
<new boolean> = <HTMLButtonElement>.formNoValidate;
<HTMLButtonElement>.formNoValidate = <boolean>;
<new DOMString> = <HTMLButtonElement>.formTarget;
<HTMLButtonElement>.formTarget = <DOMString>;
<new DOMString> = <HTMLButtonElement>.name;
<HTMLButtonElement>.name = <DOMString>;
<new DOMString> = <HTMLButtonElement>.type;
<HTMLButtonElement>.type = <DOMString>;
<new DOMString> = <HTMLButtonElement>.value;
<HTMLButtonElement>.value = <DOMString>;
<new boolean> = <HTMLButtonElement>.willValidate;
<new ValidityState> = <HTMLButtonElement>.validity;
<new DOMString> = <HTMLButtonElement>.validationMessage;
<HTMLButtonElement>.checkValidity();
<HTMLButtonElement>.reportValidity();
<new void> = <HTMLButtonElement>.setCustomValidity(<DOMString>);
<new NodeList> = <HTMLButtonElement>.labels;
!extends HTMLCanvasElement HTMLElement;
<new HTMLElement> = <HTMLCanvasElement>;
<new HTMLCanvasElement> = new HTMLCanvasElement();
<new unsigned long> = <HTMLCanvasElement>.width;
<HTMLCanvasElement>.width = <unsigned long>;
<new unsigned long> = <HTMLCanvasElement>.height;
<HTMLCanvasElement>.height = <unsigned long>;
<new nsISupports> = <HTMLCanvasElement>.getContext(<DOMString>);
<new nsISupports> = <HTMLCanvasElement>.getContext(<DOMString>,<any>);
<new DOMString> = <HTMLCanvasElement>.toDataURL();
<new DOMString> = <HTMLCanvasElement>.toDataURL(<DOMString>);
<new DOMString> = <HTMLCanvasElement>.toDataURL(<DOMString>,<any>);
<new void> = <HTMLCanvasElement>.toBlob(<BlobCallback>);
<new void> = <HTMLCanvasElement>.toBlob(<BlobCallback>,<DOMString>);
<new void> = <HTMLCanvasElement>.toBlob(<BlobCallback>,<DOMString>,<any>);
<new boolean> = <HTMLCanvasElement>.mozOpaque;
<HTMLCanvasElement>.mozOpaque = <boolean>;
<new File> = <HTMLCanvasElement>.mozGetAsFile(<DOMString>);
<new File> = <HTMLCanvasElement>.mozGetAsFile(<DOMString>,<DOMString>);
<new nsISupports> = <HTMLCanvasElement>.MozGetIPCContext(<DOMString>);
<new PrintCallback> = <HTMLCanvasElement>.mozPrintCallback;
<HTMLCanvasElement>.mozPrintCallback = <PrintCallback>;
<HTMLCanvasElement>.mozPrintCallback = null;
<new CanvasCaptureMediaStream> = <HTMLCanvasElement>.captureStream();
<new CanvasCaptureMediaStream> = <HTMLCanvasElement>.captureStream(<double>);
<new OffscreenCanvas> = <HTMLCanvasElement>.transferControlToOffscreen();
<new nsISupports> = <MozCanvasPrintState>.context;
<new void> = <MozCanvasPrintState>.done();
<new unsigned long> = <HTMLCollection>.length;
<new Element> = <HTMLCollection>.item(<unsigned long>);
<new Element> = <HTMLCollection>.namedItem(<DOMString>);
!extends HTMLDataElement HTMLElement;
<new HTMLElement> = <HTMLDataElement>;
<new HTMLDataElement> = new HTMLDataElement();
<new DOMString> = <HTMLDataElement>.value;
<HTMLDataElement>.value = <DOMString>;
!extends HTMLDataListElement HTMLElement;
<new HTMLElement> = <HTMLDataListElement>;
<new HTMLDataListElement> = new HTMLDataListElement();
<new HTMLCollection> = <HTMLDataListElement>.options;
!extends HTMLDetailsElement HTMLElement;
<new HTMLElement> = <HTMLDetailsElement>;
<new HTMLDetailsElement> = new HTMLDetailsElement();
<new boolean> = <HTMLDetailsElement>.open;
<HTMLDetailsElement>.open = <boolean>;
!extends HTMLDialogElement HTMLElement;
<new HTMLElement> = <HTMLDialogElement>;
<new HTMLDialogElement> = new HTMLDialogElement();
<new boolean> = <HTMLDialogElement>.open;
<HTMLDialogElement>.open = <boolean>;
<new DOMString> = <HTMLDialogElement>.returnValue;
<HTMLDialogElement>.returnValue = <DOMString>;
<new void> = <HTMLDialogElement>.show();
<new void> = <HTMLDialogElement>.showModal();
<new void> = <HTMLDialogElement>.close();
<new void> = <HTMLDialogElement>.close(<DOMString>);
!extends HTMLDirectoryElement HTMLElement;
<new HTMLElement> = <HTMLDirectoryElement>;
<new HTMLDirectoryElement> = new HTMLDirectoryElement();
<new boolean> = <HTMLDirectoryElement>.compact;
<HTMLDirectoryElement>.compact = <boolean>;
!extends HTMLDivElement HTMLElement;
<new HTMLElement> = <HTMLDivElement>;
<new HTMLDivElement> = new HTMLDivElement();
<new DOMString> = <HTMLDivElement>.align;
<HTMLDivElement>.align = <DOMString>;
!extends HTMLDListElement HTMLElement;
<new HTMLElement> = <HTMLDListElement>;
<new HTMLDListElement> = new HTMLDListElement();
<new boolean> = <HTMLDListElement>.compact;
<HTMLDListElement>.compact = <boolean>;
!extends HTMLDocument Document;
<new Document> = <HTMLDocument>;
<new object> = <HTMLDocument>(<DOMString>);
!extends HTMLElement Element;
<new Element> = <HTMLElement>;
<new HTMLElement> = new HTMLElement();
<new DOMString> = <HTMLElement>.title;
<HTMLElement>.title = <DOMString>;
<new DOMString> = <HTMLElement>.lang;
<HTMLElement>.lang = <DOMString>;
<new DOMString> = <HTMLElement>.dir;
<HTMLElement>.dir = <DOMString>;
<new DOMString> = <HTMLElement>.innerText;
<HTMLElement>.innerText = <DOMString>;
<new boolean> = <HTMLElement>.hidden;
<HTMLElement>.hidden = <boolean>;
<new boolean> = <HTMLElement>.inert;
<HTMLElement>.inert = <boolean>;
<new void> = <HTMLElement>.click();
<new DOMString> = <HTMLElement>.accessKey;
<HTMLElement>.accessKey = <DOMString>;
<new DOMString> = <HTMLElement>.accessKeyLabel;
<new boolean> = <HTMLElement>.draggable;
<HTMLElement>.draggable = <boolean>;
<new DOMString> = <HTMLElement>.contentEditable;
<HTMLElement>.contentEditable = <DOMString>;
<new boolean> = <HTMLElement>.isContentEditable;
<new HTMLMenuElement> = <HTMLElement>.contextMenu;
<new boolean> = <HTMLElement>.spellcheck;
<HTMLElement>.spellcheck = <boolean>;
<new DOMString> = <HTMLElement>.inputMode;
<HTMLElement>.inputMode = <DOMString>;
<new DOMString> = <HTMLElement>.enterKeyHint;
<HTMLElement>.enterKeyHint = <DOMString>;
<new DOMString> = <HTMLElement>.autocapitalize;
<HTMLElement>.autocapitalize = <DOMString>;
<new DOMString> = <HTMLElement>.nonce;
<HTMLElement>.nonce = <DOMString>;
<new ElementInternals> = <HTMLElement>.attachInternals();
<new Element> = <HTMLElement>.offsetParent;
<new long> = <HTMLElement>.offsetTop;
<new long> = <HTMLElement>.offsetLeft;
<new long> = <HTMLElement>.offsetWidth;
<new long> = <HTMLElement>.offsetHeight;
!extends HTMLUnknownElement HTMLElement;
<new HTMLElement> = <HTMLUnknownElement>;
!extends HTMLEmbedElement HTMLElement;
<new HTMLElement> = <HTMLEmbedElement>;
<new HTMLEmbedElement> = new HTMLEmbedElement();
<new DOMString> = <HTMLEmbedElement>.src;
<HTMLEmbedElement>.src = <DOMString>;
<new DOMString> = <HTMLEmbedElement>.type;
<HTMLEmbedElement>.type = <DOMString>;
<new DOMString> = <HTMLEmbedElement>.width;
<HTMLEmbedElement>.width = <DOMString>;
<new DOMString> = <HTMLEmbedElement>.height;
<HTMLEmbedElement>.height = <DOMString>;
<new DOMString> = <HTMLEmbedElement>.align;
<HTMLEmbedElement>.align = <DOMString>;
<new DOMString> = <HTMLEmbedElement>.name;
<HTMLEmbedElement>.name = <DOMString>;
<new Document> = <HTMLEmbedElement>.getSVGDocument();
!extends HTMLFieldSetElement HTMLElement;
<new HTMLElement> = <HTMLFieldSetElement>;
<new HTMLFieldSetElement> = new HTMLFieldSetElement();
<new boolean> = <HTMLFieldSetElement>.disabled;
<HTMLFieldSetElement>.disabled = <boolean>;
<new HTMLFormElement> = <HTMLFieldSetElement>.form;
<new DOMString> = <HTMLFieldSetElement>.name;
<HTMLFieldSetElement>.name = <DOMString>;
<new DOMString> = <HTMLFieldSetElement>.type;
<new HTMLCollection> = <HTMLFieldSetElement>.elements;
<new boolean> = <HTMLFieldSetElement>.willValidate;
<new ValidityState> = <HTMLFieldSetElement>.validity;
<new DOMString> = <HTMLFieldSetElement>.validationMessage;
<HTMLFieldSetElement>.checkValidity();
<HTMLFieldSetElement>.reportValidity();
<new void> = <HTMLFieldSetElement>.setCustomValidity(<DOMString>);
!extends HTMLFontElement HTMLElement;
<new HTMLElement> = <HTMLFontElement>;
<new HTMLFontElement> = new HTMLFontElement();
<new DOMString> = <HTMLFontElement>.color;
<HTMLFontElement>.color = <DOMString>;
<new DOMString> = <HTMLFontElement>.face;
<HTMLFontElement>.face = <DOMString>;
<new DOMString> = <HTMLFontElement>.size;
<HTMLFontElement>.size = <DOMString>;
!extends HTMLFormControlsCollection HTMLCollection;
<new HTMLCollection> = <HTMLFormControlsCollection>;
<new union_RadioNodeList1Element_> = <RadioNodeList>;
<new union_RadioNodeList1Element_> = <Element>;
<new union_RadioNodeList1Element_> = <HTMLFormControlsCollection>.namedItem(<DOMString>);
!extends HTMLFormElement HTMLElement;
<new HTMLElement> = <HTMLFormElement>;
<new HTMLFormElement> = new HTMLFormElement();
<new DOMString> = <HTMLFormElement>.acceptCharset;
<HTMLFormElement>.acceptCharset = <DOMString>;
<new DOMString> = <HTMLFormElement>.action;
<HTMLFormElement>.action = <DOMString>;
<new DOMString> = <HTMLFormElement>.autocomplete;
<HTMLFormElement>.autocomplete = <DOMString>;
<new DOMString> = <HTMLFormElement>.enctype;
<HTMLFormElement>.enctype = <DOMString>;
<new DOMString> = <HTMLFormElement>.encoding;
<HTMLFormElement>.encoding = <DOMString>;
<new DOMString> = <HTMLFormElement>.method;
<HTMLFormElement>.method = <DOMString>;
<new DOMString> = <HTMLFormElement>.name;
<HTMLFormElement>.name = <DOMString>;
<new boolean> = <HTMLFormElement>.noValidate;
<HTMLFormElement>.noValidate = <boolean>;
<new DOMString> = <HTMLFormElement>.target;
<HTMLFormElement>.target = <DOMString>;
<new HTMLCollection> = <HTMLFormElement>.elements;
<new long> = <HTMLFormElement>.length;
<new Element> = <HTMLFormElement>(<unsigned long>);
<new nsISupports> = <HTMLFormElement>(<DOMString>);
<new void> = <HTMLFormElement>.submit();
<new void> = <HTMLFormElement>.requestSubmit();
<new void> = <HTMLFormElement>.requestSubmit(<HTMLElement>);
<new void> = <HTMLFormElement>.reset();
<HTMLFormElement>.checkValidity();
<HTMLFormElement>.reportValidity();
!extends HTMLFrameElement HTMLElement;
<new HTMLElement> = <HTMLFrameElement>;
<new HTMLFrameElement> = new HTMLFrameElement();
<new DOMString> = <HTMLFrameElement>.name;
<HTMLFrameElement>.name = <DOMString>;
<new DOMString> = <HTMLFrameElement>.scrolling;
<HTMLFrameElement>.scrolling = <DOMString>;
<new DOMString> = <HTMLFrameElement>.src;
<HTMLFrameElement>.src = <DOMString>;
<new DOMString> = <HTMLFrameElement>.frameBorder;
<HTMLFrameElement>.frameBorder = <DOMString>;
<new DOMString> = <HTMLFrameElement>.longDesc;
<HTMLFrameElement>.longDesc = <DOMString>;
<new boolean> = <HTMLFrameElement>.noResize;
<HTMLFrameElement>.noResize = <boolean>;
<new Document> = <HTMLFrameElement>.contentDocument;
<new WindowProxy> = <HTMLFrameElement>.contentWindow;
<new DOMString> = <HTMLFrameElement>.marginHeight;
<HTMLFrameElement>.marginHeight = <DOMString>;
<new DOMString> = <HTMLFrameElement>.marginWidth;
<HTMLFrameElement>.marginWidth = <DOMString>;
!extends HTMLFrameSetElement HTMLElement;
<new HTMLElement> = <HTMLFrameSetElement>;
<new HTMLFrameSetElement> = new HTMLFrameSetElement();
<new DOMString> = <HTMLFrameSetElement>.cols;
<HTMLFrameSetElement>.cols = <DOMString>;
<new DOMString> = <HTMLFrameSetElement>.rows;
<HTMLFrameSetElement>.rows = <DOMString>;
!extends HTMLHeadElement HTMLElement;
<new HTMLElement> = <HTMLHeadElement>;
<new HTMLHeadElement> = new HTMLHeadElement();
!extends HTMLHeadingElement HTMLElement;
<new HTMLElement> = <HTMLHeadingElement>;
<new HTMLHeadingElement> = new HTMLHeadingElement();
<new DOMString> = <HTMLHeadingElement>.align;
<HTMLHeadingElement>.align = <DOMString>;
!extends HTMLHRElement HTMLElement;
<new HTMLElement> = <HTMLHRElement>;
<new HTMLHRElement> = new HTMLHRElement();
<new DOMString> = <HTMLHRElement>.align;
<HTMLHRElement>.align = <DOMString>;
<new DOMString> = <HTMLHRElement>.color;
<HTMLHRElement>.color = <DOMString>;
<new boolean> = <HTMLHRElement>.noShade;
<HTMLHRElement>.noShade = <boolean>;
<new DOMString> = <HTMLHRElement>.size;
<HTMLHRElement>.size = <DOMString>;
<new DOMString> = <HTMLHRElement>.width;
<HTMLHRElement>.width = <DOMString>;
!extends HTMLHtmlElement HTMLElement;
<new HTMLElement> = <HTMLHtmlElement>;
<new HTMLHtmlElement> = new HTMLHtmlElement();
<new DOMString> = <HTMLHtmlElement>.version;
<HTMLHtmlElement>.version = <DOMString>;
!extends HTMLIFrameElement HTMLElement;
<new HTMLElement> = <HTMLIFrameElement>;
<new HTMLIFrameElement> = new HTMLIFrameElement();
<new DOMString> = <HTMLIFrameElement>.src;
<HTMLIFrameElement>.src = <DOMString>;
<new DOMString> = <HTMLIFrameElement>.srcdoc;
<HTMLIFrameElement>.srcdoc = <DOMString>;
<new DOMString> = <HTMLIFrameElement>.name;
<HTMLIFrameElement>.name = <DOMString>;
<new DOMTokenList> = <HTMLIFrameElement>.sandbox;
<new boolean> = <HTMLIFrameElement>.allowFullscreen;
<HTMLIFrameElement>.allowFullscreen = <boolean>;
<new DOMString> = <HTMLIFrameElement>.width;
<HTMLIFrameElement>.width = <DOMString>;
<new DOMString> = <HTMLIFrameElement>.height;
<HTMLIFrameElement>.height = <DOMString>;
<new DOMString> = <HTMLIFrameElement>.referrerPolicy;
<HTMLIFrameElement>.referrerPolicy = <DOMString>;
<new Document> = <HTMLIFrameElement>.contentDocument;
<new WindowProxy> = <HTMLIFrameElement>.contentWindow;
<new DOMString> = <HTMLIFrameElement>.align;
<HTMLIFrameElement>.align = <DOMString>;
<new DOMString> = <HTMLIFrameElement>.scrolling;
<HTMLIFrameElement>.scrolling = <DOMString>;
<new DOMString> = <HTMLIFrameElement>.frameBorder;
<HTMLIFrameElement>.frameBorder = <DOMString>;
<new DOMString> = <HTMLIFrameElement>.longDesc;
<HTMLIFrameElement>.longDesc = <DOMString>;
<new DOMString> = <HTMLIFrameElement>.marginHeight;
<HTMLIFrameElement>.marginHeight = <DOMString>;
<new DOMString> = <HTMLIFrameElement>.marginWidth;
<HTMLIFrameElement>.marginWidth = <DOMString>;
<new Document> = <HTMLIFrameElement>.getSVGDocument();
<new FeaturePolicy> = <HTMLIFrameElement>.featurePolicy;
<new DOMString> = <HTMLIFrameElement>.allow;
<HTMLIFrameElement>.allow = <DOMString>;
!extends HTMLImageElement HTMLElement;
<new HTMLElement> = <HTMLImageElement>;
<new HTMLImageElement> = new HTMLImageElement();
<new DOMString> = <HTMLImageElement>.alt;
<HTMLImageElement>.alt = <DOMString>;
<new DOMString> = <HTMLImageElement>.src;
<HTMLImageElement>.src = <DOMString>;
<new DOMString> = <HTMLImageElement>.srcset;
<HTMLImageElement>.srcset = <DOMString>;
<new DOMString> = <HTMLImageElement>.crossOrigin;
<HTMLImageElement>.crossOrigin = <DOMString>;
<HTMLImageElement>.crossOrigin = null;
<new DOMString> = <HTMLImageElement>.useMap;
<HTMLImageElement>.useMap = <DOMString>;
<new DOMString> = <HTMLImageElement>.referrerPolicy;
<HTMLImageElement>.referrerPolicy = <DOMString>;
<new boolean> = <HTMLImageElement>.isMap;
<HTMLImageElement>.isMap = <boolean>;
<new unsigned long> = <HTMLImageElement>.width;
<HTMLImageElement>.width = <unsigned long>;
<new unsigned long> = <HTMLImageElement>.height;
<HTMLImageElement>.height = <unsigned long>;
<new DOMString> = <HTMLImageElement>.decoding;
<HTMLImageElement>.decoding = <DOMString>;
<new DOMString> = <HTMLImageElement>.loading;
<HTMLImageElement>.loading = <DOMString>;
<new unsigned long> = <HTMLImageElement>.naturalWidth;
<new unsigned long> = <HTMLImageElement>.naturalHeight;
<new boolean> = <HTMLImageElement>.complete;
<new Promise_void_> = <HTMLImageElement>.decode();
<new DOMString> = <HTMLImageElement>.name;
<HTMLImageElement>.name = <DOMString>;
<new DOMString> = <HTMLImageElement>.align;
<HTMLImageElement>.align = <DOMString>;
<new unsigned long> = <HTMLImageElement>.hspace;
<HTMLImageElement>.hspace = <unsigned long>;
<new unsigned long> = <HTMLImageElement>.vspace;
<HTMLImageElement>.vspace = <unsigned long>;
<new DOMString> = <HTMLImageElement>.longDesc;
<HTMLImageElement>.longDesc = <DOMString>;
<new DOMString> = <HTMLImageElement>.border;
<HTMLImageElement>.border = <DOMString>;
<new DOMString> = <HTMLImageElement>.sizes;
<HTMLImageElement>.sizes = <DOMString>;
<new DOMString> = <HTMLImageElement>.currentSrc;
<new DOMString> = <HTMLImageElement>.lowsrc;
<HTMLImageElement>.lowsrc = <DOMString>;
<new long> = <HTMLImageElement>.x;
<new long> = <HTMLImageElement>.y;
!extends HTMLInputElement HTMLElement;
<new HTMLElement> = <HTMLInputElement>;
<new HTMLInputElement> = new HTMLInputElement();
<new DOMString> = <HTMLInputElement>.accept;
<HTMLInputElement>.accept = <DOMString>;
<new DOMString> = <HTMLInputElement>.alt;
<HTMLInputElement>.alt = <DOMString>;
<new DOMString> = <HTMLInputElement>.autocomplete;
<HTMLInputElement>.autocomplete = <DOMString>;
<new boolean> = <HTMLInputElement>.autofocus;
<HTMLInputElement>.autofocus = <boolean>;
<new DOMString> = <HTMLInputElement>.capture;
<HTMLInputElement>.capture = <DOMString>;
<new boolean> = <HTMLInputElement>.defaultChecked;
<HTMLInputElement>.defaultChecked = <boolean>;
<new boolean> = <HTMLInputElement>.checked;
<HTMLInputElement>.checked = <boolean>;
<new boolean> = <HTMLInputElement>.disabled;
<HTMLInputElement>.disabled = <boolean>;
<new HTMLFormElement> = <HTMLInputElement>.form;
<new FileList> = <HTMLInputElement>.files;
<HTMLInputElement>.files = <FileList>;
<HTMLInputElement>.files = null;
<new DOMString> = <HTMLInputElement>.formAction;
<HTMLInputElement>.formAction = <DOMString>;
<new DOMString> = <HTMLInputElement>.formEnctype;
<HTMLInputElement>.formEnctype = <DOMString>;
<new DOMString> = <HTMLInputElement>.formMethod;
<HTMLInputElement>.formMethod = <DOMString>;
<new boolean> = <HTMLInputElement>.formNoValidate;
<HTMLInputElement>.formNoValidate = <boolean>;
<new DOMString> = <HTMLInputElement>.formTarget;
<HTMLInputElement>.formTarget = <DOMString>;
<new unsigned long> = <HTMLInputElement>.height;
<HTMLInputElement>.height = <unsigned long>;
<new boolean> = <HTMLInputElement>.indeterminate;
<HTMLInputElement>.indeterminate = <boolean>;
<new HTMLElement> = <HTMLInputElement>.list;
<new DOMString> = <HTMLInputElement>.max;
<HTMLInputElement>.max = <DOMString>;
<new long> = <HTMLInputElement>.maxLength;
<HTMLInputElement>.maxLength = <long>;
<new DOMString> = <HTMLInputElement>.min;
<HTMLInputElement>.min = <DOMString>;
<new long> = <HTMLInputElement>.minLength;
<HTMLInputElement>.minLength = <long>;
<new boolean> = <HTMLInputElement>.multiple;
<HTMLInputElement>.multiple = <boolean>;
<new DOMString> = <HTMLInputElement>.name;
<HTMLInputElement>.name = <DOMString>;
<new DOMString> = <HTMLInputElement>.pattern;
<HTMLInputElement>.pattern = <DOMString>;
<new DOMString> = <HTMLInputElement>.placeholder;
<HTMLInputElement>.placeholder = <DOMString>;
<new boolean> = <HTMLInputElement>.readOnly;
<HTMLInputElement>.readOnly = <boolean>;
<new boolean> = <HTMLInputElement>.required;
<HTMLInputElement>.required = <boolean>;
<new unsigned long> = <HTMLInputElement>.size;
<HTMLInputElement>.size = <unsigned long>;
<new DOMString> = <HTMLInputElement>.src;
<HTMLInputElement>.src = <DOMString>;
<new DOMString> = <HTMLInputElement>.step;
<HTMLInputElement>.step = <DOMString>;
<new DOMString> = <HTMLInputElement>.type;
<HTMLInputElement>.type = <DOMString>;
<new DOMString> = <HTMLInputElement>.defaultValue;
<HTMLInputElement>.defaultValue = <DOMString>;
<new DOMString> = <HTMLInputElement>.value;
<HTMLInputElement>.value = <DOMString>;
<new object> = <HTMLInputElement>.valueAsDate;
<HTMLInputElement>.valueAsDate = <object>;
<HTMLInputElement>.valueAsDate = null;
<new unrestricted double> = <HTMLInputElement>.valueAsNumber;
<HTMLInputElement>.valueAsNumber = <unrestricted double>;
<new unsigned long> = <HTMLInputElement>.width;
<HTMLInputElement>.width = <unsigned long>;
<new void> = <HTMLInputElement>.stepUp();
<new void> = <HTMLInputElement>.stepUp(<long>);
<new void> = <HTMLInputElement>.stepDown();
<new void> = <HTMLInputElement>.stepDown(<long>);
<new boolean> = <HTMLInputElement>.willValidate;
<new ValidityState> = <HTMLInputElement>.validity;
<new DOMString> = <HTMLInputElement>.validationMessage;
<HTMLInputElement>.checkValidity();
<HTMLInputElement>.reportValidity();
<new void> = <HTMLInputElement>.setCustomValidity(<DOMString>);
<new NodeList> = <HTMLInputElement>.labels;
<new void> = <HTMLInputElement>.select();
<new unsigned long> = <HTMLInputElement>.selectionStart;
<HTMLInputElement>.selectionStart = <unsigned long>;
<HTMLInputElement>.selectionStart = null;
<new unsigned long> = <HTMLInputElement>.selectionEnd;
<HTMLInputElement>.selectionEnd = <unsigned long>;
<HTMLInputElement>.selectionEnd = null;
<new DOMString> = <HTMLInputElement>.selectionDirection;
<HTMLInputElement>.selectionDirection = <DOMString>;
<HTMLInputElement>.selectionDirection = null;
<new void> = <HTMLInputElement>.setRangeText(<DOMString>);
<new void> = <HTMLInputElement>.setRangeText(<DOMString>,<unsigned long>,<unsigned long>);
<new void> = <HTMLInputElement>.setRangeText(<DOMString>,<unsigned long>,<unsigned long>,<SelectionMode>);
<new void> = <HTMLInputElement>.setSelectionRange(<unsigned long>,<unsigned long>);
<new void> = <HTMLInputElement>.setSelectionRange(<unsigned long>,<unsigned long>,<DOMString>);
<new DOMString> = <HTMLInputElement>.align;
<HTMLInputElement>.align = <DOMString>;
<new DOMString> = <HTMLInputElement>.useMap;
<HTMLInputElement>.useMap = <DOMString>;
<new XULControllers> = <HTMLInputElement>.controllers;
<new long> = <HTMLInputElement>.textLength;
<new sequence_DOMString_> = <HTMLInputElement>.mozGetFileNameArray();
<new void> = <HTMLInputElement>.mozSetFileNameArray(<sequence_DOMString_>);
<new void> = <HTMLInputElement>.mozSetFileArray(<sequence_File_>);
<new void> = <HTMLInputElement>.mozSetDirectory(<DOMString>);
<new void> = <HTMLInputElement>.mozSetDndFilesAndDirectories(<sequence_union_File1Directory__>);
<HTMLInputElement>.mozIsTextField(<boolean>);
<new boolean> = <HTMLInputElement>.hasBeenTypePassword;
<new DOMString> = <HTMLInputElement>.previewValue;
<HTMLInputElement>.previewValue = <DOMString>;
<new AutocompleteInfo> = <HTMLInputElement>.getAutocompleteInfo();
<new boolean> = <HTMLInputElement>.allowdirs;
<HTMLInputElement>.allowdirs = <boolean>;
<new boolean> = <HTMLInputElement>.isFilesAndDirectoriesSupported;
<new Promise_sequence_union_File1Directory___> = <HTMLInputElement>.getFilesAndDirectories();
<new Promise_sequence_File__> = <HTMLInputElement>.getFiles();
<new Promise_sequence_File__> = <HTMLInputElement>.getFiles(<boolean>);
<new void> = <HTMLInputElement>.chooseDirectory();
<new sequence_FileSystemEntry_> = [<FileSystemEntry>];
<new FileSystemEntry> = <sequence_FileSystemEntry_>[0];
<new sequence_FileSystemEntry_> = <HTMLInputElement>.webkitEntries;
<new boolean> = <HTMLInputElement>.webkitdirectory;
<HTMLInputElement>.webkitdirectory = <boolean>;
<new DateTimeValue> = <HTMLInputElement>.getDateTimeInputBoxValue();
<new Element> = <HTMLInputElement>.dateTimeBoxElement;
<new double> = <HTMLInputElement>.getMinimum();
<new double> = <HTMLInputElement>.getMaximum();
<new void> = <HTMLInputElement>.openDateTimePicker();
<new void> = <HTMLInputElement>.openDateTimePicker(<DateTimeValue>);
<new void> = <HTMLInputElement>.updateDateTimePicker();
<new void> = <HTMLInputElement>.updateDateTimePicker(<DateTimeValue>);
<new void> = <HTMLInputElement>.closeDateTimePicker();
<new void> = <HTMLInputElement>.setFocusState(<boolean>);
<new void> = <HTMLInputElement>.updateValidityState();
<new double> = <HTMLInputElement>.getStep();
<new double> = <HTMLInputElement>.getStepBase();
!extends HTMLLabelElement HTMLElement;
<new HTMLElement> = <HTMLLabelElement>;
<new HTMLLabelElement> = new HTMLLabelElement();
<new HTMLFormElement> = <HTMLLabelElement>.form;
<new DOMString> = <HTMLLabelElement>.htmlFor;
<HTMLLabelElement>.htmlFor = <DOMString>;
<new HTMLElement> = <HTMLLabelElement>.control;
!extends HTMLLegendElement HTMLElement;
<new HTMLElement> = <HTMLLegendElement>;
<new HTMLLegendElement> = new HTMLLegendElement();
<new HTMLFormElement> = <HTMLLegendElement>.form;
<new DOMString> = <HTMLLegendElement>.align;
<HTMLLegendElement>.align = <DOMString>;
!extends HTMLLIElement HTMLElement;
<new HTMLElement> = <HTMLLIElement>;
<new HTMLLIElement> = new HTMLLIElement();
<new long> = <HTMLLIElement>.value;
<HTMLLIElement>.value = <long>;
<new DOMString> = <HTMLLIElement>.type;
<HTMLLIElement>.type = <DOMString>;
!extends HTMLLinkElement HTMLElement;
<new HTMLElement> = <HTMLLinkElement>;
<new HTMLLinkElement> = new HTMLLinkElement();
<new boolean> = <HTMLLinkElement>.disabled;
<HTMLLinkElement>.disabled = <boolean>;
<new DOMString> = <HTMLLinkElement>.href;
<HTMLLinkElement>.href = <DOMString>;
<new DOMString> = <HTMLLinkElement>.crossOrigin;
<HTMLLinkElement>.crossOrigin = <DOMString>;
<HTMLLinkElement>.crossOrigin = null;
<new DOMString> = <HTMLLinkElement>.rel;
<HTMLLinkElement>.rel = <DOMString>;
<new DOMTokenList> = <HTMLLinkElement>.relList;
<new DOMString> = <HTMLLinkElement>.media;
<HTMLLinkElement>.media = <DOMString>;
<new DOMString> = <HTMLLinkElement>.hreflang;
<HTMLLinkElement>.hreflang = <DOMString>;
<new DOMString> = <HTMLLinkElement>.type;
<HTMLLinkElement>.type = <DOMString>;
<new DOMString> = <HTMLLinkElement>.referrerPolicy;
<HTMLLinkElement>.referrerPolicy = <DOMString>;
<new DOMTokenList> = <HTMLLinkElement>.sizes;
<new USVString> = <HTMLLinkElement>.imageSrcset;
<HTMLLinkElement>.imageSrcset = <USVString>;
<new USVString> = <HTMLLinkElement>.imageSizes;
<HTMLLinkElement>.imageSizes = <USVString>;
<new DOMString> = <HTMLLinkElement>.charset;
<HTMLLinkElement>.charset = <DOMString>;
<new DOMString> = <HTMLLinkElement>.rev;
<HTMLLinkElement>.rev = <DOMString>;
<new DOMString> = <HTMLLinkElement>.target;
<HTMLLinkElement>.target = <DOMString>;
<new DOMString> = <HTMLLinkElement>.integrity;
<HTMLLinkElement>.integrity = <DOMString>;
<new DOMString> = <HTMLLinkElement>.as;
<HTMLLinkElement>.as = <DOMString>;
!extends HTMLMapElement HTMLElement;
<new HTMLElement> = <HTMLMapElement>;
<new HTMLMapElement> = new HTMLMapElement();
<new DOMString> = <HTMLMapElement>.name;
<HTMLMapElement>.name = <DOMString>;
<new HTMLCollection> = <HTMLMapElement>.areas;
!extends HTMLMarqueeElement HTMLElement;
<new HTMLElement> = <HTMLMarqueeElement>;
<new HTMLMarqueeElement> = new HTMLMarqueeElement();
<new DOMString> = <HTMLMarqueeElement>.behavior;
<HTMLMarqueeElement>.behavior = <DOMString>;
<new DOMString> = <HTMLMarqueeElement>.bgColor;
<HTMLMarqueeElement>.bgColor = <DOMString>;
<new DOMString> = <HTMLMarqueeElement>.direction;
<HTMLMarqueeElement>.direction = <DOMString>;
<new DOMString> = <HTMLMarqueeElement>.height;
<HTMLMarqueeElement>.height = <DOMString>;
<new unsigned long> = <HTMLMarqueeElement>.hspace;
<HTMLMarqueeElement>.hspace = <unsigned long>;
<new long> = <HTMLMarqueeElement>.loop;
<HTMLMarqueeElement>.loop = <long>;
<new unsigned long> = <HTMLMarqueeElement>.scrollAmount;
<HTMLMarqueeElement>.scrollAmount = <unsigned long>;
<new unsigned long> = <HTMLMarqueeElement>.scrollDelay;
<HTMLMarqueeElement>.scrollDelay = <unsigned long>;
<new boolean> = <HTMLMarqueeElement>.trueSpeed;
<HTMLMarqueeElement>.trueSpeed = <boolean>;
<new unsigned long> = <HTMLMarqueeElement>.vspace;
<HTMLMarqueeElement>.vspace = <unsigned long>;
<new DOMString> = <HTMLMarqueeElement>.width;
<HTMLMarqueeElement>.width = <DOMString>;
<new EventHandler> = <HTMLMarqueeElement>.onbounce;
<HTMLMarqueeElement>.onbounce = <EventHandler>;
<new EventHandler> = <HTMLMarqueeElement>.onfinish;
<HTMLMarqueeElement>.onfinish = <EventHandler>;
<new EventHandler> = <HTMLMarqueeElement>.onstart;
<HTMLMarqueeElement>.onstart = <EventHandler>;
<new void> = <HTMLMarqueeElement>.start();
<new void> = <HTMLMarqueeElement>.stop();
!extends HTMLMediaElement HTMLElement;
<new HTMLElement> = <HTMLMediaElement>;
<new MediaError> = <HTMLMediaElement>.error;
<new DOMString> = <HTMLMediaElement>.src;
<HTMLMediaElement>.src = <DOMString>;
<new DOMString> = <HTMLMediaElement>.currentSrc;
<new DOMString> = <HTMLMediaElement>.crossOrigin;
<HTMLMediaElement>.crossOrigin = <DOMString>;
<HTMLMediaElement>.crossOrigin = null;
<new unsigned short> = <HTMLMediaElement>.NETWORK_EMPTY;
<new unsigned short> = <HTMLMediaElement>.NETWORK_IDLE;
<new unsigned short> = <HTMLMediaElement>.NETWORK_LOADING;
<new unsigned short> = <HTMLMediaElement>.NETWORK_NO_SOURCE;
<new unsigned short> = <HTMLMediaElement>.networkState;
<new DOMString> = <HTMLMediaElement>.preload;
<HTMLMediaElement>.preload = <DOMString>;
<new TimeRanges> = <HTMLMediaElement>.buffered;
<new void> = <HTMLMediaElement>.load();
<new DOMString> = <HTMLMediaElement>.canPlayType(<DOMString>);
<new unsigned short> = <HTMLMediaElement>.HAVE_NOTHING;
<new unsigned short> = <HTMLMediaElement>.HAVE_METADATA;
<new unsigned short> = <HTMLMediaElement>.HAVE_CURRENT_DATA;
<new unsigned short> = <HTMLMediaElement>.HAVE_FUTURE_DATA;
<new unsigned short> = <HTMLMediaElement>.HAVE_ENOUGH_DATA;
<new unsigned short> = <HTMLMediaElement>.readyState;
<new boolean> = <HTMLMediaElement>.seeking;
<new double> = <HTMLMediaElement>.currentTime;
<HTMLMediaElement>.currentTime = <double>;
<new void> = <HTMLMediaElement>.fastSeek(<double>);
<new unrestricted double> = <HTMLMediaElement>.duration;
<new boolean> = <HTMLMediaElement>.isEncrypted;
<new boolean> = <HTMLMediaElement>.paused;
<new double> = <HTMLMediaElement>.defaultPlaybackRate;
<HTMLMediaElement>.defaultPlaybackRate = <double>;
<new double> = <HTMLMediaElement>.playbackRate;
<HTMLMediaElement>.playbackRate = <double>;
<new TimeRanges> = <HTMLMediaElement>.played;
<new TimeRanges> = <HTMLMediaElement>.seekable;
<new boolean> = <HTMLMediaElement>.ended;
<new boolean> = <HTMLMediaElement>.autoplay;
<HTMLMediaElement>.autoplay = <boolean>;
<new boolean> = <HTMLMediaElement>.loop;
<HTMLMediaElement>.loop = <boolean>;
<new Promise_void_> = <HTMLMediaElement>.play();
<new void> = <HTMLMediaElement>.pause();
<new boolean> = <HTMLMediaElement>.controls;
<HTMLMediaElement>.controls = <boolean>;
<new double> = <HTMLMediaElement>.volume;
<HTMLMediaElement>.volume = <double>;
<new boolean> = <HTMLMediaElement>.muted;
<HTMLMediaElement>.muted = <boolean>;
<new boolean> = <HTMLMediaElement>.defaultMuted;
<HTMLMediaElement>.defaultMuted = <boolean>;
<new AudioTrackList> = <HTMLMediaElement>.audioTracks;
<new VideoTrackList> = <HTMLMediaElement>.videoTracks;
<new TextTrackList> = <HTMLMediaElement>.textTracks;
<new TextTrack> = <HTMLMediaElement>.addTextTrack(<TextTrackKind>);
<new TextTrack> = <HTMLMediaElement>.addTextTrack(<TextTrackKind>,<DOMString>);
<new TextTrack> = <HTMLMediaElement>.addTextTrack(<TextTrackKind>,<DOMString>,<DOMString>);
<new MediaSource> = <HTMLMediaElement>.mozMediaSourceObject;
<new Promise_HTMLMediaElementDebugInfo_> = new Promise(function(x){console.log("ok")});
<new Promise_HTMLMediaElementDebugInfo_> = <HTMLMediaElement>.mozRequestDebugInfo();
<new void> = <HTMLMediaElement>.mozEnableDebugLog();
<new Promise_DOMString_> = <HTMLMediaElement>.mozRequestDebugLog();
<new MediaStream> = <HTMLMediaElement>.srcObject;
<HTMLMediaElement>.srcObject = <MediaStream>;
<HTMLMediaElement>.srcObject = null;
<new boolean> = <HTMLMediaElement>.mozPreservesPitch;
<HTMLMediaElement>.mozPreservesPitch = <boolean>;
<new boolean> = <HTMLMediaElement>.mozAllowCasting;
<HTMLMediaElement>.mozAllowCasting = <boolean>;
<new boolean> = <HTMLMediaElement>.mozIsCasting;
<HTMLMediaElement>.mozIsCasting = <boolean>;
<new MediaStream> = <HTMLMediaElement>.mozCaptureStream();
<new MediaStream> = <HTMLMediaElement>.mozCaptureStreamUntilEnded();
<new boolean> = <HTMLMediaElement>.mozAudioCaptured;
<new object> = <HTMLMediaElement>.mozGetMetadata();
<new double> = <HTMLMediaElement>.mozFragmentEnd;
<new MediaKeys> = <HTMLMediaElement>.mediaKeys;
<new Promise_void_> = <HTMLMediaElement>.setMediaKeys(<MediaKeys>);
<new EventHandler> = <HTMLMediaElement>.onencrypted;
<HTMLMediaElement>.onencrypted = <EventHandler>;
<new EventHandler> = <HTMLMediaElement>.onwaitingforkey;
<HTMLMediaElement>.onwaitingforkey = <EventHandler>;
<new double> = <HTMLMediaElement>.computedVolume;
<new boolean> = <HTMLMediaElement>.computedMuted;
<new boolean> = <HTMLMediaElement>.isSuspendedByInactiveDocOrDocShell;
<new Promise_void_> = <HTMLMediaElement>.seekToNextFrame();
<new void> = <HTMLMediaElement>.setVisible(<boolean>);
<HTMLMediaElement>.hasSuspendTaint();
<new boolean> = <HTMLMediaElement>.isInViewPort;
<new boolean> = <HTMLMediaElement>.isVideoDecodingSuspended;
<new double> = <HTMLMediaElement>.totalVideoPlayTime;
<new double> = <HTMLMediaElement>.visiblePlayTime;
<new double> = <HTMLMediaElement>.invisiblePlayTime;
<new double> = <HTMLMediaElement>.videoDecodeSuspendedTime;
<new double> = <HTMLMediaElement>.totalAudioPlayTime;
<new double> = <HTMLMediaElement>.audiblePlayTime;
<new double> = <HTMLMediaElement>.inaudiblePlayTime;
<new double> = <HTMLMediaElement>.mutedPlayTime;
<new void> = <HTMLMediaElement>.setFormatDiagnosticsReportForMimeType(<DOMString>,<DecoderDoctorReportType>);
<new void> = <HTMLMediaElement>.setDecodeError(<DOMString>);
<new void> = <HTMLMediaElement>.setAudioSinkFailedStartup();
<new DOMString> = <HTMLMediaElement>.sinkId;
<new Promise_void_> = <HTMLMediaElement>.setSinkId(<DOMString>);
<new boolean> = <HTMLMediaElement>.allowedToPlay;
!extends HTMLMenuElement HTMLElement;
<new HTMLElement> = <HTMLMenuElement>;
<new HTMLMenuElement> = new HTMLMenuElement();
<new DOMString> = <HTMLMenuElement>.type;
<HTMLMenuElement>.type = <DOMString>;
<new DOMString> = <HTMLMenuElement>.label;
<HTMLMenuElement>.label = <DOMString>;
<new boolean> = <HTMLMenuElement>.compact;
<HTMLMenuElement>.compact = <boolean>;
<new void> = <HTMLMenuElement>.sendShowEvent();
<new MenuBuilder> = <HTMLMenuElement>.createBuilder();
<new void> = <HTMLMenuElement>.build(<MenuBuilder>);
!extends HTMLMenuItemElement HTMLElement;
<new HTMLElement> = <HTMLMenuItemElement>;
<new HTMLMenuItemElement> = new HTMLMenuItemElement();
<new DOMString> = <HTMLMenuItemElement>.type;
<HTMLMenuItemElement>.type = <DOMString>;
<new DOMString> = <HTMLMenuItemElement>.label;
<HTMLMenuItemElement>.label = <DOMString>;
<new DOMString> = <HTMLMenuItemElement>.icon;
<HTMLMenuItemElement>.icon = <DOMString>;
<new boolean> = <HTMLMenuItemElement>.disabled;
<HTMLMenuItemElement>.disabled = <boolean>;
<new boolean> = <HTMLMenuItemElement>.checked;
<HTMLMenuItemElement>.checked = <boolean>;
<new DOMString> = <HTMLMenuItemElement>.radiogroup;
<HTMLMenuItemElement>.radiogroup = <DOMString>;
<new boolean> = <HTMLMenuItemElement>.defaultChecked;
<HTMLMenuItemElement>.defaultChecked = <boolean>;
!extends HTMLMetaElement HTMLElement;
<new HTMLElement> = <HTMLMetaElement>;
<new HTMLMetaElement> = new HTMLMetaElement();
<new DOMString> = <HTMLMetaElement>.name;
<HTMLMetaElement>.name = <DOMString>;
<new DOMString> = <HTMLMetaElement>.httpEquiv;
<HTMLMetaElement>.httpEquiv = <DOMString>;
<new DOMString> = <HTMLMetaElement>.content;
<HTMLMetaElement>.content = <DOMString>;
<new DOMString> = <HTMLMetaElement>.scheme;
<HTMLMetaElement>.scheme = <DOMString>;
!extends HTMLMeterElement HTMLElement;
<new HTMLElement> = <HTMLMeterElement>;
<new HTMLMeterElement> = new HTMLMeterElement();
<new double> = <HTMLMeterElement>.value;
<HTMLMeterElement>.value = <double>;
<new double> = <HTMLMeterElement>.min;
<HTMLMeterElement>.min = <double>;
<new double> = <HTMLMeterElement>.max;
<HTMLMeterElement>.max = <double>;
<new double> = <HTMLMeterElement>.low;
<HTMLMeterElement>.low = <double>;
<new double> = <HTMLMeterElement>.high;
<HTMLMeterElement>.high = <double>;
<new double> = <HTMLMeterElement>.optimum;
<HTMLMeterElement>.optimum = <double>;
<new NodeList> = <HTMLMeterElement>.labels;
!extends HTMLModElement HTMLElement;
<new HTMLElement> = <HTMLModElement>;
<new HTMLModElement> = new HTMLModElement();
<new DOMString> = <HTMLModElement>.cite;
<HTMLModElement>.cite = <DOMString>;
<new DOMString> = <HTMLModElement>.dateTime;
<HTMLModElement>.dateTime = <DOMString>;
!extends HTMLObjectElement HTMLElement;
<new HTMLElement> = <HTMLObjectElement>;
<new HTMLObjectElement> = new HTMLObjectElement();
<new DOMString> = <HTMLObjectElement>.data;
<HTMLObjectElement>.data = <DOMString>;
<new DOMString> = <HTMLObjectElement>.type;
<HTMLObjectElement>.type = <DOMString>;
<new DOMString> = <HTMLObjectElement>.name;
<HTMLObjectElement>.name = <DOMString>;
<new DOMString> = <HTMLObjectElement>.useMap;
<HTMLObjectElement>.useMap = <DOMString>;
<new HTMLFormElement> = <HTMLObjectElement>.form;
<new DOMString> = <HTMLObjectElement>.width;
<HTMLObjectElement>.width = <DOMString>;
<new DOMString> = <HTMLObjectElement>.height;
<HTMLObjectElement>.height = <DOMString>;
<new Document> = <HTMLObjectElement>.contentDocument;
<new WindowProxy> = <HTMLObjectElement>.contentWindow;
<new boolean> = <HTMLObjectElement>.willValidate;
<new ValidityState> = <HTMLObjectElement>.validity;
<new DOMString> = <HTMLObjectElement>.validationMessage;
<HTMLObjectElement>.checkValidity();
<HTMLObjectElement>.reportValidity();
<new void> = <HTMLObjectElement>.setCustomValidity(<DOMString>);
<new DOMString> = <HTMLObjectElement>.align;
<HTMLObjectElement>.align = <DOMString>;
<new DOMString> = <HTMLObjectElement>.archive;
<HTMLObjectElement>.archive = <DOMString>;
<new DOMString> = <HTMLObjectElement>.code;
<HTMLObjectElement>.code = <DOMString>;
<new boolean> = <HTMLObjectElement>.declare;
<HTMLObjectElement>.declare = <boolean>;
<new unsigned long> = <HTMLObjectElement>.hspace;
<HTMLObjectElement>.hspace = <unsigned long>;
<new DOMString> = <HTMLObjectElement>.standby;
<HTMLObjectElement>.standby = <DOMString>;
<new unsigned long> = <HTMLObjectElement>.vspace;
<HTMLObjectElement>.vspace = <unsigned long>;
<new DOMString> = <HTMLObjectElement>.codeBase;
<HTMLObjectElement>.codeBase = <DOMString>;
<new DOMString> = <HTMLObjectElement>.codeType;
<HTMLObjectElement>.codeType = <DOMString>;
<new DOMString> = <HTMLObjectElement>.border;
<HTMLObjectElement>.border = <DOMString>;
<new Document> = <HTMLObjectElement>.getSVGDocument();
!extends HTMLOListElement HTMLElement;
<new HTMLElement> = <HTMLOListElement>;
<new HTMLOListElement> = new HTMLOListElement();
<new boolean> = <HTMLOListElement>.reversed;
<HTMLOListElement>.reversed = <boolean>;
<new long> = <HTMLOListElement>.start;
<HTMLOListElement>.start = <long>;
<new DOMString> = <HTMLOListElement>.type;
<HTMLOListElement>.type = <DOMString>;
<new boolean> = <HTMLOListElement>.compact;
<HTMLOListElement>.compact = <boolean>;
!extends HTMLOptGroupElement HTMLElement;
<new HTMLElement> = <HTMLOptGroupElement>;
<new HTMLOptGroupElement> = new HTMLOptGroupElement();
<new boolean> = <HTMLOptGroupElement>.disabled;
<HTMLOptGroupElement>.disabled = <boolean>;
<new DOMString> = <HTMLOptGroupElement>.label;
<HTMLOptGroupElement>.label = <DOMString>;
!extends HTMLOptionElement HTMLElement;
<new HTMLElement> = <HTMLOptionElement>;
<new HTMLOptionElement> = new HTMLOptionElement();
<new boolean> = <HTMLOptionElement>.disabled;
<HTMLOptionElement>.disabled = <boolean>;
<new HTMLFormElement> = <HTMLOptionElement>.form;
<new DOMString> = <HTMLOptionElement>.label;
<HTMLOptionElement>.label = <DOMString>;
<new boolean> = <HTMLOptionElement>.defaultSelected;
<HTMLOptionElement>.defaultSelected = <boolean>;
<new boolean> = <HTMLOptionElement>.selected;
<HTMLOptionElement>.selected = <boolean>;
<new DOMString> = <HTMLOptionElement>.value;
<HTMLOptionElement>.value = <DOMString>;
<new DOMString> = <HTMLOptionElement>.text;
<HTMLOptionElement>.text = <DOMString>;
<new long> = <HTMLOptionElement>.index;
!extends HTMLOptionsCollection HTMLCollection;
<new HTMLCollection> = <HTMLOptionsCollection>;
<new unsigned long> = <HTMLOptionsCollection>.length;
<HTMLOptionsCollection>.length = <unsigned long>;
<new void> = <HTMLOptionsCollection>(<unsigned long>,<HTMLOptionElement>);
<new union_HTMLOptionElement1HTMLOptGroupElement_> = <HTMLOptionElement>;
<new union_HTMLOptionElement1HTMLOptGroupElement_> = <HTMLOptGroupElement>;
<new union_HTMLElement1long_> = <HTMLElement>;
<new union_HTMLElement1long_> = <long>;
<new void> = <HTMLOptionsCollection>.add(<union_HTMLOptionElement1HTMLOptGroupElement_>);
<new void> = <HTMLOptionsCollection>.add(<union_HTMLOptionElement1HTMLOptGroupElement_>,<union_HTMLElement1long_>);
<new void> = <HTMLOptionsCollection>.remove(<long>);
<new long> = <HTMLOptionsCollection>.selectedIndex;
<HTMLOptionsCollection>.selectedIndex = <long>;
!extends HTMLOutputElement HTMLElement;
<new HTMLElement> = <HTMLOutputElement>;
<new HTMLOutputElement> = new HTMLOutputElement();
<new DOMTokenList> = <HTMLOutputElement>.htmlFor;
<new HTMLFormElement> = <HTMLOutputElement>.form;
<new DOMString> = <HTMLOutputElement>.name;
<HTMLOutputElement>.name = <DOMString>;
<new DOMString> = <HTMLOutputElement>.type;
<new DOMString> = <HTMLOutputElement>.defaultValue;
<HTMLOutputElement>.defaultValue = <DOMString>;
<new DOMString> = <HTMLOutputElement>.value;
<HTMLOutputElement>.value = <DOMString>;
<new boolean> = <HTMLOutputElement>.willValidate;
<new ValidityState> = <HTMLOutputElement>.validity;
<new DOMString> = <HTMLOutputElement>.validationMessage;
<HTMLOutputElement>.checkValidity();
<HTMLOutputElement>.reportValidity();
<new void> = <HTMLOutputElement>.setCustomValidity(<DOMString>);
<new NodeList> = <HTMLOutputElement>.labels;
!extends HTMLParagraphElement HTMLElement;
<new HTMLElement> = <HTMLParagraphElement>;
<new HTMLParagraphElement> = new HTMLParagraphElement();
<new DOMString> = <HTMLParagraphElement>.align;
<HTMLParagraphElement>.align = <DOMString>;
!extends HTMLParamElement HTMLElement;
<new HTMLElement> = <HTMLParamElement>;
<new HTMLParamElement> = new HTMLParamElement();
<new DOMString> = <HTMLParamElement>.name;
<HTMLParamElement>.name = <DOMString>;
<new DOMString> = <HTMLParamElement>.value;
<HTMLParamElement>.value = <DOMString>;
<new DOMString> = <HTMLParamElement>.type;
<HTMLParamElement>.type = <DOMString>;
<new DOMString> = <HTMLParamElement>.valueType;
<HTMLParamElement>.valueType = <DOMString>;
!extends HTMLPictureElement HTMLElement;
<new HTMLElement> = <HTMLPictureElement>;
<new HTMLPictureElement> = new HTMLPictureElement();
!extends HTMLPreElement HTMLElement;
<new HTMLElement> = <HTMLPreElement>;
<new HTMLPreElement> = new HTMLPreElement();
<new long> = <HTMLPreElement>.width;
<HTMLPreElement>.width = <long>;
!extends HTMLProgressElement HTMLElement;
<new HTMLElement> = <HTMLProgressElement>;
<new HTMLProgressElement> = new HTMLProgressElement();
<new double> = <HTMLProgressElement>.value;
<HTMLProgressElement>.value = <double>;
<new double> = <HTMLProgressElement>.max;
<HTMLProgressElement>.max = <double>;
<new double> = <HTMLProgressElement>.position;
<new NodeList> = <HTMLProgressElement>.labels;
!extends HTMLQuoteElement HTMLElement;
<new HTMLElement> = <HTMLQuoteElement>;
<new HTMLQuoteElement> = new HTMLQuoteElement();
<new DOMString> = <HTMLQuoteElement>.cite;
<HTMLQuoteElement>.cite = <DOMString>;
!extends HTMLScriptElement HTMLElement;
<new HTMLElement> = <HTMLScriptElement>;
<new HTMLScriptElement> = new HTMLScriptElement();
<new DOMString> = <HTMLScriptElement>.src;
<HTMLScriptElement>.src = <DOMString>;
<new DOMString> = <HTMLScriptElement>.type;
<HTMLScriptElement>.type = <DOMString>;
<new boolean> = <HTMLScriptElement>.noModule;
<HTMLScriptElement>.noModule = <boolean>;
<new DOMString> = <HTMLScriptElement>.charset;
<HTMLScriptElement>.charset = <DOMString>;
<new boolean> = <HTMLScriptElement>.async;
<HTMLScriptElement>.async = <boolean>;
<new boolean> = <HTMLScriptElement>.defer;
<HTMLScriptElement>.defer = <boolean>;
<new DOMString> = <HTMLScriptElement>.crossOrigin;
<HTMLScriptElement>.crossOrigin = <DOMString>;
<HTMLScriptElement>.crossOrigin = null;
<new DOMString> = <HTMLScriptElement>.referrerPolicy;
<HTMLScriptElement>.referrerPolicy = <DOMString>;
<new DOMString> = <HTMLScriptElement>.text;
<HTMLScriptElement>.text = <DOMString>;
<HTMLScriptElement>.supports(<DOMString>);
<new DOMString> = <HTMLScriptElement>.event;
<HTMLScriptElement>.event = <DOMString>;
<new DOMString> = <HTMLScriptElement>.htmlFor;
<HTMLScriptElement>.htmlFor = <DOMString>;
<new DOMString> = <HTMLScriptElement>.integrity;
<HTMLScriptElement>.integrity = <DOMString>;
!extends HTMLSelectElement HTMLElement;
<new HTMLElement> = <HTMLSelectElement>;
<new HTMLSelectElement> = new HTMLSelectElement();
<new boolean> = <HTMLSelectElement>.autofocus;
<HTMLSelectElement>.autofocus = <boolean>;
<new DOMString> = <HTMLSelectElement>.autocomplete;
<HTMLSelectElement>.autocomplete = <DOMString>;
<new boolean> = <HTMLSelectElement>.disabled;
<HTMLSelectElement>.disabled = <boolean>;
<new HTMLFormElement> = <HTMLSelectElement>.form;
<new boolean> = <HTMLSelectElement>.multiple;
<HTMLSelectElement>.multiple = <boolean>;
<new DOMString> = <HTMLSelectElement>.name;
<HTMLSelectElement>.name = <DOMString>;
<new boolean> = <HTMLSelectElement>.required;
<HTMLSelectElement>.required = <boolean>;
<new unsigned long> = <HTMLSelectElement>.size;
<HTMLSelectElement>.size = <unsigned long>;
<new DOMString> = <HTMLSelectElement>.type;
<new HTMLOptionsCollection> = <HTMLSelectElement>.options;
<new unsigned long> = <HTMLSelectElement>.length;
<HTMLSelectElement>.length = <unsigned long>;
<new Element> = <HTMLSelectElement>.item(<unsigned long>);
<new HTMLOptionElement> = <HTMLSelectElement>.namedItem(<DOMString>);
<new void> = <HTMLSelectElement>.add(<union_HTMLOptionElement1HTMLOptGroupElement_>);
<new void> = <HTMLSelectElement>.add(<union_HTMLOptionElement1HTMLOptGroupElement_>,<union_HTMLElement1long_>);
<new void> = <HTMLSelectElement>.remove(<long>);
<new void> = <HTMLSelectElement>(<unsigned long>,<HTMLOptionElement>);
<new HTMLCollection> = <HTMLSelectElement>.selectedOptions;
<new long> = <HTMLSelectElement>.selectedIndex;
<HTMLSelectElement>.selectedIndex = <long>;
<new DOMString> = <HTMLSelectElement>.value;
<HTMLSelectElement>.value = <DOMString>;
<new boolean> = <HTMLSelectElement>.willValidate;
<new ValidityState> = <HTMLSelectElement>.validity;
<new DOMString> = <HTMLSelectElement>.validationMessage;
<HTMLSelectElement>.checkValidity();
<HTMLSelectElement>.reportValidity();
<new void> = <HTMLSelectElement>.setCustomValidity(<DOMString>);
<new NodeList> = <HTMLSelectElement>.labels;
<new void> = <HTMLSelectElement>.remove();
<new boolean> = <HTMLSelectElement>.openInParentProcess;
<HTMLSelectElement>.openInParentProcess = <boolean>;
<new AutocompleteInfo> = <HTMLSelectElement>.getAutocompleteInfo();
<new DOMString> = <HTMLSelectElement>.previewValue;
<HTMLSelectElement>.previewValue = <DOMString>;
!extends HTMLSlotElement HTMLElement;
<new HTMLElement> = <HTMLSlotElement>;
<new HTMLSlotElement> = new HTMLSlotElement();
<new DOMString> = <HTMLSlotElement>.name;
<HTMLSlotElement>.name = <DOMString>;
<new sequence_Node_> = [<Node>];
<new Node> = <sequence_Node_>[0];
<new sequence_Node_> = <HTMLSlotElement>.assignedNodes();
<new sequence_Node_> = <HTMLSlotElement>.assignedNodes(<AssignedNodesOptions>);
<new sequence_Element_> = <HTMLSlotElement>.assignedElements();
<new sequence_Element_> = <HTMLSlotElement>.assignedElements(<AssignedNodesOptions>);
<new union_Element1Text_> = <Element>;
<new union_Element1Text_> = <Text>;
<new void> = <HTMLSlotElement>.assign();
<new void> = <HTMLSlotElement>.assign(<union_Element1Text_>);
!extends HTMLSourceElement HTMLElement;
<new HTMLElement> = <HTMLSourceElement>;
<new HTMLSourceElement> = new HTMLSourceElement();
<new DOMString> = <HTMLSourceElement>.src;
<HTMLSourceElement>.src = <DOMString>;
<new DOMString> = <HTMLSourceElement>.type;
<HTMLSourceElement>.type = <DOMString>;
<new DOMString> = <HTMLSourceElement>.srcset;
<HTMLSourceElement>.srcset = <DOMString>;
<new DOMString> = <HTMLSourceElement>.sizes;
<HTMLSourceElement>.sizes = <DOMString>;
<new DOMString> = <HTMLSourceElement>.media;
<HTMLSourceElement>.media = <DOMString>;
!extends HTMLSpanElement HTMLElement;
<new HTMLElement> = <HTMLSpanElement>;
<new HTMLSpanElement> = new HTMLSpanElement();
!extends HTMLStyleElement HTMLElement;
<new HTMLElement> = <HTMLStyleElement>;
<new HTMLStyleElement> = new HTMLStyleElement();
<new boolean> = <HTMLStyleElement>.disabled;
<HTMLStyleElement>.disabled = <boolean>;
<new DOMString> = <HTMLStyleElement>.media;
<HTMLStyleElement>.media = <DOMString>;
<new DOMString> = <HTMLStyleElement>.type;
<HTMLStyleElement>.type = <DOMString>;
<new void> = <HTMLStyleElement>.setDevtoolsAsTriggeringPrincipal();
!extends HTMLTableCaptionElement HTMLElement;
<new HTMLElement> = <HTMLTableCaptionElement>;
<new HTMLTableCaptionElement> = new HTMLTableCaptionElement();
<new DOMString> = <HTMLTableCaptionElement>.align;
<HTMLTableCaptionElement>.align = <DOMString>;
!extends HTMLTableCellElement HTMLElement;
<new HTMLElement> = <HTMLTableCellElement>;
<new HTMLTableCellElement> = new HTMLTableCellElement();
<new unsigned long> = <HTMLTableCellElement>.colSpan;
<HTMLTableCellElement>.colSpan = <unsigned long>;
<new unsigned long> = <HTMLTableCellElement>.rowSpan;
<HTMLTableCellElement>.rowSpan = <unsigned long>;
<new DOMString> = <HTMLTableCellElement>.headers;
<HTMLTableCellElement>.headers = <DOMString>;
<new long> = <HTMLTableCellElement>.cellIndex;
<new DOMString> = <HTMLTableCellElement>.abbr;
<HTMLTableCellElement>.abbr = <DOMString>;
<new DOMString> = <HTMLTableCellElement>.scope;
<HTMLTableCellElement>.scope = <DOMString>;
<new DOMString> = <HTMLTableCellElement>.align;
<HTMLTableCellElement>.align = <DOMString>;
<new DOMString> = <HTMLTableCellElement>.axis;
<HTMLTableCellElement>.axis = <DOMString>;
<new DOMString> = <HTMLTableCellElement>.height;
<HTMLTableCellElement>.height = <DOMString>;
<new DOMString> = <HTMLTableCellElement>.width;
<HTMLTableCellElement>.width = <DOMString>;
<new DOMString> = <HTMLTableCellElement>.ch;
<HTMLTableCellElement>.ch = <DOMString>;
<new DOMString> = <HTMLTableCellElement>.chOff;
<HTMLTableCellElement>.chOff = <DOMString>;
<new boolean> = <HTMLTableCellElement>.noWrap;
<HTMLTableCellElement>.noWrap = <boolean>;
<new DOMString> = <HTMLTableCellElement>.vAlign;
<HTMLTableCellElement>.vAlign = <DOMString>;
<new DOMString> = <HTMLTableCellElement>.bgColor;
<HTMLTableCellElement>.bgColor = <DOMString>;
!extends HTMLTableColElement HTMLElement;
<new HTMLElement> = <HTMLTableColElement>;
<new HTMLTableColElement> = new HTMLTableColElement();
<new unsigned long> = <HTMLTableColElement>.span;
<HTMLTableColElement>.span = <unsigned long>;
<new DOMString> = <HTMLTableColElement>.align;
<HTMLTableColElement>.align = <DOMString>;
<new DOMString> = <HTMLTableColElement>.ch;
<HTMLTableColElement>.ch = <DOMString>;
<new DOMString> = <HTMLTableColElement>.chOff;
<HTMLTableColElement>.chOff = <DOMString>;
<new DOMString> = <HTMLTableColElement>.vAlign;
<HTMLTableColElement>.vAlign = <DOMString>;
<new DOMString> = <HTMLTableColElement>.width;
<HTMLTableColElement>.width = <DOMString>;
!extends HTMLTableElement HTMLElement;
<new HTMLElement> = <HTMLTableElement>;
<new HTMLTableElement> = new HTMLTableElement();
<new HTMLTableCaptionElement> = <HTMLTableElement>.caption;
<HTMLTableElement>.caption = <HTMLTableCaptionElement>;
<HTMLTableElement>.caption = null;
<new HTMLElement> = <HTMLTableElement>.createCaption();
<new void> = <HTMLTableElement>.deleteCaption();
<new HTMLTableSectionElement> = <HTMLTableElement>.tHead;
<HTMLTableElement>.tHead = <HTMLTableSectionElement>;
<HTMLTableElement>.tHead = null;
<new HTMLElement> = <HTMLTableElement>.createTHead();
<new void> = <HTMLTableElement>.deleteTHead();
<new HTMLTableSectionElement> = <HTMLTableElement>.tFoot;
<HTMLTableElement>.tFoot = <HTMLTableSectionElement>;
<HTMLTableElement>.tFoot = null;
<new HTMLElement> = <HTMLTableElement>.createTFoot();
<new void> = <HTMLTableElement>.deleteTFoot();
<new HTMLCollection> = <HTMLTableElement>.tBodies;
<new HTMLElement> = <HTMLTableElement>.createTBody();
<new HTMLCollection> = <HTMLTableElement>.rows;
<new HTMLElement> = <HTMLTableElement>.insertRow();
<new HTMLElement> = <HTMLTableElement>.insertRow(<long>);
<new void> = <HTMLTableElement>.deleteRow(<long>);
<new DOMString> = <HTMLTableElement>.align;
<HTMLTableElement>.align = <DOMString>;
<new DOMString> = <HTMLTableElement>.border;
<HTMLTableElement>.border = <DOMString>;
<new DOMString> = <HTMLTableElement>.frame;
<HTMLTableElement>.frame = <DOMString>;
<new DOMString> = <HTMLTableElement>.rules;
<HTMLTableElement>.rules = <DOMString>;
<new DOMString> = <HTMLTableElement>.summary;
<HTMLTableElement>.summary = <DOMString>;
<new DOMString> = <HTMLTableElement>.width;
<HTMLTableElement>.width = <DOMString>;
<new DOMString> = <HTMLTableElement>.bgColor;
<HTMLTableElement>.bgColor = <DOMString>;
<new DOMString> = <HTMLTableElement>.cellPadding;
<HTMLTableElement>.cellPadding = <DOMString>;
<new DOMString> = <HTMLTableElement>.cellSpacing;
<HTMLTableElement>.cellSpacing = <DOMString>;
!extends HTMLTableRowElement HTMLElement;
<new HTMLElement> = <HTMLTableRowElement>;
<new HTMLTableRowElement> = new HTMLTableRowElement();
<new long> = <HTMLTableRowElement>.rowIndex;
<new long> = <HTMLTableRowElement>.sectionRowIndex;
<new HTMLCollection> = <HTMLTableRowElement>.cells;
<new HTMLElement> = <HTMLTableRowElement>.insertCell();
<new HTMLElement> = <HTMLTableRowElement>.insertCell(<long>);
<new void> = <HTMLTableRowElement>.deleteCell(<long>);
<new DOMString> = <HTMLTableRowElement>.align;
<HTMLTableRowElement>.align = <DOMString>;
<new DOMString> = <HTMLTableRowElement>.ch;
<HTMLTableRowElement>.ch = <DOMString>;
<new DOMString> = <HTMLTableRowElement>.chOff;
<HTMLTableRowElement>.chOff = <DOMString>;
<new DOMString> = <HTMLTableRowElement>.vAlign;
<HTMLTableRowElement>.vAlign = <DOMString>;
<new DOMString> = <HTMLTableRowElement>.bgColor;
<HTMLTableRowElement>.bgColor = <DOMString>;
!extends HTMLTableSectionElement HTMLElement;
<new HTMLElement> = <HTMLTableSectionElement>;
<new HTMLTableSectionElement> = new HTMLTableSectionElement();
<new HTMLCollection> = <HTMLTableSectionElement>.rows;
<new HTMLElement> = <HTMLTableSectionElement>.insertRow();
<new HTMLElement> = <HTMLTableSectionElement>.insertRow(<long>);
<new void> = <HTMLTableSectionElement>.deleteRow(<long>);
<new DOMString> = <HTMLTableSectionElement>.align;
<HTMLTableSectionElement>.align = <DOMString>;
<new DOMString> = <HTMLTableSectionElement>.ch;
<HTMLTableSectionElement>.ch = <DOMString>;
<new DOMString> = <HTMLTableSectionElement>.chOff;
<HTMLTableSectionElement>.chOff = <DOMString>;
<new DOMString> = <HTMLTableSectionElement>.vAlign;
<HTMLTableSectionElement>.vAlign = <DOMString>;
!extends HTMLTemplateElement HTMLElement;
<new HTMLElement> = <HTMLTemplateElement>;
<new HTMLTemplateElement> = new HTMLTemplateElement();
<new DocumentFragment> = <HTMLTemplateElement>.content;
!extends HTMLTextAreaElement HTMLElement;
<new HTMLElement> = <HTMLTextAreaElement>;
<new HTMLTextAreaElement> = new HTMLTextAreaElement();
<new DOMString> = <HTMLTextAreaElement>.autocomplete;
<HTMLTextAreaElement>.autocomplete = <DOMString>;
<new boolean> = <HTMLTextAreaElement>.autofocus;
<HTMLTextAreaElement>.autofocus = <boolean>;
<new unsigned long> = <HTMLTextAreaElement>.cols;
<HTMLTextAreaElement>.cols = <unsigned long>;
<new boolean> = <HTMLTextAreaElement>.disabled;
<HTMLTextAreaElement>.disabled = <boolean>;
<new HTMLFormElement> = <HTMLTextAreaElement>.form;
<new long> = <HTMLTextAreaElement>.maxLength;
<HTMLTextAreaElement>.maxLength = <long>;
<new long> = <HTMLTextAreaElement>.minLength;
<HTMLTextAreaElement>.minLength = <long>;
<new DOMString> = <HTMLTextAreaElement>.name;
<HTMLTextAreaElement>.name = <DOMString>;
<new DOMString> = <HTMLTextAreaElement>.placeholder;
<HTMLTextAreaElement>.placeholder = <DOMString>;
<new boolean> = <HTMLTextAreaElement>.readOnly;
<HTMLTextAreaElement>.readOnly = <boolean>;
<new boolean> = <HTMLTextAreaElement>.required;
<HTMLTextAreaElement>.required = <boolean>;
<new unsigned long> = <HTMLTextAreaElement>.rows;
<HTMLTextAreaElement>.rows = <unsigned long>;
<new DOMString> = <HTMLTextAreaElement>.wrap;
<HTMLTextAreaElement>.wrap = <DOMString>;
<new DOMString> = <HTMLTextAreaElement>.type;
<new DOMString> = <HTMLTextAreaElement>.defaultValue;
<HTMLTextAreaElement>.defaultValue = <DOMString>;
<new DOMString> = <HTMLTextAreaElement>.value;
<HTMLTextAreaElement>.value = <DOMString>;
<new unsigned long> = <HTMLTextAreaElement>.textLength;
<new boolean> = <HTMLTextAreaElement>.willValidate;
<new ValidityState> = <HTMLTextAreaElement>.validity;
<new DOMString> = <HTMLTextAreaElement>.validationMessage;
<HTMLTextAreaElement>.checkValidity();
<HTMLTextAreaElement>.reportValidity();
<new void> = <HTMLTextAreaElement>.setCustomValidity(<DOMString>);
<new NodeList> = <HTMLTextAreaElement>.labels;
<new void> = <HTMLTextAreaElement>.select();
<new unsigned long> = <HTMLTextAreaElement>.selectionStart;
<HTMLTextAreaElement>.selectionStart = <unsigned long>;
<HTMLTextAreaElement>.selectionStart = null;
<new unsigned long> = <HTMLTextAreaElement>.selectionEnd;
<HTMLTextAreaElement>.selectionEnd = <unsigned long>;
<HTMLTextAreaElement>.selectionEnd = null;
<new DOMString> = <HTMLTextAreaElement>.selectionDirection;
<HTMLTextAreaElement>.selectionDirection = <DOMString>;
<HTMLTextAreaElement>.selectionDirection = null;
<new void> = <HTMLTextAreaElement>.setRangeText(<DOMString>);
<new void> = <HTMLTextAreaElement>.setRangeText(<DOMString>,<unsigned long>,<unsigned long>);
<new void> = <HTMLTextAreaElement>.setRangeText(<DOMString>,<unsigned long>,<unsigned long>,<SelectionMode>);
<new void> = <HTMLTextAreaElement>.setSelectionRange(<unsigned long>,<unsigned long>);
<new void> = <HTMLTextAreaElement>.setSelectionRange(<unsigned long>,<unsigned long>,<DOMString>);
<new XULControllers> = <HTMLTextAreaElement>.controllers;
<new DOMString> = <HTMLTextAreaElement>.previewValue;
<HTMLTextAreaElement>.previewValue = <DOMString>;
!extends HTMLTimeElement HTMLElement;
<new HTMLElement> = <HTMLTimeElement>;
<new HTMLTimeElement> = new HTMLTimeElement();
<new DOMString> = <HTMLTimeElement>.dateTime;
<HTMLTimeElement>.dateTime = <DOMString>;
!extends HTMLTitleElement HTMLElement;
<new HTMLElement> = <HTMLTitleElement>;
<new HTMLTitleElement> = new HTMLTitleElement();
<new DOMString> = <HTMLTitleElement>.text;
<HTMLTitleElement>.text = <DOMString>;
!extends HTMLTrackElement HTMLElement;
<new HTMLElement> = <HTMLTrackElement>;
<new HTMLTrackElement> = new HTMLTrackElement();
<new DOMString> = <HTMLTrackElement>.kind;
<HTMLTrackElement>.kind = <DOMString>;
<new DOMString> = <HTMLTrackElement>.src;
<HTMLTrackElement>.src = <DOMString>;
<new DOMString> = <HTMLTrackElement>.srclang;
<HTMLTrackElement>.srclang = <DOMString>;
<new DOMString> = <HTMLTrackElement>.label;
<HTMLTrackElement>.label = <DOMString>;
<new boolean> = <HTMLTrackElement>.default;
<HTMLTrackElement>.default = <boolean>;
<new unsigned short> = <HTMLTrackElement>.NONE;
<new unsigned short> = <HTMLTrackElement>.LOADING;
<new unsigned short> = <HTMLTrackElement>.LOADED;
<new unsigned short> = <HTMLTrackElement>.ERROR;
<new unsigned short> = <HTMLTrackElement>.readyState;
<new TextTrack> = <HTMLTrackElement>.track;
!extends HTMLUListElement HTMLElement;
<new HTMLElement> = <HTMLUListElement>;
<new HTMLUListElement> = new HTMLUListElement();
<new boolean> = <HTMLUListElement>.compact;
<HTMLUListElement>.compact = <boolean>;
<new DOMString> = <HTMLUListElement>.type;
<HTMLUListElement>.type = <DOMString>;
!extends HTMLVideoElement HTMLMediaElement;
<new HTMLMediaElement> = <HTMLVideoElement>;
<new HTMLVideoElement> = new HTMLVideoElement();
<new unsigned long> = <HTMLVideoElement>.width;
<HTMLVideoElement>.width = <unsigned long>;
<new unsigned long> = <HTMLVideoElement>.height;
<HTMLVideoElement>.height = <unsigned long>;
<new unsigned long> = <HTMLVideoElement>.videoWidth;
<new unsigned long> = <HTMLVideoElement>.videoHeight;
<new DOMString> = <HTMLVideoElement>.poster;
<HTMLVideoElement>.poster = <DOMString>;
<new unsigned long> = <HTMLVideoElement>.mozParsedFrames;
<new unsigned long> = <HTMLVideoElement>.mozDecodedFrames;
<new unsigned long> = <HTMLVideoElement>.mozPresentedFrames;
<new unsigned long> = <HTMLVideoElement>.mozPaintedFrames;
<new double> = <HTMLVideoElement>.mozFrameDelay;
<new boolean> = <HTMLVideoElement>.mozHasAudio;
<new boolean> = <HTMLVideoElement>.mozOrientationLockEnabled;
<new boolean> = <HTMLVideoElement>.mozIsOrientationLocked;
<HTMLVideoElement>.mozIsOrientationLocked = <boolean>;
<new Promise_void_> = <HTMLVideoElement>.cloneElementVisually(<HTMLVideoElement>);
<new void> = <HTMLVideoElement>.stopCloningElementVisually();
<new boolean> = <HTMLVideoElement>.isCloningElementVisually;
<new VideoPlaybackQuality> = <HTMLVideoElement>.getVideoPlaybackQuality();
<new union_IDBObjectStore1IDBIndex_> = <IDBObjectStore>;
<new union_IDBObjectStore1IDBIndex_> = <IDBIndex>;
<new union_IDBObjectStore1IDBIndex_> = <IDBCursor>.source;
<new IDBCursorDirection> = <IDBCursor>.direction;
<new any> = <IDBCursor>.key;
<new any> = <IDBCursor>.primaryKey;
<new IDBRequest> = <IDBCursor>.request;
<new IDBRequest> = <IDBCursor>.update(<any>);
<new void> = <IDBCursor>.advance(<unsigned long>);
<new void> = <IDBCursor>.continue();
<new void> = <IDBCursor>.continue(<any>);
<new void> = <IDBCursor>.continuePrimaryKey(<any>,<any>);
<new IDBRequest> = <IDBCursor>.delete();
!extends IDBCursorWithValue IDBCursor;
<new IDBCursor> = <IDBCursorWithValue>;
<new any> = <IDBCursorWithValue>.value;
!extends IDBDatabase EventTarget;
<new EventTarget> = <IDBDatabase>;
<new DOMString> = <IDBDatabase>.name;
<new unsigned long long> = <IDBDatabase>.version;
<new DOMStringList> = <IDBDatabase>.objectStoreNames;
<new IDBObjectStore> = <IDBDatabase>.createObjectStore(<DOMString>);
<new IDBObjectStore> = <IDBDatabase>.createObjectStore(<DOMString>,<IDBObjectStoreParameters>);
<new void> = <IDBDatabase>.deleteObjectStore(<DOMString>);
<new union_DOMString1sequence_DOMString__> = <DOMString>;
<new union_DOMString1sequence_DOMString__> = <sequence_DOMString_>;
<new IDBTransaction> = <IDBDatabase>.transaction(<union_DOMString1sequence_DOMString__>);
<new IDBTransaction> = <IDBDatabase>.transaction(<union_DOMString1sequence_DOMString__>,<IDBTransactionMode>);
<new void> = <IDBDatabase>.close();
<new EventHandler> = <IDBDatabase>.onabort;
<IDBDatabase>.onabort = <EventHandler>;
<new EventHandler> = <IDBDatabase>.onclose;
<IDBDatabase>.onclose = <EventHandler>;
<new EventHandler> = <IDBDatabase>.onerror;
<IDBDatabase>.onerror = <EventHandler>;
<new EventHandler> = <IDBDatabase>.onversionchange;
<IDBDatabase>.onversionchange = <EventHandler>;
<new StorageType> = <IDBDatabase>.storage;
<new IDBRequest> = <IDBDatabase>.createMutableFile(<DOMString>);
<new IDBRequest> = <IDBDatabase>.createMutableFile(<DOMString>,<DOMString>);
<new IDBOpenDBRequest> = <IDBFactory>.open(<DOMString>,<unsigned long long>);
<new IDBOpenDBRequest> = <IDBFactory>.open(<DOMString>);
<new IDBOpenDBRequest> = <IDBFactory>.open(<DOMString>,<IDBOpenDBOptions>);
<new IDBOpenDBRequest> = <IDBFactory>.deleteDatabase(<DOMString>);
<new IDBOpenDBRequest> = <IDBFactory>.deleteDatabase(<DOMString>,<IDBOpenDBOptions>);
<IDBFactory>.cmp(<any>,<any>);
<new IDBOpenDBRequest> = <IDBFactory>.openForPrincipal(<Principal>,<DOMString>,<unsigned long long>);
<new IDBOpenDBRequest> = <IDBFactory>.openForPrincipal(<Principal>,<DOMString>);
<new IDBOpenDBRequest> = <IDBFactory>.openForPrincipal(<Principal>,<DOMString>,<IDBOpenDBOptions>);
<new IDBOpenDBRequest> = <IDBFactory>.deleteForPrincipal(<Principal>,<DOMString>);
<new IDBOpenDBRequest> = <IDBFactory>.deleteForPrincipal(<Principal>,<DOMString>,<IDBOpenDBOptions>);
!extends IDBFileHandle EventTarget;
<new EventTarget> = <IDBFileHandle>;
<new IDBMutableFile> = <IDBFileHandle>.mutableFile;
<new IDBMutableFile> = <IDBFileHandle>.fileHandle;
<new FileMode> = <IDBFileHandle>.mode;
<new boolean> = <IDBFileHandle>.active;
<new unsigned long long> = <IDBFileHandle>.location;
<IDBFileHandle>.location = <unsigned long long>;
<IDBFileHandle>.location = null;
<new IDBFileRequest> = <IDBFileHandle>.getMetadata();
<new IDBFileRequest> = <IDBFileHandle>.getMetadata(<IDBFileMetadataParameters>);
<new IDBFileRequest> = <IDBFileHandle>.readAsArrayBuffer(<unsigned long long>);
<new IDBFileRequest> = <IDBFileHandle>.readAsText(<unsigned long long>);
<new IDBFileRequest> = <IDBFileHandle>.readAsText(<unsigned long long>,<DOMString>);
<new union_DOMString1ArrayBuffer1ArrayBufferView1Blob_> = <DOMString>;
<new union_DOMString1ArrayBuffer1ArrayBufferView1Blob_> = <ArrayBuffer>;
<new union_DOMString1ArrayBuffer1ArrayBufferView1Blob_> = <ArrayBufferView>;
<new union_DOMString1ArrayBuffer1ArrayBufferView1Blob_> = <Blob>;
<new IDBFileRequest> = <IDBFileHandle>.write(<union_DOMString1ArrayBuffer1ArrayBufferView1Blob_>);
<new IDBFileRequest> = <IDBFileHandle>.append(<union_DOMString1ArrayBuffer1ArrayBufferView1Blob_>);
<new IDBFileRequest> = <IDBFileHandle>.truncate();
<new IDBFileRequest> = <IDBFileHandle>.truncate(<unsigned long long>);
<new IDBFileRequest> = <IDBFileHandle>.flush();
<new void> = <IDBFileHandle>.abort();
<new EventHandler> = <IDBFileHandle>.oncomplete;
<IDBFileHandle>.oncomplete = <EventHandler>;
<new EventHandler> = <IDBFileHandle>.onabort;
<IDBFileHandle>.onabort = <EventHandler>;
<new EventHandler> = <IDBFileHandle>.onerror;
<IDBFileHandle>.onerror = <EventHandler>;
!extends IDBFileRequest DOMRequest;
<new DOMRequest> = <IDBFileRequest>;
<new IDBFileHandle> = <IDBFileRequest>.fileHandle;
<new IDBFileHandle> = <IDBFileRequest>.lockedFile;
<new EventHandler> = <IDBFileRequest>.onprogress;
<IDBFileRequest>.onprogress = <EventHandler>;
<new DOMString> = <IDBIndex>.name;
<IDBIndex>.name = <DOMString>;
<new IDBObjectStore> = <IDBIndex>.objectStore;
<new any> = <IDBIndex>.keyPath;
<new boolean> = <IDBIndex>.multiEntry;
<new boolean> = <IDBIndex>.unique;
<new DOMString> = <IDBIndex>.locale;
<new boolean> = <IDBIndex>.isAutoLocale;
<new IDBRequest> = <IDBIndex>.openCursor();
<new IDBRequest> = <IDBIndex>.openCursor(<any>);
<new IDBRequest> = <IDBIndex>.openCursor(<any>,<IDBCursorDirection>);
<new IDBRequest> = <IDBIndex>.openKeyCursor();
<new IDBRequest> = <IDBIndex>.openKeyCursor(<any>);
<new IDBRequest> = <IDBIndex>.openKeyCursor(<any>,<IDBCursorDirection>);
<new IDBRequest> = <IDBIndex>.get(<any>);
<new IDBRequest> = <IDBIndex>.getKey(<any>);
<new IDBRequest> = <IDBIndex>.count();
<new IDBRequest> = <IDBIndex>.count(<any>);
<new IDBRequest> = <IDBIndex>.getAll();
<new IDBRequest> = <IDBIndex>.getAll(<any>);
<new IDBRequest> = <IDBIndex>.getAll(<any>,<unsigned long>);
<new IDBRequest> = <IDBIndex>.getAllKeys();
<new IDBRequest> = <IDBIndex>.getAllKeys(<any>);
<new IDBRequest> = <IDBIndex>.getAllKeys(<any>,<unsigned long>);
<new any> = <IDBKeyRange>.lower;
<new any> = <IDBKeyRange>.upper;
<new boolean> = <IDBKeyRange>.lowerOpen;
<new boolean> = <IDBKeyRange>.upperOpen;
<IDBKeyRange>.includes(<any>);
<new IDBKeyRange> = <IDBKeyRange>.only(<any>);
<new IDBKeyRange> = <IDBKeyRange>.lowerBound(<any>);
<new IDBKeyRange> = <IDBKeyRange>.lowerBound(<any>,<boolean>);
<new IDBKeyRange> = <IDBKeyRange>.upperBound(<any>);
<new IDBKeyRange> = <IDBKeyRange>.upperBound(<any>,<boolean>);
<new IDBKeyRange> = <IDBKeyRange>.bound(<any>,<any>);
<new IDBKeyRange> = <IDBKeyRange>.bound(<any>,<any>,<boolean>);
<new IDBKeyRange> = <IDBKeyRange>.bound(<any>,<any>,<boolean>,<boolean>);
!extends IDBLocaleAwareKeyRange IDBKeyRange;
<new IDBKeyRange> = <IDBLocaleAwareKeyRange>;
<new IDBLocaleAwareKeyRange> = <IDBLocaleAwareKeyRange>.bound(<any>,<any>);
<new IDBLocaleAwareKeyRange> = <IDBLocaleAwareKeyRange>.bound(<any>,<any>,<boolean>);
<new IDBLocaleAwareKeyRange> = <IDBLocaleAwareKeyRange>.bound(<any>,<any>,<boolean>,<boolean>);
!extends IDBMutableFile EventTarget;
<new EventTarget> = <IDBMutableFile>;
<new DOMString> = <IDBMutableFile>.name;
<new DOMString> = <IDBMutableFile>.type;
<new IDBDatabase> = <IDBMutableFile>.database;
<new IDBFileHandle> = <IDBMutableFile>.open();
<new IDBFileHandle> = <IDBMutableFile>.open(<FileMode>);
<new EventHandler> = <IDBMutableFile>.onabort;
<IDBMutableFile>.onabort = <EventHandler>;
<new EventHandler> = <IDBMutableFile>.onerror;
<IDBMutableFile>.onerror = <EventHandler>;
<new DOMString> = <IDBObjectStore>.name;
<IDBObjectStore>.name = <DOMString>;
<new any> = <IDBObjectStore>.keyPath;
<new DOMStringList> = <IDBObjectStore>.indexNames;
<new IDBTransaction> = <IDBObjectStore>.transaction;
<new boolean> = <IDBObjectStore>.autoIncrement;
<new IDBRequest> = <IDBObjectStore>.put(<any>);
<new IDBRequest> = <IDBObjectStore>.put(<any>,<any>);
<new IDBRequest> = <IDBObjectStore>.add(<any>);
<new IDBRequest> = <IDBObjectStore>.add(<any>,<any>);
<new IDBRequest> = <IDBObjectStore>.delete(<any>);
<new IDBRequest> = <IDBObjectStore>.get(<any>);
<new IDBRequest> = <IDBObjectStore>.getKey(<any>);
<new IDBRequest> = <IDBObjectStore>.clear();
<new IDBRequest> = <IDBObjectStore>.openCursor();
<new IDBRequest> = <IDBObjectStore>.openCursor(<any>);
<new IDBRequest> = <IDBObjectStore>.openCursor(<any>,<IDBCursorDirection>);
<new IDBIndex> = <IDBObjectStore>.createIndex(<DOMString>,<union_DOMString1sequence_DOMString__>);
<new IDBIndex> = <IDBObjectStore>.createIndex(<DOMString>,<union_DOMString1sequence_DOMString__>,<IDBIndexParameters>);
<new IDBIndex> = <IDBObjectStore>.index(<DOMString>);
<new void> = <IDBObjectStore>.deleteIndex(<DOMString>);
<new IDBRequest> = <IDBObjectStore>.count();
<new IDBRequest> = <IDBObjectStore>.count(<any>);
<new IDBRequest> = <IDBObjectStore>.getAll();
<new IDBRequest> = <IDBObjectStore>.getAll(<any>);
<new IDBRequest> = <IDBObjectStore>.getAll(<any>,<unsigned long>);
<new IDBRequest> = <IDBObjectStore>.getAllKeys();
<new IDBRequest> = <IDBObjectStore>.getAllKeys(<any>);
<new IDBRequest> = <IDBObjectStore>.getAllKeys(<any>,<unsigned long>);
<new IDBRequest> = <IDBObjectStore>.openKeyCursor();
<new IDBRequest> = <IDBObjectStore>.openKeyCursor(<any>);
<new IDBRequest> = <IDBObjectStore>.openKeyCursor(<any>,<IDBCursorDirection>);
!extends IDBOpenDBRequest IDBRequest;
<new IDBRequest> = <IDBOpenDBRequest>;
<new EventHandler> = <IDBOpenDBRequest>.onblocked;
<IDBOpenDBRequest>.onblocked = <EventHandler>;
<new EventHandler> = <IDBOpenDBRequest>.onupgradeneeded;
<IDBOpenDBRequest>.onupgradeneeded = <EventHandler>;
!extends IDBRequest EventTarget;
<new EventTarget> = <IDBRequest>;
<new any> = <IDBRequest>.result;
<new DOMException> = <IDBRequest>.error;
<new union_IDBObjectStore1IDBIndex1IDBCursor_> = <IDBObjectStore>;
<new union_IDBObjectStore1IDBIndex1IDBCursor_> = <IDBIndex>;
<new union_IDBObjectStore1IDBIndex1IDBCursor_> = <IDBCursor>;
<new union_IDBObjectStore1IDBIndex1IDBCursor_> = <IDBRequest>.source;
<new IDBTransaction> = <IDBRequest>.transaction;
<new IDBRequestReadyState> = <IDBRequest>.readyState;
<new EventHandler> = <IDBRequest>.onsuccess;
<IDBRequest>.onsuccess = <EventHandler>;
<new EventHandler> = <IDBRequest>.onerror;
<IDBRequest>.onerror = <EventHandler>;
!extends IDBTransaction EventTarget;
<new EventTarget> = <IDBTransaction>;
<new IDBTransactionMode> = <IDBTransaction>.mode;
<new IDBDatabase> = <IDBTransaction>.db;
<new DOMException> = <IDBTransaction>.error;
<new IDBObjectStore> = <IDBTransaction>.objectStore(<DOMString>);
<new void> = <IDBTransaction>.commit();
<new void> = <IDBTransaction>.abort();
<new EventHandler> = <IDBTransaction>.onabort;
<IDBTransaction>.onabort = <EventHandler>;
<new EventHandler> = <IDBTransaction>.oncomplete;
<IDBTransaction>.oncomplete = <EventHandler>;
<new EventHandler> = <IDBTransaction>.onerror;
<IDBTransaction>.onerror = <EventHandler>;
<new DOMStringList> = <IDBTransaction>.objectStoreNames;
!extends IDBVersionChangeEvent Event;
<new Event> = <IDBVersionChangeEvent>;
<new IDBVersionChangeEvent> = new IDBVersionChangeEvent(<DOMString>);
<new IDBVersionChangeEvent> = new IDBVersionChangeEvent(<DOMString>,<IDBVersionChangeEventInit>);
<new unsigned long long> = <IDBVersionChangeEvent>.oldVersion;
<new unsigned long long> = <IDBVersionChangeEvent>.newVersion;
<new DOMHighResTimeStamp> = <IdleDeadline>.timeRemaining();
<new boolean> = <IdleDeadline>.didTimeout;
!extends IIRFilterNode AudioNode;
<new AudioNode> = <IIRFilterNode>;
<new IIRFilterNode> = new IIRFilterNode(<BaseAudioContext>,<IIRFilterOptions>);
<new void> = <IIRFilterNode>.getFrequencyResponse(<Float32Array>,<Float32Array>,<Float32Array>);
<new unsigned long> = <ImageBitmap>.width;
<new unsigned long> = <ImageBitmap>.height;
<new void> = <ImageBitmap>.close();
<new void> = <ImageBitmapRenderingContext>.transferFromImageBitmap(<ImageBitmap>);
<new void> = <ImageBitmapRenderingContext>.transferImageBitmap(<ImageBitmap>);
!extends ImageCapture EventTarget;
<new EventTarget> = <ImageCapture>;
<new ImageCapture> = new ImageCapture(<MediaStreamTrack>);
<new MediaStreamTrack> = <ImageCapture>.videoStreamTrack;
<new EventHandler> = <ImageCapture>.onphoto;
<ImageCapture>.onphoto = <EventHandler>;
<new EventHandler> = <ImageCapture>.onerror;
<ImageCapture>.onerror = <EventHandler>;
<new void> = <ImageCapture>.takePhoto();
!extends ImageCaptureErrorEvent Event;
<new Event> = <ImageCaptureErrorEvent>;
<new ImageCaptureErrorEvent> = new ImageCaptureErrorEvent(<DOMString>);
<new ImageCaptureErrorEvent> = new ImageCaptureErrorEvent(<DOMString>,<ImageCaptureErrorEventInit>);
<new ImageCaptureError> = <ImageCaptureErrorEvent>.imageCaptureError;
<new unsigned short> = <ImageCaptureError>.FRAME_GRAB_ERROR;
<new unsigned short> = <ImageCaptureError>.SETTINGS_ERROR;
<new unsigned short> = <ImageCaptureError>.PHOTO_ERROR;
<new unsigned short> = <ImageCaptureError>.ERROR_UNKNOWN;
<new unsigned short> = <ImageCaptureError>.code;
<new DOMString> = <ImageCaptureError>.message;
<new ImageData> = new ImageData(<unsigned long>,<unsigned long>);
<new ImageData> = new ImageData(<Uint8ClampedArray>,<unsigned long>);
<new ImageData> = new ImageData(<Uint8ClampedArray>,<unsigned long>,<unsigned long>);
<new unsigned long> = <ImageData>.width;
<new unsigned long> = <ImageData>.height;
<new Uint8ClampedArray> = <ImageData>.data;
!extends ImageDocument HTMLDocument;
<new HTMLDocument> = <ImageDocument>;
<new boolean> = <ImageDocument>.imageIsOverflowing;
<new boolean> = <ImageDocument>.imageIsResized;
<new void> = <ImageDocument>.shrinkToFit();
<new void> = <ImageDocument>.restoreImage();
!extends InputEvent UIEvent;
<new UIEvent> = <InputEvent>;
<new InputEvent> = new InputEvent(<DOMString>);
<new InputEvent> = new InputEvent(<DOMString>,<InputEventInit>);
<new boolean> = <InputEvent>.isComposing;
<new DOMString> = <InputEvent>.inputType;
<new DOMString> = <InputEvent>.data;
<new DataTransfer> = <InputEvent>.dataTransfer;
<new sequence_StaticRange_> = [<StaticRange>];
<new StaticRange> = <sequence_StaticRange_>[0];
<new sequence_StaticRange_> = <InputEvent>.getTargetRanges();
<new unsigned short> = <InstallTriggerImpl>.SKIN;
<new unsigned short> = <InstallTriggerImpl>.LOCALE;
<new unsigned short> = <InstallTriggerImpl>.CONTENT;
<new unsigned short> = <InstallTriggerImpl>.PACKAGE;
<InstallTriggerImpl>.enabled();
<InstallTriggerImpl>.updateEnabled();
<new union_DOMString1InstallTriggerData_> = <DOMString>;
<new union_DOMString1InstallTriggerData_> = <InstallTriggerData>;
<new record_DOMString1union_DOMString1InstallTriggerData__> = {a: <union_DOMString1InstallTriggerData_>};
<new union_DOMString1InstallTriggerData_> = <record_DOMString1union_DOMString1InstallTriggerData__>[<DOMString>];
<InstallTriggerImpl>.install(<record_DOMString1union_DOMString1InstallTriggerData__>);
<InstallTriggerImpl>.install(<record_DOMString1union_DOMString1InstallTriggerData__>,<InstallTriggerCallback>);
<InstallTriggerImpl>.installChrome(<unsigned short>,<DOMString>,<DOMString>);
<InstallTriggerImpl>.startSoftwareUpdate(<DOMString>);
<InstallTriggerImpl>.startSoftwareUpdate(<DOMString>,<unsigned short>);
<new DOMHighResTimeStamp> = <IntersectionObserverEntry>.time;
<new DOMRectReadOnly> = <IntersectionObserverEntry>.rootBounds;
<new DOMRectReadOnly> = <IntersectionObserverEntry>.boundingClientRect;
<new DOMRectReadOnly> = <IntersectionObserverEntry>.intersectionRect;
<new boolean> = <IntersectionObserverEntry>.isIntersecting;
<new double> = <IntersectionObserverEntry>.intersectionRatio;
<new Element> = <IntersectionObserverEntry>.target;
<new IntersectionObserver> = new IntersectionObserver(<IntersectionCallback>);
<new IntersectionObserver> = new IntersectionObserver(<IntersectionCallback>,<IntersectionObserverInit>);
<new Node> = <IntersectionObserver>.root;
<new UTF8String> = <IntersectionObserver>.rootMargin;
<new sequence_double_> = <IntersectionObserver>.thresholds;
<new void> = <IntersectionObserver>.observe(<Element>);
<new void> = <IntersectionObserver>.unobserve(<Element>);
<new void> = <IntersectionObserver>.disconnect();
<new sequence_IntersectionObserverEntry_> = [<IntersectionObserverEntry>];
<new IntersectionObserverEntry> = <sequence_IntersectionObserverEntry_>[0];
<new sequence_IntersectionObserverEntry_> = <IntersectionObserver>.takeRecords();
<new DisplayNameResult> = <IntlUtils>.getDisplayNames(<sequence_DOMString_>);
<new DisplayNameResult> = <IntlUtils>.getDisplayNames(<sequence_DOMString_>,<DisplayNameOptions>);
<IntlUtils>.isAppLocaleRTL();
!extends KeyboardEvent UIEvent;
<new UIEvent> = <KeyboardEvent>;
<new KeyboardEvent> = new KeyboardEvent(<DOMString>);
<new KeyboardEvent> = new KeyboardEvent(<DOMString>,<KeyboardEventInit>);
<new unsigned long> = <KeyboardEvent>.charCode;
<new unsigned long> = <KeyboardEvent>.keyCode;
<new boolean> = <KeyboardEvent>.altKey;
<new boolean> = <KeyboardEvent>.ctrlKey;
<new boolean> = <KeyboardEvent>.shiftKey;
<new boolean> = <KeyboardEvent>.metaKey;
<KeyboardEvent>.getModifierState(<DOMString>);
<new unsigned long> = <KeyboardEvent>.DOM_KEY_LOCATION_STANDARD;
<new unsigned long> = <KeyboardEvent>.DOM_KEY_LOCATION_LEFT;
<new unsigned long> = <KeyboardEvent>.DOM_KEY_LOCATION_RIGHT;
<new unsigned long> = <KeyboardEvent>.DOM_KEY_LOCATION_NUMPAD;
<new unsigned long> = <KeyboardEvent>.location;
<new boolean> = <KeyboardEvent>.repeat;
<new boolean> = <KeyboardEvent>.isComposing;
<new DOMString> = <KeyboardEvent>.key;
<new DOMString> = <KeyboardEvent>.code;
<new void> = <KeyboardEvent>.initKeyboardEvent(<DOMString>);
<new void> = <KeyboardEvent>.initKeyboardEvent(<DOMString>,<boolean>);
<new void> = <KeyboardEvent>.initKeyboardEvent(<DOMString>,<boolean>,<boolean>);
<new void> = <KeyboardEvent>.initKeyboardEvent(<DOMString>,<boolean>,<boolean>,<Window>);
<new void> = <KeyboardEvent>.initKeyboardEvent(<DOMString>,<boolean>,<boolean>,<Window>,<DOMString>);
<new void> = <KeyboardEvent>.initKeyboardEvent(<DOMString>,<boolean>,<boolean>,<Window>,<DOMString>,<unsigned long>);
<new void> = <KeyboardEvent>.initKeyboardEvent(<DOMString>,<boolean>,<boolean>,<Window>,<DOMString>,<unsigned long>,<boolean>);
<new void> = <KeyboardEvent>.initKeyboardEvent(<DOMString>,<boolean>,<boolean>,<Window>,<DOMString>,<unsigned long>,<boolean>,<boolean>);
<new void> = <KeyboardEvent>.initKeyboardEvent(<DOMString>,<boolean>,<boolean>,<Window>,<DOMString>,<unsigned long>,<boolean>,<boolean>,<boolean>);
<new void> = <KeyboardEvent>.initKeyboardEvent(<DOMString>,<boolean>,<boolean>,<Window>,<DOMString>,<unsigned long>,<boolean>,<boolean>,<boolean>,<boolean>);
<new KeyboardEventInit> = <KeyboardEvent>.initDict;
!extends KeyframeEffect AnimationEffect;
<new AnimationEffect> = <KeyframeEffect>;
<new union_unrestricted double1KeyframeEffectOptions_> = <unrestricted double>;
<new union_unrestricted double1KeyframeEffectOptions_> = <KeyframeEffectOptions>;
<new KeyframeEffect> = new KeyframeEffect(<Element>,<object>);
<new KeyframeEffect> = new KeyframeEffect(<Element>,<object>,<union_unrestricted double1KeyframeEffectOptions_>);
<new KeyframeEffect> = new KeyframeEffect(<KeyframeEffect>);
<new Element> = <KeyframeEffect>.target;
<KeyframeEffect>.target = <Element>;
<KeyframeEffect>.target = null;
<new DOMString> = <KeyframeEffect>.pseudoElement;
<KeyframeEffect>.pseudoElement = <DOMString>;
<KeyframeEffect>.pseudoElement = null;
<new IterationCompositeOperation> = <KeyframeEffect>.iterationComposite;
<KeyframeEffect>.iterationComposite = <IterationCompositeOperation>;
<new CompositeOperation> = <KeyframeEffect>.composite;
<KeyframeEffect>.composite = <CompositeOperation>;
<new sequence_object_> = <KeyframeEffect>.getKeyframes();
<new void> = <KeyframeEffect>.setKeyframes(<object>);
<new sequence_AnimationPropertyDetails_> = [<AnimationPropertyDetails>];
<new AnimationPropertyDetails> = <sequence_AnimationPropertyDetails_>[0];
<new sequence_AnimationPropertyDetails_> = <KeyframeEffect>.getProperties();
<new Localization> = new Localization(<sequence_UTF8String_>);
<new Localization> = new Localization(<sequence_UTF8String_>,<boolean>);
<new Localization> = new Localization(<sequence_UTF8String_>,<boolean>,<L10nRegistry>);
<new Localization> = new Localization(<sequence_UTF8String_>,<boolean>,<L10nRegistry>,<sequence_UTF8String_>);
<new void> = <Localization>.addResourceIds(<sequence_UTF8String_>);
<Localization>.removeResourceIds(<sequence_UTF8String_>);
<new Promise_UTF8String_> = new Promise(function(x){console.log("ok")});
<new Promise_UTF8String_> = <Localization>.formatValue(<UTF8String>);
<new Promise_UTF8String_> = <Localization>.formatValue(<UTF8String>,<L10nArgs>);
<new Promise_sequence_UTF8String__> = new Promise(function(x){console.log("ok")});
<new sequence_L10nKey_> = [<L10nKey>];
<new L10nKey> = <sequence_L10nKey_>[0];
<new Promise_sequence_UTF8String__> = <Localization>.formatValues(<sequence_L10nKey_>);
<new sequence_L10nMessage_> = [<L10nMessage>];
<new L10nMessage> = <sequence_L10nMessage_>[0];
<new Promise_sequence_L10nMessage__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_L10nMessage__> = <Localization>.formatMessages(<sequence_L10nKey_>);
<new void> = <Localization>.setAsync();
<new UTF8String> = <Localization>.formatValueSync(<UTF8String>);
<new UTF8String> = <Localization>.formatValueSync(<UTF8String>,<L10nArgs>);
<new sequence_UTF8String_> = <Localization>.formatValuesSync(<sequence_L10nKey_>);
<new sequence_L10nMessage_> = <Localization>.formatMessagesSync(<sequence_L10nKey_>);
<new USVString> = <Location>.href;
<Location>.href = <USVString>;
<new USVString> = <Location>.origin;
<new USVString> = <Location>.protocol;
<Location>.protocol = <USVString>;
<new USVString> = <Location>.host;
<Location>.host = <USVString>;
<new USVString> = <Location>.hostname;
<Location>.hostname = <USVString>;
<new USVString> = <Location>.port;
<Location>.port = <USVString>;
<new USVString> = <Location>.pathname;
<Location>.pathname = <USVString>;
<new USVString> = <Location>.search;
<Location>.search = <USVString>;
<new USVString> = <Location>.hash;
<Location>.hash = <USVString>;
<new void> = <Location>.assign(<USVString>);
<new void> = <Location>.replace(<USVString>);
<new void> = <Location>.reload();
<new void> = <Location>.reload(<boolean>);
<new DOMString> = <Lock>.name;
<new LockMode> = <Lock>.mode;
<new Promise_any_> = <LockManager>.request(<DOMString>,<LockGrantedCallback>);
<new Promise_any_> = <LockManager>.request(<DOMString>,<LockOptions>,<LockGrantedCallback>);
<new Promise_LockManagerSnapshot_> = new Promise(function(x){console.log("ok")});
<new Promise_LockManagerSnapshot_> = <LockManager>.query();
!extends MathMLElement Element;
<new Element> = <MathMLElement>;
<new boolean> = <MediaCapabilitiesInfo>.supported;
<new boolean> = <MediaCapabilitiesInfo>.smooth;
<new boolean> = <MediaCapabilitiesInfo>.powerEfficient;
<new Promise_MediaCapabilitiesInfo_> = new Promise(function(x){console.log("ok")});
<new Promise_MediaCapabilitiesInfo_> = <MediaCapabilities>.decodingInfo(<MediaDecodingConfiguration>);
<new Promise_MediaCapabilitiesInfo_> = <MediaCapabilities>.encodingInfo(<MediaEncodingConfiguration>);
<new DOMString> = <MediaDeviceInfo>.deviceId;
<new MediaDeviceKind> = <MediaDeviceInfo>.kind;
<new DOMString> = <MediaDeviceInfo>.label;
<new DOMString> = <MediaDeviceInfo>.groupId;
<new object> = <MediaDeviceInfo>.toJSON();
!extends MediaDevices EventTarget;
<new EventTarget> = <MediaDevices>;
<new EventHandler> = <MediaDevices>.ondevicechange;
<MediaDevices>.ondevicechange = <EventHandler>;
<new MediaTrackSupportedConstraints> = <MediaDevices>.getSupportedConstraints();
<new sequence_MediaDeviceInfo_> = [<MediaDeviceInfo>];
<new MediaDeviceInfo> = <sequence_MediaDeviceInfo_>[0];
<new Promise_sequence_MediaDeviceInfo__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_MediaDeviceInfo__> = <MediaDevices>.enumerateDevices();
<new Promise_MediaStream_> = new Promise(function(x){console.log("ok")});
<new Promise_MediaStream_> = <MediaDevices>.getUserMedia();
<new Promise_MediaStream_> = <MediaDevices>.getUserMedia(<MediaStreamConstraints>);
<new Promise_MediaStream_> = <MediaDevices>.getDisplayMedia();
<new Promise_MediaStream_> = <MediaDevices>.getDisplayMedia(<DisplayMediaStreamConstraints>);
<new Promise_MediaDeviceInfo_> = new Promise(function(x){console.log("ok")});
<new Promise_MediaDeviceInfo_> = <MediaDevices>.selectAudioOutput();
<new Promise_MediaDeviceInfo_> = <MediaDevices>.selectAudioOutput(<AudioOutputOptions>);
!extends MediaElementAudioSourceNode AudioNode;
<new AudioNode> = <MediaElementAudioSourceNode>;
<new MediaElementAudioSourceNode> = new MediaElementAudioSourceNode(<AudioContext>,<MediaElementAudioSourceOptions>);
<new HTMLMediaElement> = <MediaElementAudioSourceNode>.mediaElement;
!extends MediaEncryptedEvent Event;
<new Event> = <MediaEncryptedEvent>;
<new MediaEncryptedEvent> = new MediaEncryptedEvent(<DOMString>);
<new MediaEncryptedEvent> = new MediaEncryptedEvent(<DOMString>,<MediaKeyNeededEventInit>);
<new DOMString> = <MediaEncryptedEvent>.initDataType;
<new ArrayBuffer> = <MediaEncryptedEvent>.initData;
<new unsigned short> = <MediaError>.MEDIA_ERR_ABORTED;
<new unsigned short> = <MediaError>.MEDIA_ERR_NETWORK;
<new unsigned short> = <MediaError>.MEDIA_ERR_DECODE;
<new unsigned short> = <MediaError>.MEDIA_ERR_SRC_NOT_SUPPORTED;
<new unsigned short> = <MediaError>.code;
<new DOMString> = <MediaError>.message;
!extends MediaKeyError Event;
<new Event> = <MediaKeyError>;
<new unsigned long> = <MediaKeyError>.systemCode;
!extends MediaKeyMessageEvent Event;
<new Event> = <MediaKeyMessageEvent>;
<new MediaKeyMessageEvent> = new MediaKeyMessageEvent(<DOMString>,<MediaKeyMessageEventInit>);
<new MediaKeyMessageType> = <MediaKeyMessageEvent>.messageType;
<new ArrayBuffer> = <MediaKeyMessageEvent>.message;
<new DOMString> = <MediaKeys>.keySystem;
<new MediaKeySession> = <MediaKeys>.createSession();
<new MediaKeySession> = <MediaKeys>.createSession(<MediaKeySessionType>);
<new Promise_void_> = <MediaKeys>.setServerCertificate(<BufferSource>);
<new Promise_MediaKeyStatus_> = new Promise(function(x){console.log("ok")});
<new Promise_MediaKeyStatus_> = <MediaKeys>.getStatusForPolicy();
<new Promise_MediaKeyStatus_> = <MediaKeys>.getStatusForPolicy(<MediaKeysPolicy>);
!extends MediaKeySession EventTarget;
<new EventTarget> = <MediaKeySession>;
<new MediaKeyError> = <MediaKeySession>.error;
<new DOMString> = <MediaKeySession>.sessionId;
<new unrestricted double> = <MediaKeySession>.expiration;
<new Promise_void_> = <MediaKeySession>.closed;
<new MediaKeyStatusMap> = <MediaKeySession>.keyStatuses;
<new EventHandler> = <MediaKeySession>.onkeystatuseschange;
<MediaKeySession>.onkeystatuseschange = <EventHandler>;
<new EventHandler> = <MediaKeySession>.onmessage;
<MediaKeySession>.onmessage = <EventHandler>;
<new Promise_void_> = <MediaKeySession>.generateRequest(<DOMString>,<BufferSource>);
<new Promise_boolean_> = <MediaKeySession>.load(<DOMString>);
<new Promise_void_> = <MediaKeySession>.update(<BufferSource>);
<new Promise_void_> = <MediaKeySession>.close();
<new Promise_void_> = <MediaKeySession>.remove();
<new unsigned long> = <MediaKeyStatusMap>.size;
<MediaKeyStatusMap>.has(<BufferSource>);
<new any> = <MediaKeyStatusMap>.get(<BufferSource>);
<new DOMString> = <MediaKeySystemAccess>.keySystem;
<new MediaKeySystemConfiguration> = <MediaKeySystemAccess>.getConfiguration();
<new Promise_MediaKeys_> = new Promise(function(x){console.log("ok")});
<new Promise_MediaKeys_> = <MediaKeySystemAccess>.createMediaKeys();
<new UTF8String> = <MediaList>.mediaText;
<MediaList>.mediaText = <UTF8String>;
<new unsigned long> = <MediaList>.length;
<new UTF8String> = <MediaList>.item(<unsigned long>);
<new void> = <MediaList>.deleteMedium(<UTF8String>);
<new void> = <MediaList>.appendMedium(<UTF8String>);
!extends MediaQueryList EventTarget;
<new EventTarget> = <MediaQueryList>;
<new UTF8String> = <MediaQueryList>.media;
<new boolean> = <MediaQueryList>.matches;
<new void> = <MediaQueryList>.addListener(<EventListener>);
<new void> = <MediaQueryList>.removeListener(<EventListener>);
<new EventHandler> = <MediaQueryList>.onchange;
<MediaQueryList>.onchange = <EventHandler>;
!extends MediaQueryListEvent Event;
<new Event> = <MediaQueryListEvent>;
<new MediaQueryListEvent> = new MediaQueryListEvent(<DOMString>);
<new MediaQueryListEvent> = new MediaQueryListEvent(<DOMString>,<MediaQueryListEventInit>);
<new UTF8String> = <MediaQueryListEvent>.media;
<new boolean> = <MediaQueryListEvent>.matches;
!extends MediaRecorder EventTarget;
<new EventTarget> = <MediaRecorder>;
<new MediaRecorder> = new MediaRecorder(<MediaStream>);
<new MediaRecorder> = new MediaRecorder(<MediaStream>,<MediaRecorderOptions>);
<new MediaRecorder> = new MediaRecorder(<AudioNode>);
<new MediaRecorder> = new MediaRecorder(<AudioNode>,<unsigned long>);
<new MediaRecorder> = new MediaRecorder(<AudioNode>,<unsigned long>,<MediaRecorderOptions>);
<new MediaStream> = <MediaRecorder>.stream;
<new DOMString> = <MediaRecorder>.mimeType;
<new RecordingState> = <MediaRecorder>.state;
<new EventHandler> = <MediaRecorder>.onstart;
<MediaRecorder>.onstart = <EventHandler>;
<new EventHandler> = <MediaRecorder>.onstop;
<MediaRecorder>.onstop = <EventHandler>;
<new EventHandler> = <MediaRecorder>.ondataavailable;
<MediaRecorder>.ondataavailable = <EventHandler>;
<new EventHandler> = <MediaRecorder>.onpause;
<MediaRecorder>.onpause = <EventHandler>;
<new EventHandler> = <MediaRecorder>.onresume;
<MediaRecorder>.onresume = <EventHandler>;
<new EventHandler> = <MediaRecorder>.onerror;
<MediaRecorder>.onerror = <EventHandler>;
<new unsigned long> = <MediaRecorder>.videoBitsPerSecond;
<new unsigned long> = <MediaRecorder>.audioBitsPerSecond;
<new void> = <MediaRecorder>.start();
<new void> = <MediaRecorder>.start(<unsigned long>);
<new void> = <MediaRecorder>.stop();
<new void> = <MediaRecorder>.pause();
<new void> = <MediaRecorder>.resume();
<new void> = <MediaRecorder>.requestData();
<MediaRecorder>.isTypeSupported(<DOMString>);
!extends MediaRecorderErrorEvent Event;
<new Event> = <MediaRecorderErrorEvent>;
<new MediaRecorderErrorEvent> = new MediaRecorderErrorEvent(<DOMString>,<MediaRecorderErrorEventInit>);
<new DOMException> = <MediaRecorderErrorEvent>.error;
<new MediaMetadata> = <MediaSession>.metadata;
<MediaSession>.metadata = <MediaMetadata>;
<MediaSession>.metadata = null;
<new MediaSessionPlaybackState> = <MediaSession>.playbackState;
<MediaSession>.playbackState = <MediaSessionPlaybackState>;
<new void> = <MediaSession>.setActionHandler(<MediaSessionAction>,<MediaSessionActionHandler>);
<new void> = <MediaSession>.setPositionState();
<new void> = <MediaSession>.setPositionState(<MediaPositionState>);
<new void> = <MediaSession>.notifyHandler(<MediaSessionActionDetails>);
<new MediaMetadata> = new MediaMetadata();
<new MediaMetadata> = new MediaMetadata(<MediaMetadataInit>);
<new DOMString> = <MediaMetadata>.title;
<MediaMetadata>.title = <DOMString>;
<new DOMString> = <MediaMetadata>.artist;
<MediaMetadata>.artist = <DOMString>;
<new DOMString> = <MediaMetadata>.album;
<MediaMetadata>.album = <DOMString>;
<new sequence_object_> = <MediaMetadata>.artwork;
<MediaMetadata>.artwork = <sequence_object_>;
!extends MediaSource EventTarget;
<new EventTarget> = <MediaSource>;
<new MediaSource> = new MediaSource();
<new SourceBufferList> = <MediaSource>.sourceBuffers;
<new SourceBufferList> = <MediaSource>.activeSourceBuffers;
<new MediaSourceReadyState> = <MediaSource>.readyState;
<new unrestricted double> = <MediaSource>.duration;
<MediaSource>.duration = <unrestricted double>;
<new EventHandler> = <MediaSource>.onsourceopen;
<MediaSource>.onsourceopen = <EventHandler>;
<new EventHandler> = <MediaSource>.onsourceended;
<MediaSource>.onsourceended = <EventHandler>;
<new EventHandler> = <MediaSource>.onsourceclose;
<MediaSource>.onsourceclose = <EventHandler>;
<new SourceBuffer> = <MediaSource>.addSourceBuffer(<DOMString>);
<new void> = <MediaSource>.removeSourceBuffer(<SourceBuffer>);
<new void> = <MediaSource>.endOfStream();
<new void> = <MediaSource>.endOfStream(<MediaSourceEndOfStreamError>);
<new void> = <MediaSource>.setLiveSeekableRange(<double>,<double>);
<new void> = <MediaSource>.clearLiveSeekableRange();
<MediaSource>.isTypeSupported(<DOMString>);
<new Promise_MediaSourceDecoderDebugInfo_> = new Promise(function(x){console.log("ok")});
<new Promise_MediaSourceDecoderDebugInfo_> = <MediaSource>.mozDebugReaderData();
!extends MediaStream EventTarget;
<new EventTarget> = <MediaStream>;
<new MediaStream> = new MediaStream();
<new MediaStream> = new MediaStream(<MediaStream>);
<new sequence_MediaStreamTrack_> = [<MediaStreamTrack>];
<new MediaStreamTrack> = <sequence_MediaStreamTrack_>[0];
<new MediaStream> = new MediaStream(<sequence_MediaStreamTrack_>);
<new DOMString> = <MediaStream>.id;
<new sequence_MediaStreamTrack_> = <MediaStream>.getAudioTracks();
<new sequence_MediaStreamTrack_> = <MediaStream>.getVideoTracks();
<new sequence_MediaStreamTrack_> = <MediaStream>.getTracks();
<new MediaStreamTrack> = <MediaStream>.getTrackById(<DOMString>);
<new void> = <MediaStream>.addTrack(<MediaStreamTrack>);
<new void> = <MediaStream>.removeTrack(<MediaStreamTrack>);
<new MediaStream> = <MediaStream>.clone();
<new boolean> = <MediaStream>.active;
<new EventHandler> = <MediaStream>.onaddtrack;
<MediaStream>.onaddtrack = <EventHandler>;
<new EventHandler> = <MediaStream>.onremovetrack;
<MediaStream>.onremovetrack = <EventHandler>;
<new Promise_long_> = new Promise(function(x){console.log("ok")});
<new Promise_long_> = <MediaStream>.countUnderlyingStreams();
<new void> = <MediaStream>.assignId(<DOMString>);
!extends MediaStreamAudioDestinationNode AudioNode;
<new AudioNode> = <MediaStreamAudioDestinationNode>;
<new MediaStreamAudioDestinationNode> = new MediaStreamAudioDestinationNode(<AudioContext>);
<new MediaStreamAudioDestinationNode> = new MediaStreamAudioDestinationNode(<AudioContext>,<AudioNodeOptions>);
<new MediaStream> = <MediaStreamAudioDestinationNode>.stream;
!extends MediaStreamAudioSourceNode AudioNode;
<new AudioNode> = <MediaStreamAudioSourceNode>;
<new MediaStreamAudioSourceNode> = new MediaStreamAudioSourceNode(<AudioContext>,<MediaStreamAudioSourceOptions>);
<new MediaStream> = <MediaStreamAudioSourceNode>.mediaStream;
<new DOMString> = <MediaStreamError>.name;
<new DOMString> = <MediaStreamError>.message;
<new DOMString> = <MediaStreamError>.constraint;
!extends MediaStreamEvent Event;
<new Event> = <MediaStreamEvent>;
<new MediaStreamEvent> = new MediaStreamEvent(<DOMString>);
<new MediaStreamEvent> = new MediaStreamEvent(<DOMString>,<MediaStreamEventInit>);
<new MediaStream> = <MediaStreamEvent>.stream;
!extends MediaStreamTrack EventTarget;
<new EventTarget> = <MediaStreamTrack>;
<new DOMString> = <MediaStreamTrack>.kind;
<new DOMString> = <MediaStreamTrack>.id;
<new DOMString> = <MediaStreamTrack>.label;
<new boolean> = <MediaStreamTrack>.enabled;
<MediaStreamTrack>.enabled = <boolean>;
<new boolean> = <MediaStreamTrack>.muted;
<new EventHandler> = <MediaStreamTrack>.onmute;
<MediaStreamTrack>.onmute = <EventHandler>;
<new EventHandler> = <MediaStreamTrack>.onunmute;
<MediaStreamTrack>.onunmute = <EventHandler>;
<new MediaStreamTrackState> = <MediaStreamTrack>.readyState;
<new EventHandler> = <MediaStreamTrack>.onended;
<MediaStreamTrack>.onended = <EventHandler>;
<new MediaStreamTrack> = <MediaStreamTrack>.clone();
<new void> = <MediaStreamTrack>.stop();
<new MediaTrackConstraints> = <MediaStreamTrack>.getConstraints();
<new MediaTrackSettings> = <MediaStreamTrack>.getSettings();
<new Promise_void_> = <MediaStreamTrack>.applyConstraints();
<new Promise_void_> = <MediaStreamTrack>.applyConstraints(<MediaTrackConstraints>);
!extends MediaStreamTrackAudioSourceNode AudioNode;
<new AudioNode> = <MediaStreamTrackAudioSourceNode>;
<new MediaStreamTrackAudioSourceNode> = new MediaStreamTrackAudioSourceNode(<AudioContext>,<MediaStreamTrackAudioSourceOptions>);
!extends MediaStreamTrackEvent Event;
<new Event> = <MediaStreamTrackEvent>;
<new MediaStreamTrackEvent> = new MediaStreamTrackEvent(<DOMString>,<MediaStreamTrackEventInit>);
<new MediaStreamTrack> = <MediaStreamTrackEvent>.track;
!extends MerchantValidationEvent Event;
<new Event> = <MerchantValidationEvent>;
<new MerchantValidationEvent> = new MerchantValidationEvent(<DOMString>);
<new MerchantValidationEvent> = new MerchantValidationEvent(<DOMString>,<MerchantValidationEventInit>);
<new DOMString> = <MerchantValidationEvent>.methodName;
<new USVString> = <MerchantValidationEvent>.validationURL;
<new void> = <MerchantValidationEvent>.complete(<Promise_any_>);
<new MessageChannel> = new MessageChannel();
<new MessagePort> = <MessageChannel>.port1;
<new MessagePort> = <MessageChannel>.port2;
!extends MessageEvent Event;
<new Event> = <MessageEvent>;
<new MessageEvent> = new MessageEvent(<DOMString>);
<new MessageEvent> = new MessageEvent(<DOMString>,<MessageEventInit>);
<new any> = <MessageEvent>.data;
<new USVString> = <MessageEvent>.origin;
<new DOMString> = <MessageEvent>.lastEventId;
<new MessageEventSource> = <MessageEvent>.source;
<new sequence_MessagePort_> = <MessageEvent>.ports;
<new void> = <MessageEvent>.initMessageEvent(<DOMString>);
<new void> = <MessageEvent>.initMessageEvent(<DOMString>,<boolean>);
<new void> = <MessageEvent>.initMessageEvent(<DOMString>,<boolean>,<boolean>);
<new void> = <MessageEvent>.initMessageEvent(<DOMString>,<boolean>,<boolean>,<any>);
<new void> = <MessageEvent>.initMessageEvent(<DOMString>,<boolean>,<boolean>,<any>,<DOMString>);
<new void> = <MessageEvent>.initMessageEvent(<DOMString>,<boolean>,<boolean>,<any>,<DOMString>,<DOMString>);
<new void> = <MessageEvent>.initMessageEvent(<DOMString>,<boolean>,<boolean>,<any>,<DOMString>,<DOMString>,<MessageEventSource>);
<new void> = <MessageEvent>.initMessageEvent(<DOMString>,<boolean>,<boolean>,<any>,<DOMString>,<DOMString>,<MessageEventSource>,<sequence_MessagePort_>);
!extends MessagePort EventTarget;
<new EventTarget> = <MessagePort>;
<new void> = <MessagePort>.postMessage(<any>,<sequence_object_>);
<new void> = <MessagePort>.postMessage(<any>);
<new void> = <MessagePort>.postMessage(<any>,<StructuredSerializeOptions>);
<new void> = <MessagePort>.start();
<new void> = <MessagePort>.close();
<new EventHandler> = <MessagePort>.onmessage;
<MessagePort>.onmessage = <EventHandler>;
<new EventHandler> = <MessagePort>.onmessageerror;
<MessagePort>.onmessageerror = <EventHandler>;
!extends MIDIAccess EventTarget;
<new EventTarget> = <MIDIAccess>;
<new MIDIInputMap> = <MIDIAccess>.inputs;
<new MIDIOutputMap> = <MIDIAccess>.outputs;
<new EventHandler> = <MIDIAccess>.onstatechange;
<MIDIAccess>.onstatechange = <EventHandler>;
<new boolean> = <MIDIAccess>.sysexEnabled;
!extends MIDIConnectionEvent Event;
<new Event> = <MIDIConnectionEvent>;
<new MIDIConnectionEvent> = new MIDIConnectionEvent(<DOMString>);
<new MIDIConnectionEvent> = new MIDIConnectionEvent(<DOMString>,<MIDIConnectionEventInit>);
<new MIDIPort> = <MIDIConnectionEvent>.port;
!extends MIDIInput MIDIPort;
<new MIDIPort> = <MIDIInput>;
<new EventHandler> = <MIDIInput>.onmidimessage;
<MIDIInput>.onmidimessage = <EventHandler>;
!extends MIDIMessageEvent Event;
<new Event> = <MIDIMessageEvent>;
<new MIDIMessageEvent> = new MIDIMessageEvent(<DOMString>);
<new MIDIMessageEvent> = new MIDIMessageEvent(<DOMString>,<MIDIMessageEventInit>);
<new Uint8Array> = <MIDIMessageEvent>.data;
!extends MIDIOutput MIDIPort;
<new MIDIPort> = <MIDIOutput>;
<new void> = <MIDIOutput>.send(<sequence_octet_>);
<new void> = <MIDIOutput>.send(<sequence_octet_>,<DOMHighResTimeStamp>);
<new void> = <MIDIOutput>.clear();
!extends MIDIPort EventTarget;
<new EventTarget> = <MIDIPort>;
<new DOMString> = <MIDIPort>.id;
<new DOMString> = <MIDIPort>.manufacturer;
<new DOMString> = <MIDIPort>.name;
<new DOMString> = <MIDIPort>.version;
<new MIDIPortType> = <MIDIPort>.type;
<new MIDIPortDeviceState> = <MIDIPort>.state;
<new MIDIPortConnectionState> = <MIDIPort>.connection;
<new EventHandler> = <MIDIPort>.onstatechange;
<MIDIPort>.onstatechange = <EventHandler>;
<new Promise_MIDIPort_> = new Promise(function(x){console.log("ok")});
<new Promise_MIDIPort_> = <MIDIPort>.open();
<new Promise_MIDIPort_> = <MIDIPort>.close();
<new DOMString> = <MimeType>.description;
<new Plugin> = <MimeType>.enabledPlugin;
<new DOMString> = <MimeType>.suffixes;
<new DOMString> = <MimeType>.type;
<new unsigned long> = <MimeTypeArray>.length;
<new MimeType> = <MimeTypeArray>.item(<unsigned long>);
<new MimeType> = <MimeTypeArray>.namedItem(<DOMString>);
!extends MouseEvent UIEvent;
<new UIEvent> = <MouseEvent>;
<new MouseEvent> = new MouseEvent(<DOMString>);
<new MouseEvent> = new MouseEvent(<DOMString>,<MouseEventInit>);
<new long> = <MouseEvent>.screenX;
<new long> = <MouseEvent>.screenY;
<new long> = <MouseEvent>.pageX;
<new long> = <MouseEvent>.pageY;
<new long> = <MouseEvent>.clientX;
<new long> = <MouseEvent>.clientY;
<new long> = <MouseEvent>.x;
<new long> = <MouseEvent>.y;
<new long> = <MouseEvent>.offsetX;
<new long> = <MouseEvent>.offsetY;
<new boolean> = <MouseEvent>.ctrlKey;
<new boolean> = <MouseEvent>.shiftKey;
<new boolean> = <MouseEvent>.altKey;
<new boolean> = <MouseEvent>.metaKey;
<new short> = <MouseEvent>.button;
<new unsigned short> = <MouseEvent>.buttons;
<new EventTarget> = <MouseEvent>.relatedTarget;
<new DOMString> = <MouseEvent>.region;
<new long> = <MouseEvent>.movementX;
<new long> = <MouseEvent>.movementY;
<new void> = <MouseEvent>.initMouseEvent(<DOMString>);
<new void> = <MouseEvent>.initMouseEvent(<DOMString>,<boolean>);
<new void> = <MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>);
<new void> = <MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>);
<new void> = <MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>);
<new void> = <MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>);
<new void> = <MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>);
<new void> = <MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>);
<new void> = <MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>);
<new void> = <MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>);
<new void> = <MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>);
<new void> = <MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>,<boolean>);
<new void> = <MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>,<boolean>,<boolean>);
<new void> = <MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>,<boolean>,<boolean>,<short>);
<new void> = <MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>,<boolean>,<boolean>,<short>,<EventTarget>);
<MouseEvent>.getModifierState(<DOMString>);
<new float> = <MouseEvent>.mozPressure;
<new unsigned short> = <MouseEvent>.MOZ_SOURCE_UNKNOWN;
<new unsigned short> = <MouseEvent>.MOZ_SOURCE_MOUSE;
<new unsigned short> = <MouseEvent>.MOZ_SOURCE_PEN;
<new unsigned short> = <MouseEvent>.MOZ_SOURCE_ERASER;
<new unsigned short> = <MouseEvent>.MOZ_SOURCE_CURSOR;
<new unsigned short> = <MouseEvent>.MOZ_SOURCE_TOUCH;
<new unsigned short> = <MouseEvent>.MOZ_SOURCE_KEYBOARD;
<new unsigned short> = <MouseEvent>.mozInputSource;
<new void> = <MouseEvent>.initNSMouseEvent(<DOMString>);
<new void> = <MouseEvent>.initNSMouseEvent(<DOMString>,<boolean>);
<new void> = <MouseEvent>.initNSMouseEvent(<DOMString>,<boolean>,<boolean>);
<new void> = <MouseEvent>.initNSMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>);
<new void> = <MouseEvent>.initNSMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>);
<new void> = <MouseEvent>.initNSMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>);
<new void> = <MouseEvent>.initNSMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>);
<new void> = <MouseEvent>.initNSMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>);
<new void> = <MouseEvent>.initNSMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>);
<new void> = <MouseEvent>.initNSMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>);
<new void> = <MouseEvent>.initNSMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>);
<new void> = <MouseEvent>.initNSMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>,<boolean>);
<new void> = <MouseEvent>.initNSMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>,<boolean>,<boolean>);
<new void> = <MouseEvent>.initNSMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>,<boolean>,<boolean>,<short>);
<new void> = <MouseEvent>.initNSMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>,<boolean>,<boolean>,<short>,<EventTarget>);
<new void> = <MouseEvent>.initNSMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>,<boolean>,<boolean>,<short>,<EventTarget>,<float>);
<new void> = <MouseEvent>.initNSMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>,<boolean>,<boolean>,<short>,<EventTarget>,<float>,<unsigned short>);
<new void> = <MouseEvent>.preventClickEvent();
<MouseEvent>.clickEventPrevented();
!extends MouseScrollEvent MouseEvent;
<new MouseEvent> = <MouseScrollEvent>;
<new long> = <MouseScrollEvent>.HORIZONTAL_AXIS;
<new long> = <MouseScrollEvent>.VERTICAL_AXIS;
<new long> = <MouseScrollEvent>.axis;
<new void> = <MouseScrollEvent>.initMouseScrollEvent(<DOMString>);
<new void> = <MouseScrollEvent>.initMouseScrollEvent(<DOMString>,<boolean>);
<new void> = <MouseScrollEvent>.initMouseScrollEvent(<DOMString>,<boolean>,<boolean>);
<new void> = <MouseScrollEvent>.initMouseScrollEvent(<DOMString>,<boolean>,<boolean>,<Window>);
<new void> = <MouseScrollEvent>.initMouseScrollEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>);
<new void> = <MouseScrollEvent>.initMouseScrollEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>);
<new void> = <MouseScrollEvent>.initMouseScrollEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>);
<new void> = <MouseScrollEvent>.initMouseScrollEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>);
<new void> = <MouseScrollEvent>.initMouseScrollEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>);
<new void> = <MouseScrollEvent>.initMouseScrollEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>);
<new void> = <MouseScrollEvent>.initMouseScrollEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>);
<new void> = <MouseScrollEvent>.initMouseScrollEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>,<boolean>);
<new void> = <MouseScrollEvent>.initMouseScrollEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>,<boolean>,<boolean>);
<new void> = <MouseScrollEvent>.initMouseScrollEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>,<boolean>,<boolean>,<short>);
<new void> = <MouseScrollEvent>.initMouseScrollEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>,<boolean>,<boolean>,<short>,<EventTarget>);
<new void> = <MouseScrollEvent>.initMouseScrollEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>,<boolean>,<boolean>,<short>,<EventTarget>,<long>);
!extends MozApplicationEvent Event;
<new Event> = <MozApplicationEvent>;
<new MozApplicationEvent> = new MozApplicationEvent(<DOMString>);
<new MozApplicationEvent> = new MozApplicationEvent(<DOMString>,<MozApplicationEventInit>);
<new DOMApplication> = <MozApplicationEvent>.application;
!extends MutationEvent Event;
<new Event> = <MutationEvent>;
<new unsigned short> = <MutationEvent>.MODIFICATION;
<new unsigned short> = <MutationEvent>.ADDITION;
<new unsigned short> = <MutationEvent>.REMOVAL;
<new unsigned short> = <MutationEvent>.SMIL;
<new Node> = <MutationEvent>.relatedNode;
<new DOMString> = <MutationEvent>.prevValue;
<new DOMString> = <MutationEvent>.newValue;
<new DOMString> = <MutationEvent>.attrName;
<new unsigned short> = <MutationEvent>.attrChange;
<new void> = <MutationEvent>.initMutationEvent(<DOMString>);
<new void> = <MutationEvent>.initMutationEvent(<DOMString>,<boolean>);
<new void> = <MutationEvent>.initMutationEvent(<DOMString>,<boolean>,<boolean>);
<new void> = <MutationEvent>.initMutationEvent(<DOMString>,<boolean>,<boolean>,<Node>);
<new void> = <MutationEvent>.initMutationEvent(<DOMString>,<boolean>,<boolean>,<Node>,<DOMString>);
<new void> = <MutationEvent>.initMutationEvent(<DOMString>,<boolean>,<boolean>,<Node>,<DOMString>,<DOMString>);
<new void> = <MutationEvent>.initMutationEvent(<DOMString>,<boolean>,<boolean>,<Node>,<DOMString>,<DOMString>,<DOMString>);
<new void> = <MutationEvent>.initMutationEvent(<DOMString>,<boolean>,<boolean>,<Node>,<DOMString>,<DOMString>,<DOMString>,<unsigned short>);
<new DOMString> = <MutationRecord>.type;
<new Node> = <MutationRecord>.target;
<new NodeList> = <MutationRecord>.addedNodes;
<new NodeList> = <MutationRecord>.removedNodes;
<new Node> = <MutationRecord>.previousSibling;
<new Node> = <MutationRecord>.nextSibling;
<new DOMString> = <MutationRecord>.attributeName;
<new DOMString> = <MutationRecord>.attributeNamespace;
<new DOMString> = <MutationRecord>.oldValue;
<new sequence_Animation_> = [<Animation>];
<new Animation> = <sequence_Animation_>[0];
<new sequence_Animation_> = <MutationRecord>.addedAnimations;
<new sequence_Animation_> = <MutationRecord>.changedAnimations;
<new sequence_Animation_> = <MutationRecord>.removedAnimations;
<new MutationObserver> = new MutationObserver(<MutationCallback>);
<new void> = <MutationObserver>.observe(<Node>);
<new void> = <MutationObserver>.observe(<Node>,<MutationObserverInit>);
<new void> = <MutationObserver>.disconnect();
<new sequence_MutationRecord_> = [<MutationRecord>];
<new MutationRecord> = <sequence_MutationRecord_>[0];
<new sequence_MutationRecord_> = <MutationObserver>.takeRecords();
<new sequence_MutationObservingInfo_> = [<MutationObservingInfo>];
<new MutationObservingInfo> = <sequence_MutationObservingInfo_>[0];
<new sequence_MutationObservingInfo_> = <MutationObserver>.getObservingInfo();
<new MutationCallback> = <MutationObserver>.mutationCallback;
<new boolean> = <MutationObserver>.mergeAttributeRecords;
<MutationObserver>.mergeAttributeRecords = <boolean>;
<new Attr> = <NamedNodeMap>.getNamedItem(<DOMString>);
<new Attr> = <NamedNodeMap>.setNamedItem(<Attr>);
<new Attr> = <NamedNodeMap>.removeNamedItem(<DOMString>);
<new Attr> = <NamedNodeMap>.item(<unsigned long>);
<new unsigned long> = <NamedNodeMap>.length;
<new Attr> = <NamedNodeMap>.getNamedItemNS(<DOMString>,<DOMString>);
<new Attr> = <NamedNodeMap>.setNamedItemNS(<Attr>);
<new Attr> = <NamedNodeMap>.removeNamedItemNS(<DOMString>,<DOMString>);
<new Promise_void_> = <NavigationPreloadManager>.enable();
<new Promise_void_> = <NavigationPreloadManager>.disable();
<new Promise_void_> = <NavigationPreloadManager>.setHeaderValue(<ByteString>);
<new Promise_NavigationPreloadState_> = new Promise(function(x){console.log("ok")});
<new Promise_NavigationPreloadState_> = <NavigationPreloadManager>.getState();
<new Permissions> = <Navigator>.permissions;
<new MimeTypeArray> = <Navigator>.mimeTypes;
<new PluginArray> = <Navigator>.plugins;
<new DOMString> = <Navigator>.doNotTrack;
<new boolean> = <Navigator>.globalPrivacyControl;
<new Promise_BatteryManager_> = new Promise(function(x){console.log("ok")});
<new Promise_BatteryManager_> = <Navigator>.getBattery();
<Navigator>.vibrate(<unsigned long>);
<new sequence_unsigned long_> = [<unsigned long>];
<new unsigned long> = <sequence_unsigned long_>[0];
<Navigator>.vibrate(<sequence_unsigned long_>);
<new long> = <Navigator>.maxTouchPoints;
<new MediaCapabilities> = <Navigator>.mediaCapabilities;
<new void> = <Navigator>.setVibrationPermission(<boolean>);
<new void> = <Navigator>.setVibrationPermission(<boolean>,<boolean>);
<new DOMString> = <Navigator>.oscpu;
<new DOMString> = <Navigator>.vendor;
<new DOMString> = <Navigator>.vendorSub;
<new DOMString> = <Navigator>.productSub;
<new boolean> = <Navigator>.cookieEnabled;
<new DOMString> = <Navigator>.buildID;
<Navigator>.javaEnabled();
<new AddonManager> = <Navigator>.mozAddonManager;
<new NetworkInformation> = <Navigator>.connection;
<new sequence_Gamepad_> = [<Gamepad>];
<new Gamepad> = <sequence_Gamepad_>[0];
<new sequence_Gamepad_> = <Navigator>.getGamepads();
<new GamepadServiceTest> = <Navigator>.requestGamepadServiceTest();
<new sequence_VRDisplay_> = [<VRDisplay>];
<new VRDisplay> = <sequence_VRDisplay_>[0];
<new Promise_sequence_VRDisplay__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_VRDisplay__> = <Navigator>.getVRDisplays();
<new sequence_VRDisplay_> = <Navigator>.activeVRDisplays;
<new boolean> = <Navigator>.isWebVRContentDetected;
<new boolean> = <Navigator>.isWebVRContentPresenting;
<new void> = <Navigator>.requestVRPresentation(<VRDisplay>);
<new VRServiceTest> = <Navigator>.requestVRServiceTest();
<new XRSystem> = <Navigator>.xr;
<new Promise_MIDIAccess_> = new Promise(function(x){console.log("ok")});
<new Promise_MIDIAccess_> = <Navigator>.requestMIDIAccess();
<new Promise_MIDIAccess_> = <Navigator>.requestMIDIAccess(<MIDIOptions>);
<new MediaDevices> = <Navigator>.mediaDevices;
<new void> = <Navigator>.mozGetUserMedia(<MediaStreamConstraints>,<NavigatorUserMediaSuccessCallback>,<NavigatorUserMediaErrorCallback>);
<new ServiceWorkerContainer> = <Navigator>.serviceWorker;
<Navigator>.sendBeacon(<DOMString>);
<Navigator>.sendBeacon(<DOMString>,<BodyInit>);
<new LegacyMozTCPSocket> = <Navigator>.mozTCPSocket;
<new Promise_MediaKeySystemAccess_> = new Promise(function(x){console.log("ok")});
<new sequence_MediaKeySystemConfiguration_> = [<MediaKeySystemConfiguration>];
<new MediaKeySystemConfiguration> = <sequence_MediaKeySystemConfiguration_>[0];
<new Promise_MediaKeySystemAccess_> = <Navigator>.requestMediaKeySystemAccess(<DOMString>,<sequence_MediaKeySystemConfiguration_>);
<new CredentialsContainer> = <Navigator>.credentials;
<new Clipboard> = <Navigator>.clipboard;
<new Promise_void_> = <Navigator>.share();
<new Promise_void_> = <Navigator>.share(<ShareData>);
<new MediaSession> = <Navigator>.mediaSession;
!extends NetworkInformation EventTarget;
<new EventTarget> = <NetworkInformation>;
<new ConnectionType> = <NetworkInformation>.type;
<new EventHandler> = <NetworkInformation>.ontypechange;
<NetworkInformation>.ontypechange = <EventHandler>;
!extends Node EventTarget;
<new EventTarget> = <Node>;
<new unsigned short> = <Node>.ELEMENT_NODE;
<new unsigned short> = <Node>.ATTRIBUTE_NODE;
<new unsigned short> = <Node>.TEXT_NODE;
<new unsigned short> = <Node>.CDATA_SECTION_NODE;
<new unsigned short> = <Node>.ENTITY_REFERENCE_NODE;
<new unsigned short> = <Node>.ENTITY_NODE;
<new unsigned short> = <Node>.PROCESSING_INSTRUCTION_NODE;
<new unsigned short> = <Node>.COMMENT_NODE;
<new unsigned short> = <Node>.DOCUMENT_NODE;
<new unsigned short> = <Node>.DOCUMENT_TYPE_NODE;
<new unsigned short> = <Node>.DOCUMENT_FRAGMENT_NODE;
<new unsigned short> = <Node>.NOTATION_NODE;
<new unsigned short> = <Node>.nodeType;
<new DOMString> = <Node>.nodeName;
<new DOMString> = <Node>.baseURI;
<new boolean> = <Node>.isConnected;
<new Document> = <Node>.ownerDocument;
<new Node> = <Node>.getRootNode();
<new Node> = <Node>.getRootNode(<GetRootNodeOptions>);
<new Node> = <Node>.parentNode;
<new Element> = <Node>.parentElement;
<Node>.hasChildNodes();
<new NodeList> = <Node>.childNodes;
<new Node> = <Node>.firstChild;
<new Node> = <Node>.lastChild;
<new Node> = <Node>.previousSibling;
<new Node> = <Node>.nextSibling;
<new DOMString> = <Node>.nodeValue;
<Node>.nodeValue = <DOMString>;
<Node>.nodeValue = null;
<new DOMString> = <Node>.textContent;
<Node>.textContent = <DOMString>;
<Node>.textContent = null;
<new Node> = <Node>.insertBefore(<Node>,<Node>);
<new Node> = <Node>.appendChild(<Node>);
<new Node> = <Node>.replaceChild(<Node>,<Node>);
<new Node> = <Node>.removeChild(<Node>);
<new void> = <Node>.normalize();
<new Node> = <Node>.cloneNode();
<new Node> = <Node>.cloneNode(<boolean>);
<Node>.isSameNode(<Node>);
<Node>.isEqualNode(<Node>);
<new unsigned short> = <Node>.DOCUMENT_POSITION_DISCONNECTED;
<new unsigned short> = <Node>.DOCUMENT_POSITION_PRECEDING;
<new unsigned short> = <Node>.DOCUMENT_POSITION_FOLLOWING;
<new unsigned short> = <Node>.DOCUMENT_POSITION_CONTAINS;
<new unsigned short> = <Node>.DOCUMENT_POSITION_CONTAINED_BY;
<new unsigned short> = <Node>.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC;
<new unsigned short> = <Node>.compareDocumentPosition(<Node>);
<Node>.contains(<Node>);
<new DOMString> = <Node>.lookupPrefix(<DOMString>);
<new DOMString> = <Node>.lookupNamespaceURI(<DOMString>);
<Node>.isDefaultNamespace(<DOMString>);
<new Principal> = <Node>.nodePrincipal;
<new URI> = <Node>.baseURIObject;
<new DOMString> = <Node>.generateXPath();
<new Node> = <Node>.flattenedTreeParentNode;
<new boolean> = <Node>.isNativeAnonymous;
<new ShadowRoot> = <Node>.containingShadowRoot;
<new Element> = <Node>.parentFlexElement;
<new Node> = <NodeIterator>.root;
<new Node> = <NodeIterator>.referenceNode;
<new boolean> = <NodeIterator>.pointerBeforeReferenceNode;
<new unsigned long> = <NodeIterator>.whatToShow;
<new NodeFilter> = <NodeIterator>.filter;
<new Node> = <NodeIterator>.nextNode();
<new Node> = <NodeIterator>.previousNode();
<new void> = <NodeIterator>.detach();
<new Node> = <NodeList>.item(<unsigned long>);
<new unsigned long> = <NodeList>.length;
!extends Notification EventTarget;
<new EventTarget> = <Notification>;
<new Notification> = new Notification(<DOMString>);
<new Notification> = new Notification(<DOMString>,<NotificationOptions>);
<new NotificationPermission> = <Notification>.permission;
<new Promise_NotificationPermission_> = new Promise(function(x){console.log("ok")});
<new Promise_NotificationPermission_> = <Notification>.requestPermission();
<new Promise_NotificationPermission_> = <Notification>.requestPermission(<NotificationPermissionCallback>);
<new sequence_Notification_> = [<Notification>];
<new Notification> = <sequence_Notification_>[0];
<new Promise_sequence_Notification__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_Notification__> = <Notification>.get();
<new Promise_sequence_Notification__> = <Notification>.get(<GetNotificationOptions>);
<new EventHandler> = <Notification>.onclick;
<Notification>.onclick = <EventHandler>;
<new EventHandler> = <Notification>.onshow;
<Notification>.onshow = <EventHandler>;
<new EventHandler> = <Notification>.onerror;
<Notification>.onerror = <EventHandler>;
<new EventHandler> = <Notification>.onclose;
<Notification>.onclose = <EventHandler>;
<new DOMString> = <Notification>.title;
<new NotificationDirection> = <Notification>.dir;
<new DOMString> = <Notification>.lang;
<new DOMString> = <Notification>.body;
<new DOMString> = <Notification>.tag;
<new DOMString> = <Notification>.icon;
<new boolean> = <Notification>.requireInteraction;
<new boolean> = <Notification>.silent;
<new sequence_unsigned long_> = <Notification>.vibrate;
<new any> = <Notification>.data;
<new void> = <Notification>.close();
!extends NotificationEvent ExtendableEvent;
<new ExtendableEvent> = <NotificationEvent>;
<new NotificationEvent> = new NotificationEvent(<DOMString>,<NotificationEventInit>);
<new Notification> = <NotificationEvent>.notification;
!extends NotifyPaintEvent Event;
<new Event> = <NotifyPaintEvent>;
<new DOMRectList> = <NotifyPaintEvent>.clientRects;
<new DOMRect> = <NotifyPaintEvent>.boundingClientRect;
<new PaintRequestList> = <NotifyPaintEvent>.paintRequests;
<new unsigned long long> = <NotifyPaintEvent>.transactionId;
<new DOMHighResTimeStamp> = <NotifyPaintEvent>.paintTimeStamp;
!extends OfflineAudioCompletionEvent Event;
<new Event> = <OfflineAudioCompletionEvent>;
<new OfflineAudioCompletionEvent> = new OfflineAudioCompletionEvent(<DOMString>,<OfflineAudioCompletionEventInit>);
<new AudioBuffer> = <OfflineAudioCompletionEvent>.renderedBuffer;
!extends OfflineAudioContext BaseAudioContext;
<new BaseAudioContext> = <OfflineAudioContext>;
<new OfflineAudioContext> = new OfflineAudioContext(<OfflineAudioContextOptions>);
<new OfflineAudioContext> = new OfflineAudioContext(<unsigned long>,<unsigned long>,<float>);
<new Promise_AudioBuffer_> = <OfflineAudioContext>.startRendering();
<new unsigned long> = <OfflineAudioContext>.length;
<new EventHandler> = <OfflineAudioContext>.oncomplete;
<OfflineAudioContext>.oncomplete = <EventHandler>;
!extends OfflineResourceList EventTarget;
<new EventTarget> = <OfflineResourceList>;
<new unsigned short> = <OfflineResourceList>.UNCACHED;
<new unsigned short> = <OfflineResourceList>.IDLE;
<new unsigned short> = <OfflineResourceList>.CHECKING;
<new unsigned short> = <OfflineResourceList>.DOWNLOADING;
<new unsigned short> = <OfflineResourceList>.UPDATEREADY;
<new unsigned short> = <OfflineResourceList>.OBSOLETE;
<new unsigned short> = <OfflineResourceList>.status;
<new void> = <OfflineResourceList>.update();
<new void> = <OfflineResourceList>.swapCache();
<new EventHandler> = <OfflineResourceList>.onchecking;
<OfflineResourceList>.onchecking = <EventHandler>;
<new EventHandler> = <OfflineResourceList>.onerror;
<OfflineResourceList>.onerror = <EventHandler>;
<new EventHandler> = <OfflineResourceList>.onnoupdate;
<OfflineResourceList>.onnoupdate = <EventHandler>;
<new EventHandler> = <OfflineResourceList>.ondownloading;
<OfflineResourceList>.ondownloading = <EventHandler>;
<new EventHandler> = <OfflineResourceList>.onprogress;
<OfflineResourceList>.onprogress = <EventHandler>;
<new EventHandler> = <OfflineResourceList>.onupdateready;
<OfflineResourceList>.onupdateready = <EventHandler>;
<new EventHandler> = <OfflineResourceList>.oncached;
<OfflineResourceList>.oncached = <EventHandler>;
<new EventHandler> = <OfflineResourceList>.onobsolete;
<OfflineResourceList>.onobsolete = <EventHandler>;
<new DOMStringList> = <OfflineResourceList>.mozItems;
<OfflineResourceList>.mozHasItem(<DOMString>);
<new unsigned long> = <OfflineResourceList>.mozLength;
<new DOMString> = <OfflineResourceList>.mozItem(<unsigned long>);
<new unsigned long> = <OfflineResourceList>.length;
<new void> = <OfflineResourceList>.mozAdd(<DOMString>);
<new void> = <OfflineResourceList>.mozRemove(<DOMString>);
!extends OffscreenCanvas EventTarget;
<new EventTarget> = <OffscreenCanvas>;
<new OffscreenCanvas> = new OffscreenCanvas(<unsigned long>,<unsigned long>);
<new unsigned long> = <OffscreenCanvas>.width;
<OffscreenCanvas>.width = <unsigned long>;
<new unsigned long> = <OffscreenCanvas>.height;
<OffscreenCanvas>.height = <unsigned long>;
<new nsISupports> = <OffscreenCanvas>.getContext(<DOMString>);
<new nsISupports> = <OffscreenCanvas>.getContext(<DOMString>,<any>);
<new ImageBitmap> = <OffscreenCanvas>.transferToImageBitmap();
<new Promise_Blob_> = <OffscreenCanvas>.toBlob();
<new Promise_Blob_> = <OffscreenCanvas>.toBlob(<DOMString>);
<new Promise_Blob_> = <OffscreenCanvas>.toBlob(<DOMString>,<any>);
!extends OscillatorNode AudioScheduledSourceNode;
<new AudioScheduledSourceNode> = <OscillatorNode>;
<new OscillatorNode> = new OscillatorNode(<BaseAudioContext>);
<new OscillatorNode> = new OscillatorNode(<BaseAudioContext>,<OscillatorOptions>);
<new OscillatorType> = <OscillatorNode>.type;
<OscillatorNode>.type = <OscillatorType>;
<new AudioParam> = <OscillatorNode>.frequency;
<new AudioParam> = <OscillatorNode>.detune;
<new void> = <OscillatorNode>.setPeriodicWave(<PeriodicWave>);
!extends PageTransitionEvent Event;
<new Event> = <PageTransitionEvent>;
<new PageTransitionEvent> = new PageTransitionEvent(<DOMString>);
<new PageTransitionEvent> = new PageTransitionEvent(<DOMString>,<PageTransitionEventInit>);
<new boolean> = <PageTransitionEvent>.persisted;
<new boolean> = <PageTransitionEvent>.inFrameSwap;
<new DOMRect> = <PaintRequest>.clientRect;
<new DOMString> = <PaintRequest>.reason;
<new unsigned long> = <PaintRequestList>.length;
<new PaintRequest> = <PaintRequestList>.item(<unsigned long>);
!extends PaintWorkletGlobalScope WorkletGlobalScope;
<new WorkletGlobalScope> = <PaintWorkletGlobalScope>;
<new void> = <PaintWorkletGlobalScope>.registerPaint(<DOMString>,<VoidFunction>);
!extends PannerNode AudioNode;
<new AudioNode> = <PannerNode>;
<new PannerNode> = new PannerNode(<BaseAudioContext>);
<new PannerNode> = new PannerNode(<BaseAudioContext>,<PannerOptions>);
<new PanningModelType> = <PannerNode>.panningModel;
<PannerNode>.panningModel = <PanningModelType>;
<new void> = <PannerNode>.setPosition(<double>,<double>,<double>);
<new void> = <PannerNode>.setOrientation(<double>,<double>,<double>);
<new AudioParam> = <PannerNode>.positionX;
<new AudioParam> = <PannerNode>.positionY;
<new AudioParam> = <PannerNode>.positionZ;
<new AudioParam> = <PannerNode>.orientationX;
<new AudioParam> = <PannerNode>.orientationY;
<new AudioParam> = <PannerNode>.orientationZ;
<new DistanceModelType> = <PannerNode>.distanceModel;
<PannerNode>.distanceModel = <DistanceModelType>;
<new double> = <PannerNode>.refDistance;
<PannerNode>.refDistance = <double>;
<new double> = <PannerNode>.maxDistance;
<PannerNode>.maxDistance = <double>;
<new double> = <PannerNode>.rolloffFactor;
<PannerNode>.rolloffFactor = <double>;
<new double> = <PannerNode>.coneInnerAngle;
<PannerNode>.coneInnerAngle = <double>;
<new double> = <PannerNode>.coneOuterAngle;
<PannerNode>.coneOuterAngle = <double>;
<new double> = <PannerNode>.coneOuterGain;
<PannerNode>.coneOuterGain = <double>;
<new object> = <PaymentAddress>.toJSON();
<new DOMString> = <PaymentAddress>.country;
<new sequence_DOMString_> = <PaymentAddress>.addressLine;
<new DOMString> = <PaymentAddress>.region;
<new DOMString> = <PaymentAddress>.regionCode;
<new DOMString> = <PaymentAddress>.city;
<new DOMString> = <PaymentAddress>.dependentLocality;
<new DOMString> = <PaymentAddress>.postalCode;
<new DOMString> = <PaymentAddress>.sortingCode;
<new DOMString> = <PaymentAddress>.organization;
<new DOMString> = <PaymentAddress>.recipient;
<new DOMString> = <PaymentAddress>.phone;
!extends PaymentMethodChangeEvent PaymentRequestUpdateEvent;
<new PaymentRequestUpdateEvent> = <PaymentMethodChangeEvent>;
<new PaymentMethodChangeEvent> = new PaymentMethodChangeEvent(<DOMString>);
<new PaymentMethodChangeEvent> = new PaymentMethodChangeEvent(<DOMString>,<PaymentMethodChangeEventInit>);
<new DOMString> = <PaymentMethodChangeEvent>.methodName;
<new object> = <PaymentMethodChangeEvent>.methodDetails;
!extends PaymentRequest EventTarget;
<new EventTarget> = <PaymentRequest>;
<new sequence_PaymentMethodData_> = [<PaymentMethodData>];
<new PaymentMethodData> = <sequence_PaymentMethodData_>[0];
<new PaymentRequest> = new PaymentRequest(<sequence_PaymentMethodData_>,<PaymentDetailsInit>);
<new PaymentRequest> = new PaymentRequest(<sequence_PaymentMethodData_>,<PaymentDetailsInit>,<PaymentOptions>);
<new Promise_PaymentResponse_> = new Promise(function(x){console.log("ok")});
<new Promise_PaymentDetailsUpdate_> = new Promise(function(x){console.log("ok")});
<new Promise_PaymentResponse_> = <PaymentRequest>.show();
<new Promise_PaymentResponse_> = <PaymentRequest>.show(<Promise_PaymentDetailsUpdate_>);
<new Promise_void_> = <PaymentRequest>.abort();
<new Promise_boolean_> = <PaymentRequest>.canMakePayment();
<new DOMString> = <PaymentRequest>.id;
<new PaymentAddress> = <PaymentRequest>.shippingAddress;
<new DOMString> = <PaymentRequest>.shippingOption;
<new PaymentShippingType> = <PaymentRequest>.shippingType;
<new EventHandler> = <PaymentRequest>.onmerchantvalidation;
<PaymentRequest>.onmerchantvalidation = <EventHandler>;
<new EventHandler> = <PaymentRequest>.onshippingaddresschange;
<PaymentRequest>.onshippingaddresschange = <EventHandler>;
<new EventHandler> = <PaymentRequest>.onshippingoptionchange;
<PaymentRequest>.onshippingoptionchange = <EventHandler>;
<new EventHandler> = <PaymentRequest>.onpaymentmethodchange;
<PaymentRequest>.onpaymentmethodchange = <EventHandler>;
!extends PaymentRequestUpdateEvent Event;
<new Event> = <PaymentRequestUpdateEvent>;
<new PaymentRequestUpdateEvent> = new PaymentRequestUpdateEvent(<DOMString>);
<new PaymentRequestUpdateEvent> = new PaymentRequestUpdateEvent(<DOMString>,<PaymentRequestUpdateEventInit>);
<new void> = <PaymentRequestUpdateEvent>.updateWith(<Promise_PaymentDetailsUpdate_>);
!extends PaymentResponse EventTarget;
<new EventTarget> = <PaymentResponse>;
<new object> = <PaymentResponse>.toJSON();
<new DOMString> = <PaymentResponse>.requestId;
<new DOMString> = <PaymentResponse>.methodName;
<new object> = <PaymentResponse>.details;
<new PaymentAddress> = <PaymentResponse>.shippingAddress;
<new DOMString> = <PaymentResponse>.shippingOption;
<new DOMString> = <PaymentResponse>.payerName;
<new DOMString> = <PaymentResponse>.payerEmail;
<new DOMString> = <PaymentResponse>.payerPhone;
<new Promise_void_> = <PaymentResponse>.complete();
<new Promise_void_> = <PaymentResponse>.complete(<PaymentComplete>);
<new Promise_void_> = <PaymentResponse>.retry();
<new Promise_void_> = <PaymentResponse>.retry(<PaymentValidationErrors>);
<new EventHandler> = <PaymentResponse>.onpayerdetailchange;
<PaymentResponse>.onpayerdetailchange = <EventHandler>;
<new PeerConnectionImpl> = new PeerConnectionImpl();
<new void> = <PeerConnectionImpl>.initialize(<PeerConnectionObserver>,<Window>,<RTCConfiguration>,<nsISupports>);
<new void> = <PeerConnectionImpl>.createOffer();
<new void> = <PeerConnectionImpl>.createOffer(<RTCOfferOptions>);
<new void> = <PeerConnectionImpl>.createAnswer();
<new void> = <PeerConnectionImpl>.setLocalDescription(<long>,<DOMString>);
<new void> = <PeerConnectionImpl>.setRemoteDescription(<long>,<DOMString>);
<new Promise_RTCStatsReport_> = new Promise(function(x){console.log("ok")});
<new Promise_RTCStatsReport_> = <PeerConnectionImpl>.getStats(<MediaStreamTrack>);
<new sequence_MediaStream_> = [<MediaStream>];
<new MediaStream> = <sequence_MediaStream_>[0];
<new sequence_MediaStream_> = <PeerConnectionImpl>.getRemoteStreams();
<new TransceiverImpl> = <PeerConnectionImpl>.createTransceiverImpl(<DOMString>,<MediaStreamTrack>);
<PeerConnectionImpl>.checkNegotiationNeeded();
<new void> = <PeerConnectionImpl>.replaceTrackNoRenegotiation(<TransceiverImpl>,<MediaStreamTrack>);
<new void> = <PeerConnectionImpl>.closeStreams();
<new void> = <PeerConnectionImpl>.enablePacketDump(<unsigned long>,<mozPacketDumpType>,<boolean>);
<new void> = <PeerConnectionImpl>.disablePacketDump(<unsigned long>,<mozPacketDumpType>,<boolean>);
<new void> = <PeerConnectionImpl>.addIceCandidate(<DOMString>,<DOMString>,<DOMString>,<unsigned short>);
<new void> = <PeerConnectionImpl>.close();
<PeerConnectionImpl>.pluginCrash(<unsigned long long>,<DOMString>);
<new RTCCertificate> = <PeerConnectionImpl>.certificate;
<PeerConnectionImpl>.certificate = <RTCCertificate>;
<new DOMString> = <PeerConnectionImpl>.fingerprint;
<new DOMString> = <PeerConnectionImpl>.currentLocalDescription;
<new DOMString> = <PeerConnectionImpl>.pendingLocalDescription;
<new DOMString> = <PeerConnectionImpl>.currentRemoteDescription;
<new DOMString> = <PeerConnectionImpl>.pendingRemoteDescription;
<new boolean> = <PeerConnectionImpl>.currentOfferer;
<new boolean> = <PeerConnectionImpl>.pendingOfferer;
<new RTCIceConnectionState> = <PeerConnectionImpl>.iceConnectionState;
<new RTCIceGatheringState> = <PeerConnectionImpl>.iceGatheringState;
<new RTCSignalingState> = <PeerConnectionImpl>.signalingState;
<new DOMString> = <PeerConnectionImpl>.id;
<PeerConnectionImpl>.id = <DOMString>;
<new DOMString> = <PeerConnectionImpl>.peerIdentity;
<PeerConnectionImpl>.peerIdentity = <DOMString>;
<new boolean> = <PeerConnectionImpl>.privacyRequested;
<new RTCDataChannel> = <PeerConnectionImpl>.createDataChannel(<DOMString>,<DOMString>,<unsigned short>,<boolean>,<unsigned short>,<unsigned short>,<boolean>,<unsigned short>);
<new PeerConnectionObserver> = new PeerConnectionObserver(<RTCPeerConnection>);
<new void> = <PeerConnectionObserver>.onCreateOfferSuccess(<DOMString>);
<new void> = <PeerConnectionObserver>.onCreateOfferError(<PCErrorData>);
<new void> = <PeerConnectionObserver>.onCreateAnswerSuccess(<DOMString>);
<new void> = <PeerConnectionObserver>.onCreateAnswerError(<PCErrorData>);
<new void> = <PeerConnectionObserver>.onSetDescriptionSuccess();
<new void> = <PeerConnectionObserver>.onSetDescriptionError(<PCErrorData>);
<new void> = <PeerConnectionObserver>.onAddIceCandidateSuccess();
<new void> = <PeerConnectionObserver>.onAddIceCandidateError(<PCErrorData>);
<new void> = <PeerConnectionObserver>.onIceCandidate(<unsigned short>,<DOMString>,<DOMString>,<DOMString>);
<new void> = <PeerConnectionObserver>.notifyDataChannel(<RTCDataChannel>);
<new void> = <PeerConnectionObserver>.onStateChange(<PCObserverStateType>);
<new void> = <PeerConnectionObserver>.onTransceiverNeeded(<DOMString>,<TransceiverImpl>);
<new void> = <PeerConnectionObserver>.fireTrackEvent(<RTCRtpReceiver>,<sequence_MediaStream_>);
<new void> = <PeerConnectionObserver>.fireStreamEvent(<MediaStream>);
<new void> = <PeerConnectionObserver>.onPacket(<unsigned long>,<mozPacketDumpType>,<boolean>,<ArrayBuffer>);
<new void> = <PeerConnectionObserver>.syncTransceivers();
!extends Performance EventTarget;
<new EventTarget> = <Performance>;
<new DOMHighResTimeStamp> = <Performance>.now();
<new DOMHighResTimeStamp> = <Performance>.timeOrigin;
<new object> = <Performance>.toJSON();
<new PerformanceTiming> = <Performance>.timing;
<new PerformanceNavigation> = <Performance>.navigation;
<new PerformanceEntryList> = <Performance>.getEntries();
<new PerformanceEntryList> = <Performance>.getEntriesByType(<DOMString>);
<new PerformanceEntryList> = <Performance>.getEntriesByName(<DOMString>);
<new PerformanceEntryList> = <Performance>.getEntriesByName(<DOMString>,<DOMString>);
<new void> = <Performance>.clearResourceTimings();
<new void> = <Performance>.setResourceTimingBufferSize(<unsigned long>);
<new EventHandler> = <Performance>.onresourcetimingbufferfull;
<Performance>.onresourcetimingbufferfull = <EventHandler>;
<new object> = <Performance>.mozMemory;
<new void> = <Performance>.mark(<DOMString>);
<new void> = <Performance>.clearMarks();
<new void> = <Performance>.clearMarks(<DOMString>);
<new void> = <Performance>.measure(<DOMString>);
<new void> = <Performance>.measure(<DOMString>,<DOMString>);
<new void> = <Performance>.measure(<DOMString>,<DOMString>,<DOMString>);
<new void> = <Performance>.clearMeasures();
<new void> = <Performance>.clearMeasures(<DOMString>);
<new EventCounts> = <Performance>.eventCounts;
<new DOMString> = <PerformanceEntry>.name;
<new DOMString> = <PerformanceEntry>.entryType;
<new DOMHighResTimeStamp> = <PerformanceEntry>.startTime;
<new DOMHighResTimeStamp> = <PerformanceEntry>.duration;
<new object> = <PerformanceEntry>.toJSON();
!extends PerformanceEntryEvent Event;
<new Event> = <PerformanceEntryEvent>;
<new PerformanceEntryEvent> = new PerformanceEntryEvent(<DOMString>);
<new PerformanceEntryEvent> = new PerformanceEntryEvent(<DOMString>,<PerformanceEntryEventInit>);
<new DOMString> = <PerformanceEntryEvent>.name;
<new DOMString> = <PerformanceEntryEvent>.entryType;
<new DOMHighResTimeStamp> = <PerformanceEntryEvent>.startTime;
<new DOMHighResTimeStamp> = <PerformanceEntryEvent>.duration;
<new double> = <PerformanceEntryEvent>.epoch;
<new DOMString> = <PerformanceEntryEvent>.origin;
!extends PerformanceEventTiming PerformanceEntry;
<new PerformanceEntry> = <PerformanceEventTiming>;
<new DOMHighResTimeStamp> = <PerformanceEventTiming>.processingStart;
<new DOMHighResTimeStamp> = <PerformanceEventTiming>.processingEnd;
<new boolean> = <PerformanceEventTiming>.cancelable;
<new Node> = <PerformanceEventTiming>.target;
<new object> = <PerformanceEventTiming>.toJSON();
!extends PerformanceMark PerformanceEntry;
<new PerformanceEntry> = <PerformanceMark>;
!extends PerformanceMeasure PerformanceEntry;
<new PerformanceEntry> = <PerformanceMeasure>;
<new unsigned short> = <PerformanceNavigation>.TYPE_NAVIGATE;
<new unsigned short> = <PerformanceNavigation>.TYPE_RELOAD;
<new unsigned short> = <PerformanceNavigation>.TYPE_BACK_FORWARD;
<new unsigned short> = <PerformanceNavigation>.TYPE_RESERVED;
<new unsigned short> = <PerformanceNavigation>.type;
<new unsigned short> = <PerformanceNavigation>.redirectCount;
<new object> = <PerformanceNavigation>.toJSON();
!extends PerformanceNavigationTiming PerformanceResourceTiming;
<new PerformanceResourceTiming> = <PerformanceNavigationTiming>;
<new DOMHighResTimeStamp> = <PerformanceNavigationTiming>.unloadEventStart;
<new DOMHighResTimeStamp> = <PerformanceNavigationTiming>.unloadEventEnd;
<new DOMHighResTimeStamp> = <PerformanceNavigationTiming>.domInteractive;
<new DOMHighResTimeStamp> = <PerformanceNavigationTiming>.domContentLoadedEventStart;
<new DOMHighResTimeStamp> = <PerformanceNavigationTiming>.domContentLoadedEventEnd;
<new DOMHighResTimeStamp> = <PerformanceNavigationTiming>.domComplete;
<new DOMHighResTimeStamp> = <PerformanceNavigationTiming>.loadEventStart;
<new DOMHighResTimeStamp> = <PerformanceNavigationTiming>.loadEventEnd;
<new NavigationType> = <PerformanceNavigationTiming>.type;
<new unsigned short> = <PerformanceNavigationTiming>.redirectCount;
<new object> = <PerformanceNavigationTiming>.toJSON();
<new PerformanceObserver> = new PerformanceObserver(<PerformanceObserverCallback>);
<new void> = <PerformanceObserver>.observe();
<new void> = <PerformanceObserver>.observe(<PerformanceObserverInit>);
<new void> = <PerformanceObserver>.disconnect();
<new PerformanceEntryList> = <PerformanceObserver>.takeRecords();
<new object> = <PerformanceObserver>.supportedEntryTypes;
<new PerformanceEntryList> = <PerformanceObserverEntryList>.getEntries();
<new PerformanceEntryList> = <PerformanceObserverEntryList>.getEntries(<PerformanceEntryFilterOptions>);
<new PerformanceEntryList> = <PerformanceObserverEntryList>.getEntriesByType(<DOMString>);
<new PerformanceEntryList> = <PerformanceObserverEntryList>.getEntriesByName(<DOMString>);
<new PerformanceEntryList> = <PerformanceObserverEntryList>.getEntriesByName(<DOMString>,<DOMString>);
!extends PerformancePaintTiming PerformanceEntry;
<new PerformanceEntry> = <PerformancePaintTiming>;
!extends PerformanceResourceTiming PerformanceEntry;
<new PerformanceEntry> = <PerformanceResourceTiming>;
<new DOMString> = <PerformanceResourceTiming>.initiatorType;
<new DOMString> = <PerformanceResourceTiming>.nextHopProtocol;
<new DOMHighResTimeStamp> = <PerformanceResourceTiming>.workerStart;
<new DOMHighResTimeStamp> = <PerformanceResourceTiming>.redirectStart;
<new DOMHighResTimeStamp> = <PerformanceResourceTiming>.redirectEnd;
<new DOMHighResTimeStamp> = <PerformanceResourceTiming>.fetchStart;
<new DOMHighResTimeStamp> = <PerformanceResourceTiming>.domainLookupStart;
<new DOMHighResTimeStamp> = <PerformanceResourceTiming>.domainLookupEnd;
<new DOMHighResTimeStamp> = <PerformanceResourceTiming>.connectStart;
<new DOMHighResTimeStamp> = <PerformanceResourceTiming>.connectEnd;
<new DOMHighResTimeStamp> = <PerformanceResourceTiming>.secureConnectionStart;
<new DOMHighResTimeStamp> = <PerformanceResourceTiming>.requestStart;
<new DOMHighResTimeStamp> = <PerformanceResourceTiming>.responseStart;
<new DOMHighResTimeStamp> = <PerformanceResourceTiming>.responseEnd;
<new unsigned long long> = <PerformanceResourceTiming>.transferSize;
<new unsigned long long> = <PerformanceResourceTiming>.encodedBodySize;
<new unsigned long long> = <PerformanceResourceTiming>.decodedBodySize;
<new sequence_PerformanceServerTiming_> = [<PerformanceServerTiming>];
<new PerformanceServerTiming> = <sequence_PerformanceServerTiming_>[0];
<new sequence_PerformanceServerTiming_> = <PerformanceResourceTiming>.serverTiming;
<new object> = <PerformanceResourceTiming>.toJSON();
<new DOMString> = <PerformanceServerTiming>.name;
<new DOMHighResTimeStamp> = <PerformanceServerTiming>.duration;
<new DOMString> = <PerformanceServerTiming>.description;
<new object> = <PerformanceServerTiming>.toJSON();
<new unsigned long long> = <PerformanceTiming>.navigationStart;
<new unsigned long long> = <PerformanceTiming>.unloadEventStart;
<new unsigned long long> = <PerformanceTiming>.unloadEventEnd;
<new unsigned long long> = <PerformanceTiming>.redirectStart;
<new unsigned long long> = <PerformanceTiming>.redirectEnd;
<new unsigned long long> = <PerformanceTiming>.fetchStart;
<new unsigned long long> = <PerformanceTiming>.domainLookupStart;
<new unsigned long long> = <PerformanceTiming>.domainLookupEnd;
<new unsigned long long> = <PerformanceTiming>.connectStart;
<new unsigned long long> = <PerformanceTiming>.connectEnd;
<new unsigned long long> = <PerformanceTiming>.secureConnectionStart;
<new unsigned long long> = <PerformanceTiming>.requestStart;
<new unsigned long long> = <PerformanceTiming>.responseStart;
<new unsigned long long> = <PerformanceTiming>.responseEnd;
<new unsigned long long> = <PerformanceTiming>.domLoading;
<new unsigned long long> = <PerformanceTiming>.domInteractive;
<new unsigned long long> = <PerformanceTiming>.domContentLoadedEventStart;
<new unsigned long long> = <PerformanceTiming>.domContentLoadedEventEnd;
<new unsigned long long> = <PerformanceTiming>.domComplete;
<new unsigned long long> = <PerformanceTiming>.loadEventStart;
<new unsigned long long> = <PerformanceTiming>.loadEventEnd;
<new unsigned long long> = <PerformanceTiming>.timeToNonBlankPaint;
<new unsigned long long> = <PerformanceTiming>.timeToContentfulPaint;
<new unsigned long long> = <PerformanceTiming>.timeToDOMContentFlushed;
<new unsigned long long> = <PerformanceTiming>.timeToFirstInteractive;
<new object> = <PerformanceTiming>.toJSON();
<new PeriodicWave> = new PeriodicWave(<BaseAudioContext>);
<new PeriodicWave> = new PeriodicWave(<BaseAudioContext>,<PeriodicWaveOptions>);
<new Promise_PermissionStatus_> = new Promise(function(x){console.log("ok")});
<new Promise_PermissionStatus_> = <Permissions>.query(<object>);
<new Promise_PermissionStatus_> = <Permissions>.revoke(<object>);
!extends PermissionStatus EventTarget;
<new EventTarget> = <PermissionStatus>;
<new PermissionName> = <PermissionStatus>.name;
<new PermissionState> = <PermissionStatus>.state;
<new EventHandler> = <PermissionStatus>.onchange;
<PermissionStatus>.onchange = <EventHandler>;
<new DOMString> = <Plugin>.description;
<new DOMString> = <Plugin>.filename;
<new DOMString> = <Plugin>.version;
<new DOMString> = <Plugin>.name;
<new unsigned long> = <Plugin>.length;
<new MimeType> = <Plugin>.item(<unsigned long>);
<new MimeType> = <Plugin>.namedItem(<DOMString>);
<new unsigned long> = <PluginArray>.length;
<new Plugin> = <PluginArray>.item(<unsigned long>);
<new Plugin> = <PluginArray>.namedItem(<DOMString>);
<new void> = <PluginArray>.refresh();
<new void> = <PluginArray>.refresh(<boolean>);
!extends PluginCrashedEvent Event;
<new Event> = <PluginCrashedEvent>;
<new PluginCrashedEvent> = new PluginCrashedEvent(<DOMString>);
<new PluginCrashedEvent> = new PluginCrashedEvent(<DOMString>,<PluginCrashedEventInit>);
<new unsigned long> = <PluginCrashedEvent>.pluginID;
<new DOMString> = <PluginCrashedEvent>.pluginDumpID;
<new DOMString> = <PluginCrashedEvent>.pluginName;
<new DOMString> = <PluginCrashedEvent>.pluginFilename;
<new boolean> = <PluginCrashedEvent>.submittedCrashReport;
<new boolean> = <PluginCrashedEvent>.gmpPlugin;
!extends PointerEvent MouseEvent;
<new MouseEvent> = <PointerEvent>;
<new PointerEvent> = new PointerEvent(<DOMString>);
<new PointerEvent> = new PointerEvent(<DOMString>,<PointerEventInit>);
<new long> = <PointerEvent>.pointerId;
<new long> = <PointerEvent>.width;
<new long> = <PointerEvent>.height;
<new float> = <PointerEvent>.pressure;
<new float> = <PointerEvent>.tangentialPressure;
<new long> = <PointerEvent>.tiltX;
<new long> = <PointerEvent>.tiltY;
<new long> = <PointerEvent>.twist;
<new DOMString> = <PointerEvent>.pointerType;
<new boolean> = <PointerEvent>.isPrimary;
<new sequence_PointerEvent_> = [<PointerEvent>];
<new PointerEvent> = <sequence_PointerEvent_>[0];
<new sequence_PointerEvent_> = <PointerEvent>.getCoalescedEvents();
<new sequence_PointerEvent_> = <PointerEvent>.getPredictedEvents();
!extends PopStateEvent Event;
<new Event> = <PopStateEvent>;
<new PopStateEvent> = new PopStateEvent(<DOMString>);
<new PopStateEvent> = new PopStateEvent(<DOMString>,<PopStateEventInit>);
<new any> = <PopStateEvent>.state;
!extends PopupBlockedEvent Event;
<new Event> = <PopupBlockedEvent>;
<new PopupBlockedEvent> = new PopupBlockedEvent(<DOMString>);
<new PopupBlockedEvent> = new PopupBlockedEvent(<DOMString>,<PopupBlockedEventInit>);
<new Window> = <PopupBlockedEvent>.requestingWindow;
<new URI> = <PopupBlockedEvent>.popupWindowURI;
<new DOMString> = <PopupBlockedEvent>.popupWindowName;
<new DOMString> = <PopupBlockedEvent>.popupWindowFeatures;
!extends PopupPositionedEvent Event;
<new Event> = <PopupPositionedEvent>;
<new PopupPositionedEvent> = new PopupPositionedEvent(<DOMString>);
<new PopupPositionedEvent> = new PopupPositionedEvent(<DOMString>,<PopupPositionedEventInit>);
<new DOMString> = <PopupPositionedEvent>.alignmentPosition;
<new long> = <PopupPositionedEvent>.alignmentOffset;
!extends PositionStateEvent Event;
<new Event> = <PositionStateEvent>;
<new PositionStateEvent> = new PositionStateEvent(<DOMString>);
<new PositionStateEvent> = new PositionStateEvent(<DOMString>,<PositionStateEventInit>);
<new double> = <PositionStateEvent>.duration;
<new double> = <PositionStateEvent>.playbackRate;
<new double> = <PositionStateEvent>.position;
!extends ProcessingInstruction CharacterData;
<new CharacterData> = <ProcessingInstruction>;
<new DOMString> = <ProcessingInstruction>.target;
!extends ProgressEvent Event;
<new Event> = <ProgressEvent>;
<new ProgressEvent> = new ProgressEvent(<DOMString>);
<new ProgressEvent> = new ProgressEvent(<DOMString>,<ProgressEventInit>);
<new boolean> = <ProgressEvent>.lengthComputable;
<new unsigned long long> = <ProgressEvent>.loaded;
<new unsigned long long> = <ProgressEvent>.total;
!extends PromiseRejectionEvent Event;
<new Event> = <PromiseRejectionEvent>;
<new PromiseRejectionEvent> = new PromiseRejectionEvent(<DOMString>,<PromiseRejectionEventInit>);
<new Promise_any_> = <PromiseRejectionEvent>.promise;
<new any> = <PromiseRejectionEvent>.reason;
!extends PushEvent ExtendableEvent;
<new ExtendableEvent> = <PushEvent>;
<new PushEvent> = new PushEvent(<DOMString>);
<new PushEvent> = new PushEvent(<DOMString>,<PushEventInit>);
<new PushMessageData> = <PushEvent>.data;
<new PushManagerImpl> = new PushManagerImpl(<DOMString>);
<new Promise_PushSubscription_> = new Promise(function(x){console.log("ok")});
<new Promise_PushSubscription_> = <PushManagerImpl>.subscribe();
<new Promise_PushSubscription_> = <PushManagerImpl>.subscribe(<PushSubscriptionOptionsInit>);
<new Promise_PushSubscription_> = <PushManagerImpl>.getSubscription();
<new Promise_PushPermissionState_> = new Promise(function(x){console.log("ok")});
<new Promise_PushPermissionState_> = <PushManagerImpl>.permissionState();
<new Promise_PushPermissionState_> = <PushManagerImpl>.permissionState(<PushSubscriptionOptionsInit>);
<new PushManager> = new PushManager(<DOMString>);
<new Promise_PushSubscription_> = <PushManager>.subscribe();
<new Promise_PushSubscription_> = <PushManager>.subscribe(<PushSubscriptionOptionsInit>);
<new Promise_PushSubscription_> = <PushManager>.getSubscription();
<new Promise_PushPermissionState_> = <PushManager>.permissionState();
<new Promise_PushPermissionState_> = <PushManager>.permissionState(<PushSubscriptionOptionsInit>);
<new ArrayBuffer> = <PushMessageData>.arrayBuffer();
<new Blob> = <PushMessageData>.blob();
<new any> = <PushMessageData>.json();
<new USVString> = <PushMessageData>.text();
<new PushSubscription> = new PushSubscription(<PushSubscriptionInit>);
<new USVString> = <PushSubscription>.endpoint;
<new PushSubscriptionOptions> = <PushSubscription>.options;
<new ArrayBuffer> = <PushSubscription>.getKey(<PushEncryptionKeyName>);
<new Promise_boolean_> = <PushSubscription>.unsubscribe();
<new PushSubscriptionJSON> = <PushSubscription>.toJSON();
<new ArrayBuffer> = <PushSubscriptionOptions>.applicationServerKey;
<new CountQueuingStrategy> = new CountQueuingStrategy(<QueuingStrategyInit>);
<new unrestricted double> = <CountQueuingStrategy>.highWaterMark;
!extends RadioNodeList NodeList;
<new NodeList> = <RadioNodeList>;
<new DOMString> = <RadioNodeList>.value;
<RadioNodeList>.value = <DOMString>;
!extends Range AbstractRange;
<new AbstractRange> = <Range>;
<new Range> = new Range();
<new Node> = <Range>.commonAncestorContainer;
<new void> = <Range>.setStart(<Node>,<unsigned long>);
<new void> = <Range>.setEnd(<Node>,<unsigned long>);
<new void> = <Range>.setStartBefore(<Node>);
<new void> = <Range>.setStartAfter(<Node>);
<new void> = <Range>.setEndBefore(<Node>);
<new void> = <Range>.setEndAfter(<Node>);
<new void> = <Range>.collapse();
<new void> = <Range>.collapse(<boolean>);
<new void> = <Range>.selectNode(<Node>);
<new void> = <Range>.selectNodeContents(<Node>);
<new unsigned short> = <Range>.START_TO_START;
<new unsigned short> = <Range>.START_TO_END;
<new unsigned short> = <Range>.END_TO_END;
<new unsigned short> = <Range>.END_TO_START;
<Range>.compareBoundaryPoints(<unsigned short>,<Range>);
<new void> = <Range>.deleteContents();
<new DocumentFragment> = <Range>.extractContents();
<new DocumentFragment> = <Range>.cloneContents();
<new void> = <Range>.insertNode(<Node>);
<new void> = <Range>.surroundContents(<Node>);
<new Range> = <Range>.cloneRange();
<new void> = <Range>.detach();
<Range>.isPointInRange(<Node>,<unsigned long>);
<Range>.comparePoint(<Node>,<unsigned long>);
<Range>.intersectsNode(<Node>);
<new DocumentFragment> = <Range>.createContextualFragment(<DOMString>);
<new DOMRectList> = <Range>.getClientRects();
<new DOMRect> = <Range>.getBoundingClientRect();
<new ClientRectsAndTexts> = <Range>.getClientRectsAndTexts();
<new ReadableStream> = new ReadableStream();
<new ReadableStream> = new ReadableStream(<object>);
<new ReadableStream> = new ReadableStream(<object>,<QueuingStrategy>);
<new boolean> = <ReadableStream>.locked;
<new Promise_void_> = <ReadableStream>.cancel();
<new Promise_void_> = <ReadableStream>.cancel(<any>);
<new ReadableStreamReader> = <ReadableStream>.getReader();
<new ReadableStreamReader> = <ReadableStream>.getReader(<ReadableStreamGetReaderOptions>);
<new sequence_ReadableStream_> = [<ReadableStream>];
<new ReadableStream> = <sequence_ReadableStream_>[0];
<new sequence_ReadableStream_> = <ReadableStream>.tee();
<new unrestricted double> = <ReadableStreamDefaultController>.desiredSize;
<new void> = <ReadableStreamDefaultController>.close();
<new void> = <ReadableStreamDefaultController>.enqueue();
<new void> = <ReadableStreamDefaultController>.enqueue(<any>);
<new void> = <ReadableStreamDefaultController>.error();
<new void> = <ReadableStreamDefaultController>.error(<any>);
<new ReadableStreamDefaultReader> = new ReadableStreamDefaultReader(<ReadableStream>);
<new Promise_ReadableStreamDefaultReadResult_> = new Promise(function(x){console.log("ok")});
<new Promise_ReadableStreamDefaultReadResult_> = <ReadableStreamDefaultReader>.read();
<new void> = <ReadableStreamDefaultReader>.releaseLock();
<new object> = <ReportBody>.toJSON();
<new object> = <Report>.toJSON();
<new DOMString> = <Report>.type;
<new DOMString> = <Report>.url;
<new ReportBody> = <Report>.body;
<new ReportingObserver> = new ReportingObserver(<ReportingObserverCallback>);
<new ReportingObserver> = new ReportingObserver(<ReportingObserverCallback>,<ReportingObserverOptions>);
<new void> = <ReportingObserver>.observe();
<new void> = <ReportingObserver>.disconnect();
<new ReportList> = <ReportingObserver>.takeRecords();
!extends DeprecationReportBody ReportBody;
<new ReportBody> = <DeprecationReportBody>;
<new DOMString> = <DeprecationReportBody>.id;
<new DOMTimeStamp> = <DeprecationReportBody>.anticipatedRemoval;
<new DOMString> = <DeprecationReportBody>.message;
<new DOMString> = <DeprecationReportBody>.sourceFile;
<new unsigned long> = <DeprecationReportBody>.lineNumber;
<new unsigned long> = <DeprecationReportBody>.columnNumber;
<new TestingDeprecatedInterface> = new TestingDeprecatedInterface();
<new void> = <TestingDeprecatedInterface>.deprecatedMethod();
<new boolean> = <TestingDeprecatedInterface>.deprecatedAttribute;
<new Request> = new Request(<RequestInfo>);
<new Request> = new Request(<RequestInfo>,<RequestInit>);
<new ByteString> = <Request>.method;
<new USVString> = <Request>.url;
<new Headers> = <Request>.headers;
<new RequestDestination> = <Request>.destination;
<new USVString> = <Request>.referrer;
<new ReferrerPolicy> = <Request>.referrerPolicy;
<new RequestMode> = <Request>.mode;
<new RequestCredentials> = <Request>.credentials;
<new RequestCache> = <Request>.cache;
<new RequestRedirect> = <Request>.redirect;
<new DOMString> = <Request>.integrity;
<new boolean> = <Request>.mozErrors;
<new AbortSignal> = <Request>.signal;
<new Request> = <Request>.clone();
<new void> = <Request>.overrideContentPolicyType(<nsContentPolicyType>);
<new ResizeObserver> = new ResizeObserver(<ResizeObserverCallback>);
<new void> = <ResizeObserver>.observe(<Element>);
<new void> = <ResizeObserver>.observe(<Element>,<ResizeObserverOptions>);
<new void> = <ResizeObserver>.unobserve(<Element>);
<new void> = <ResizeObserver>.disconnect();
<new Element> = <ResizeObserverEntry>.target;
<new DOMRectReadOnly> = <ResizeObserverEntry>.contentRect;
<new sequence_ResizeObserverSize_> = [<ResizeObserverSize>];
<new ResizeObserverSize> = <sequence_ResizeObserverSize_>[0];
<new sequence_ResizeObserverSize_> = <ResizeObserverEntry>.borderBoxSize;
<new sequence_ResizeObserverSize_> = <ResizeObserverEntry>.contentBoxSize;
<new sequence_ResizeObserverSize_> = <ResizeObserverEntry>.devicePixelContentBoxSize;
<new unrestricted double> = <ResizeObserverSize>.inlineSize;
<new unrestricted double> = <ResizeObserverSize>.blockSize;
<new union_Blob1BufferSource1FormData1URLSearchParams1ReadableStream1USVString_> = <Blob>;
<new union_Blob1BufferSource1FormData1URLSearchParams1ReadableStream1USVString_> = <BufferSource>;
<new union_Blob1BufferSource1FormData1URLSearchParams1ReadableStream1USVString_> = <FormData>;
<new union_Blob1BufferSource1FormData1URLSearchParams1ReadableStream1USVString_> = <URLSearchParams>;
<new union_Blob1BufferSource1FormData1URLSearchParams1ReadableStream1USVString_> = <ReadableStream>;
<new union_Blob1BufferSource1FormData1URLSearchParams1ReadableStream1USVString_> = <USVString>;
<new Response> = new Response();
<new Response> = new Response(<union_Blob1BufferSource1FormData1URLSearchParams1ReadableStream1USVString_>);
<new Response> = new Response(<union_Blob1BufferSource1FormData1URLSearchParams1ReadableStream1USVString_>,<ResponseInit>);
<new Response> = <Response>.error();
<new Response> = <Response>.redirect(<USVString>);
<new Response> = <Response>.redirect(<USVString>,<unsigned short>);
<new ResponseType> = <Response>.type;
<new USVString> = <Response>.url;
<new boolean> = <Response>.redirected;
<new unsigned short> = <Response>.status;
<new boolean> = <Response>.ok;
<new ByteString> = <Response>.statusText;
<new Headers> = <Response>.headers;
<new Response> = <Response>.clone();
<new Response> = <Response>.cloneUnfiltered();
<new boolean> = <Response>.hasCacheInfoChannel;
<new ReadableStream> = <Response>.body;
<new DOMTimeStamp> = <RTCCertificate>.expires;
!extends RTCDataChannel EventTarget;
<new EventTarget> = <RTCDataChannel>;
<new DOMString> = <RTCDataChannel>.label;
<new boolean> = <RTCDataChannel>.negotiated;
<new boolean> = <RTCDataChannel>.ordered;
<new boolean> = <RTCDataChannel>.reliable;
<new unsigned short> = <RTCDataChannel>.maxPacketLifeTime;
<new unsigned short> = <RTCDataChannel>.maxRetransmits;
<new USVString> = <RTCDataChannel>.protocol;
<new unsigned short> = <RTCDataChannel>.id;
<new RTCDataChannelState> = <RTCDataChannel>.readyState;
<new unsigned long> = <RTCDataChannel>.bufferedAmount;
<new unsigned long> = <RTCDataChannel>.bufferedAmountLowThreshold;
<RTCDataChannel>.bufferedAmountLowThreshold = <unsigned long>;
<new EventHandler> = <RTCDataChannel>.onopen;
<RTCDataChannel>.onopen = <EventHandler>;
<new EventHandler> = <RTCDataChannel>.onerror;
<RTCDataChannel>.onerror = <EventHandler>;
<new EventHandler> = <RTCDataChannel>.onclose;
<RTCDataChannel>.onclose = <EventHandler>;
<new void> = <RTCDataChannel>.close();
<new EventHandler> = <RTCDataChannel>.onmessage;
<RTCDataChannel>.onmessage = <EventHandler>;
<new EventHandler> = <RTCDataChannel>.onbufferedamountlow;
<RTCDataChannel>.onbufferedamountlow = <EventHandler>;
<new RTCDataChannelType> = <RTCDataChannel>.binaryType;
<RTCDataChannel>.binaryType = <RTCDataChannelType>;
<new void> = <RTCDataChannel>.send(<DOMString>);
<new void> = <RTCDataChannel>.send(<Blob>);
<new void> = <RTCDataChannel>.send(<ArrayBuffer>);
<new void> = <RTCDataChannel>.send(<ArrayBufferView>);
!extends RTCDataChannelEvent Event;
<new Event> = <RTCDataChannelEvent>;
<new RTCDataChannelEvent> = new RTCDataChannelEvent(<DOMString>,<RTCDataChannelEventInit>);
<new RTCDataChannel> = <RTCDataChannelEvent>.channel;
!extends RTCDtlsTransport EventTarget;
<new EventTarget> = <RTCDtlsTransport>;
<new RTCDtlsTransportState> = <RTCDtlsTransport>.state;
<new EventHandler> = <RTCDtlsTransport>.onstatechange;
<RTCDtlsTransport>.onstatechange = <EventHandler>;
!extends RTCDTMFSender EventTarget;
<new EventTarget> = <RTCDTMFSender>;
<new void> = <RTCDTMFSender>.insertDTMF(<DOMString>);
<new void> = <RTCDTMFSender>.insertDTMF(<DOMString>,<unsigned long>);
<new void> = <RTCDTMFSender>.insertDTMF(<DOMString>,<unsigned long>,<unsigned long>);
<new EventHandler> = <RTCDTMFSender>.ontonechange;
<RTCDTMFSender>.ontonechange = <EventHandler>;
<new DOMString> = <RTCDTMFSender>.toneBuffer;
!extends RTCDTMFToneChangeEvent Event;
<new Event> = <RTCDTMFToneChangeEvent>;
<new RTCDTMFToneChangeEvent> = new RTCDTMFToneChangeEvent(<DOMString>);
<new RTCDTMFToneChangeEvent> = new RTCDTMFToneChangeEvent(<DOMString>,<RTCDTMFToneChangeEventInit>);
<new DOMString> = <RTCDTMFToneChangeEvent>.tone;
<new RTCIceCandidate> = new RTCIceCandidate();
<new RTCIceCandidate> = new RTCIceCandidate(<RTCIceCandidateInit>);
<new DOMString> = <RTCIceCandidate>.candidate;
<RTCIceCandidate>.candidate = <DOMString>;
<new DOMString> = <RTCIceCandidate>.sdpMid;
<RTCIceCandidate>.sdpMid = <DOMString>;
<RTCIceCandidate>.sdpMid = null;
<new unsigned short> = <RTCIceCandidate>.sdpMLineIndex;
<RTCIceCandidate>.sdpMLineIndex = <unsigned short>;
<RTCIceCandidate>.sdpMLineIndex = null;
<new DOMString> = <RTCIceCandidate>.usernameFragment;
<RTCIceCandidate>.usernameFragment = <DOMString>;
<RTCIceCandidate>.usernameFragment = null;
<new object> = <RTCIceCandidate>.toJSON();
<new void> = <RTCIdentityProviderRegistrar>.register(<RTCIdentityProvider>);
<new boolean> = <RTCIdentityProviderRegistrar>.hasIdp;
<new Promise_RTCIdentityAssertionResult_> = new Promise(function(x){console.log("ok")});
<new Promise_RTCIdentityAssertionResult_> = <RTCIdentityProviderRegistrar>.generateAssertion(<DOMString>,<DOMString>);
<new Promise_RTCIdentityAssertionResult_> = <RTCIdentityProviderRegistrar>.generateAssertion(<DOMString>,<DOMString>,<RTCIdentityProviderOptions>);
<new Promise_RTCIdentityValidationResult_> = new Promise(function(x){console.log("ok")});
<new Promise_RTCIdentityValidationResult_> = <RTCIdentityProviderRegistrar>.validateAssertion(<DOMString>,<DOMString>);
!extends RTCPeerConnection EventTarget;
<new EventTarget> = <RTCPeerConnection>;
<new RTCPeerConnection> = new RTCPeerConnection();
<new RTCPeerConnection> = new RTCPeerConnection(<RTCConfiguration>);
<new RTCPeerConnection> = new RTCPeerConnection(<RTCConfiguration>,<object>);
<new Promise_RTCCertificate_> = new Promise(function(x){console.log("ok")});
<new Promise_RTCCertificate_> = <RTCPeerConnection>.generateCertificate(<AlgorithmIdentifier>);
<new void> = <RTCPeerConnection>.setIdentityProvider(<DOMString>);
<new void> = <RTCPeerConnection>.setIdentityProvider(<DOMString>,<RTCIdentityProviderOptions>);
<new Promise_DOMString_> = <RTCPeerConnection>.getIdentityAssertion();
<new Promise_RTCSessionDescriptionInit_> = new Promise(function(x){console.log("ok")});
<new Promise_RTCSessionDescriptionInit_> = <RTCPeerConnection>.createOffer();
<new Promise_RTCSessionDescriptionInit_> = <RTCPeerConnection>.createOffer(<RTCOfferOptions>);
<new Promise_RTCSessionDescriptionInit_> = <RTCPeerConnection>.createAnswer();
<new Promise_RTCSessionDescriptionInit_> = <RTCPeerConnection>.createAnswer(<RTCAnswerOptions>);
<new Promise_void_> = <RTCPeerConnection>.setLocalDescription();
<new Promise_void_> = <RTCPeerConnection>.setLocalDescription(<RTCSessionDescriptionInit>);
<new Promise_void_> = <RTCPeerConnection>.setRemoteDescription();
<new Promise_void_> = <RTCPeerConnection>.setRemoteDescription(<RTCSessionDescriptionInit>);
<new RTCSessionDescription> = <RTCPeerConnection>.localDescription;
<new RTCSessionDescription> = <RTCPeerConnection>.currentLocalDescription;
<new RTCSessionDescription> = <RTCPeerConnection>.pendingLocalDescription;
<new RTCSessionDescription> = <RTCPeerConnection>.remoteDescription;
<new RTCSessionDescription> = <RTCPeerConnection>.currentRemoteDescription;
<new RTCSessionDescription> = <RTCPeerConnection>.pendingRemoteDescription;
<new RTCSignalingState> = <RTCPeerConnection>.signalingState;
<new union_RTCIceCandidateInit1RTCIceCandidate_> = <RTCIceCandidateInit>;
<new union_RTCIceCandidateInit1RTCIceCandidate_> = <RTCIceCandidate>;
<new Promise_void_> = <RTCPeerConnection>.addIceCandidate();
<new Promise_void_> = <RTCPeerConnection>.addIceCandidate(<union_RTCIceCandidateInit1RTCIceCandidate_>);
<new boolean> = <RTCPeerConnection>.canTrickleIceCandidates;
<new RTCIceGatheringState> = <RTCPeerConnection>.iceGatheringState;
<new RTCIceConnectionState> = <RTCPeerConnection>.iceConnectionState;
<new void> = <RTCPeerConnection>.restartIce();
<new Promise_RTCIdentityAssertion_> = new Promise(function(x){console.log("ok")});
<new Promise_RTCIdentityAssertion_> = <RTCPeerConnection>.peerIdentity;
<new DOMString> = <RTCPeerConnection>.idpLoginUrl;
<new DOMString> = <RTCPeerConnection>.id;
<RTCPeerConnection>.id = <DOMString>;
<new RTCConfiguration> = <RTCPeerConnection>.getConfiguration();
<new sequence_MediaStream_> = <RTCPeerConnection>.getLocalStreams();
<new sequence_MediaStream_> = <RTCPeerConnection>.getRemoteStreams();
<new void> = <RTCPeerConnection>.addStream(<MediaStream>);
<new RTCRtpSender> = <RTCPeerConnection>.addTrack(<MediaStreamTrack>);
<new RTCRtpSender> = <RTCPeerConnection>.addTrack(<MediaStreamTrack>,<MediaStream>);
<new void> = <RTCPeerConnection>.removeTrack(<RTCRtpSender>);
<new union_MediaStreamTrack1DOMString_> = <MediaStreamTrack>;
<new union_MediaStreamTrack1DOMString_> = <DOMString>;
<new RTCRtpTransceiver> = <RTCPeerConnection>.addTransceiver(<union_MediaStreamTrack1DOMString_>);
<new RTCRtpTransceiver> = <RTCPeerConnection>.addTransceiver(<union_MediaStreamTrack1DOMString_>,<RTCRtpTransceiverInit>);
<new sequence_RTCRtpSender_> = [<RTCRtpSender>];
<new RTCRtpSender> = <sequence_RTCRtpSender_>[0];
<new sequence_RTCRtpSender_> = <RTCPeerConnection>.getSenders();
<new sequence_RTCRtpReceiver_> = [<RTCRtpReceiver>];
<new RTCRtpReceiver> = <sequence_RTCRtpReceiver_>[0];
<new sequence_RTCRtpReceiver_> = <RTCPeerConnection>.getReceivers();
<new sequence_RTCRtpTransceiver_> = [<RTCRtpTransceiver>];
<new RTCRtpTransceiver> = <sequence_RTCRtpTransceiver_>[0];
<new sequence_RTCRtpTransceiver_> = <RTCPeerConnection>.getTransceivers();
<new void> = <RTCPeerConnection>.mozSetPacketCallback(<mozPacketCallback>);
<new void> = <RTCPeerConnection>.mozEnablePacketDump(<unsigned long>,<mozPacketDumpType>,<boolean>);
<new void> = <RTCPeerConnection>.mozDisablePacketDump(<unsigned long>,<mozPacketDumpType>,<boolean>);
<new void> = <RTCPeerConnection>.close();
<new EventHandler> = <RTCPeerConnection>.onnegotiationneeded;
<RTCPeerConnection>.onnegotiationneeded = <EventHandler>;
<new EventHandler> = <RTCPeerConnection>.onicecandidate;
<RTCPeerConnection>.onicecandidate = <EventHandler>;
<new EventHandler> = <RTCPeerConnection>.onsignalingstatechange;
<RTCPeerConnection>.onsignalingstatechange = <EventHandler>;
<new EventHandler> = <RTCPeerConnection>.onaddstream;
<RTCPeerConnection>.onaddstream = <EventHandler>;
<new EventHandler> = <RTCPeerConnection>.onaddtrack;
<RTCPeerConnection>.onaddtrack = <EventHandler>;
<new EventHandler> = <RTCPeerConnection>.ontrack;
<RTCPeerConnection>.ontrack = <EventHandler>;
<new EventHandler> = <RTCPeerConnection>.oniceconnectionstatechange;
<RTCPeerConnection>.oniceconnectionstatechange = <EventHandler>;
<new EventHandler> = <RTCPeerConnection>.onicegatheringstatechange;
<RTCPeerConnection>.onicegatheringstatechange = <EventHandler>;
<new Promise_RTCStatsReport_> = <RTCPeerConnection>.getStats();
<new Promise_RTCStatsReport_> = <RTCPeerConnection>.getStats(<MediaStreamTrack>);
<new RTCDataChannel> = <RTCPeerConnection>.createDataChannel(<DOMString>);
<new RTCDataChannel> = <RTCPeerConnection>.createDataChannel(<DOMString>,<RTCDataChannelInit>);
<new EventHandler> = <RTCPeerConnection>.ondatachannel;
<RTCPeerConnection>.ondatachannel = <EventHandler>;
<new Promise_void_> = <RTCPeerConnection>.createOffer(<RTCSessionDescriptionCallback>,<RTCPeerConnectionErrorCallback>);
<new Promise_void_> = <RTCPeerConnection>.createOffer(<RTCSessionDescriptionCallback>,<RTCPeerConnectionErrorCallback>,<RTCOfferOptions>);
<new Promise_void_> = <RTCPeerConnection>.createAnswer(<RTCSessionDescriptionCallback>,<RTCPeerConnectionErrorCallback>);
<new Promise_void_> = <RTCPeerConnection>.setLocalDescription(<RTCSessionDescriptionInit>,<VoidFunction>,<RTCPeerConnectionErrorCallback>);
<new Promise_void_> = <RTCPeerConnection>.setRemoteDescription(<RTCSessionDescriptionInit>,<VoidFunction>,<RTCPeerConnectionErrorCallback>);
<new Promise_void_> = <RTCPeerConnection>.addIceCandidate(<RTCIceCandidate>,<VoidFunction>,<RTCPeerConnectionErrorCallback>);
!extends RTCPeerConnectionIceEvent Event;
<new Event> = <RTCPeerConnectionIceEvent>;
<new RTCPeerConnectionIceEvent> = new RTCPeerConnectionIceEvent(<DOMString>);
<new RTCPeerConnectionIceEvent> = new RTCPeerConnectionIceEvent(<DOMString>,<RTCPeerConnectionIceEventInit>);
<new RTCIceCandidate> = <RTCPeerConnectionIceEvent>.candidate;
<new RTCPeerConnectionStatic> = new RTCPeerConnectionStatic();
<new void> = <RTCPeerConnectionStatic>.registerPeerConnectionLifecycleCallback(<PeerConnectionLifecycleCallback>);
<new MediaStreamTrack> = <RTCRtpReceiver>.track;
<new RTCDtlsTransport> = <RTCRtpReceiver>.transport;
<new Promise_RTCStatsReport_> = <RTCRtpReceiver>.getStats();
<new sequence_RTCRtpContributingSource_> = [<RTCRtpContributingSource>];
<new RTCRtpContributingSource> = <sequence_RTCRtpContributingSource_>[0];
<new sequence_RTCRtpContributingSource_> = <RTCRtpReceiver>.getContributingSources();
<new sequence_RTCRtpSynchronizationSource_> = [<RTCRtpSynchronizationSource>];
<new RTCRtpSynchronizationSource> = <sequence_RTCRtpSynchronizationSource_>[0];
<new sequence_RTCRtpSynchronizationSource_> = <RTCRtpReceiver>.getSynchronizationSources();
<new void> = <RTCRtpReceiver>.mozInsertAudioLevelForContributingSource(<unsigned long>,<DOMHighResTimeStamp>,<unsigned long>,<boolean>,<byte>);
<new MediaStreamTrack> = <RTCRtpSender>.track;
<new RTCDtlsTransport> = <RTCRtpSender>.transport;
<new Promise_void_> = <RTCRtpSender>.setParameters();
<new Promise_void_> = <RTCRtpSender>.setParameters(<RTCRtpParameters>);
<new RTCRtpParameters> = <RTCRtpSender>.getParameters();
<new Promise_void_> = <RTCRtpSender>.replaceTrack(<MediaStreamTrack>);
<new Promise_RTCStatsReport_> = <RTCRtpSender>.getStats();
<new RTCDTMFSender> = <RTCRtpSender>.dtmf;
<new sequence_MediaStream_> = <RTCRtpSender>.getStreams();
<new void> = <RTCRtpSender>.setStreams(<sequence_MediaStream_>);
<new void> = <RTCRtpSender>.setTrack(<MediaStreamTrack>);
<new void> = <RTCRtpSender>.checkWasCreatedByPc(<RTCPeerConnection>);
<new DOMString> = <RTCRtpTransceiver>.mid;
<new RTCRtpSender> = <RTCRtpTransceiver>.sender;
<new RTCRtpReceiver> = <RTCRtpTransceiver>.receiver;
<new boolean> = <RTCRtpTransceiver>.stopped;
<new RTCRtpTransceiverDirection> = <RTCRtpTransceiver>.direction;
<RTCRtpTransceiver>.direction = <RTCRtpTransceiverDirection>;
<new RTCRtpTransceiverDirection> = <RTCRtpTransceiver>.currentDirection;
<new void> = <RTCRtpTransceiver>.stop();
<new void> = <RTCRtpTransceiver>.setAddTrackMagic();
<new boolean> = <RTCRtpTransceiver>.addTrackMagic;
<new boolean> = <RTCRtpTransceiver>.shouldRemove;
<RTCRtpTransceiver>.shouldRemove = <boolean>;
<new void> = <RTCRtpTransceiver>.setCurrentDirection(<RTCRtpTransceiverDirection>);
<new void> = <RTCRtpTransceiver>.setDirectionInternal(<RTCRtpTransceiverDirection>);
<new void> = <RTCRtpTransceiver>.setMid(<DOMString>);
<new void> = <RTCRtpTransceiver>.unsetMid();
<new void> = <RTCRtpTransceiver>.setStopped();
<new DOMString> = <RTCRtpTransceiver>.getKind();
<RTCRtpTransceiver>.hasBeenUsedToSend();
<new void> = <RTCRtpTransceiver>.sync();
<new RTCSessionDescription> = new RTCSessionDescription();
<new RTCSessionDescription> = new RTCSessionDescription(<RTCSessionDescriptionInit>);
<new RTCSdpType> = <RTCSessionDescription>.type;
<RTCSessionDescription>.type = <RTCSdpType>;
<new DOMString> = <RTCSessionDescription>.sdp;
<RTCSessionDescription>.sdp = <DOMString>;
<new object> = <RTCSessionDescription>.toJSON();
<new RTCStatsReport> = new RTCStatsReport();
!extends RTCTrackEvent Event;
<new Event> = <RTCTrackEvent>;
<new RTCTrackEvent> = new RTCTrackEvent(<DOMString>,<RTCTrackEventInit>);
<new RTCRtpReceiver> = <RTCTrackEvent>.receiver;
<new MediaStreamTrack> = <RTCTrackEvent>.track;
<new sequence_MediaStream_> = <RTCTrackEvent>.streams;
<new RTCRtpTransceiver> = <RTCTrackEvent>.transceiver;
<new Sanitizer> = new Sanitizer();
<new Sanitizer> = new Sanitizer(<SanitizerConfig>);
<new DocumentFragment> = <Sanitizer>.sanitize(<SanitizerInput>);
<new Element> = <Sanitizer>.sanitizeFor(<DOMString>,<DOMString>);
!extends Screen EventTarget;
<new EventTarget> = <Screen>;
<new long> = <Screen>.availWidth;
<new long> = <Screen>.availHeight;
<new long> = <Screen>.width;
<new long> = <Screen>.height;
<new long> = <Screen>.colorDepth;
<new long> = <Screen>.pixelDepth;
<new long> = <Screen>.top;
<new long> = <Screen>.left;
<new long> = <Screen>.availTop;
<new long> = <Screen>.availLeft;
<new DOMString> = <Screen>.mozOrientation;
<new EventHandler> = <Screen>.onmozorientationchange;
<Screen>.onmozorientationchange = <EventHandler>;
<Screen>.mozLockOrientation(<DOMString>);
<Screen>.mozLockOrientation(<sequence_DOMString_>);
<new void> = <Screen>.mozUnlockOrientation();
<new ScreenOrientation> = <Screen>.orientation;
<new double> = <ScreenLuminance>.min;
<new double> = <ScreenLuminance>.max;
<new double> = <ScreenLuminance>.maxAverage;
<new ScreenColorGamut> = <Screen>.colorGamut;
<new ScreenLuminance> = <Screen>.luminance;
<new EventHandler> = <Screen>.onchange;
<Screen>.onchange = <EventHandler>;
!extends ScreenOrientation EventTarget;
<new EventTarget> = <ScreenOrientation>;
<new Promise_void_> = <ScreenOrientation>.lock(<OrientationLockType>);
<new void> = <ScreenOrientation>.unlock();
<new OrientationType> = <ScreenOrientation>.type;
<new unsigned short> = <ScreenOrientation>.angle;
<new EventHandler> = <ScreenOrientation>.onchange;
<ScreenOrientation>.onchange = <EventHandler>;
!extends ScriptProcessorNode AudioNode;
<new AudioNode> = <ScriptProcessorNode>;
<new EventHandler> = <ScriptProcessorNode>.onaudioprocess;
<ScriptProcessorNode>.onaudioprocess = <EventHandler>;
<new long> = <ScriptProcessorNode>.bufferSize;
!extends ScrollAreaEvent UIEvent;
<new UIEvent> = <ScrollAreaEvent>;
<new float> = <ScrollAreaEvent>.x;
<new float> = <ScrollAreaEvent>.y;
<new float> = <ScrollAreaEvent>.width;
<new float> = <ScrollAreaEvent>.height;
<new void> = <ScrollAreaEvent>.initScrollAreaEvent(<DOMString>);
<new void> = <ScrollAreaEvent>.initScrollAreaEvent(<DOMString>,<boolean>);
<new void> = <ScrollAreaEvent>.initScrollAreaEvent(<DOMString>,<boolean>,<boolean>);
<new void> = <ScrollAreaEvent>.initScrollAreaEvent(<DOMString>,<boolean>,<boolean>,<Window>);
<new void> = <ScrollAreaEvent>.initScrollAreaEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>);
<new void> = <ScrollAreaEvent>.initScrollAreaEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<float>);
<new void> = <ScrollAreaEvent>.initScrollAreaEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<float>,<float>);
<new void> = <ScrollAreaEvent>.initScrollAreaEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<float>,<float>,<float>);
<new void> = <ScrollAreaEvent>.initScrollAreaEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<float>,<float>,<float>,<float>);
!extends ScrollViewChangeEvent Event;
<new Event> = <ScrollViewChangeEvent>;
<new ScrollViewChangeEvent> = new ScrollViewChangeEvent(<DOMString>);
<new ScrollViewChangeEvent> = new ScrollViewChangeEvent(<DOMString>,<ScrollViewChangeEventInit>);
<new ScrollState> = <ScrollViewChangeEvent>.state;
!extends SecurityPolicyViolationEvent Event;
<new Event> = <SecurityPolicyViolationEvent>;
<new SecurityPolicyViolationEvent> = new SecurityPolicyViolationEvent(<DOMString>);
<new SecurityPolicyViolationEvent> = new SecurityPolicyViolationEvent(<DOMString>,<SecurityPolicyViolationEventInit>);
<new DOMString> = <SecurityPolicyViolationEvent>.documentURI;
<new DOMString> = <SecurityPolicyViolationEvent>.referrer;
<new DOMString> = <SecurityPolicyViolationEvent>.blockedURI;
<new DOMString> = <SecurityPolicyViolationEvent>.violatedDirective;
<new DOMString> = <SecurityPolicyViolationEvent>.effectiveDirective;
<new DOMString> = <SecurityPolicyViolationEvent>.originalPolicy;
<new DOMString> = <SecurityPolicyViolationEvent>.sourceFile;
<new DOMString> = <SecurityPolicyViolationEvent>.sample;
<new SecurityPolicyViolationEventDisposition> = <SecurityPolicyViolationEvent>.disposition;
<new unsigned short> = <SecurityPolicyViolationEvent>.statusCode;
<new long> = <SecurityPolicyViolationEvent>.lineNumber;
<new long> = <SecurityPolicyViolationEvent>.columnNumber;
<new Node> = <Selection>.anchorNode;
<new unsigned long> = <Selection>.anchorOffset;
<new Node> = <Selection>.focusNode;
<new unsigned long> = <Selection>.focusOffset;
<new boolean> = <Selection>.isCollapsed;
<new unsigned long> = <Selection>.rangeCount;
<new DOMString> = <Selection>.type;
<new Range> = <Selection>.getRangeAt(<unsigned long>);
<new void> = <Selection>.addRange(<Range>);
<new void> = <Selection>.removeRange(<Range>);
<new void> = <Selection>.removeAllRanges();
<new void> = <Selection>.empty();
<new void> = <Selection>.collapse(<Node>);
<new void> = <Selection>.collapse(<Node>,<unsigned long>);
<new void> = <Selection>.setPosition(<Node>);
<new void> = <Selection>.setPosition(<Node>,<unsigned long>);
<new void> = <Selection>.collapseToStart();
<new void> = <Selection>.collapseToEnd();
<new void> = <Selection>.extend(<Node>);
<new void> = <Selection>.extend(<Node>,<unsigned long>);
<new void> = <Selection>.setBaseAndExtent(<Node>,<unsigned long>,<Node>,<unsigned long>);
<new void> = <Selection>.selectAllChildren(<Node>);
<new void> = <Selection>.deleteFromDocument();
<Selection>.containsNode(<Node>);
<Selection>.containsNode(<Node>,<boolean>);
<new void> = <Selection>.modify(<DOMString>,<DOMString>,<DOMString>);
<new boolean> = <Selection>.interlinePosition;
<Selection>.interlinePosition = <boolean>;
<new short> = <Selection>.caretBidiLevel;
<Selection>.caretBidiLevel = <short>;
<Selection>.caretBidiLevel = null;
<new DOMString> = <Selection>.toStringWithFormat(<DOMString>,<unsigned long>,<long>);
<new void> = <Selection>.addSelectionListener(<nsISelectionListener>);
<new void> = <Selection>.removeSelectionListener(<nsISelectionListener>);
<new short> = <Selection>.selectionType;
<new sequence_Range_> = [<Range>];
<new Range> = <sequence_Range_>[0];
<new sequence_Range_> = <Selection>.GetRangesForInterval(<Node>,<long>,<Node>,<long>,<boolean>);
<new void> = <Selection>.scrollIntoView(<short>,<boolean>,<short>,<short>);
<new void> = <Selection>.setColors(<DOMString>,<DOMString>,<DOMString>,<DOMString>);
<new void> = <Selection>.resetColors();
!extends ServiceWorker EventTarget;
<new EventTarget> = <ServiceWorker>;
<new USVString> = <ServiceWorker>.scriptURL;
<new ServiceWorkerState> = <ServiceWorker>.state;
<new EventHandler> = <ServiceWorker>.onstatechange;
<ServiceWorker>.onstatechange = <EventHandler>;
<new void> = <ServiceWorker>.postMessage(<any>,<sequence_object_>);
<new void> = <ServiceWorker>.postMessage(<any>);
<new void> = <ServiceWorker>.postMessage(<any>,<StructuredSerializeOptions>);
!extends ServiceWorkerContainer EventTarget;
<new EventTarget> = <ServiceWorkerContainer>;
<new ServiceWorker> = <ServiceWorkerContainer>.controller;
<new Promise_ServiceWorkerRegistration_> = new Promise(function(x){console.log("ok")});
<new Promise_ServiceWorkerRegistration_> = <ServiceWorkerContainer>.ready;
<new Promise_ServiceWorkerRegistration_> = <ServiceWorkerContainer>.register(<USVString>);
<new Promise_ServiceWorkerRegistration_> = <ServiceWorkerContainer>.register(<USVString>,<RegistrationOptions>);
<new Promise_any_> = <ServiceWorkerContainer>.getRegistration();
<new Promise_any_> = <ServiceWorkerContainer>.getRegistration(<USVString>);
<new sequence_ServiceWorkerRegistration_> = [<ServiceWorkerRegistration>];
<new ServiceWorkerRegistration> = <sequence_ServiceWorkerRegistration_>[0];
<new Promise_sequence_ServiceWorkerRegistration__> = new Promise(function(x){console.log("ok")});
<new Promise_sequence_ServiceWorkerRegistration__> = <ServiceWorkerContainer>.getRegistrations();
<new void> = <ServiceWorkerContainer>.startMessages();
<new EventHandler> = <ServiceWorkerContainer>.oncontrollerchange;
<ServiceWorkerContainer>.oncontrollerchange = <EventHandler>;
<new EventHandler> = <ServiceWorkerContainer>.onerror;
<ServiceWorkerContainer>.onerror = <EventHandler>;
<new EventHandler> = <ServiceWorkerContainer>.onmessage;
<ServiceWorkerContainer>.onmessage = <EventHandler>;
<new EventHandler> = <ServiceWorkerContainer>.onmessageerror;
<ServiceWorkerContainer>.onmessageerror = <EventHandler>;
<new DOMString> = <ServiceWorkerContainer>.getScopeForUrl(<DOMString>);
!extends ServiceWorkerGlobalScope WorkerGlobalScope;
<new WorkerGlobalScope> = <ServiceWorkerGlobalScope>;
<new Clients> = <ServiceWorkerGlobalScope>.clients;
<new ServiceWorkerRegistration> = <ServiceWorkerGlobalScope>.registration;
<new Promise_void_> = <ServiceWorkerGlobalScope>.skipWaiting();
<new EventHandler> = <ServiceWorkerGlobalScope>.oninstall;
<ServiceWorkerGlobalScope>.oninstall = <EventHandler>;
<new EventHandler> = <ServiceWorkerGlobalScope>.onactivate;
<ServiceWorkerGlobalScope>.onactivate = <EventHandler>;
<new EventHandler> = <ServiceWorkerGlobalScope>.onfetch;
<ServiceWorkerGlobalScope>.onfetch = <EventHandler>;
<new EventHandler> = <ServiceWorkerGlobalScope>.onmessage;
<ServiceWorkerGlobalScope>.onmessage = <EventHandler>;
<new EventHandler> = <ServiceWorkerGlobalScope>.onmessageerror;
<ServiceWorkerGlobalScope>.onmessageerror = <EventHandler>;
<new EventHandler> = <ServiceWorkerGlobalScope>.onpush;
<ServiceWorkerGlobalScope>.onpush = <EventHandler>;
<new EventHandler> = <ServiceWorkerGlobalScope>.onpushsubscriptionchange;
<ServiceWorkerGlobalScope>.onpushsubscriptionchange = <EventHandler>;
<new EventHandler> = <ServiceWorkerGlobalScope>.onnotificationclick;
<ServiceWorkerGlobalScope>.onnotificationclick = <EventHandler>;
<new EventHandler> = <ServiceWorkerGlobalScope>.onnotificationclose;
<ServiceWorkerGlobalScope>.onnotificationclose = <EventHandler>;
!extends ServiceWorkerRegistration EventTarget;
<new EventTarget> = <ServiceWorkerRegistration>;
<new ServiceWorker> = <ServiceWorkerRegistration>.installing;
<new ServiceWorker> = <ServiceWorkerRegistration>.waiting;
<new ServiceWorker> = <ServiceWorkerRegistration>.active;
<new NavigationPreloadManager> = <ServiceWorkerRegistration>.navigationPreload;
<new USVString> = <ServiceWorkerRegistration>.scope;
<new ServiceWorkerUpdateViaCache> = <ServiceWorkerRegistration>.updateViaCache;
<new Promise_void_> = <ServiceWorkerRegistration>.update();
<new Promise_boolean_> = <ServiceWorkerRegistration>.unregister();
<new EventHandler> = <ServiceWorkerRegistration>.onupdatefound;
<ServiceWorkerRegistration>.onupdatefound = <EventHandler>;
<new PushManager> = <ServiceWorkerRegistration>.pushManager;
<new Promise_void_> = <ServiceWorkerRegistration>.showNotification(<DOMString>);
<new Promise_void_> = <ServiceWorkerRegistration>.showNotification(<DOMString>,<NotificationOptions>);
<new Promise_sequence_Notification__> = <ServiceWorkerRegistration>.getNotifications();
<new Promise_sequence_Notification__> = <ServiceWorkerRegistration>.getNotifications(<GetNotificationOptions>);
!extends ShadowRoot DocumentFragment;
<new DocumentFragment> = <ShadowRoot>;
<new ShadowRootMode> = <ShadowRoot>.mode;
<new boolean> = <ShadowRoot>.delegatesFocus;
<new SlotAssignmentMode> = <ShadowRoot>.slotAssignment;
<new Element> = <ShadowRoot>.host;
<new EventHandler> = <ShadowRoot>.onslotchange;
<ShadowRoot>.onslotchange = <EventHandler>;
<new Element> = <ShadowRoot>.getElementById(<DOMString>);
<new DOMString> = <ShadowRoot>.innerHTML;
<ShadowRoot>.innerHTML = <DOMString>;
<new Node> = <ShadowRoot>.importNodeAndAppendChildAt(<Node>,<Node>);
<new Node> = <ShadowRoot>.importNodeAndAppendChildAt(<Node>,<Node>,<boolean>);
<new Node> = <ShadowRoot>.createElementAndAppendChildAt(<Node>,<DOMString>);
<new void> = <ShadowRoot>.setIsUAWidget();
<ShadowRoot>.isUAWidget();
!extends SharedWorker EventTarget;
<new EventTarget> = <SharedWorker>;
<new union_DOMString1WorkerOptions_> = <DOMString>;
<new union_DOMString1WorkerOptions_> = <WorkerOptions>;
<new SharedWorker> = new SharedWorker(<USVString>);
<new SharedWorker> = new SharedWorker(<USVString>,<union_DOMString1WorkerOptions_>);
<new MessagePort> = <SharedWorker>.port;
!extends SharedWorkerGlobalScope WorkerGlobalScope;
<new WorkerGlobalScope> = <SharedWorkerGlobalScope>;
<new DOMString> = <SharedWorkerGlobalScope>.name;
<new void> = <SharedWorkerGlobalScope>.close();
<new EventHandler> = <SharedWorkerGlobalScope>.onconnect;
<SharedWorkerGlobalScope>.onconnect = <EventHandler>;
!extends SimpleGestureEvent MouseEvent;
<new MouseEvent> = <SimpleGestureEvent>;
<new unsigned long> = <SimpleGestureEvent>.DIRECTION_UP;
<new unsigned long> = <SimpleGestureEvent>.DIRECTION_DOWN;
<new unsigned long> = <SimpleGestureEvent>.DIRECTION_LEFT;
<new unsigned long> = <SimpleGestureEvent>.DIRECTION_RIGHT;
<new unsigned long> = <SimpleGestureEvent>.ROTATION_COUNTERCLOCKWISE;
<new unsigned long> = <SimpleGestureEvent>.ROTATION_CLOCKWISE;
<new unsigned long> = <SimpleGestureEvent>.allowedDirections;
<SimpleGestureEvent>.allowedDirections = <unsigned long>;
<new unsigned long> = <SimpleGestureEvent>.direction;
<new double> = <SimpleGestureEvent>.delta;
<new unsigned long> = <SimpleGestureEvent>.clickCount;
<new void> = <SimpleGestureEvent>.initSimpleGestureEvent(<DOMString>);
<new void> = <SimpleGestureEvent>.initSimpleGestureEvent(<DOMString>,<boolean>);
<new void> = <SimpleGestureEvent>.initSimpleGestureEvent(<DOMString>,<boolean>,<boolean>);
<new void> = <SimpleGestureEvent>.initSimpleGestureEvent(<DOMString>,<boolean>,<boolean>,<Window>);
<new void> = <SimpleGestureEvent>.initSimpleGestureEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>);
<new void> = <SimpleGestureEvent>.initSimpleGestureEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>);
<new void> = <SimpleGestureEvent>.initSimpleGestureEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>);
<new void> = <SimpleGestureEvent>.initSimpleGestureEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>);
<new void> = <SimpleGestureEvent>.initSimpleGestureEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>);
<new void> = <SimpleGestureEvent>.initSimpleGestureEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>);
<new void> = <SimpleGestureEvent>.initSimpleGestureEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>);
<new void> = <SimpleGestureEvent>.initSimpleGestureEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>,<boolean>);
<new void> = <SimpleGestureEvent>.initSimpleGestureEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>,<boolean>,<boolean>);
<new void> = <SimpleGestureEvent>.initSimpleGestureEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>,<boolean>,<boolean>,<short>);
<new void> = <SimpleGestureEvent>.initSimpleGestureEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>,<boolean>,<boolean>,<short>,<EventTarget>);
<new void> = <SimpleGestureEvent>.initSimpleGestureEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>,<boolean>,<boolean>,<short>,<EventTarget>,<unsigned long>);
<new void> = <SimpleGestureEvent>.initSimpleGestureEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>,<boolean>,<boolean>,<short>,<EventTarget>,<unsigned long>,<unsigned long>);
<new void> = <SimpleGestureEvent>.initSimpleGestureEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>,<boolean>,<boolean>,<short>,<EventTarget>,<unsigned long>,<unsigned long>,<double>);
<new void> = <SimpleGestureEvent>.initSimpleGestureEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<long>,<long>,<long>,<long>,<boolean>,<boolean>,<boolean>,<boolean>,<short>,<EventTarget>,<unsigned long>,<unsigned long>,<double>,<unsigned long>);
!extends SourceBuffer EventTarget;
<new EventTarget> = <SourceBuffer>;
<new SourceBufferAppendMode> = <SourceBuffer>.mode;
<SourceBuffer>.mode = <SourceBufferAppendMode>;
<new boolean> = <SourceBuffer>.updating;
<new TimeRanges> = <SourceBuffer>.buffered;
<new double> = <SourceBuffer>.timestampOffset;
<SourceBuffer>.timestampOffset = <double>;
<new double> = <SourceBuffer>.appendWindowStart;
<SourceBuffer>.appendWindowStart = <double>;
<new unrestricted double> = <SourceBuffer>.appendWindowEnd;
<SourceBuffer>.appendWindowEnd = <unrestricted double>;
<new EventHandler> = <SourceBuffer>.onupdatestart;
<SourceBuffer>.onupdatestart = <EventHandler>;
<new EventHandler> = <SourceBuffer>.onupdate;
<SourceBuffer>.onupdate = <EventHandler>;
<new EventHandler> = <SourceBuffer>.onupdateend;
<SourceBuffer>.onupdateend = <EventHandler>;
<new EventHandler> = <SourceBuffer>.onerror;
<SourceBuffer>.onerror = <EventHandler>;
<new EventHandler> = <SourceBuffer>.onabort;
<SourceBuffer>.onabort = <EventHandler>;
<new void> = <SourceBuffer>.appendBuffer(<ArrayBuffer>);
<new void> = <SourceBuffer>.appendBuffer(<ArrayBufferView>);
<new void> = <SourceBuffer>.abort();
<new void> = <SourceBuffer>.remove(<double>,<unrestricted double>);
<new Promise_void_> = <SourceBuffer>.appendBufferAsync(<ArrayBuffer>);
<new Promise_void_> = <SourceBuffer>.appendBufferAsync(<ArrayBufferView>);
<new Promise_void_> = <SourceBuffer>.removeAsync(<double>,<unrestricted double>);
<new void> = <SourceBuffer>.changeType(<DOMString>);
!extends SourceBufferList EventTarget;
<new EventTarget> = <SourceBufferList>;
<new unsigned long> = <SourceBufferList>.length;
<new EventHandler> = <SourceBufferList>.onaddsourcebuffer;
<SourceBufferList>.onaddsourcebuffer = <EventHandler>;
<new EventHandler> = <SourceBufferList>.onremovesourcebuffer;
<SourceBufferList>.onremovesourcebuffer = <EventHandler>;
<new SourceBuffer> = <SourceBufferList>(<unsigned long>);
<new SpeechGrammar> = new SpeechGrammar();
<new DOMString> = <SpeechGrammar>.src;
<SpeechGrammar>.src = <DOMString>;
<new float> = <SpeechGrammar>.weight;
<SpeechGrammar>.weight = <float>;
<new SpeechGrammarList> = new SpeechGrammarList();
<new unsigned long> = <SpeechGrammarList>.length;
<new SpeechGrammar> = <SpeechGrammarList>.item(<unsigned long>);
<new void> = <SpeechGrammarList>.addFromURI(<DOMString>);
<new void> = <SpeechGrammarList>.addFromURI(<DOMString>,<float>);
<new void> = <SpeechGrammarList>.addFromString(<DOMString>);
<new void> = <SpeechGrammarList>.addFromString(<DOMString>,<float>);
!extends SpeechRecognition EventTarget;
<new EventTarget> = <SpeechRecognition>;
<new SpeechRecognition> = new SpeechRecognition();
<new SpeechGrammarList> = <SpeechRecognition>.grammars;
<SpeechRecognition>.grammars = <SpeechGrammarList>;
<new DOMString> = <SpeechRecognition>.lang;
<SpeechRecognition>.lang = <DOMString>;
<new boolean> = <SpeechRecognition>.continuous;
<SpeechRecognition>.continuous = <boolean>;
<new boolean> = <SpeechRecognition>.interimResults;
<SpeechRecognition>.interimResults = <boolean>;
<new unsigned long> = <SpeechRecognition>.maxAlternatives;
<SpeechRecognition>.maxAlternatives = <unsigned long>;
<new DOMString> = <SpeechRecognition>.serviceURI;
<SpeechRecognition>.serviceURI = <DOMString>;
<new void> = <SpeechRecognition>.start();
<new void> = <SpeechRecognition>.start(<MediaStream>);
<new void> = <SpeechRecognition>.stop();
<new void> = <SpeechRecognition>.abort();
<new EventHandler> = <SpeechRecognition>.onaudiostart;
<SpeechRecognition>.onaudiostart = <EventHandler>;
<new EventHandler> = <SpeechRecognition>.onsoundstart;
<SpeechRecognition>.onsoundstart = <EventHandler>;
<new EventHandler> = <SpeechRecognition>.onspeechstart;
<SpeechRecognition>.onspeechstart = <EventHandler>;
<new EventHandler> = <SpeechRecognition>.onspeechend;
<SpeechRecognition>.onspeechend = <EventHandler>;
<new EventHandler> = <SpeechRecognition>.onsoundend;
<SpeechRecognition>.onsoundend = <EventHandler>;
<new EventHandler> = <SpeechRecognition>.onaudioend;
<SpeechRecognition>.onaudioend = <EventHandler>;
<new EventHandler> = <SpeechRecognition>.onresult;
<SpeechRecognition>.onresult = <EventHandler>;
<new EventHandler> = <SpeechRecognition>.onnomatch;
<SpeechRecognition>.onnomatch = <EventHandler>;
<new EventHandler> = <SpeechRecognition>.onerror;
<SpeechRecognition>.onerror = <EventHandler>;
<new EventHandler> = <SpeechRecognition>.onstart;
<SpeechRecognition>.onstart = <EventHandler>;
<new EventHandler> = <SpeechRecognition>.onend;
<SpeechRecognition>.onend = <EventHandler>;
<new DOMString> = <SpeechRecognitionAlternative>.transcript;
<new float> = <SpeechRecognitionAlternative>.confidence;
!extends SpeechRecognitionError Event;
<new Event> = <SpeechRecognitionError>;
<new SpeechRecognitionError> = new SpeechRecognitionError(<DOMString>);
<new SpeechRecognitionError> = new SpeechRecognitionError(<DOMString>,<SpeechRecognitionErrorInit>);
<new SpeechRecognitionErrorCode> = <SpeechRecognitionError>.error;
<new DOMString> = <SpeechRecognitionError>.message;
!extends SpeechRecognitionEvent Event;
<new Event> = <SpeechRecognitionEvent>;
<new SpeechRecognitionEvent> = new SpeechRecognitionEvent(<DOMString>);
<new SpeechRecognitionEvent> = new SpeechRecognitionEvent(<DOMString>,<SpeechRecognitionEventInit>);
<new unsigned long> = <SpeechRecognitionEvent>.resultIndex;
<new SpeechRecognitionResultList> = <SpeechRecognitionEvent>.results;
<new any> = <SpeechRecognitionEvent>.interpretation;
<new Document> = <SpeechRecognitionEvent>.emma;
<new unsigned long> = <SpeechRecognitionResult>.length;
<new SpeechRecognitionAlternative> = <SpeechRecognitionResult>.item(<unsigned long>);
<new boolean> = <SpeechRecognitionResult>.isFinal;
<new unsigned long> = <SpeechRecognitionResultList>.length;
<new SpeechRecognitionResult> = <SpeechRecognitionResultList>.item(<unsigned long>);
!extends SpeechSynthesis EventTarget;
<new EventTarget> = <SpeechSynthesis>;
<new boolean> = <SpeechSynthesis>.pending;
<new boolean> = <SpeechSynthesis>.speaking;
<new boolean> = <SpeechSynthesis>.paused;
<new void> = <SpeechSynthesis>.speak(<SpeechSynthesisUtterance>);
<new void> = <SpeechSynthesis>.cancel();
<new void> = <SpeechSynthesis>.pause();
<new void> = <SpeechSynthesis>.resume();
<new sequence_SpeechSynthesisVoice_> = [<SpeechSynthesisVoice>];
<new SpeechSynthesisVoice> = <sequence_SpeechSynthesisVoice_>[0];
<new sequence_SpeechSynthesisVoice_> = <SpeechSynthesis>.getVoices();
<new EventHandler> = <SpeechSynthesis>.onvoiceschanged;
<SpeechSynthesis>.onvoiceschanged = <EventHandler>;
<new void> = <SpeechSynthesis>.forceEnd();
!extends SpeechSynthesisErrorEvent SpeechSynthesisEvent;
<new SpeechSynthesisEvent> = <SpeechSynthesisErrorEvent>;
<new SpeechSynthesisErrorEvent> = new SpeechSynthesisErrorEvent(<DOMString>,<SpeechSynthesisErrorEventInit>);
<new SpeechSynthesisErrorCode> = <SpeechSynthesisErrorEvent>.error;
!extends SpeechSynthesisEvent Event;
<new Event> = <SpeechSynthesisEvent>;
<new SpeechSynthesisEvent> = new SpeechSynthesisEvent(<DOMString>,<SpeechSynthesisEventInit>);
<new SpeechSynthesisUtterance> = <SpeechSynthesisEvent>.utterance;
<new unsigned long> = <SpeechSynthesisEvent>.charIndex;
<new unsigned long> = <SpeechSynthesisEvent>.charLength;
<new float> = <SpeechSynthesisEvent>.elapsedTime;
<new DOMString> = <SpeechSynthesisEvent>.name;
!extends SpeechSynthesisUtterance EventTarget;
<new EventTarget> = <SpeechSynthesisUtterance>;
<new SpeechSynthesisUtterance> = new SpeechSynthesisUtterance();
<new SpeechSynthesisUtterance> = new SpeechSynthesisUtterance(<DOMString>);
<new DOMString> = <SpeechSynthesisUtterance>.text;
<SpeechSynthesisUtterance>.text = <DOMString>;
<new DOMString> = <SpeechSynthesisUtterance>.lang;
<SpeechSynthesisUtterance>.lang = <DOMString>;
<new SpeechSynthesisVoice> = <SpeechSynthesisUtterance>.voice;
<SpeechSynthesisUtterance>.voice = <SpeechSynthesisVoice>;
<SpeechSynthesisUtterance>.voice = null;
<new float> = <SpeechSynthesisUtterance>.volume;
<SpeechSynthesisUtterance>.volume = <float>;
<new float> = <SpeechSynthesisUtterance>.rate;
<SpeechSynthesisUtterance>.rate = <float>;
<new float> = <SpeechSynthesisUtterance>.pitch;
<SpeechSynthesisUtterance>.pitch = <float>;
<new EventHandler> = <SpeechSynthesisUtterance>.onstart;
<SpeechSynthesisUtterance>.onstart = <EventHandler>;
<new EventHandler> = <SpeechSynthesisUtterance>.onend;
<SpeechSynthesisUtterance>.onend = <EventHandler>;
<new EventHandler> = <SpeechSynthesisUtterance>.onerror;
<SpeechSynthesisUtterance>.onerror = <EventHandler>;
<new EventHandler> = <SpeechSynthesisUtterance>.onpause;
<SpeechSynthesisUtterance>.onpause = <EventHandler>;
<new EventHandler> = <SpeechSynthesisUtterance>.onresume;
<SpeechSynthesisUtterance>.onresume = <EventHandler>;
<new EventHandler> = <SpeechSynthesisUtterance>.onmark;
<SpeechSynthesisUtterance>.onmark = <EventHandler>;
<new EventHandler> = <SpeechSynthesisUtterance>.onboundary;
<SpeechSynthesisUtterance>.onboundary = <EventHandler>;
<new DOMString> = <SpeechSynthesisUtterance>.chosenVoiceURI;
<new DOMString> = <SpeechSynthesisVoice>.voiceURI;
<new DOMString> = <SpeechSynthesisVoice>.name;
<new DOMString> = <SpeechSynthesisVoice>.lang;
<new boolean> = <SpeechSynthesisVoice>.localService;
<new boolean> = <SpeechSynthesisVoice>.default;
!extends StaticRange AbstractRange;
<new AbstractRange> = <StaticRange>;
<new StaticRange> = new StaticRange(<StaticRangeInit>);
!extends StereoPannerNode AudioNode;
<new AudioNode> = <StereoPannerNode>;
<new StereoPannerNode> = new StereoPannerNode(<BaseAudioContext>);
<new StereoPannerNode> = new StereoPannerNode(<BaseAudioContext>,<StereoPannerOptions>);
<new AudioParam> = <StereoPannerNode>.pan;
<new unsigned long> = <Storage>.length;
<new DOMString> = <Storage>.key(<unsigned long>);
<new DOMString> = <Storage>.getItem(<DOMString>);
<new void> = <Storage>.setItem(<DOMString>,<DOMString>);
<new void> = <Storage>.removeItem(<DOMString>);
<new void> = <Storage>.clear();
<new boolean> = <Storage>.isSessionOnly;
<new void> = <Storage>.open();
<new void> = <Storage>.close();
<new void> = <Storage>.beginExplicitSnapshot();
<new void> = <Storage>.endExplicitSnapshot();
<new boolean> = <Storage>.hasActiveSnapshot;
!extends StorageEvent Event;
<new Event> = <StorageEvent>;
<new StorageEvent> = new StorageEvent(<DOMString>);
<new StorageEvent> = new StorageEvent(<DOMString>,<StorageEventInit>);
<new DOMString> = <StorageEvent>.key;
<new DOMString> = <StorageEvent>.oldValue;
<new DOMString> = <StorageEvent>.newValue;
<new DOMString> = <StorageEvent>.url;
<new Storage> = <StorageEvent>.storageArea;
<new void> = <StorageEvent>.initStorageEvent(<DOMString>);
<new void> = <StorageEvent>.initStorageEvent(<DOMString>,<boolean>);
<new void> = <StorageEvent>.initStorageEvent(<DOMString>,<boolean>,<boolean>);
<new void> = <StorageEvent>.initStorageEvent(<DOMString>,<boolean>,<boolean>,<DOMString>);
<new void> = <StorageEvent>.initStorageEvent(<DOMString>,<boolean>,<boolean>,<DOMString>,<DOMString>);
<new void> = <StorageEvent>.initStorageEvent(<DOMString>,<boolean>,<boolean>,<DOMString>,<DOMString>,<DOMString>);
<new void> = <StorageEvent>.initStorageEvent(<DOMString>,<boolean>,<boolean>,<DOMString>,<DOMString>,<DOMString>,<DOMString>);
<new void> = <StorageEvent>.initStorageEvent(<DOMString>,<boolean>,<boolean>,<DOMString>,<DOMString>,<DOMString>,<DOMString>,<Storage>);
<new Promise_boolean_> = <StorageManager>.persisted();
<new Promise_boolean_> = <StorageManager>.persist();
<new Promise_StorageEstimate_> = new Promise(function(x){console.log("ok")});
<new Promise_StorageEstimate_> = <StorageManager>.estimate();
!extends StreamFilter EventTarget;
<new EventTarget> = <StreamFilter>;
<new StreamFilter> = <StreamFilter>.create(<unsigned long long>,<DOMString>);
<new void> = <StreamFilter>.suspend();
<new void> = <StreamFilter>.resume();
<new void> = <StreamFilter>.close();
<new void> = <StreamFilter>.disconnect();
<new union_ArrayBuffer1Uint8Array_> = <ArrayBuffer>;
<new union_ArrayBuffer1Uint8Array_> = <Uint8Array>;
<new void> = <StreamFilter>.write(<union_ArrayBuffer1Uint8Array_>);
<new StreamFilterStatus> = <StreamFilter>.status;
<new DOMString> = <StreamFilter>.error;
<new EventHandler> = <StreamFilter>.ondata;
<StreamFilter>.ondata = <EventHandler>;
<new EventHandler> = <StreamFilter>.onstart;
<StreamFilter>.onstart = <EventHandler>;
<new EventHandler> = <StreamFilter>.onstop;
<StreamFilter>.onstop = <EventHandler>;
<new EventHandler> = <StreamFilter>.onerror;
<StreamFilter>.onerror = <EventHandler>;
!extends StreamFilterDataEvent Event;
<new Event> = <StreamFilterDataEvent>;
<new StreamFilterDataEvent> = new StreamFilterDataEvent(<DOMString>);
<new StreamFilterDataEvent> = new StreamFilterDataEvent(<DOMString>,<StreamFilterDataEventInit>);
<new ArrayBuffer> = <StreamFilterDataEvent>.data;
<new StructuredCloneTester> = new StructuredCloneTester(<boolean>,<boolean>);
<new boolean> = <StructuredCloneTester>.serializable;
<new boolean> = <StructuredCloneTester>.deserializable;
<new DOMString> = <StyleSheet>.type;
<new DOMString> = <StyleSheet>.href;
<new Node> = <StyleSheet>.ownerNode;
<new StyleSheet> = <StyleSheet>.parentStyleSheet;
<new DOMString> = <StyleSheet>.title;
<new MediaList> = <StyleSheet>.media;
<new boolean> = <StyleSheet>.disabled;
<StyleSheet>.disabled = <boolean>;
<new DOMString> = <StyleSheet>.sourceMapURL;
<new DOMString> = <StyleSheet>.sourceURL;
!extends StyleSheetApplicableStateChangeEvent Event;
<new Event> = <StyleSheetApplicableStateChangeEvent>;
<new StyleSheetApplicableStateChangeEvent> = new StyleSheetApplicableStateChangeEvent(<DOMString>);
<new StyleSheetApplicableStateChangeEvent> = new StyleSheetApplicableStateChangeEvent(<DOMString>,<StyleSheetApplicableStateChangeEventInit>);
<new CSSStyleSheet> = <StyleSheetApplicableStateChangeEvent>.stylesheet;
<new boolean> = <StyleSheetApplicableStateChangeEvent>.applicable;
<new CSSStyleSheet> = <StyleSheetList>.item(<unsigned long>);
<new unsigned long> = <StyleSheetList>.length;
!extends SubmitEvent Event;
<new Event> = <SubmitEvent>;
<new SubmitEvent> = new SubmitEvent(<DOMString>);
<new SubmitEvent> = new SubmitEvent(<DOMString>,<SubmitEventInit>);
<new HTMLElement> = <SubmitEvent>.submitter;
<new KeyType> = <CryptoKey>.type;
<new boolean> = <CryptoKey>.extractable;
<new object> = <CryptoKey>.algorithm;
<new sequence_KeyUsage_> = [<KeyUsage>];
<new KeyUsage> = <sequence_KeyUsage_>[0];
<new sequence_KeyUsage_> = <CryptoKey>.usages;
<new Promise_any_> = <SubtleCrypto>.encrypt(<AlgorithmIdentifier>,<CryptoKey>,<BufferSource>);
<new Promise_any_> = <SubtleCrypto>.decrypt(<AlgorithmIdentifier>,<CryptoKey>,<BufferSource>);
<new Promise_any_> = <SubtleCrypto>.sign(<AlgorithmIdentifier>,<CryptoKey>,<BufferSource>);
<new Promise_any_> = <SubtleCrypto>.verify(<AlgorithmIdentifier>,<CryptoKey>,<BufferSource>,<BufferSource>);
<new Promise_any_> = <SubtleCrypto>.digest(<AlgorithmIdentifier>,<BufferSource>);
<new Promise_any_> = <SubtleCrypto>.generateKey(<AlgorithmIdentifier>,<boolean>,<sequence_KeyUsage_>);
<new Promise_any_> = <SubtleCrypto>.deriveKey(<AlgorithmIdentifier>,<CryptoKey>,<AlgorithmIdentifier>,<boolean>,<sequence_KeyUsage_>);
<new Promise_any_> = <SubtleCrypto>.deriveBits(<AlgorithmIdentifier>,<CryptoKey>,<unsigned long>);
<new Promise_any_> = <SubtleCrypto>.importKey(<KeyFormat>,<object>,<AlgorithmIdentifier>,<boolean>,<sequence_KeyUsage_>);
<new Promise_any_> = <SubtleCrypto>.exportKey(<KeyFormat>,<CryptoKey>);
<new Promise_any_> = <SubtleCrypto>.wrapKey(<KeyFormat>,<CryptoKey>,<CryptoKey>,<AlgorithmIdentifier>);
<new Promise_any_> = <SubtleCrypto>.unwrapKey(<KeyFormat>,<BufferSource>,<CryptoKey>,<AlgorithmIdentifier>,<AlgorithmIdentifier>,<boolean>,<sequence_KeyUsage_>);
!extends SVGAElement SVGGraphicsElement;
<new SVGGraphicsElement> = <SVGAElement>;
<new SVGAnimatedString> = <SVGAElement>.target;
<new DOMString> = <SVGAElement>.download;
<SVGAElement>.download = <DOMString>;
<new DOMString> = <SVGAElement>.ping;
<SVGAElement>.ping = <DOMString>;
<new DOMString> = <SVGAElement>.rel;
<SVGAElement>.rel = <DOMString>;
<new DOMString> = <SVGAElement>.referrerPolicy;
<SVGAElement>.referrerPolicy = <DOMString>;
<new DOMTokenList> = <SVGAElement>.relList;
<new DOMString> = <SVGAElement>.hreflang;
<SVGAElement>.hreflang = <DOMString>;
<new DOMString> = <SVGAElement>.type;
<SVGAElement>.type = <DOMString>;
<new DOMString> = <SVGAElement>.text;
<SVGAElement>.text = <DOMString>;
<new unsigned short> = <SVGAngle>.SVG_ANGLETYPE_UNKNOWN;
<new unsigned short> = <SVGAngle>.SVG_ANGLETYPE_UNSPECIFIED;
<new unsigned short> = <SVGAngle>.SVG_ANGLETYPE_DEG;
<new unsigned short> = <SVGAngle>.SVG_ANGLETYPE_RAD;
<new unsigned short> = <SVGAngle>.SVG_ANGLETYPE_GRAD;
<new unsigned short> = <SVGAngle>.unitType;
<new float> = <SVGAngle>.value;
<SVGAngle>.value = <float>;
<new float> = <SVGAngle>.valueInSpecifiedUnits;
<SVGAngle>.valueInSpecifiedUnits = <float>;
<new DOMString> = <SVGAngle>.valueAsString;
<SVGAngle>.valueAsString = <DOMString>;
<new void> = <SVGAngle>.newValueSpecifiedUnits(<unsigned short>,<float>);
<new void> = <SVGAngle>.convertToSpecifiedUnits(<unsigned short>);
<new SVGAngle> = <SVGAnimatedAngle>.baseVal;
<new SVGAngle> = <SVGAnimatedAngle>.animVal;
<new boolean> = <SVGAnimatedBoolean>.baseVal;
<SVGAnimatedBoolean>.baseVal = <boolean>;
<new boolean> = <SVGAnimatedBoolean>.animVal;
<new unsigned short> = <SVGAnimatedEnumeration>.baseVal;
<SVGAnimatedEnumeration>.baseVal = <unsigned short>;
<new unsigned short> = <SVGAnimatedEnumeration>.animVal;
<new long> = <SVGAnimatedInteger>.baseVal;
<SVGAnimatedInteger>.baseVal = <long>;
<new long> = <SVGAnimatedInteger>.animVal;
<new SVGLength> = <SVGAnimatedLength>.baseVal;
<new SVGLength> = <SVGAnimatedLength>.animVal;
<new SVGLengthList> = <SVGAnimatedLengthList>.baseVal;
<new SVGLengthList> = <SVGAnimatedLengthList>.animVal;
<new float> = <SVGAnimatedNumber>.baseVal;
<SVGAnimatedNumber>.baseVal = <float>;
<new float> = <SVGAnimatedNumber>.animVal;
<new SVGNumberList> = <SVGAnimatedNumberList>.baseVal;
<new SVGNumberList> = <SVGAnimatedNumberList>.animVal;
<new SVGPreserveAspectRatio> = <SVGAnimatedPreserveAspectRatio>.baseVal;
<new SVGPreserveAspectRatio> = <SVGAnimatedPreserveAspectRatio>.animVal;
<new SVGRect> = <SVGAnimatedRect>.baseVal;
<new SVGRect> = <SVGAnimatedRect>.animVal;
<new DOMString> = <SVGAnimatedString>.baseVal;
<SVGAnimatedString>.baseVal = <DOMString>;
<new DOMString> = <SVGAnimatedString>.animVal;
<new SVGTransformList> = <SVGAnimatedTransformList>.baseVal;
<new SVGTransformList> = <SVGAnimatedTransformList>.animVal;
!extends SVGAnimateElement SVGAnimationElement;
<new SVGAnimationElement> = <SVGAnimateElement>;
!extends SVGAnimateMotionElement SVGAnimationElement;
<new SVGAnimationElement> = <SVGAnimateMotionElement>;
!extends SVGAnimateTransformElement SVGAnimationElement;
<new SVGAnimationElement> = <SVGAnimateTransformElement>;
!extends SVGAnimationElement SVGElement;
<new SVGElement> = <SVGAnimationElement>;
<new SVGElement> = <SVGAnimationElement>.targetElement;
<new EventHandler> = <SVGAnimationElement>.onbegin;
<SVGAnimationElement>.onbegin = <EventHandler>;
<new EventHandler> = <SVGAnimationElement>.onend;
<SVGAnimationElement>.onend = <EventHandler>;
<new EventHandler> = <SVGAnimationElement>.onrepeat;
<SVGAnimationElement>.onrepeat = <EventHandler>;
<new float> = <SVGAnimationElement>.getStartTime();
<new float> = <SVGAnimationElement>.getCurrentTime();
<new float> = <SVGAnimationElement>.getSimpleDuration();
<new void> = <SVGAnimationElement>.beginElement();
<new void> = <SVGAnimationElement>.beginElementAt(<float>);
<new void> = <SVGAnimationElement>.endElement();
<new void> = <SVGAnimationElement>.endElementAt(<float>);
!extends SVGCircleElement SVGGeometryElement;
<new SVGGeometryElement> = <SVGCircleElement>;
<new SVGAnimatedLength> = <SVGCircleElement>.cx;
<new SVGAnimatedLength> = <SVGCircleElement>.cy;
<new SVGAnimatedLength> = <SVGCircleElement>.r;
!extends SVGClipPathElement SVGElement;
<new SVGElement> = <SVGClipPathElement>;
<new SVGAnimatedEnumeration> = <SVGClipPathElement>.clipPathUnits;
<new SVGAnimatedTransformList> = <SVGClipPathElement>.transform;
!extends SVGComponentTransferFunctionElement SVGElement;
<new SVGElement> = <SVGComponentTransferFunctionElement>;
<new unsigned short> = <SVGComponentTransferFunctionElement>.SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN;
<new unsigned short> = <SVGComponentTransferFunctionElement>.SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY;
<new unsigned short> = <SVGComponentTransferFunctionElement>.SVG_FECOMPONENTTRANSFER_TYPE_TABLE;
<new unsigned short> = <SVGComponentTransferFunctionElement>.SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE;
<new unsigned short> = <SVGComponentTransferFunctionElement>.SVG_FECOMPONENTTRANSFER_TYPE_LINEAR;
<new unsigned short> = <SVGComponentTransferFunctionElement>.SVG_FECOMPONENTTRANSFER_TYPE_GAMMA;
<new SVGAnimatedEnumeration> = <SVGComponentTransferFunctionElement>.type;
<new SVGAnimatedNumberList> = <SVGComponentTransferFunctionElement>.tableValues;
<new SVGAnimatedNumber> = <SVGComponentTransferFunctionElement>.slope;
<new SVGAnimatedNumber> = <SVGComponentTransferFunctionElement>.intercept;
<new SVGAnimatedNumber> = <SVGComponentTransferFunctionElement>.amplitude;
<new SVGAnimatedNumber> = <SVGComponentTransferFunctionElement>.exponent;
<new SVGAnimatedNumber> = <SVGComponentTransferFunctionElement>.offset;
!extends SVGDefsElement SVGGraphicsElement;
<new SVGGraphicsElement> = <SVGDefsElement>;
!extends SVGDescElement SVGElement;
<new SVGElement> = <SVGDescElement>;
!extends SVGElement Element;
<new Element> = <SVGElement>;
<new DOMString> = <SVGElement>.id;
<SVGElement>.id = <DOMString>;
<new SVGAnimatedString> = <SVGElement>.className;
<new SVGSVGElement> = <SVGElement>.ownerSVGElement;
<new SVGElement> = <SVGElement>.viewportElement;
<new DOMString> = <SVGElement>.nonce;
<SVGElement>.nonce = <DOMString>;
!extends SVGEllipseElement SVGGeometryElement;
<new SVGGeometryElement> = <SVGEllipseElement>;
<new SVGAnimatedLength> = <SVGEllipseElement>.cx;
<new SVGAnimatedLength> = <SVGEllipseElement>.cy;
<new SVGAnimatedLength> = <SVGEllipseElement>.rx;
<new SVGAnimatedLength> = <SVGEllipseElement>.ry;
!extends SVGFEBlendElement SVGElement;
<new SVGElement> = <SVGFEBlendElement>;
<new unsigned short> = <SVGFEBlendElement>.SVG_FEBLEND_MODE_UNKNOWN;
<new unsigned short> = <SVGFEBlendElement>.SVG_FEBLEND_MODE_NORMAL;
<new unsigned short> = <SVGFEBlendElement>.SVG_FEBLEND_MODE_MULTIPLY;
<new unsigned short> = <SVGFEBlendElement>.SVG_FEBLEND_MODE_SCREEN;
<new unsigned short> = <SVGFEBlendElement>.SVG_FEBLEND_MODE_DARKEN;
<new unsigned short> = <SVGFEBlendElement>.SVG_FEBLEND_MODE_LIGHTEN;
<new unsigned short> = <SVGFEBlendElement>.SVG_FEBLEND_MODE_OVERLAY;
<new unsigned short> = <SVGFEBlendElement>.SVG_FEBLEND_MODE_COLOR_DODGE;
<new unsigned short> = <SVGFEBlendElement>.SVG_FEBLEND_MODE_COLOR_BURN;
<new unsigned short> = <SVGFEBlendElement>.SVG_FEBLEND_MODE_HARD_LIGHT;
<new unsigned short> = <SVGFEBlendElement>.SVG_FEBLEND_MODE_SOFT_LIGHT;
<new unsigned short> = <SVGFEBlendElement>.SVG_FEBLEND_MODE_DIFFERENCE;
<new unsigned short> = <SVGFEBlendElement>.SVG_FEBLEND_MODE_EXCLUSION;
<new unsigned short> = <SVGFEBlendElement>.SVG_FEBLEND_MODE_HUE;
<new unsigned short> = <SVGFEBlendElement>.SVG_FEBLEND_MODE_SATURATION;
<new unsigned short> = <SVGFEBlendElement>.SVG_FEBLEND_MODE_COLOR;
<new unsigned short> = <SVGFEBlendElement>.SVG_FEBLEND_MODE_LUMINOSITY;
<new SVGAnimatedString> = <SVGFEBlendElement>.in1;
<new SVGAnimatedString> = <SVGFEBlendElement>.in2;
<new SVGAnimatedEnumeration> = <SVGFEBlendElement>.mode;
!extends SVGFEColorMatrixElement SVGElement;
<new SVGElement> = <SVGFEColorMatrixElement>;
<new unsigned short> = <SVGFEColorMatrixElement>.SVG_FECOLORMATRIX_TYPE_UNKNOWN;
<new unsigned short> = <SVGFEColorMatrixElement>.SVG_FECOLORMATRIX_TYPE_MATRIX;
<new unsigned short> = <SVGFEColorMatrixElement>.SVG_FECOLORMATRIX_TYPE_SATURATE;
<new unsigned short> = <SVGFEColorMatrixElement>.SVG_FECOLORMATRIX_TYPE_HUEROTATE;
<new unsigned short> = <SVGFEColorMatrixElement>.SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA;
<new SVGAnimatedString> = <SVGFEColorMatrixElement>.in1;
<new SVGAnimatedEnumeration> = <SVGFEColorMatrixElement>.type;
<new SVGAnimatedNumberList> = <SVGFEColorMatrixElement>.values;
!extends SVGFEComponentTransferElement SVGElement;
<new SVGElement> = <SVGFEComponentTransferElement>;
<new SVGAnimatedString> = <SVGFEComponentTransferElement>.in1;
!extends SVGFECompositeElement SVGElement;
<new SVGElement> = <SVGFECompositeElement>;
<new unsigned short> = <SVGFECompositeElement>.SVG_FECOMPOSITE_OPERATOR_UNKNOWN;
<new unsigned short> = <SVGFECompositeElement>.SVG_FECOMPOSITE_OPERATOR_OVER;
<new unsigned short> = <SVGFECompositeElement>.SVG_FECOMPOSITE_OPERATOR_IN;
<new unsigned short> = <SVGFECompositeElement>.SVG_FECOMPOSITE_OPERATOR_OUT;
<new unsigned short> = <SVGFECompositeElement>.SVG_FECOMPOSITE_OPERATOR_ATOP;
<new unsigned short> = <SVGFECompositeElement>.SVG_FECOMPOSITE_OPERATOR_XOR;
<new unsigned short> = <SVGFECompositeElement>.SVG_FECOMPOSITE_OPERATOR_ARITHMETIC;
<new unsigned short> = <SVGFECompositeElement>.SVG_FECOMPOSITE_OPERATOR_LIGHTER;
<new SVGAnimatedString> = <SVGFECompositeElement>.in1;
<new SVGAnimatedString> = <SVGFECompositeElement>.in2;
<new SVGAnimatedEnumeration> = <SVGFECompositeElement>.operator;
<new SVGAnimatedNumber> = <SVGFECompositeElement>.k1;
<new SVGAnimatedNumber> = <SVGFECompositeElement>.k2;
<new SVGAnimatedNumber> = <SVGFECompositeElement>.k3;
<new SVGAnimatedNumber> = <SVGFECompositeElement>.k4;
!extends SVGFEConvolveMatrixElement SVGElement;
<new SVGElement> = <SVGFEConvolveMatrixElement>;
<new unsigned short> = <SVGFEConvolveMatrixElement>.SVG_EDGEMODE_UNKNOWN;
<new unsigned short> = <SVGFEConvolveMatrixElement>.SVG_EDGEMODE_DUPLICATE;
<new unsigned short> = <SVGFEConvolveMatrixElement>.SVG_EDGEMODE_WRAP;
<new unsigned short> = <SVGFEConvolveMatrixElement>.SVG_EDGEMODE_NONE;
<new SVGAnimatedString> = <SVGFEConvolveMatrixElement>.in1;
<new SVGAnimatedInteger> = <SVGFEConvolveMatrixElement>.orderX;
<new SVGAnimatedInteger> = <SVGFEConvolveMatrixElement>.orderY;
<new SVGAnimatedNumberList> = <SVGFEConvolveMatrixElement>.kernelMatrix;
<new SVGAnimatedNumber> = <SVGFEConvolveMatrixElement>.divisor;
<new SVGAnimatedNumber> = <SVGFEConvolveMatrixElement>.bias;
<new SVGAnimatedInteger> = <SVGFEConvolveMatrixElement>.targetX;
<new SVGAnimatedInteger> = <SVGFEConvolveMatrixElement>.targetY;
<new SVGAnimatedEnumeration> = <SVGFEConvolveMatrixElement>.edgeMode;
<new SVGAnimatedNumber> = <SVGFEConvolveMatrixElement>.kernelUnitLengthX;
<new SVGAnimatedNumber> = <SVGFEConvolveMatrixElement>.kernelUnitLengthY;
<new SVGAnimatedBoolean> = <SVGFEConvolveMatrixElement>.preserveAlpha;
!extends SVGFEDiffuseLightingElement SVGElement;
<new SVGElement> = <SVGFEDiffuseLightingElement>;
<new SVGAnimatedString> = <SVGFEDiffuseLightingElement>.in1;
<new SVGAnimatedNumber> = <SVGFEDiffuseLightingElement>.surfaceScale;
<new SVGAnimatedNumber> = <SVGFEDiffuseLightingElement>.diffuseConstant;
<new SVGAnimatedNumber> = <SVGFEDiffuseLightingElement>.kernelUnitLengthX;
<new SVGAnimatedNumber> = <SVGFEDiffuseLightingElement>.kernelUnitLengthY;
!extends SVGFEDisplacementMapElement SVGElement;
<new SVGElement> = <SVGFEDisplacementMapElement>;
<new unsigned short> = <SVGFEDisplacementMapElement>.SVG_CHANNEL_UNKNOWN;
<new unsigned short> = <SVGFEDisplacementMapElement>.SVG_CHANNEL_R;
<new unsigned short> = <SVGFEDisplacementMapElement>.SVG_CHANNEL_G;
<new unsigned short> = <SVGFEDisplacementMapElement>.SVG_CHANNEL_B;
<new unsigned short> = <SVGFEDisplacementMapElement>.SVG_CHANNEL_A;
<new SVGAnimatedString> = <SVGFEDisplacementMapElement>.in1;
<new SVGAnimatedString> = <SVGFEDisplacementMapElement>.in2;
<new SVGAnimatedNumber> = <SVGFEDisplacementMapElement>.scale;
<new SVGAnimatedEnumeration> = <SVGFEDisplacementMapElement>.xChannelSelector;
<new SVGAnimatedEnumeration> = <SVGFEDisplacementMapElement>.yChannelSelector;
!extends SVGFEDistantLightElement SVGElement;
<new SVGElement> = <SVGFEDistantLightElement>;
<new SVGAnimatedNumber> = <SVGFEDistantLightElement>.azimuth;
<new SVGAnimatedNumber> = <SVGFEDistantLightElement>.elevation;
!extends SVGFEDropShadowElement SVGElement;
<new SVGElement> = <SVGFEDropShadowElement>;
<new SVGAnimatedString> = <SVGFEDropShadowElement>.in1;
<new SVGAnimatedNumber> = <SVGFEDropShadowElement>.dx;
<new SVGAnimatedNumber> = <SVGFEDropShadowElement>.dy;
<new SVGAnimatedNumber> = <SVGFEDropShadowElement>.stdDeviationX;
<new SVGAnimatedNumber> = <SVGFEDropShadowElement>.stdDeviationY;
<new void> = <SVGFEDropShadowElement>.setStdDeviation(<float>,<float>);
!extends SVGFEFloodElement SVGElement;
<new SVGElement> = <SVGFEFloodElement>;
!extends SVGFEFuncAElement SVGComponentTransferFunctionElement;
<new SVGComponentTransferFunctionElement> = <SVGFEFuncAElement>;
!extends SVGFEFuncBElement SVGComponentTransferFunctionElement;
<new SVGComponentTransferFunctionElement> = <SVGFEFuncBElement>;
!extends SVGFEFuncGElement SVGComponentTransferFunctionElement;
<new SVGComponentTransferFunctionElement> = <SVGFEFuncGElement>;
!extends SVGFEFuncRElement SVGComponentTransferFunctionElement;
<new SVGComponentTransferFunctionElement> = <SVGFEFuncRElement>;
!extends SVGFEGaussianBlurElement SVGElement;
<new SVGElement> = <SVGFEGaussianBlurElement>;
<new SVGAnimatedString> = <SVGFEGaussianBlurElement>.in1;
<new SVGAnimatedNumber> = <SVGFEGaussianBlurElement>.stdDeviationX;
<new SVGAnimatedNumber> = <SVGFEGaussianBlurElement>.stdDeviationY;
<new void> = <SVGFEGaussianBlurElement>.setStdDeviation(<float>,<float>);
!extends SVGFEImageElement SVGElement;
<new SVGElement> = <SVGFEImageElement>;
<new SVGAnimatedPreserveAspectRatio> = <SVGFEImageElement>.preserveAspectRatio;
!extends SVGFEMergeElement SVGElement;
<new SVGElement> = <SVGFEMergeElement>;
!extends SVGFEMergeNodeElement SVGElement;
<new SVGElement> = <SVGFEMergeNodeElement>;
<new SVGAnimatedString> = <SVGFEMergeNodeElement>.in1;
!extends SVGFEMorphologyElement SVGElement;
<new SVGElement> = <SVGFEMorphologyElement>;
<new unsigned short> = <SVGFEMorphologyElement>.SVG_MORPHOLOGY_OPERATOR_UNKNOWN;
<new unsigned short> = <SVGFEMorphologyElement>.SVG_MORPHOLOGY_OPERATOR_ERODE;
<new unsigned short> = <SVGFEMorphologyElement>.SVG_MORPHOLOGY_OPERATOR_DILATE;
<new SVGAnimatedString> = <SVGFEMorphologyElement>.in1;
<new SVGAnimatedEnumeration> = <SVGFEMorphologyElement>.operator;
<new SVGAnimatedNumber> = <SVGFEMorphologyElement>.radiusX;
<new SVGAnimatedNumber> = <SVGFEMorphologyElement>.radiusY;
!extends SVGFEOffsetElement SVGElement;
<new SVGElement> = <SVGFEOffsetElement>;
<new SVGAnimatedString> = <SVGFEOffsetElement>.in1;
<new SVGAnimatedNumber> = <SVGFEOffsetElement>.dx;
<new SVGAnimatedNumber> = <SVGFEOffsetElement>.dy;
!extends SVGFEPointLightElement SVGElement;
<new SVGElement> = <SVGFEPointLightElement>;
<new SVGAnimatedNumber> = <SVGFEPointLightElement>.x;
<new SVGAnimatedNumber> = <SVGFEPointLightElement>.y;
<new SVGAnimatedNumber> = <SVGFEPointLightElement>.z;
!extends SVGFESpecularLightingElement SVGElement;
<new SVGElement> = <SVGFESpecularLightingElement>;
<new SVGAnimatedString> = <SVGFESpecularLightingElement>.in1;
<new SVGAnimatedNumber> = <SVGFESpecularLightingElement>.surfaceScale;
<new SVGAnimatedNumber> = <SVGFESpecularLightingElement>.specularConstant;
<new SVGAnimatedNumber> = <SVGFESpecularLightingElement>.specularExponent;
<new SVGAnimatedNumber> = <SVGFESpecularLightingElement>.kernelUnitLengthX;
<new SVGAnimatedNumber> = <SVGFESpecularLightingElement>.kernelUnitLengthY;
!extends SVGFESpotLightElement SVGElement;
<new SVGElement> = <SVGFESpotLightElement>;
<new SVGAnimatedNumber> = <SVGFESpotLightElement>.x;
<new SVGAnimatedNumber> = <SVGFESpotLightElement>.y;
<new SVGAnimatedNumber> = <SVGFESpotLightElement>.z;
<new SVGAnimatedNumber> = <SVGFESpotLightElement>.pointsAtX;
<new SVGAnimatedNumber> = <SVGFESpotLightElement>.pointsAtY;
<new SVGAnimatedNumber> = <SVGFESpotLightElement>.pointsAtZ;
<new SVGAnimatedNumber> = <SVGFESpotLightElement>.specularExponent;
<new SVGAnimatedNumber> = <SVGFESpotLightElement>.limitingConeAngle;
!extends SVGFETileElement SVGElement;
<new SVGElement> = <SVGFETileElement>;
<new SVGAnimatedString> = <SVGFETileElement>.in1;
!extends SVGFETurbulenceElement SVGElement;
<new SVGElement> = <SVGFETurbulenceElement>;
<new unsigned short> = <SVGFETurbulenceElement>.SVG_TURBULENCE_TYPE_UNKNOWN;
<new unsigned short> = <SVGFETurbulenceElement>.SVG_TURBULENCE_TYPE_FRACTALNOISE;
<new unsigned short> = <SVGFETurbulenceElement>.SVG_TURBULENCE_TYPE_TURBULENCE;
<new unsigned short> = <SVGFETurbulenceElement>.SVG_STITCHTYPE_UNKNOWN;
<new unsigned short> = <SVGFETurbulenceElement>.SVG_STITCHTYPE_STITCH;
<new unsigned short> = <SVGFETurbulenceElement>.SVG_STITCHTYPE_NOSTITCH;
<new SVGAnimatedNumber> = <SVGFETurbulenceElement>.baseFrequencyX;
<new SVGAnimatedNumber> = <SVGFETurbulenceElement>.baseFrequencyY;
<new SVGAnimatedInteger> = <SVGFETurbulenceElement>.numOctaves;
<new SVGAnimatedNumber> = <SVGFETurbulenceElement>.seed;
<new SVGAnimatedEnumeration> = <SVGFETurbulenceElement>.stitchTiles;
<new SVGAnimatedEnumeration> = <SVGFETurbulenceElement>.type;
!extends SVGFilterElement SVGElement;
<new SVGElement> = <SVGFilterElement>;
<new SVGAnimatedEnumeration> = <SVGFilterElement>.filterUnits;
<new SVGAnimatedEnumeration> = <SVGFilterElement>.primitiveUnits;
<new SVGAnimatedLength> = <SVGFilterElement>.x;
<new SVGAnimatedLength> = <SVGFilterElement>.y;
<new SVGAnimatedLength> = <SVGFilterElement>.width;
<new SVGAnimatedLength> = <SVGFilterElement>.height;
!extends SVGForeignObjectElement SVGGraphicsElement;
<new SVGGraphicsElement> = <SVGForeignObjectElement>;
<new SVGAnimatedLength> = <SVGForeignObjectElement>.x;
<new SVGAnimatedLength> = <SVGForeignObjectElement>.y;
<new SVGAnimatedLength> = <SVGForeignObjectElement>.width;
<new SVGAnimatedLength> = <SVGForeignObjectElement>.height;
!extends SVGGElement SVGGraphicsElement;
<new SVGGraphicsElement> = <SVGGElement>;
!extends SVGGeometryElement SVGGraphicsElement;
<new SVGGraphicsElement> = <SVGGeometryElement>;
<new SVGAnimatedNumber> = <SVGGeometryElement>.pathLength;
<SVGGeometryElement>.isPointInFill();
<SVGGeometryElement>.isPointInFill(<DOMPointInit>);
<SVGGeometryElement>.isPointInStroke();
<SVGGeometryElement>.isPointInStroke(<DOMPointInit>);
<new float> = <SVGGeometryElement>.getTotalLength();
<new SVGPoint> = <SVGGeometryElement>.getPointAtLength(<float>);
!extends SVGGradientElement SVGElement;
<new SVGElement> = <SVGGradientElement>;
<new unsigned short> = <SVGGradientElement>.SVG_SPREADMETHOD_UNKNOWN;
<new unsigned short> = <SVGGradientElement>.SVG_SPREADMETHOD_PAD;
<new unsigned short> = <SVGGradientElement>.SVG_SPREADMETHOD_REFLECT;
<new unsigned short> = <SVGGradientElement>.SVG_SPREADMETHOD_REPEAT;
<new SVGAnimatedEnumeration> = <SVGGradientElement>.gradientUnits;
<new SVGAnimatedTransformList> = <SVGGradientElement>.gradientTransform;
<new SVGAnimatedEnumeration> = <SVGGradientElement>.spreadMethod;
!extends SVGGraphicsElement SVGElement;
<new SVGElement> = <SVGGraphicsElement>;
<new boolean> = <SVGGraphicsElement>.autofocus;
<SVGGraphicsElement>.autofocus = <boolean>;
<new SVGAnimatedTransformList> = <SVGGraphicsElement>.transform;
<new SVGElement> = <SVGGraphicsElement>.nearestViewportElement;
<new SVGElement> = <SVGGraphicsElement>.farthestViewportElement;
<new SVGRect> = <SVGGraphicsElement>.getBBox();
<new SVGRect> = <SVGGraphicsElement>.getBBox(<SVGBoundingBoxOptions>);
<new SVGMatrix> = <SVGGraphicsElement>.getCTM();
<new SVGMatrix> = <SVGGraphicsElement>.getScreenCTM();
<new SVGMatrix> = <SVGGraphicsElement>.getTransformToElement(<SVGGraphicsElement>);
!extends SVGImageElement SVGGraphicsElement;
<new SVGGraphicsElement> = <SVGImageElement>;
<new SVGAnimatedLength> = <SVGImageElement>.x;
<new SVGAnimatedLength> = <SVGImageElement>.y;
<new SVGAnimatedLength> = <SVGImageElement>.width;
<new SVGAnimatedLength> = <SVGImageElement>.height;
<new SVGAnimatedPreserveAspectRatio> = <SVGImageElement>.preserveAspectRatio;
<new DOMString> = <SVGImageElement>.decoding;
<SVGImageElement>.decoding = <DOMString>;
<new Promise_void_> = <SVGImageElement>.decode();
<new unsigned short> = <SVGLength>.SVG_LENGTHTYPE_UNKNOWN;
<new unsigned short> = <SVGLength>.SVG_LENGTHTYPE_NUMBER;
<new unsigned short> = <SVGLength>.SVG_LENGTHTYPE_PERCENTAGE;
<new unsigned short> = <SVGLength>.SVG_LENGTHTYPE_EMS;
<new unsigned short> = <SVGLength>.SVG_LENGTHTYPE_EXS;
<new unsigned short> = <SVGLength>.SVG_LENGTHTYPE_PX;
<new unsigned short> = <SVGLength>.SVG_LENGTHTYPE_CM;
<new unsigned short> = <SVGLength>.SVG_LENGTHTYPE_MM;
<new unsigned short> = <SVGLength>.SVG_LENGTHTYPE_IN;
<new unsigned short> = <SVGLength>.SVG_LENGTHTYPE_PT;
<new unsigned short> = <SVGLength>.SVG_LENGTHTYPE_PC;
<new unsigned short> = <SVGLength>.unitType;
<new float> = <SVGLength>.value;
<SVGLength>.value = <float>;
<new float> = <SVGLength>.valueInSpecifiedUnits;
<SVGLength>.valueInSpecifiedUnits = <float>;
<new DOMString> = <SVGLength>.valueAsString;
<SVGLength>.valueAsString = <DOMString>;
<new void> = <SVGLength>.newValueSpecifiedUnits(<unsigned short>,<float>);
<new void> = <SVGLength>.convertToSpecifiedUnits(<unsigned short>);
<new unsigned long> = <SVGLengthList>.numberOfItems;
<new void> = <SVGLengthList>.clear();
<new SVGLength> = <SVGLengthList>.initialize(<SVGLength>);
<new SVGLength> = <SVGLengthList>.getItem(<unsigned long>);
<new SVGLength> = <SVGLengthList>.insertItemBefore(<SVGLength>,<unsigned long>);
<new SVGLength> = <SVGLengthList>.replaceItem(<SVGLength>,<unsigned long>);
<new SVGLength> = <SVGLengthList>.removeItem(<unsigned long>);
<new SVGLength> = <SVGLengthList>.appendItem(<SVGLength>);
<new void> = <SVGLengthList>(<unsigned long>,<SVGLength>);
<new unsigned long> = <SVGLengthList>.length;
!extends SVGLinearGradientElement SVGGradientElement;
<new SVGGradientElement> = <SVGLinearGradientElement>;
<new SVGAnimatedLength> = <SVGLinearGradientElement>.x1;
<new SVGAnimatedLength> = <SVGLinearGradientElement>.y1;
<new SVGAnimatedLength> = <SVGLinearGradientElement>.x2;
<new SVGAnimatedLength> = <SVGLinearGradientElement>.y2;
!extends SVGLineElement SVGGeometryElement;
<new SVGGeometryElement> = <SVGLineElement>;
<new SVGAnimatedLength> = <SVGLineElement>.x1;
<new SVGAnimatedLength> = <SVGLineElement>.y1;
<new SVGAnimatedLength> = <SVGLineElement>.x2;
<new SVGAnimatedLength> = <SVGLineElement>.y2;
!extends SVGMarkerElement SVGElement;
<new SVGElement> = <SVGMarkerElement>;
<new unsigned short> = <SVGMarkerElement>.SVG_MARKERUNITS_UNKNOWN;
<new unsigned short> = <SVGMarkerElement>.SVG_MARKERUNITS_USERSPACEONUSE;
<new unsigned short> = <SVGMarkerElement>.SVG_MARKERUNITS_STROKEWIDTH;
<new unsigned short> = <SVGMarkerElement>.SVG_MARKER_ORIENT_UNKNOWN;
<new unsigned short> = <SVGMarkerElement>.SVG_MARKER_ORIENT_AUTO;
<new unsigned short> = <SVGMarkerElement>.SVG_MARKER_ORIENT_ANGLE;
<new unsigned short> = <SVGMarkerElement>.SVG_MARKER_ORIENT_AUTO_START_REVERSE;
<new SVGAnimatedLength> = <SVGMarkerElement>.refX;
<new SVGAnimatedLength> = <SVGMarkerElement>.refY;
<new SVGAnimatedEnumeration> = <SVGMarkerElement>.markerUnits;
<new SVGAnimatedLength> = <SVGMarkerElement>.markerWidth;
<new SVGAnimatedLength> = <SVGMarkerElement>.markerHeight;
<new SVGAnimatedEnumeration> = <SVGMarkerElement>.orientType;
<new SVGAnimatedAngle> = <SVGMarkerElement>.orientAngle;
<new void> = <SVGMarkerElement>.setOrientToAuto();
<new void> = <SVGMarkerElement>.setOrientToAngle(<SVGAngle>);
!extends SVGMaskElement SVGElement;
<new SVGElement> = <SVGMaskElement>;
<new unsigned short> = <SVGMaskElement>.SVG_MASKTYPE_LUMINANCE;
<new unsigned short> = <SVGMaskElement>.SVG_MASKTYPE_ALPHA;
<new SVGAnimatedEnumeration> = <SVGMaskElement>.maskUnits;
<new SVGAnimatedEnumeration> = <SVGMaskElement>.maskContentUnits;
<new SVGAnimatedLength> = <SVGMaskElement>.x;
<new SVGAnimatedLength> = <SVGMaskElement>.y;
<new SVGAnimatedLength> = <SVGMaskElement>.width;
<new SVGAnimatedLength> = <SVGMaskElement>.height;
<new float> = <SVGMatrix>.a;
<SVGMatrix>.a = <float>;
<new float> = <SVGMatrix>.b;
<SVGMatrix>.b = <float>;
<new float> = <SVGMatrix>.c;
<SVGMatrix>.c = <float>;
<new float> = <SVGMatrix>.d;
<SVGMatrix>.d = <float>;
<new float> = <SVGMatrix>.e;
<SVGMatrix>.e = <float>;
<new float> = <SVGMatrix>.f;
<SVGMatrix>.f = <float>;
<new SVGMatrix> = <SVGMatrix>.multiply(<SVGMatrix>);
<new SVGMatrix> = <SVGMatrix>.inverse();
<new SVGMatrix> = <SVGMatrix>.translate(<float>,<float>);
<new SVGMatrix> = <SVGMatrix>.scale(<float>);
<new SVGMatrix> = <SVGMatrix>.scaleNonUniform(<float>,<float>);
<new SVGMatrix> = <SVGMatrix>.rotate(<float>);
<new SVGMatrix> = <SVGMatrix>.rotateFromVector(<float>,<float>);
<new SVGMatrix> = <SVGMatrix>.flipX();
<new SVGMatrix> = <SVGMatrix>.flipY();
<new SVGMatrix> = <SVGMatrix>.skewX(<float>);
<new SVGMatrix> = <SVGMatrix>.skewY(<float>);
!extends SVGMetadataElement SVGElement;
<new SVGElement> = <SVGMetadataElement>;
!extends SVGMPathElement SVGElement;
<new SVGElement> = <SVGMPathElement>;
<new float> = <SVGNumber>.value;
<SVGNumber>.value = <float>;
<new unsigned long> = <SVGNumberList>.numberOfItems;
<new void> = <SVGNumberList>.clear();
<new SVGNumber> = <SVGNumberList>.initialize(<SVGNumber>);
<new SVGNumber> = <SVGNumberList>.getItem(<unsigned long>);
<new SVGNumber> = <SVGNumberList>.insertItemBefore(<SVGNumber>,<unsigned long>);
<new SVGNumber> = <SVGNumberList>.replaceItem(<SVGNumber>,<unsigned long>);
<new SVGNumber> = <SVGNumberList>.removeItem(<unsigned long>);
<new SVGNumber> = <SVGNumberList>.appendItem(<SVGNumber>);
<new unsigned long> = <SVGNumberList>.length;
!extends SVGPathElement SVGGeometryElement;
<new SVGGeometryElement> = <SVGPathElement>;
<SVGPathElement>.getPathSegAtLength(<float>);
<new unsigned short> = <SVGPathSeg>.PATHSEG_UNKNOWN;
<new unsigned short> = <SVGPathSeg>.PATHSEG_CLOSEPATH;
<new unsigned short> = <SVGPathSeg>.PATHSEG_MOVETO_ABS;
<new unsigned short> = <SVGPathSeg>.PATHSEG_MOVETO_REL;
<new unsigned short> = <SVGPathSeg>.PATHSEG_LINETO_ABS;
<new unsigned short> = <SVGPathSeg>.PATHSEG_LINETO_REL;
<new unsigned short> = <SVGPathSeg>.PATHSEG_CURVETO_CUBIC_ABS;
<new unsigned short> = <SVGPathSeg>.PATHSEG_CURVETO_CUBIC_REL;
<new unsigned short> = <SVGPathSeg>.PATHSEG_CURVETO_QUADRATIC_ABS;
<new unsigned short> = <SVGPathSeg>.PATHSEG_CURVETO_QUADRATIC_REL;
<new unsigned short> = <SVGPathSeg>.PATHSEG_ARC_ABS;
<new unsigned short> = <SVGPathSeg>.PATHSEG_ARC_REL;
<new unsigned short> = <SVGPathSeg>.PATHSEG_LINETO_HORIZONTAL_ABS;
<new unsigned short> = <SVGPathSeg>.PATHSEG_LINETO_HORIZONTAL_REL;
<new unsigned short> = <SVGPathSeg>.PATHSEG_LINETO_VERTICAL_ABS;
<new unsigned short> = <SVGPathSeg>.PATHSEG_LINETO_VERTICAL_REL;
<new unsigned short> = <SVGPathSeg>.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS;
<new unsigned short> = <SVGPathSeg>.PATHSEG_CURVETO_CUBIC_SMOOTH_REL;
<new unsigned short> = <SVGPathSeg>.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS;
<new unsigned short> = <SVGPathSeg>.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL;
<new unsigned short> = <SVGPathSeg>.pathSegType;
<new DOMString> = <SVGPathSeg>.pathSegTypeAsLetter;
!extends SVGPathSegClosePath SVGPathSeg;
<new SVGPathSeg> = <SVGPathSegClosePath>;
!extends SVGPathSegMovetoAbs SVGPathSeg;
<new SVGPathSeg> = <SVGPathSegMovetoAbs>;
<new float> = <SVGPathSegMovetoAbs>.x;
<SVGPathSegMovetoAbs>.x = <float>;
<new float> = <SVGPathSegMovetoAbs>.y;
<SVGPathSegMovetoAbs>.y = <float>;
!extends SVGPathSegMovetoRel SVGPathSeg;
<new SVGPathSeg> = <SVGPathSegMovetoRel>;
<new float> = <SVGPathSegMovetoRel>.x;
<SVGPathSegMovetoRel>.x = <float>;
<new float> = <SVGPathSegMovetoRel>.y;
<SVGPathSegMovetoRel>.y = <float>;
!extends SVGPathSegLinetoAbs SVGPathSeg;
<new SVGPathSeg> = <SVGPathSegLinetoAbs>;
<new float> = <SVGPathSegLinetoAbs>.x;
<SVGPathSegLinetoAbs>.x = <float>;
<new float> = <SVGPathSegLinetoAbs>.y;
<SVGPathSegLinetoAbs>.y = <float>;
!extends SVGPathSegLinetoRel SVGPathSeg;
<new SVGPathSeg> = <SVGPathSegLinetoRel>;
<new float> = <SVGPathSegLinetoRel>.x;
<SVGPathSegLinetoRel>.x = <float>;
<new float> = <SVGPathSegLinetoRel>.y;
<SVGPathSegLinetoRel>.y = <float>;
!extends SVGPathSegCurvetoCubicAbs SVGPathSeg;
<new SVGPathSeg> = <SVGPathSegCurvetoCubicAbs>;
<new float> = <SVGPathSegCurvetoCubicAbs>.x;
<SVGPathSegCurvetoCubicAbs>.x = <float>;
<new float> = <SVGPathSegCurvetoCubicAbs>.y;
<SVGPathSegCurvetoCubicAbs>.y = <float>;
<new float> = <SVGPathSegCurvetoCubicAbs>.x1;
<SVGPathSegCurvetoCubicAbs>.x1 = <float>;
<new float> = <SVGPathSegCurvetoCubicAbs>.y1;
<SVGPathSegCurvetoCubicAbs>.y1 = <float>;
<new float> = <SVGPathSegCurvetoCubicAbs>.x2;
<SVGPathSegCurvetoCubicAbs>.x2 = <float>;
<new float> = <SVGPathSegCurvetoCubicAbs>.y2;
<SVGPathSegCurvetoCubicAbs>.y2 = <float>;
!extends SVGPathSegCurvetoCubicRel SVGPathSeg;
<new SVGPathSeg> = <SVGPathSegCurvetoCubicRel>;
<new float> = <SVGPathSegCurvetoCubicRel>.x;
<SVGPathSegCurvetoCubicRel>.x = <float>;
<new float> = <SVGPathSegCurvetoCubicRel>.y;
<SVGPathSegCurvetoCubicRel>.y = <float>;
<new float> = <SVGPathSegCurvetoCubicRel>.x1;
<SVGPathSegCurvetoCubicRel>.x1 = <float>;
<new float> = <SVGPathSegCurvetoCubicRel>.y1;
<SVGPathSegCurvetoCubicRel>.y1 = <float>;
<new float> = <SVGPathSegCurvetoCubicRel>.x2;
<SVGPathSegCurvetoCubicRel>.x2 = <float>;
<new float> = <SVGPathSegCurvetoCubicRel>.y2;
<SVGPathSegCurvetoCubicRel>.y2 = <float>;
!extends SVGPathSegCurvetoQuadraticAbs SVGPathSeg;
<new SVGPathSeg> = <SVGPathSegCurvetoQuadraticAbs>;
<new float> = <SVGPathSegCurvetoQuadraticAbs>.x;
<SVGPathSegCurvetoQuadraticAbs>.x = <float>;
<new float> = <SVGPathSegCurvetoQuadraticAbs>.y;
<SVGPathSegCurvetoQuadraticAbs>.y = <float>;
<new float> = <SVGPathSegCurvetoQuadraticAbs>.x1;
<SVGPathSegCurvetoQuadraticAbs>.x1 = <float>;
<new float> = <SVGPathSegCurvetoQuadraticAbs>.y1;
<SVGPathSegCurvetoQuadraticAbs>.y1 = <float>;
!extends SVGPathSegCurvetoQuadraticRel SVGPathSeg;
<new SVGPathSeg> = <SVGPathSegCurvetoQuadraticRel>;
<new float> = <SVGPathSegCurvetoQuadraticRel>.x;
<SVGPathSegCurvetoQuadraticRel>.x = <float>;
<new float> = <SVGPathSegCurvetoQuadraticRel>.y;
<SVGPathSegCurvetoQuadraticRel>.y = <float>;
<new float> = <SVGPathSegCurvetoQuadraticRel>.x1;
<SVGPathSegCurvetoQuadraticRel>.x1 = <float>;
<new float> = <SVGPathSegCurvetoQuadraticRel>.y1;
<SVGPathSegCurvetoQuadraticRel>.y1 = <float>;
!extends SVGPathSegArcAbs SVGPathSeg;
<new SVGPathSeg> = <SVGPathSegArcAbs>;
<new float> = <SVGPathSegArcAbs>.x;
<SVGPathSegArcAbs>.x = <float>;
<new float> = <SVGPathSegArcAbs>.y;
<SVGPathSegArcAbs>.y = <float>;
<new float> = <SVGPathSegArcAbs>.r1;
<SVGPathSegArcAbs>.r1 = <float>;
<new float> = <SVGPathSegArcAbs>.r2;
<SVGPathSegArcAbs>.r2 = <float>;
<new float> = <SVGPathSegArcAbs>.angle;
<SVGPathSegArcAbs>.angle = <float>;
<new boolean> = <SVGPathSegArcAbs>.largeArcFlag;
<SVGPathSegArcAbs>.largeArcFlag = <boolean>;
<new boolean> = <SVGPathSegArcAbs>.sweepFlag;
<SVGPathSegArcAbs>.sweepFlag = <boolean>;
!extends SVGPathSegArcRel SVGPathSeg;
<new SVGPathSeg> = <SVGPathSegArcRel>;
<new float> = <SVGPathSegArcRel>.x;
<SVGPathSegArcRel>.x = <float>;
<new float> = <SVGPathSegArcRel>.y;
<SVGPathSegArcRel>.y = <float>;
<new float> = <SVGPathSegArcRel>.r1;
<SVGPathSegArcRel>.r1 = <float>;
<new float> = <SVGPathSegArcRel>.r2;
<SVGPathSegArcRel>.r2 = <float>;
<new float> = <SVGPathSegArcRel>.angle;
<SVGPathSegArcRel>.angle = <float>;
<new boolean> = <SVGPathSegArcRel>.largeArcFlag;
<SVGPathSegArcRel>.largeArcFlag = <boolean>;
<new boolean> = <SVGPathSegArcRel>.sweepFlag;
<SVGPathSegArcRel>.sweepFlag = <boolean>;
!extends SVGPathSegLinetoHorizontalAbs SVGPathSeg;
<new SVGPathSeg> = <SVGPathSegLinetoHorizontalAbs>;
<new float> = <SVGPathSegLinetoHorizontalAbs>.x;
<SVGPathSegLinetoHorizontalAbs>.x = <float>;
!extends SVGPathSegLinetoHorizontalRel SVGPathSeg;
<new SVGPathSeg> = <SVGPathSegLinetoHorizontalRel>;
<new float> = <SVGPathSegLinetoHorizontalRel>.x;
<SVGPathSegLinetoHorizontalRel>.x = <float>;
!extends SVGPathSegLinetoVerticalAbs SVGPathSeg;
<new SVGPathSeg> = <SVGPathSegLinetoVerticalAbs>;
<new float> = <SVGPathSegLinetoVerticalAbs>.y;
<SVGPathSegLinetoVerticalAbs>.y = <float>;
!extends SVGPathSegLinetoVerticalRel SVGPathSeg;
<new SVGPathSeg> = <SVGPathSegLinetoVerticalRel>;
<new float> = <SVGPathSegLinetoVerticalRel>.y;
<SVGPathSegLinetoVerticalRel>.y = <float>;
!extends SVGPathSegCurvetoCubicSmoothAbs SVGPathSeg;
<new SVGPathSeg> = <SVGPathSegCurvetoCubicSmoothAbs>;
<new float> = <SVGPathSegCurvetoCubicSmoothAbs>.x;
<SVGPathSegCurvetoCubicSmoothAbs>.x = <float>;
<new float> = <SVGPathSegCurvetoCubicSmoothAbs>.y;
<SVGPathSegCurvetoCubicSmoothAbs>.y = <float>;
<new float> = <SVGPathSegCurvetoCubicSmoothAbs>.x2;
<SVGPathSegCurvetoCubicSmoothAbs>.x2 = <float>;
<new float> = <SVGPathSegCurvetoCubicSmoothAbs>.y2;
<SVGPathSegCurvetoCubicSmoothAbs>.y2 = <float>;
!extends SVGPathSegCurvetoCubicSmoothRel SVGPathSeg;
<new SVGPathSeg> = <SVGPathSegCurvetoCubicSmoothRel>;
<new float> = <SVGPathSegCurvetoCubicSmoothRel>.x;
<SVGPathSegCurvetoCubicSmoothRel>.x = <float>;
<new float> = <SVGPathSegCurvetoCubicSmoothRel>.y;
<SVGPathSegCurvetoCubicSmoothRel>.y = <float>;
<new float> = <SVGPathSegCurvetoCubicSmoothRel>.x2;
<SVGPathSegCurvetoCubicSmoothRel>.x2 = <float>;
<new float> = <SVGPathSegCurvetoCubicSmoothRel>.y2;
<SVGPathSegCurvetoCubicSmoothRel>.y2 = <float>;
!extends SVGPathSegCurvetoQuadraticSmoothAbs SVGPathSeg;
<new SVGPathSeg> = <SVGPathSegCurvetoQuadraticSmoothAbs>;
<new float> = <SVGPathSegCurvetoQuadraticSmoothAbs>.x;
<SVGPathSegCurvetoQuadraticSmoothAbs>.x = <float>;
<new float> = <SVGPathSegCurvetoQuadraticSmoothAbs>.y;
<SVGPathSegCurvetoQuadraticSmoothAbs>.y = <float>;
!extends SVGPathSegCurvetoQuadraticSmoothRel SVGPathSeg;
<new SVGPathSeg> = <SVGPathSegCurvetoQuadraticSmoothRel>;
<new float> = <SVGPathSegCurvetoQuadraticSmoothRel>.x;
<SVGPathSegCurvetoQuadraticSmoothRel>.x = <float>;
<new float> = <SVGPathSegCurvetoQuadraticSmoothRel>.y;
<SVGPathSegCurvetoQuadraticSmoothRel>.y = <float>;
<new unsigned long> = <SVGPathSegList>.numberOfItems;
<new SVGPathSeg> = <SVGPathSegList>.getItem(<unsigned long>);
<new unsigned long> = <SVGPathSegList>.length;
!extends SVGPatternElement SVGElement;
<new SVGElement> = <SVGPatternElement>;
<new SVGAnimatedEnumeration> = <SVGPatternElement>.patternUnits;
<new SVGAnimatedEnumeration> = <SVGPatternElement>.patternContentUnits;
<new SVGAnimatedTransformList> = <SVGPatternElement>.patternTransform;
<new SVGAnimatedLength> = <SVGPatternElement>.x;
<new SVGAnimatedLength> = <SVGPatternElement>.y;
<new SVGAnimatedLength> = <SVGPatternElement>.width;
<new SVGAnimatedLength> = <SVGPatternElement>.height;
<new float> = <SVGPoint>.x;
<SVGPoint>.x = <float>;
<new float> = <SVGPoint>.y;
<SVGPoint>.y = <float>;
<new SVGPoint> = <SVGPoint>.matrixTransform();
<new SVGPoint> = <SVGPoint>.matrixTransform(<DOMMatrix2DInit>);
<new unsigned long> = <SVGPointList>.numberOfItems;
<new void> = <SVGPointList>.clear();
<new SVGPoint> = <SVGPointList>.initialize(<SVGPoint>);
<new SVGPoint> = <SVGPointList>.getItem(<unsigned long>);
<new SVGPoint> = <SVGPointList>.insertItemBefore(<SVGPoint>,<unsigned long>);
<new SVGPoint> = <SVGPointList>.replaceItem(<SVGPoint>,<unsigned long>);
<new SVGPoint> = <SVGPointList>.removeItem(<unsigned long>);
<new SVGPoint> = <SVGPointList>.appendItem(<SVGPoint>);
<new unsigned long> = <SVGPointList>.length;
!extends SVGPolygonElement SVGGeometryElement;
<new SVGGeometryElement> = <SVGPolygonElement>;
!extends SVGPolylineElement SVGGeometryElement;
<new SVGGeometryElement> = <SVGPolylineElement>;
<new unsigned short> = <SVGPreserveAspectRatio>.SVG_PRESERVEASPECTRATIO_UNKNOWN;
<new unsigned short> = <SVGPreserveAspectRatio>.SVG_PRESERVEASPECTRATIO_NONE;
<new unsigned short> = <SVGPreserveAspectRatio>.SVG_PRESERVEASPECTRATIO_XMINYMIN;
<new unsigned short> = <SVGPreserveAspectRatio>.SVG_PRESERVEASPECTRATIO_XMIDYMIN;
<new unsigned short> = <SVGPreserveAspectRatio>.SVG_PRESERVEASPECTRATIO_XMAXYMIN;
<new unsigned short> = <SVGPreserveAspectRatio>.SVG_PRESERVEASPECTRATIO_XMINYMID;
<new unsigned short> = <SVGPreserveAspectRatio>.SVG_PRESERVEASPECTRATIO_XMIDYMID;
<new unsigned short> = <SVGPreserveAspectRatio>.SVG_PRESERVEASPECTRATIO_XMAXYMID;
<new unsigned short> = <SVGPreserveAspectRatio>.SVG_PRESERVEASPECTRATIO_XMINYMAX;
<new unsigned short> = <SVGPreserveAspectRatio>.SVG_PRESERVEASPECTRATIO_XMIDYMAX;
<new unsigned short> = <SVGPreserveAspectRatio>.SVG_PRESERVEASPECTRATIO_XMAXYMAX;
<new unsigned short> = <SVGPreserveAspectRatio>.SVG_MEETORSLICE_UNKNOWN;
<new unsigned short> = <SVGPreserveAspectRatio>.SVG_MEETORSLICE_MEET;
<new unsigned short> = <SVGPreserveAspectRatio>.SVG_MEETORSLICE_SLICE;
<new unsigned short> = <SVGPreserveAspectRatio>.align;
<SVGPreserveAspectRatio>.align = <unsigned short>;
<new unsigned short> = <SVGPreserveAspectRatio>.meetOrSlice;
<SVGPreserveAspectRatio>.meetOrSlice = <unsigned short>;
!extends SVGRadialGradientElement SVGGradientElement;
<new SVGGradientElement> = <SVGRadialGradientElement>;
<new SVGAnimatedLength> = <SVGRadialGradientElement>.cx;
<new SVGAnimatedLength> = <SVGRadialGradientElement>.cy;
<new SVGAnimatedLength> = <SVGRadialGradientElement>.r;
<new SVGAnimatedLength> = <SVGRadialGradientElement>.fx;
<new SVGAnimatedLength> = <SVGRadialGradientElement>.fy;
<new SVGAnimatedLength> = <SVGRadialGradientElement>.fr;
<new float> = <SVGRect>.x;
<SVGRect>.x = <float>;
<new float> = <SVGRect>.y;
<SVGRect>.y = <float>;
<new float> = <SVGRect>.width;
<SVGRect>.width = <float>;
<new float> = <SVGRect>.height;
<SVGRect>.height = <float>;
!extends SVGRectElement SVGGeometryElement;
<new SVGGeometryElement> = <SVGRectElement>;
<new SVGAnimatedLength> = <SVGRectElement>.x;
<new SVGAnimatedLength> = <SVGRectElement>.y;
<new SVGAnimatedLength> = <SVGRectElement>.width;
<new SVGAnimatedLength> = <SVGRectElement>.height;
<new SVGAnimatedLength> = <SVGRectElement>.rx;
<new SVGAnimatedLength> = <SVGRectElement>.ry;
!extends SVGScriptElement SVGElement;
<new SVGElement> = <SVGScriptElement>;
<new DOMString> = <SVGScriptElement>.type;
<SVGScriptElement>.type = <DOMString>;
<new DOMString> = <SVGScriptElement>.crossOrigin;
<SVGScriptElement>.crossOrigin = <DOMString>;
<SVGScriptElement>.crossOrigin = null;
!extends SVGSetElement SVGAnimationElement;
<new SVGAnimationElement> = <SVGSetElement>;
!extends SVGStopElement SVGElement;
<new SVGElement> = <SVGStopElement>;
<new SVGAnimatedNumber> = <SVGStopElement>.offset;
<new unsigned long> = <SVGStringList>.length;
<new unsigned long> = <SVGStringList>.numberOfItems;
<new void> = <SVGStringList>.clear();
<new DOMString> = <SVGStringList>.initialize(<DOMString>);
<new DOMString> = <SVGStringList>.getItem(<unsigned long>);
<new DOMString> = <SVGStringList>(<unsigned long>);
<new DOMString> = <SVGStringList>.insertItemBefore(<DOMString>,<unsigned long>);
<new DOMString> = <SVGStringList>.replaceItem(<DOMString>,<unsigned long>);
<new DOMString> = <SVGStringList>.removeItem(<unsigned long>);
<new DOMString> = <SVGStringList>.appendItem(<DOMString>);
!extends SVGStyleElement SVGElement;
<new SVGElement> = <SVGStyleElement>;
<new DOMString> = <SVGStyleElement>.type;
<SVGStyleElement>.type = <DOMString>;
<new DOMString> = <SVGStyleElement>.media;
<SVGStyleElement>.media = <DOMString>;
<new DOMString> = <SVGStyleElement>.title;
<SVGStyleElement>.title = <DOMString>;
!extends SVGSVGElement SVGGraphicsElement;
<new SVGGraphicsElement> = <SVGSVGElement>;
<new SVGAnimatedLength> = <SVGSVGElement>.x;
<new SVGAnimatedLength> = <SVGSVGElement>.y;
<new SVGAnimatedLength> = <SVGSVGElement>.width;
<new SVGAnimatedLength> = <SVGSVGElement>.height;
<new boolean> = <SVGSVGElement>.useCurrentView;
<new float> = <SVGSVGElement>.currentScale;
<SVGSVGElement>.currentScale = <float>;
<new SVGPoint> = <SVGSVGElement>.currentTranslate;
<SVGSVGElement>.suspendRedraw(<unsigned long>);
<new void> = <SVGSVGElement>.unsuspendRedraw(<unsigned long>);
<new void> = <SVGSVGElement>.unsuspendRedrawAll();
<new void> = <SVGSVGElement>.forceRedraw();
<new void> = <SVGSVGElement>.pauseAnimations();
<new void> = <SVGSVGElement>.unpauseAnimations();
<SVGSVGElement>.animationsPaused();
<new float> = <SVGSVGElement>.getCurrentTime();
<new void> = <SVGSVGElement>.setCurrentTime(<float>);
<new void> = <SVGSVGElement>.deselectAll();
<new SVGNumber> = <SVGSVGElement>.createSVGNumber();
<new SVGLength> = <SVGSVGElement>.createSVGLength();
<new SVGAngle> = <SVGSVGElement>.createSVGAngle();
<new SVGPoint> = <SVGSVGElement>.createSVGPoint();
<new SVGMatrix> = <SVGSVGElement>.createSVGMatrix();
<new SVGRect> = <SVGSVGElement>.createSVGRect();
<new SVGTransform> = <SVGSVGElement>.createSVGTransform();
<new SVGTransform> = <SVGSVGElement>.createSVGTransformFromMatrix();
<new SVGTransform> = <SVGSVGElement>.createSVGTransformFromMatrix(<DOMMatrix2DInit>);
<new Element> = <SVGSVGElement>.getElementById(<DOMString>);
!extends SVGSwitchElement SVGGraphicsElement;
<new SVGGraphicsElement> = <SVGSwitchElement>;
!extends SVGSymbolElement SVGElement;
<new SVGElement> = <SVGSymbolElement>;
!extends SVGTextContentElement SVGGraphicsElement;
<new SVGGraphicsElement> = <SVGTextContentElement>;
<new unsigned short> = <SVGTextContentElement>.LENGTHADJUST_UNKNOWN;
<new unsigned short> = <SVGTextContentElement>.LENGTHADJUST_SPACING;
<new unsigned short> = <SVGTextContentElement>.LENGTHADJUST_SPACINGANDGLYPHS;
<new SVGAnimatedLength> = <SVGTextContentElement>.textLength;
<new SVGAnimatedEnumeration> = <SVGTextContentElement>.lengthAdjust;
<SVGTextContentElement>.getNumberOfChars();
<new float> = <SVGTextContentElement>.getComputedTextLength();
<new float> = <SVGTextContentElement>.getSubStringLength(<unsigned long>,<unsigned long>);
<new SVGPoint> = <SVGTextContentElement>.getStartPositionOfChar(<unsigned long>);
<new SVGPoint> = <SVGTextContentElement>.getEndPositionOfChar(<unsigned long>);
<new SVGRect> = <SVGTextContentElement>.getExtentOfChar(<unsigned long>);
<new float> = <SVGTextContentElement>.getRotationOfChar(<unsigned long>);
<SVGTextContentElement>.getCharNumAtPosition();
<SVGTextContentElement>.getCharNumAtPosition(<DOMPointInit>);
<new void> = <SVGTextContentElement>.selectSubString(<unsigned long>,<unsigned long>);
!extends SVGTextElement SVGTextPositioningElement;
<new SVGTextPositioningElement> = <SVGTextElement>;
!extends SVGTextPathElement SVGTextContentElement;
<new SVGTextContentElement> = <SVGTextPathElement>;
<new unsigned short> = <SVGTextPathElement>.TEXTPATH_METHODTYPE_UNKNOWN;
<new unsigned short> = <SVGTextPathElement>.TEXTPATH_METHODTYPE_ALIGN;
<new unsigned short> = <SVGTextPathElement>.TEXTPATH_METHODTYPE_STRETCH;
<new unsigned short> = <SVGTextPathElement>.TEXTPATH_SPACINGTYPE_UNKNOWN;
<new unsigned short> = <SVGTextPathElement>.TEXTPATH_SPACINGTYPE_AUTO;
<new unsigned short> = <SVGTextPathElement>.TEXTPATH_SPACINGTYPE_EXACT;
<new SVGAnimatedLength> = <SVGTextPathElement>.startOffset;
<new SVGAnimatedEnumeration> = <SVGTextPathElement>.method;
<new SVGAnimatedEnumeration> = <SVGTextPathElement>.spacing;
!extends SVGTextPositioningElement SVGTextContentElement;
<new SVGTextContentElement> = <SVGTextPositioningElement>;
<new SVGAnimatedLengthList> = <SVGTextPositioningElement>.x;
<new SVGAnimatedLengthList> = <SVGTextPositioningElement>.y;
<new SVGAnimatedLengthList> = <SVGTextPositioningElement>.dx;
<new SVGAnimatedLengthList> = <SVGTextPositioningElement>.dy;
<new SVGAnimatedNumberList> = <SVGTextPositioningElement>.rotate;
!extends SVGTitleElement SVGElement;
<new SVGElement> = <SVGTitleElement>;
<new unsigned short> = <SVGTransform>.SVG_TRANSFORM_UNKNOWN;
<new unsigned short> = <SVGTransform>.SVG_TRANSFORM_MATRIX;
<new unsigned short> = <SVGTransform>.SVG_TRANSFORM_TRANSLATE;
<new unsigned short> = <SVGTransform>.SVG_TRANSFORM_SCALE;
<new unsigned short> = <SVGTransform>.SVG_TRANSFORM_ROTATE;
<new unsigned short> = <SVGTransform>.SVG_TRANSFORM_SKEWX;
<new unsigned short> = <SVGTransform>.SVG_TRANSFORM_SKEWY;
<new unsigned short> = <SVGTransform>.type;
<new SVGMatrix> = <SVGTransform>.matrix;
<new float> = <SVGTransform>.angle;
<new void> = <SVGTransform>.setMatrix();
<new void> = <SVGTransform>.setMatrix(<DOMMatrix2DInit>);
<new void> = <SVGTransform>.setTranslate(<float>,<float>);
<new void> = <SVGTransform>.setScale(<float>,<float>);
<new void> = <SVGTransform>.setRotate(<float>,<float>,<float>);
<new void> = <SVGTransform>.setSkewX(<float>);
<new void> = <SVGTransform>.setSkewY(<float>);
<new unsigned long> = <SVGTransformList>.numberOfItems;
<new void> = <SVGTransformList>.clear();
<new SVGTransform> = <SVGTransformList>.initialize(<SVGTransform>);
<new SVGTransform> = <SVGTransformList>.getItem(<unsigned long>);
<new SVGTransform> = <SVGTransformList>.insertItemBefore(<SVGTransform>,<unsigned long>);
<new SVGTransform> = <SVGTransformList>.replaceItem(<SVGTransform>,<unsigned long>);
<new SVGTransform> = <SVGTransformList>.removeItem(<unsigned long>);
<new SVGTransform> = <SVGTransformList>.appendItem(<SVGTransform>);
<new SVGTransform> = <SVGTransformList>.createSVGTransformFromMatrix();
<new SVGTransform> = <SVGTransformList>.createSVGTransformFromMatrix(<DOMMatrix2DInit>);
<new SVGTransform> = <SVGTransformList>.consolidate();
<new unsigned long> = <SVGTransformList>.length;
!extends SVGTSpanElement SVGTextPositioningElement;
<new SVGTextPositioningElement> = <SVGTSpanElement>;
<new unsigned short> = <SVGUnitTypes>.SVG_UNIT_TYPE_UNKNOWN;
<new unsigned short> = <SVGUnitTypes>.SVG_UNIT_TYPE_USERSPACEONUSE;
<new unsigned short> = <SVGUnitTypes>.SVG_UNIT_TYPE_OBJECTBOUNDINGBOX;
!extends SVGUseElement SVGGraphicsElement;
<new SVGGraphicsElement> = <SVGUseElement>;
<new SVGAnimatedLength> = <SVGUseElement>.x;
<new SVGAnimatedLength> = <SVGUseElement>.y;
<new SVGAnimatedLength> = <SVGUseElement>.width;
<new SVGAnimatedLength> = <SVGUseElement>.height;
!extends SVGViewElement SVGElement;
<new SVGElement> = <SVGViewElement>;
!extends TCPServerSocket EventTarget;
<new EventTarget> = <TCPServerSocket>;
<new TCPServerSocket> = new TCPServerSocket(<unsigned short>);
<new TCPServerSocket> = new TCPServerSocket(<unsigned short>,<ServerSocketOptions>);
<new TCPServerSocket> = new TCPServerSocket(<unsigned short>,<ServerSocketOptions>,<unsigned short>);
<new unsigned short> = <TCPServerSocket>.localPort;
<new EventHandler> = <TCPServerSocket>.onconnect;
<TCPServerSocket>.onconnect = <EventHandler>;
<new EventHandler> = <TCPServerSocket>.onerror;
<TCPServerSocket>.onerror = <EventHandler>;
<new void> = <TCPServerSocket>.close();
!extends TCPServerSocketEvent Event;
<new Event> = <TCPServerSocketEvent>;
<new TCPServerSocketEvent> = new TCPServerSocketEvent(<DOMString>);
<new TCPServerSocketEvent> = new TCPServerSocketEvent(<DOMString>,<TCPServerSocketEventInit>);
<new TCPSocket> = <TCPServerSocketEvent>.socket;
<new TCPSocket> = <LegacyMozTCPSocket>.open(<DOMString>,<unsigned short>);
<new TCPSocket> = <LegacyMozTCPSocket>.open(<DOMString>,<unsigned short>,<SocketOptions>);
<new TCPServerSocket> = <LegacyMozTCPSocket>.listen(<unsigned short>);
<new TCPServerSocket> = <LegacyMozTCPSocket>.listen(<unsigned short>,<ServerSocketOptions>);
<new TCPServerSocket> = <LegacyMozTCPSocket>.listen(<unsigned short>,<ServerSocketOptions>,<unsigned short>);
!extends TCPSocket EventTarget;
<new EventTarget> = <TCPSocket>;
<new TCPSocket> = new TCPSocket(<DOMString>,<unsigned short>);
<new TCPSocket> = new TCPSocket(<DOMString>,<unsigned short>,<SocketOptions>);
<new void> = <TCPSocket>.upgradeToSecure();
<new nsISocketTransport> = <TCPSocket>.transport;
<new USVString> = <TCPSocket>.host;
<new unsigned short> = <TCPSocket>.port;
<new boolean> = <TCPSocket>.ssl;
<new unsigned long long> = <TCPSocket>.bufferedAmount;
<new void> = <TCPSocket>.suspend();
<new void> = <TCPSocket>.resume();
<new void> = <TCPSocket>.close();
<new void> = <TCPSocket>.closeImmediately();
<TCPSocket>.send(<ByteString>);
<TCPSocket>.send(<ArrayBuffer>);
<TCPSocket>.send(<ArrayBuffer>,<unsigned long>);
<TCPSocket>.send(<ArrayBuffer>,<unsigned long>,<unsigned long>);
<new TCPReadyState> = <TCPSocket>.readyState;
<new TCPSocketBinaryType> = <TCPSocket>.binaryType;
<new EventHandler> = <TCPSocket>.onopen;
<TCPSocket>.onopen = <EventHandler>;
<new EventHandler> = <TCPSocket>.ondrain;
<TCPSocket>.ondrain = <EventHandler>;
<new EventHandler> = <TCPSocket>.ondata;
<TCPSocket>.ondata = <EventHandler>;
<new EventHandler> = <TCPSocket>.onerror;
<TCPSocket>.onerror = <EventHandler>;
<new EventHandler> = <TCPSocket>.onclose;
<TCPSocket>.onclose = <EventHandler>;
!extends TCPSocketErrorEvent Event;
<new Event> = <TCPSocketErrorEvent>;
<new TCPSocketErrorEvent> = new TCPSocketErrorEvent(<DOMString>);
<new TCPSocketErrorEvent> = new TCPSocketErrorEvent(<DOMString>,<TCPSocketErrorEventInit>);
<new DOMString> = <TCPSocketErrorEvent>.name;
<new DOMString> = <TCPSocketErrorEvent>.message;
<new unsigned long> = <TCPSocketErrorEvent>.errorCode;
!extends TCPSocketEvent Event;
<new Event> = <TCPSocketEvent>;
<new TCPSocketEvent> = new TCPSocketEvent(<DOMString>);
<new TCPSocketEvent> = new TCPSocketEvent(<DOMString>,<TCPSocketEventInit>);
<new any> = <TCPSocketEvent>.data;
<new WrapperCachedNonISupportsTestInterface> = new WrapperCachedNonISupportsTestInterface();
<new TestFunctions> = new TestFunctions();
<new void> = <TestFunctions>.throwUncatchableException();
<new Promise_any_> = <TestFunctions>.passThroughPromise(<Promise_any_>);
<new Promise_any_> = <TestFunctions>.passThroughCallbackPromise(<PromiseReturner>);
<new void> = <TestFunctions>.setStringData(<DOMString>);
<new DOMString> = <TestFunctions>.getStringDataAsAString();
<new DOMString> = <TestFunctions>.getStringDataAsAString(<unsigned long>);
<new DOMString> = <TestFunctions>.getStringDataAsDOMString();
<new DOMString> = <TestFunctions>.getStringDataAsDOMString(<unsigned long>);
<new DOMString> = <TestFunctions>.getShortLiteralString();
<new DOMString> = <TestFunctions>.getMediumLiteralString();
<new DOMString> = <TestFunctions>.getLongLiteralString();
<new DOMString> = <TestFunctions>.getStringbufferString(<DOMString>);
<new StringType> = <TestFunctions>.getStringType(<DOMString>);
<TestFunctions>.stringbufferMatchesStored(<DOMString>);
<new void> = <TestFunctions>.testThrowNsresult();
<new void> = <TestFunctions>.testThrowNsresultFromNative();
<new Promise_any_> = <TestFunctions>.throwToRejectPromise();
<new long> = <TestFunctions>.one;
<new long> = <TestFunctions>.two;
<new object> = <TestFunctions>.toJSON();
<new WrapperCachedNonISupportsTestInterface> = <TestFunctions>.wrapperCachedNonISupportsObject;
<new octet> = <TestFunctions>.clampedNullableOctet;
<TestFunctions>.clampedNullableOctet = <octet>;
<TestFunctions>.clampedNullableOctet = null;
<new octet> = <TestFunctions>.enforcedNullableOctet;
<TestFunctions>.enforcedNullableOctet = <octet>;
<TestFunctions>.enforcedNullableOctet = null;
<new ArrayBufferView> = <TestFunctions>.arrayBufferView;
<TestFunctions>.arrayBufferView = <ArrayBufferView>;
<new ArrayBufferView> = <TestFunctions>.allowSharedArrayBufferView;
<TestFunctions>.allowSharedArrayBufferView = <ArrayBufferView>;
<new sequence_ArrayBufferView_> = [<ArrayBufferView>];
<new ArrayBufferView> = <sequence_ArrayBufferView_>[0];
<new sequence_ArrayBufferView_> = <TestFunctions>.sequenceOfArrayBufferView;
<TestFunctions>.sequenceOfArrayBufferView = <sequence_ArrayBufferView_>;
<new sequence_ArrayBufferView_> = <TestFunctions>.sequenceOfAllowSharedArrayBufferView;
<TestFunctions>.sequenceOfAllowSharedArrayBufferView = <sequence_ArrayBufferView_>;
<new ArrayBuffer> = <TestFunctions>.arrayBuffer;
<TestFunctions>.arrayBuffer = <ArrayBuffer>;
<new ArrayBuffer> = <TestFunctions>.allowSharedArrayBuffer;
<TestFunctions>.allowSharedArrayBuffer = <ArrayBuffer>;
<new sequence_ArrayBuffer_> = [<ArrayBuffer>];
<new ArrayBuffer> = <sequence_ArrayBuffer_>[0];
<new sequence_ArrayBuffer_> = <TestFunctions>.sequenceOfArrayBuffer;
<TestFunctions>.sequenceOfArrayBuffer = <sequence_ArrayBuffer_>;
<new sequence_ArrayBuffer_> = <TestFunctions>.sequenceOfAllowSharedArrayBuffer;
<TestFunctions>.sequenceOfAllowSharedArrayBuffer = <sequence_ArrayBuffer_>;
<new void> = <TestFunctions>.testNotAllowShared(<ArrayBufferView>);
<new void> = <TestFunctions>.testNotAllowShared(<ArrayBuffer>);
<new void> = <TestFunctions>.testNotAllowShared(<DOMString>);
<new void> = <TestFunctions>.testAllowShared(<ArrayBufferView>);
<new void> = <TestFunctions>.testAllowShared(<ArrayBuffer>);
<new void> = <TestFunctions>.testDictWithAllowShared();
<new void> = <TestFunctions>.testDictWithAllowShared(<DictWithAllowSharedBufferSource>);
<new union_ArrayBuffer1ArrayBufferView1DOMString_> = <ArrayBuffer>;
<new union_ArrayBuffer1ArrayBufferView1DOMString_> = <ArrayBufferView>;
<new union_ArrayBuffer1ArrayBufferView1DOMString_> = <DOMString>;
<new void> = <TestFunctions>.testUnionOfBuffferSource(<union_ArrayBuffer1ArrayBufferView1DOMString_>);
<new union_ArrayBuffer1ArrayBufferView_> = <ArrayBuffer>;
<new union_ArrayBuffer1ArrayBufferView_> = <ArrayBufferView>;
<new void> = <TestFunctions>.testUnionOfAllowSharedBuffferSource(<union_ArrayBuffer1ArrayBufferView_>);
!extends TestInterfaceJS EventTarget;
<new EventTarget> = <TestInterfaceJS>;
<new TestInterfaceJS> = new TestInterfaceJS();
<new TestInterfaceJS> = new TestInterfaceJS(<any>);
<new TestInterfaceJS> = new TestInterfaceJS(<any>,<object>);
<new TestInterfaceJS> = new TestInterfaceJS(<any>,<object>,<TestInterfaceJSDictionary>);
<new any> = <TestInterfaceJS>.anyArg;
<new object> = <TestInterfaceJS>.objectArg;
<new TestInterfaceJSDictionary> = <TestInterfaceJS>.getDictionaryArg();
<new any> = <TestInterfaceJS>.anyAttr;
<TestInterfaceJS>.anyAttr = <any>;
<new object> = <TestInterfaceJS>.objectAttr;
<TestInterfaceJS>.objectAttr = <object>;
<new TestInterfaceJSDictionary> = <TestInterfaceJS>.getDictionaryAttr();
<new void> = <TestInterfaceJS>.setDictionaryAttr();
<new void> = <TestInterfaceJS>.setDictionaryAttr(<TestInterfaceJSDictionary>);
<new any> = <TestInterfaceJS>.pingPongAny(<any>);
<new object> = <TestInterfaceJS>.pingPongObject(<object>);
<new union_object1DOMString_> = <object>;
<new union_object1DOMString_> = <DOMString>;
<new any> = <TestInterfaceJS>.pingPongObjectOrString(<union_object1DOMString_>);
<new TestInterfaceJSDictionary> = <TestInterfaceJS>.pingPongDictionary();
<new TestInterfaceJSDictionary> = <TestInterfaceJS>.pingPongDictionary(<TestInterfaceJSDictionary>);
<new union_TestInterfaceJSUnionableDictionary1long_> = <TestInterfaceJSUnionableDictionary>;
<new union_TestInterfaceJSUnionableDictionary1long_> = <long>;
<TestInterfaceJS>.pingPongDictionaryOrLong();
<TestInterfaceJS>.pingPongDictionaryOrLong(<union_TestInterfaceJSUnionableDictionary1long_>);
<new record_DOMString1any_> = {a: <any>};
<new any> = <record_DOMString1any_>[<DOMString>];
<new DOMString> = <TestInterfaceJS>.pingPongRecord(<record_DOMString1any_>);
<TestInterfaceJS>.objectSequenceLength(<sequence_object_>);
<new sequence_any_> = [<any>];
<new any> = <sequence_any_>[0];
<TestInterfaceJS>.anySequenceLength(<sequence_any_>);
<new DOMString> = <TestInterfaceJS>.getCallerPrincipal();
<new DOMString> = <TestInterfaceJS>.convertSVS(<USVString>);
<new union_TestInterfaceJS1long_> = <TestInterfaceJS>;
<new union_TestInterfaceJS1long_> = <long>;
<new union_TestInterfaceJS1long_> = <TestInterfaceJS>.pingPongUnion(<union_TestInterfaceJS1long_>);
<new union_DOMString1TestInterfaceJS_> = <DOMString>;
<new union_DOMString1TestInterfaceJS_> = <TestInterfaceJS>;
<new union_TestInterfaceJS1DOMString_> = <TestInterfaceJS>;
<new union_TestInterfaceJS1DOMString_> = <DOMString>;
<new union_DOMString1TestInterfaceJS_> = <TestInterfaceJS>.pingPongUnionContainingNull(<union_TestInterfaceJS1DOMString_>);
<new union_TestInterfaceJS1long_> = <TestInterfaceJS>.pingPongNullableUnion(<union_TestInterfaceJS1long_>);
<new union_Location1TestInterfaceJS_> = <Location>;
<new union_Location1TestInterfaceJS_> = <TestInterfaceJS>;
<new union_Location1TestInterfaceJS_> = <TestInterfaceJS>.returnBadUnion();
<new void> = <TestInterfaceJS>.testSequenceOverload(<sequence_DOMString_>);
<new void> = <TestInterfaceJS>.testSequenceOverload(<DOMString>);
<new union_sequence_DOMString_1DOMString_> = <sequence_DOMString_>;
<new union_sequence_DOMString_1DOMString_> = <DOMString>;
<new void> = <TestInterfaceJS>.testSequenceUnion(<union_sequence_DOMString_1DOMString_>);
<new void> = <TestInterfaceJS>.testThrowError();
<new void> = <TestInterfaceJS>.testThrowDOMException();
<new void> = <TestInterfaceJS>.testThrowTypeError();
<new void> = <TestInterfaceJS>.testThrowCallbackError(<Function>);
<new void> = <TestInterfaceJS>.testThrowXraySelfHosted();
<new void> = <TestInterfaceJS>.testThrowSelfHosted();
<new Promise_void_> = <TestInterfaceJS>.testPromiseWithThrowingChromePromiseInit();
<new Promise_void_> = <TestInterfaceJS>.testPromiseWithThrowingContentPromiseInit(<Function>);
<new Promise_void_> = <TestInterfaceJS>.testPromiseWithDOMExceptionThrowingPromiseInit();
<new Promise_void_> = <TestInterfaceJS>.testPromiseWithThrowingChromeThenFunction();
<new Promise_void_> = <TestInterfaceJS>.testPromiseWithThrowingContentThenFunction(<AnyCallback>);
<new Promise_void_> = <TestInterfaceJS>.testPromiseWithDOMExceptionThrowingThenFunction();
<new Promise_void_> = <TestInterfaceJS>.testPromiseWithThrowingChromeThenable();
<new Promise_void_> = <TestInterfaceJS>.testPromiseWithThrowingContentThenable(<object>);
<new Promise_void_> = <TestInterfaceJS>.testPromiseWithDOMExceptionThrowingThenable();
<new EventHandler> = <TestInterfaceJS>.onsomething;
<TestInterfaceJS>.onsomething = <EventHandler>;
<new TestInterfaceMaplike> = new TestInterfaceMaplike();
<new void> = <TestInterfaceMaplike>.setInternal(<DOMString>,<long>);
<new void> = <TestInterfaceMaplike>.clearInternal();
<TestInterfaceMaplike>.deleteInternal(<DOMString>);
<TestInterfaceMaplike>.hasInternal(<DOMString>);
<TestInterfaceMaplike>.getInternal(<DOMString>);
<new TestInterfaceMaplikeObject> = new TestInterfaceMaplikeObject();
<new void> = <TestInterfaceMaplikeObject>.setInternal(<DOMString>);
<new void> = <TestInterfaceMaplikeObject>.clearInternal();
<TestInterfaceMaplikeObject>.deleteInternal(<DOMString>);
<TestInterfaceMaplikeObject>.hasInternal(<DOMString>);
<new TestInterfaceMaplike> = <TestInterfaceMaplikeObject>.getInternal(<DOMString>);
<new TestInterfaceMaplikeJSObject> = new TestInterfaceMaplikeJSObject();
<new void> = <TestInterfaceMaplikeJSObject>.setInternal(<DOMString>,<object>);
<new void> = <TestInterfaceMaplikeJSObject>.clearInternal();
<TestInterfaceMaplikeJSObject>.deleteInternal(<DOMString>);
<TestInterfaceMaplikeJSObject>.hasInternal(<DOMString>);
<new object> = <TestInterfaceMaplikeJSObject>.getInternal(<DOMString>);
<new TestInterfaceSetlike> = new TestInterfaceSetlike();
<new TestInterfaceSetlikeNode> = new TestInterfaceSetlikeNode();
<new TestInterfaceIterableSingle> = new TestInterfaceIterableSingle();
<TestInterfaceIterableSingle>(<unsigned long>);
<new unsigned long> = <TestInterfaceIterableSingle>.length;
<new TestInterfaceIterableDouble> = new TestInterfaceIterableDouble();
<new TestInterfaceIterableDoubleUnion> = new TestInterfaceIterableDoubleUnion();
!extends Text CharacterData;
<new CharacterData> = <Text>;
<new Text> = new Text();
<new Text> = new Text(<DOMString>);
<new Text> = <Text>.splitText(<unsigned long>);
<new DOMString> = <Text>.wholeText;
<new HTMLSlotElement> = <Text>.assignedSlot;
<new HTMLSlotElement> = <Text>.openOrClosedAssignedSlot;
<new long> = <TextClause>.startOffset;
<new long> = <TextClause>.endOffset;
<new boolean> = <TextClause>.isCaret;
<new boolean> = <TextClause>.isTargetClause;
<new TextDecoder> = new TextDecoder();
<new TextDecoder> = new TextDecoder(<DOMString>);
<new TextDecoder> = new TextDecoder(<DOMString>,<TextDecoderOptions>);
<new DOMString> = <TextDecoder>.encoding;
<new boolean> = <TextDecoder>.fatal;
<new boolean> = <TextDecoder>.ignoreBOM;
<new USVString> = <TextDecoder>.decode();
<new USVString> = <TextDecoder>.decode(<BufferSource>);
<new USVString> = <TextDecoder>.decode(<BufferSource>,<TextDecodeOptions>);
<new TextEncoder> = new TextEncoder();
<new ByteString> = <TextEncoder>.encoding;
<new Uint8Array> = <TextEncoder>.encode();
<new Uint8Array> = <TextEncoder>.encode(<UTF8String>);
<new TextEncoderEncodeIntoResult> = <TextEncoder>.encodeInto(<JSString>,<Uint8Array>);
!extends TextTrack EventTarget;
<new EventTarget> = <TextTrack>;
<new TextTrackKind> = <TextTrack>.kind;
<new DOMString> = <TextTrack>.label;
<new DOMString> = <TextTrack>.language;
<new DOMString> = <TextTrack>.id;
<new DOMString> = <TextTrack>.inBandMetadataTrackDispatchType;
<new TextTrackMode> = <TextTrack>.mode;
<TextTrack>.mode = <TextTrackMode>;
<new TextTrackCueList> = <TextTrack>.cues;
<new TextTrackCueList> = <TextTrack>.activeCues;
<new void> = <TextTrack>.addCue(<VTTCue>);
<new void> = <TextTrack>.removeCue(<VTTCue>);
<new EventHandler> = <TextTrack>.oncuechange;
<TextTrack>.oncuechange = <EventHandler>;
<new TextTrackList> = <TextTrack>.textTrackList;
!extends TextTrackCue EventTarget;
<new EventTarget> = <TextTrackCue>;
<new TextTrack> = <TextTrackCue>.track;
<new DOMString> = <TextTrackCue>.id;
<TextTrackCue>.id = <DOMString>;
<new double> = <TextTrackCue>.startTime;
<TextTrackCue>.startTime = <double>;
<new double> = <TextTrackCue>.endTime;
<TextTrackCue>.endTime = <double>;
<new boolean> = <TextTrackCue>.pauseOnExit;
<TextTrackCue>.pauseOnExit = <boolean>;
<new EventHandler> = <TextTrackCue>.onenter;
<TextTrackCue>.onenter = <EventHandler>;
<new EventHandler> = <TextTrackCue>.onexit;
<TextTrackCue>.onexit = <EventHandler>;
<new unsigned long> = <TextTrackCueList>.length;
<new VTTCue> = <TextTrackCueList>(<unsigned long>);
<new VTTCue> = <TextTrackCueList>.getCueById(<DOMString>);
!extends TextTrackList EventTarget;
<new EventTarget> = <TextTrackList>;
<new unsigned long> = <TextTrackList>.length;
<new TextTrack> = <TextTrackList>(<unsigned long>);
<new TextTrack> = <TextTrackList>.getTrackById(<DOMString>);
<new EventHandler> = <TextTrackList>.onchange;
<TextTrackList>.onchange = <EventHandler>;
<new EventHandler> = <TextTrackList>.onaddtrack;
<TextTrackList>.onaddtrack = <EventHandler>;
<new EventHandler> = <TextTrackList>.onremovetrack;
<TextTrackList>.onremovetrack = <EventHandler>;
<new HTMLMediaElement> = <TextTrackList>.mediaElement;
!extends TimeEvent Event;
<new Event> = <TimeEvent>;
<new long> = <TimeEvent>.detail;
<new WindowProxy> = <TimeEvent>.view;
<new void> = <TimeEvent>.initTimeEvent(<DOMString>);
<new void> = <TimeEvent>.initTimeEvent(<DOMString>,<Window>);
<new void> = <TimeEvent>.initTimeEvent(<DOMString>,<Window>,<long>);
<new unsigned long> = <TimeRanges>.length;
<new double> = <TimeRanges>.start(<unsigned long>);
<new double> = <TimeRanges>.end(<unsigned long>);
<new Touch> = new Touch(<TouchInit>);
<new long> = <Touch>.identifier;
<new EventTarget> = <Touch>.target;
<new long> = <Touch>.screenX;
<new long> = <Touch>.screenY;
<new long> = <Touch>.clientX;
<new long> = <Touch>.clientY;
<new long> = <Touch>.pageX;
<new long> = <Touch>.pageY;
<new long> = <Touch>.radiusX;
<new long> = <Touch>.radiusY;
<new float> = <Touch>.rotationAngle;
<new float> = <Touch>.force;
!extends TouchEvent UIEvent;
<new UIEvent> = <TouchEvent>;
<new TouchEvent> = new TouchEvent(<DOMString>);
<new TouchEvent> = new TouchEvent(<DOMString>,<TouchEventInit>);
<new TouchList> = <TouchEvent>.touches;
<new TouchList> = <TouchEvent>.targetTouches;
<new TouchList> = <TouchEvent>.changedTouches;
<new boolean> = <TouchEvent>.altKey;
<new boolean> = <TouchEvent>.metaKey;
<new boolean> = <TouchEvent>.ctrlKey;
<new boolean> = <TouchEvent>.shiftKey;
<new void> = <TouchEvent>.initTouchEvent(<DOMString>);
<new void> = <TouchEvent>.initTouchEvent(<DOMString>,<boolean>);
<new void> = <TouchEvent>.initTouchEvent(<DOMString>,<boolean>,<boolean>);
<new void> = <TouchEvent>.initTouchEvent(<DOMString>,<boolean>,<boolean>,<Window>);
<new void> = <TouchEvent>.initTouchEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>);
<new void> = <TouchEvent>.initTouchEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<boolean>);
<new void> = <TouchEvent>.initTouchEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<boolean>,<boolean>);
<new void> = <TouchEvent>.initTouchEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<boolean>,<boolean>,<boolean>);
<new void> = <TouchEvent>.initTouchEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<boolean>,<boolean>,<boolean>,<boolean>);
<new void> = <TouchEvent>.initTouchEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<boolean>,<boolean>,<boolean>,<boolean>,<TouchList>);
<new void> = <TouchEvent>.initTouchEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<boolean>,<boolean>,<boolean>,<boolean>,<TouchList>,<TouchList>);
<new void> = <TouchEvent>.initTouchEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<boolean>,<boolean>,<boolean>,<boolean>,<TouchList>,<TouchList>,<TouchList>);
<new unsigned long> = <TouchList>.length;
<new Touch> = <TouchList>.item(<unsigned long>);
!extends TrackEvent Event;
<new Event> = <TrackEvent>;
<new TrackEvent> = new TrackEvent(<DOMString>);
<new TrackEvent> = new TrackEvent(<DOMString>,<TrackEventInit>);
<new union_VideoTrack1AudioTrack1TextTrack_> = <VideoTrack>;
<new union_VideoTrack1AudioTrack1TextTrack_> = <AudioTrack>;
<new union_VideoTrack1AudioTrack1TextTrack_> = <TextTrack>;
<new union_VideoTrack1AudioTrack1TextTrack_> = <TrackEvent>.track;
<new void> = <TransceiverImpl>.syncWithJS(<RTCRtpTransceiver>);
<new RTCRtpReceiver> = <TransceiverImpl>.receiver;
<new RTCDTMFSender> = <TransceiverImpl>.dtmf;
<new RTCDtlsTransport> = <TransceiverImpl>.dtlsTransport;
!extends TransitionEvent Event;
<new Event> = <TransitionEvent>;
<new TransitionEvent> = new TransitionEvent(<DOMString>);
<new TransitionEvent> = new TransitionEvent(<DOMString>,<TransitionEventInit>);
<new DOMString> = <TransitionEvent>.propertyName;
<new float> = <TransitionEvent>.elapsedTime;
<new DOMString> = <TransitionEvent>.pseudoElement;
<new Element> = <TreeColumn>.element;
<new TreeColumns> = <TreeColumn>.columns;
<new long> = <TreeColumn>.x;
<new long> = <TreeColumn>.width;
<new DOMString> = <TreeColumn>.id;
<new long> = <TreeColumn>.index;
<new boolean> = <TreeColumn>.primary;
<new boolean> = <TreeColumn>.cycler;
<new boolean> = <TreeColumn>.editable;
<new short> = <TreeColumn>.TYPE_TEXT;
<new short> = <TreeColumn>.TYPE_CHECKBOX;
<new short> = <TreeColumn>.type;
<new TreeColumn> = <TreeColumn>.getNext();
<new TreeColumn> = <TreeColumn>.getPrevious();
<new TreeColumn> = <TreeColumn>.previousColumn;
<new void> = <TreeColumn>.invalidate();
<new XULTreeElement> = <TreeColumns>.tree;
<new unsigned long> = <TreeColumns>.count;
<new unsigned long> = <TreeColumns>.length;
<new TreeColumn> = <TreeColumns>.getFirstColumn();
<new TreeColumn> = <TreeColumns>.getLastColumn();
<new TreeColumn> = <TreeColumns>.getPrimaryColumn();
<new TreeColumn> = <TreeColumns>.getSortedColumn();
<new TreeColumn> = <TreeColumns>.getKeyColumn();
<new TreeColumn> = <TreeColumns>.getColumnFor(<Element>);
<new TreeColumn> = <TreeColumns>.getNamedColumn(<DOMString>);
<new TreeColumn> = <TreeColumns>.getColumnAt(<unsigned long>);
<new void> = <TreeColumns>.invalidateColumns();
<new Element> = <TreeContentView>.getItemAtIndex(<long>);
<TreeContentView>.getIndexOfItem(<Element>);
<new Node> = <TreeWalker>.root;
<new unsigned long> = <TreeWalker>.whatToShow;
<new NodeFilter> = <TreeWalker>.filter;
<new Node> = <TreeWalker>.currentNode;
<TreeWalker>.currentNode = <Node>;
<new Node> = <TreeWalker>.parentNode();
<new Node> = <TreeWalker>.firstChild();
<new Node> = <TreeWalker>.lastChild();
<new Node> = <TreeWalker>.previousSibling();
<new Node> = <TreeWalker>.nextSibling();
<new Node> = <TreeWalker>.previousNode();
<new Node> = <TreeWalker>.nextNode();
<new unsigned short> = <U2F>.OK;
<new unsigned short> = <U2F>.OTHER_ERROR;
<new unsigned short> = <U2F>.BAD_REQUEST;
<new unsigned short> = <U2F>.CONFIGURATION_UNSUPPORTED;
<new unsigned short> = <U2F>.DEVICE_INELIGIBLE;
<new unsigned short> = <U2F>.TIMEOUT;
<new object> = <U2F>.register;
<new sequence_RegisterRequest_> = [<RegisterRequest>];
<new RegisterRequest> = <sequence_RegisterRequest_>[0];
<new sequence_RegisteredKey_> = [<RegisteredKey>];
<new RegisteredKey> = <sequence_RegisteredKey_>[0];
<new void> = <U2F>.register_impl(<DOMString>,<sequence_RegisterRequest_>,<sequence_RegisteredKey_>,<U2FRegisterCallback>);
<new void> = <U2F>.register_impl(<DOMString>,<sequence_RegisterRequest_>,<sequence_RegisteredKey_>,<U2FRegisterCallback>,<long>);
<new object> = <U2F>.sign;
<new void> = <U2F>.sign_impl(<DOMString>,<DOMString>,<sequence_RegisteredKey_>,<U2FSignCallback>);
<new void> = <U2F>.sign_impl(<DOMString>,<DOMString>,<sequence_RegisteredKey_>,<U2FSignCallback>,<long>);
!extends UDPMessageEvent Event;
<new Event> = <UDPMessageEvent>;
<new UDPMessageEvent> = new UDPMessageEvent(<DOMString>);
<new UDPMessageEvent> = new UDPMessageEvent(<DOMString>,<UDPMessageEventInit>);
<new DOMString> = <UDPMessageEvent>.remoteAddress;
<new unsigned short> = <UDPMessageEvent>.remotePort;
<new any> = <UDPMessageEvent>.data;
!extends UDPSocket EventTarget;
<new EventTarget> = <UDPSocket>;
<new UDPSocket> = new UDPSocket();
<new UDPSocket> = new UDPSocket(<UDPOptions>);
<new DOMString> = <UDPSocket>.localAddress;
<new unsigned short> = <UDPSocket>.localPort;
<new DOMString> = <UDPSocket>.remoteAddress;
<new unsigned short> = <UDPSocket>.remotePort;
<new boolean> = <UDPSocket>.addressReuse;
<new boolean> = <UDPSocket>.loopback;
<new SocketReadyState> = <UDPSocket>.readyState;
<new Promise_void_> = <UDPSocket>.opened;
<new Promise_void_> = <UDPSocket>.closed;
<new EventHandler> = <UDPSocket>.onmessage;
<UDPSocket>.onmessage = <EventHandler>;
<new Promise_void_> = <UDPSocket>.close();
<new void> = <UDPSocket>.joinMulticastGroup(<DOMString>);
<new void> = <UDPSocket>.leaveMulticastGroup(<DOMString>);
<new union_DOMString1Blob1ArrayBuffer1ArrayBufferView_> = <DOMString>;
<new union_DOMString1Blob1ArrayBuffer1ArrayBufferView_> = <Blob>;
<new union_DOMString1Blob1ArrayBuffer1ArrayBufferView_> = <ArrayBuffer>;
<new union_DOMString1Blob1ArrayBuffer1ArrayBufferView_> = <ArrayBufferView>;
<UDPSocket>.send(<union_DOMString1Blob1ArrayBuffer1ArrayBufferView_>);
<UDPSocket>.send(<union_DOMString1Blob1ArrayBuffer1ArrayBufferView_>,<DOMString>);
<UDPSocket>.send(<union_DOMString1Blob1ArrayBuffer1ArrayBufferView_>,<DOMString>,<unsigned short>);
!extends UIEvent Event;
<new Event> = <UIEvent>;
<new UIEvent> = new UIEvent(<DOMString>);
<new UIEvent> = new UIEvent(<DOMString>,<UIEventInit>);
<new WindowProxy> = <UIEvent>.view;
<new long> = <UIEvent>.detail;
<new void> = <UIEvent>.initUIEvent(<DOMString>);
<new void> = <UIEvent>.initUIEvent(<DOMString>,<boolean>);
<new void> = <UIEvent>.initUIEvent(<DOMString>,<boolean>,<boolean>);
<new void> = <UIEvent>.initUIEvent(<DOMString>,<boolean>,<boolean>,<Window>);
<new void> = <UIEvent>.initUIEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>);
<new long> = <UIEvent>.SCROLL_PAGE_UP;
<new long> = <UIEvent>.SCROLL_PAGE_DOWN;
<new long> = <UIEvent>.layerX;
<new long> = <UIEvent>.layerY;
<new unsigned long> = <UIEvent>.which;
<new Node> = <UIEvent>.rangeParent;
<new long> = <UIEvent>.rangeOffset;
<new URL> = new URL(<USVString>);
<new URL> = new URL(<USVString>,<USVString>);
<new USVString> = <URL>.href;
<URL>.href = <USVString>;
<new USVString> = <URL>.origin;
<new USVString> = <URL>.protocol;
<URL>.protocol = <USVString>;
<new USVString> = <URL>.username;
<URL>.username = <USVString>;
<new USVString> = <URL>.password;
<URL>.password = <USVString>;
<new USVString> = <URL>.host;
<URL>.host = <USVString>;
<new USVString> = <URL>.hostname;
<URL>.hostname = <USVString>;
<new USVString> = <URL>.port;
<URL>.port = <USVString>;
<new USVString> = <URL>.pathname;
<URL>.pathname = <USVString>;
<new USVString> = <URL>.search;
<URL>.search = <USVString>;
<new URLSearchParams> = <URL>.searchParams;
<new USVString> = <URL>.hash;
<URL>.hash = <USVString>;
<new USVString> = <URL>.toJSON();
<new DOMString> = <URL>.createObjectURL(<Blob>);
<new void> = <URL>.revokeObjectURL(<DOMString>);
<URL>.isValidURL(<DOMString>);
<new DOMString> = <URL>.createObjectURL(<MediaSource>);
<new sequence_USVString_> = [<USVString>];
<new USVString> = <sequence_USVString_>[0];
<new sequence_sequence_USVString__> = [<sequence_USVString_>];
<new sequence_USVString_> = <sequence_sequence_USVString__>[0];
<new record_USVString1USVString_> = {a: <USVString>};
<new USVString> = <record_USVString1USVString_>[<USVString>];
<new union_sequence_sequence_USVString__1record_USVString1USVString_1USVString_> = <sequence_sequence_USVString__>;
<new union_sequence_sequence_USVString__1record_USVString1USVString_1USVString_> = <record_USVString1USVString_>;
<new union_sequence_sequence_USVString__1record_USVString1USVString_1USVString_> = <USVString>;
<new URLSearchParams> = new URLSearchParams();
<new URLSearchParams> = new URLSearchParams(<union_sequence_sequence_USVString__1record_USVString1USVString_1USVString_>);
<new void> = <URLSearchParams>.append(<USVString>,<USVString>);
<new void> = <URLSearchParams>.delete(<USVString>);
<new USVString> = <URLSearchParams>.get(<USVString>);
<new sequence_USVString_> = <URLSearchParams>.getAll(<USVString>);
<URLSearchParams>.has(<USVString>);
<new void> = <URLSearchParams>.set(<USVString>,<USVString>);
<new void> = <URLSearchParams>.sort();
!extends UserProximityEvent Event;
<new Event> = <UserProximityEvent>;
<new UserProximityEvent> = new UserProximityEvent(<DOMString>);
<new UserProximityEvent> = new UserProximityEvent(<DOMString>,<UserProximityEventInit>);
<new boolean> = <UserProximityEvent>.near;
<new boolean> = <ValidityState>.valueMissing;
<new boolean> = <ValidityState>.typeMismatch;
<new boolean> = <ValidityState>.patternMismatch;
<new boolean> = <ValidityState>.tooLong;
<new boolean> = <ValidityState>.tooShort;
<new boolean> = <ValidityState>.rangeUnderflow;
<new boolean> = <ValidityState>.rangeOverflow;
<new boolean> = <ValidityState>.stepMismatch;
<new boolean> = <ValidityState>.badInput;
<new boolean> = <ValidityState>.customError;
<new boolean> = <ValidityState>.valid;
<new DOMHighResTimeStamp> = <VideoPlaybackQuality>.creationTime;
<new unsigned long> = <VideoPlaybackQuality>.totalVideoFrames;
<new unsigned long> = <VideoPlaybackQuality>.droppedVideoFrames;
<new DOMString> = <VideoTrack>.id;
<new DOMString> = <VideoTrack>.kind;
<new DOMString> = <VideoTrack>.label;
<new DOMString> = <VideoTrack>.language;
<new boolean> = <VideoTrack>.selected;
<VideoTrack>.selected = <boolean>;
!extends VideoTrackList EventTarget;
<new EventTarget> = <VideoTrackList>;
<new unsigned long> = <VideoTrackList>.length;
<new VideoTrack> = <VideoTrackList>(<unsigned long>);
<new VideoTrack> = <VideoTrackList>.getTrackById(<DOMString>);
<new long> = <VideoTrackList>.selectedIndex;
<new EventHandler> = <VideoTrackList>.onchange;
<VideoTrackList>.onchange = <EventHandler>;
<new EventHandler> = <VideoTrackList>.onaddtrack;
<VideoTrackList>.onaddtrack = <EventHandler>;
<new EventHandler> = <VideoTrackList>.onremovetrack;
<VideoTrackList>.onremovetrack = <EventHandler>;
!extends VisualViewport EventTarget;
<new EventTarget> = <VisualViewport>;
<new double> = <VisualViewport>.offsetLeft;
<new double> = <VisualViewport>.offsetTop;
<new double> = <VisualViewport>.pageLeft;
<new double> = <VisualViewport>.pageTop;
<new double> = <VisualViewport>.width;
<new double> = <VisualViewport>.height;
<new double> = <VisualViewport>.scale;
<new EventHandler> = <VisualViewport>.onresize;
<VisualViewport>.onresize = <EventHandler>;
<new EventHandler> = <VisualViewport>.onscroll;
<VisualViewport>.onscroll = <EventHandler>;
<new double> = <VRFieldOfView>.upDegrees;
<new double> = <VRFieldOfView>.rightDegrees;
<new double> = <VRFieldOfView>.downDegrees;
<new double> = <VRFieldOfView>.leftDegrees;
<new boolean> = <VRDisplayCapabilities>.hasPosition;
<new boolean> = <VRDisplayCapabilities>.hasOrientation;
<new boolean> = <VRDisplayCapabilities>.hasExternalDisplay;
<new boolean> = <VRDisplayCapabilities>.canPresent;
<new unsigned long> = <VRDisplayCapabilities>.maxLayers;
<new Float32Array> = <VRStageParameters>.sittingToStandingTransform;
<new float> = <VRStageParameters>.sizeX;
<new float> = <VRStageParameters>.sizeZ;
<new Float32Array> = <VRPose>.position;
<new Float32Array> = <VRPose>.linearVelocity;
<new Float32Array> = <VRPose>.linearAcceleration;
<new Float32Array> = <VRPose>.orientation;
<new Float32Array> = <VRPose>.angularVelocity;
<new Float32Array> = <VRPose>.angularAcceleration;
<new VRFrameData> = new VRFrameData();
<new DOMHighResTimeStamp> = <VRFrameData>.timestamp;
<new Float32Array> = <VRFrameData>.leftProjectionMatrix;
<new Float32Array> = <VRFrameData>.leftViewMatrix;
<new Float32Array> = <VRFrameData>.rightProjectionMatrix;
<new Float32Array> = <VRFrameData>.rightViewMatrix;
<new VRPose> = <VRFrameData>.pose;
<new Float32Array> = <VREyeParameters>.offset;
<new VRFieldOfView> = <VREyeParameters>.fieldOfView;
<new unsigned long> = <VREyeParameters>.renderWidth;
<new unsigned long> = <VREyeParameters>.renderHeight;
!extends VRDisplay EventTarget;
<new EventTarget> = <VRDisplay>;
<new unsigned long> = <VRDisplay>.presentingGroups;
<new unsigned long> = <VRDisplay>.groupMask;
<VRDisplay>.groupMask = <unsigned long>;
<new boolean> = <VRDisplay>.isConnected;
<new boolean> = <VRDisplay>.isPresenting;
<new VRDisplayCapabilities> = <VRDisplay>.capabilities;
<new VRStageParameters> = <VRDisplay>.stageParameters;
<new VREyeParameters> = <VRDisplay>.getEyeParameters(<VREye>);
<new unsigned long> = <VRDisplay>.displayId;
<new DOMString> = <VRDisplay>.displayName;
<VRDisplay>.getFrameData(<VRFrameData>);
<new VRPose> = <VRDisplay>.getPose();
<new void> = <VRDisplay>.resetPose();
<new double> = <VRDisplay>.depthNear;
<VRDisplay>.depthNear = <double>;
<new double> = <VRDisplay>.depthFar;
<VRDisplay>.depthFar = <double>;
<VRDisplay>.requestAnimationFrame(<FrameRequestCallback>);
<new void> = <VRDisplay>.cancelAnimationFrame(<long>);
<new sequence_VRLayer_> = [<VRLayer>];
<new VRLayer> = <sequence_VRLayer_>[0];
<new Promise_void_> = <VRDisplay>.requestPresent(<sequence_VRLayer_>);
<new Promise_void_> = <VRDisplay>.exitPresent();
<new sequence_VRLayer_> = <VRDisplay>.getLayers();
<new void> = <VRDisplay>.submitFrame();
!extends VRDisplayEvent Event;
<new Event> = <VRDisplayEvent>;
<new VRDisplayEvent> = new VRDisplayEvent(<DOMString>,<VRDisplayEventInit>);
<new VRDisplay> = <VRDisplayEvent>.display;
<new VRDisplayEventReason> = <VRDisplayEvent>.reason;
<new void> = <VRMockDisplay>.create();
<new boolean> = <VRMockDisplay>.capPosition;
<VRMockDisplay>.capPosition = <boolean>;
<new boolean> = <VRMockDisplay>.capOrientation;
<VRMockDisplay>.capOrientation = <boolean>;
<new boolean> = <VRMockDisplay>.capPresent;
<VRMockDisplay>.capPresent = <boolean>;
<new boolean> = <VRMockDisplay>.capExternal;
<VRMockDisplay>.capExternal = <boolean>;
<new boolean> = <VRMockDisplay>.capAngularAcceleration;
<VRMockDisplay>.capAngularAcceleration = <boolean>;
<new boolean> = <VRMockDisplay>.capLinearAcceleration;
<VRMockDisplay>.capLinearAcceleration = <boolean>;
<new boolean> = <VRMockDisplay>.capStageParameters;
<VRMockDisplay>.capStageParameters = <boolean>;
<new boolean> = <VRMockDisplay>.capMountDetection;
<VRMockDisplay>.capMountDetection = <boolean>;
<new boolean> = <VRMockDisplay>.capPositionEmulated;
<VRMockDisplay>.capPositionEmulated = <boolean>;
<new void> = <VRMockDisplay>.setEyeFOV(<VREye>,<double>,<double>,<double>,<double>);
<new void> = <VRMockDisplay>.setEyeOffset(<VREye>,<double>,<double>,<double>);
<new void> = <VRMockDisplay>.setEyeResolution(<unsigned long>,<unsigned long>);
<new void> = <VRMockDisplay>.setConnected(<boolean>);
<new void> = <VRMockDisplay>.setMounted(<boolean>);
<new void> = <VRMockDisplay>.setStageSize(<double>,<double>);
<new void> = <VRMockDisplay>.setSittingToStandingTransform(<Float32Array>);
<new void> = <VRMockDisplay>.setPose(<Float32Array>,<Float32Array>,<Float32Array>,<Float32Array>,<Float32Array>,<Float32Array>);
<new void> = <VRMockController>.create();
<new void> = <VRMockController>.clear();
<new GamepadHand> = <VRMockController>.hand;
<VRMockController>.hand = <GamepadHand>;
<new boolean> = <VRMockController>.capPosition;
<VRMockController>.capPosition = <boolean>;
<new boolean> = <VRMockController>.capOrientation;
<VRMockController>.capOrientation = <boolean>;
<new boolean> = <VRMockController>.capAngularAcceleration;
<VRMockController>.capAngularAcceleration = <boolean>;
<new boolean> = <VRMockController>.capLinearAcceleration;
<VRMockController>.capLinearAcceleration = <boolean>;
<new unsigned long> = <VRMockController>.axisCount;
<VRMockController>.axisCount = <unsigned long>;
<new unsigned long> = <VRMockController>.buttonCount;
<VRMockController>.buttonCount = <unsigned long>;
<new unsigned long> = <VRMockController>.hapticCount;
<VRMockController>.hapticCount = <unsigned long>;
<new void> = <VRMockController>.setPose(<Float32Array>,<Float32Array>,<Float32Array>,<Float32Array>,<Float32Array>,<Float32Array>);
<new void> = <VRMockController>.setButtonPressed(<unsigned long>,<boolean>);
<new void> = <VRMockController>.setButtonTouched(<unsigned long>,<boolean>);
<new void> = <VRMockController>.setButtonTrigger(<unsigned long>,<double>);
<new void> = <VRMockController>.setAxisValue(<unsigned long>,<double>);
<new VRMockDisplay> = <VRServiceTest>.getVRDisplay();
<new VRMockController> = <VRServiceTest>.getVRController(<unsigned long>);
<new Promise_void_> = <VRServiceTest>.run();
<new Promise_void_> = <VRServiceTest>.reset();
<new void> = <VRServiceTest>.commit();
<new void> = <VRServiceTest>.end();
<new void> = <VRServiceTest>.clearAll();
<new void> = <VRServiceTest>.timeout(<unsigned long>);
<new void> = <VRServiceTest>.wait(<unsigned long>);
<new void> = <VRServiceTest>.waitSubmit();
<new void> = <VRServiceTest>.waitPresentationStart();
<new void> = <VRServiceTest>.waitPresentationEnd();
<new void> = <VRServiceTest>.waitHapticIntensity(<unsigned long>,<unsigned long>,<double>);
<new void> = <VRServiceTest>.captureFrame();
<new void> = <VRServiceTest>.acknowledgeFrame();
<new void> = <VRServiceTest>.rejectFrame();
<new void> = <VRServiceTest>.startTimer();
<new void> = <VRServiceTest>.stopTimer();
!extends VTTCue TextTrackCue;
<new TextTrackCue> = <VTTCue>;
<new VTTCue> = new VTTCue(<double>,<double>,<DOMString>);
<new VTTRegion> = <VTTCue>.region;
<VTTCue>.region = <VTTRegion>;
<VTTCue>.region = null;
<new DirectionSetting> = <VTTCue>.vertical;
<VTTCue>.vertical = <DirectionSetting>;
<new boolean> = <VTTCue>.snapToLines;
<VTTCue>.snapToLines = <boolean>;
<new union_double1AutoKeyword_> = <double>;
<new union_double1AutoKeyword_> = <AutoKeyword>;
<new union_double1AutoKeyword_> = <VTTCue>.line;
<VTTCue>.line = <union_double1AutoKeyword_>;
<new LineAlignSetting> = <VTTCue>.lineAlign;
<VTTCue>.lineAlign = <LineAlignSetting>;
<new union_double1AutoKeyword_> = <VTTCue>.position;
<VTTCue>.position = <union_double1AutoKeyword_>;
<new PositionAlignSetting> = <VTTCue>.positionAlign;
<VTTCue>.positionAlign = <PositionAlignSetting>;
<new double> = <VTTCue>.size;
<VTTCue>.size = <double>;
<new AlignSetting> = <VTTCue>.align;
<VTTCue>.align = <AlignSetting>;
<new DOMString> = <VTTCue>.text;
<VTTCue>.text = <DOMString>;
<new DocumentFragment> = <VTTCue>.getCueAsHTML();
<new HTMLDivElement> = <VTTCue>.displayState;
<VTTCue>.displayState = <HTMLDivElement>;
<VTTCue>.displayState = null;
<new boolean> = <VTTCue>.hasBeenReset;
<new double> = <VTTCue>.computedLine;
<new double> = <VTTCue>.computedPosition;
<new PositionAlignSetting> = <VTTCue>.computedPositionAlign;
<new boolean> = <VTTCue>.getActive;
<new VTTRegion> = new VTTRegion();
<new DOMString> = <VTTRegion>.id;
<VTTRegion>.id = <DOMString>;
<new double> = <VTTRegion>.width;
<VTTRegion>.width = <double>;
<new long> = <VTTRegion>.lines;
<VTTRegion>.lines = <long>;
<new double> = <VTTRegion>.regionAnchorX;
<VTTRegion>.regionAnchorX = <double>;
<new double> = <VTTRegion>.regionAnchorY;
<VTTRegion>.regionAnchorY = <double>;
<new double> = <VTTRegion>.viewportAnchorX;
<VTTRegion>.viewportAnchorX = <double>;
<new double> = <VTTRegion>.viewportAnchorY;
<VTTRegion>.viewportAnchorY = <double>;
<new ScrollSetting> = <VTTRegion>.scroll;
<VTTRegion>.scroll = <ScrollSetting>;
!extends WaveShaperNode AudioNode;
<new AudioNode> = <WaveShaperNode>;
<new WaveShaperNode> = new WaveShaperNode(<BaseAudioContext>);
<new WaveShaperNode> = new WaveShaperNode(<BaseAudioContext>,<WaveShaperOptions>);
<new Float32Array> = <WaveShaperNode>.curve;
<WaveShaperNode>.curve = <Float32Array>;
<WaveShaperNode>.curve = null;
<new OverSampleType> = <WaveShaperNode>.oversample;
<WaveShaperNode>.oversample = <OverSampleType>;
!extends PublicKeyCredential Credential;
<new Credential> = <PublicKeyCredential>;
<new ArrayBuffer> = <PublicKeyCredential>.rawId;
<new AuthenticatorResponse> = <PublicKeyCredential>.response;
<new AuthenticationExtensionsClientOutputs> = <PublicKeyCredential>.getClientExtensionResults();
<new Promise_boolean_> = <PublicKeyCredential>.isUserVerifyingPlatformAuthenticatorAvailable();
<new Promise_boolean_> = <PublicKeyCredential>.isExternalCTAP2SecurityKeySupported();
<new ArrayBuffer> = <AuthenticatorResponse>.clientDataJSON;
!extends AuthenticatorAttestationResponse AuthenticatorResponse;
<new AuthenticatorResponse> = <AuthenticatorAttestationResponse>;
<new ArrayBuffer> = <AuthenticatorAttestationResponse>.attestationObject;
!extends AuthenticatorAssertionResponse AuthenticatorResponse;
<new AuthenticatorResponse> = <AuthenticatorAssertionResponse>;
<new ArrayBuffer> = <AuthenticatorAssertionResponse>.authenticatorData;
<new ArrayBuffer> = <AuthenticatorAssertionResponse>.signature;
<new ArrayBuffer> = <AuthenticatorAssertionResponse>.userHandle;
<new GLenum> = <OVR_multiview2>.FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR;
<new GLenum> = <OVR_multiview2>.FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR;
<new GLenum> = <OVR_multiview2>.MAX_VIEWS_OVR;
<new GLenum> = <OVR_multiview2>.FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR;
<new void> = <OVR_multiview2>.framebufferTextureMultiviewOVR(<GLenum>,<GLenum>,<WebGLTexture>,<GLint>,<GLint>,<GLsizei>);
!extends WebGLContextEvent Event;
<new Event> = <WebGLContextEvent>;
<new WebGLContextEvent> = new WebGLContextEvent(<DOMString>);
<new WebGLContextEvent> = new WebGLContextEvent(<DOMString>,<WebGLContextEventInit>);
<new DOMString> = <WebGLContextEvent>.statusMessage;
<new GLint> = <WebGLActiveInfo>.size;
<new GLenum> = <WebGLActiveInfo>.type;
<new DOMString> = <WebGLActiveInfo>.name;
<new GLint> = <WebGLShaderPrecisionFormat>.rangeMin;
<new GLint> = <WebGLShaderPrecisionFormat>.rangeMax;
<new GLint> = <WebGLShaderPrecisionFormat>.precision;
<new void> = <WebGLRenderingContext>.bufferData(<GLenum>,<GLsizeiptr>,<GLenum>);
<new void> = <WebGLRenderingContext>.bufferData(<GLenum>,<ArrayBuffer>,<GLenum>);
<new void> = <WebGLRenderingContext>.bufferData(<GLenum>,<ArrayBufferView>,<GLenum>);
<new void> = <WebGLRenderingContext>.bufferSubData(<GLenum>,<GLintptr>,<ArrayBuffer>);
<new void> = <WebGLRenderingContext>.bufferSubData(<GLenum>,<GLintptr>,<ArrayBufferView>);
<new void> = <WebGLRenderingContext>.compressedTexImage2D(<GLenum>,<GLint>,<GLenum>,<GLsizei>,<GLsizei>,<GLint>,<ArrayBufferView>);
<new void> = <WebGLRenderingContext>.compressedTexSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLenum>,<ArrayBufferView>);
<new void> = <WebGLRenderingContext>.readPixels(<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLenum>,<GLenum>,<ArrayBufferView>);
<new void> = <WebGLRenderingContext>.texImage2D(<GLenum>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLint>,<GLenum>,<GLenum>,<ArrayBufferView>);
<new void> = <WebGLRenderingContext>.texImage2D(<GLenum>,<GLint>,<GLint>,<GLenum>,<GLenum>,<ImageBitmap>);
<new void> = <WebGLRenderingContext>.texImage2D(<GLenum>,<GLint>,<GLint>,<GLenum>,<GLenum>,<ImageData>);
<new void> = <WebGLRenderingContext>.texImage2D(<GLenum>,<GLint>,<GLint>,<GLenum>,<GLenum>,<HTMLImageElement>);
<new void> = <WebGLRenderingContext>.texImage2D(<GLenum>,<GLint>,<GLint>,<GLenum>,<GLenum>,<HTMLCanvasElement>);
<new void> = <WebGLRenderingContext>.texImage2D(<GLenum>,<GLint>,<GLint>,<GLenum>,<GLenum>,<HTMLVideoElement>);
<new void> = <WebGLRenderingContext>.texSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLenum>,<GLenum>,<ArrayBufferView>);
<new void> = <WebGLRenderingContext>.texSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLenum>,<GLenum>,<ImageBitmap>);
<new void> = <WebGLRenderingContext>.texSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLenum>,<GLenum>,<ImageData>);
<new void> = <WebGLRenderingContext>.texSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLenum>,<GLenum>,<HTMLImageElement>);
<new void> = <WebGLRenderingContext>.texSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLenum>,<GLenum>,<HTMLCanvasElement>);
<new void> = <WebGLRenderingContext>.texSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLenum>,<GLenum>,<HTMLVideoElement>);
<new void> = <WebGLRenderingContext>.uniform1fv(<WebGLUniformLocation>,<Float32List>);
<new void> = <WebGLRenderingContext>.uniform2fv(<WebGLUniformLocation>,<Float32List>);
<new void> = <WebGLRenderingContext>.uniform3fv(<WebGLUniformLocation>,<Float32List>);
<new void> = <WebGLRenderingContext>.uniform4fv(<WebGLUniformLocation>,<Float32List>);
<new void> = <WebGLRenderingContext>.uniform1iv(<WebGLUniformLocation>,<Int32List>);
<new void> = <WebGLRenderingContext>.uniform2iv(<WebGLUniformLocation>,<Int32List>);
<new void> = <WebGLRenderingContext>.uniform3iv(<WebGLUniformLocation>,<Int32List>);
<new void> = <WebGLRenderingContext>.uniform4iv(<WebGLUniformLocation>,<Int32List>);
<new void> = <WebGLRenderingContext>.uniformMatrix2fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>);
<new void> = <WebGLRenderingContext>.uniformMatrix3fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>);
<new void> = <WebGLRenderingContext>.uniformMatrix4fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>);
<new void> = <WebGLRenderingContext>.commit();
<new GLenum> = <EXT_texture_compression_bptc>.COMPRESSED_RGBA_BPTC_UNORM_EXT;
<new GLenum> = <EXT_texture_compression_bptc>.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT;
<new GLenum> = <EXT_texture_compression_bptc>.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
<new GLenum> = <EXT_texture_compression_bptc>.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;
<new GLenum> = <EXT_texture_compression_rgtc>.COMPRESSED_RED_RGTC1_EXT;
<new GLenum> = <EXT_texture_compression_rgtc>.COMPRESSED_SIGNED_RED_RGTC1_EXT;
<new GLenum> = <EXT_texture_compression_rgtc>.COMPRESSED_RED_GREEN_RGTC2_EXT;
<new GLenum> = <EXT_texture_compression_rgtc>.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
<new GLenum> = <EXT_texture_norm16>.R16_EXT;
<new GLenum> = <EXT_texture_norm16>.RG16_EXT;
<new GLenum> = <EXT_texture_norm16>.RGB16_EXT;
<new GLenum> = <EXT_texture_norm16>.RGBA16_EXT;
<new GLenum> = <EXT_texture_norm16>.R16_SNORM_EXT;
<new GLenum> = <EXT_texture_norm16>.RG16_SNORM_EXT;
<new GLenum> = <EXT_texture_norm16>.RGB16_SNORM_EXT;
<new GLenum> = <EXT_texture_norm16>.RGBA16_SNORM_EXT;
<new GLenum> = <WEBGL_compressed_texture_s3tc>.COMPRESSED_RGB_S3TC_DXT1_EXT;
<new GLenum> = <WEBGL_compressed_texture_s3tc>.COMPRESSED_RGBA_S3TC_DXT1_EXT;
<new GLenum> = <WEBGL_compressed_texture_s3tc>.COMPRESSED_RGBA_S3TC_DXT3_EXT;
<new GLenum> = <WEBGL_compressed_texture_s3tc>.COMPRESSED_RGBA_S3TC_DXT5_EXT;
<new GLenum> = <WEBGL_compressed_texture_s3tc_srgb>.COMPRESSED_SRGB_S3TC_DXT1_EXT;
<new GLenum> = <WEBGL_compressed_texture_s3tc_srgb>.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
<new GLenum> = <WEBGL_compressed_texture_s3tc_srgb>.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
<new GLenum> = <WEBGL_compressed_texture_s3tc_srgb>.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_RGBA_ASTC_4x4_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_RGBA_ASTC_5x4_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_RGBA_ASTC_5x5_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_RGBA_ASTC_6x5_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_RGBA_ASTC_6x6_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_RGBA_ASTC_8x5_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_RGBA_ASTC_8x6_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_RGBA_ASTC_8x8_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_RGBA_ASTC_10x5_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_RGBA_ASTC_10x6_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_RGBA_ASTC_10x8_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_RGBA_ASTC_10x10_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_RGBA_ASTC_12x10_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_RGBA_ASTC_12x12_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR;
<new GLenum> = <WEBGL_compressed_texture_astc>.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR;
<new sequence_DOMString_> = <WEBGL_compressed_texture_astc>.getSupportedProfiles();
<new GLenum> = <WEBGL_compressed_texture_etc>.COMPRESSED_R11_EAC;
<new GLenum> = <WEBGL_compressed_texture_etc>.COMPRESSED_SIGNED_R11_EAC;
<new GLenum> = <WEBGL_compressed_texture_etc>.COMPRESSED_RG11_EAC;
<new GLenum> = <WEBGL_compressed_texture_etc>.COMPRESSED_SIGNED_RG11_EAC;
<new GLenum> = <WEBGL_compressed_texture_etc>.COMPRESSED_RGB8_ETC2;
<new GLenum> = <WEBGL_compressed_texture_etc>.COMPRESSED_SRGB8_ETC2;
<new GLenum> = <WEBGL_compressed_texture_etc>.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2;
<new GLenum> = <WEBGL_compressed_texture_etc>.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2;
<new GLenum> = <WEBGL_compressed_texture_etc>.COMPRESSED_RGBA8_ETC2_EAC;
<new GLenum> = <WEBGL_compressed_texture_etc>.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC;
<new GLenum> = <WEBGL_compressed_texture_etc1>.COMPRESSED_RGB_ETC1_WEBGL;
<new GLenum> = <WEBGL_compressed_texture_pvrtc>.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
<new GLenum> = <WEBGL_compressed_texture_pvrtc>.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
<new GLenum> = <WEBGL_compressed_texture_pvrtc>.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
<new GLenum> = <WEBGL_compressed_texture_pvrtc>.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
<new GLenum> = <WEBGL_debug_renderer_info>.UNMASKED_VENDOR_WEBGL;
<new GLenum> = <WEBGL_debug_renderer_info>.UNMASKED_RENDERER_WEBGL;
<new DOMString> = <WEBGL_debug_shaders>.getTranslatedShaderSource(<WebGLShader>);
<new GLenum> = <WEBGL_depth_texture>.UNSIGNED_INT_24_8_WEBGL;
<new void> = <WEBGL_lose_context>.loseContext();
<new void> = <WEBGL_lose_context>.restoreContext();
<new GLenum> = <EXT_texture_filter_anisotropic>.TEXTURE_MAX_ANISOTROPY_EXT;
<new GLenum> = <EXT_texture_filter_anisotropic>.MAX_TEXTURE_MAX_ANISOTROPY_EXT;
<new GLenum> = <EXT_sRGB>.SRGB_EXT;
<new GLenum> = <EXT_sRGB>.SRGB_ALPHA_EXT;
<new GLenum> = <EXT_sRGB>.SRGB8_ALPHA8_EXT;
<new GLenum> = <EXT_sRGB>.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT;
<new GLenum> = <OES_standard_derivatives>.FRAGMENT_SHADER_DERIVATIVE_HINT_OES;
<new GLenum> = <WEBGL_draw_buffers>.COLOR_ATTACHMENT0_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.COLOR_ATTACHMENT1_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.COLOR_ATTACHMENT2_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.COLOR_ATTACHMENT3_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.COLOR_ATTACHMENT4_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.COLOR_ATTACHMENT5_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.COLOR_ATTACHMENT6_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.COLOR_ATTACHMENT7_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.COLOR_ATTACHMENT8_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.COLOR_ATTACHMENT9_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.COLOR_ATTACHMENT10_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.COLOR_ATTACHMENT11_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.COLOR_ATTACHMENT12_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.COLOR_ATTACHMENT13_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.COLOR_ATTACHMENT14_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.COLOR_ATTACHMENT15_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.DRAW_BUFFER0_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.DRAW_BUFFER1_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.DRAW_BUFFER2_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.DRAW_BUFFER3_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.DRAW_BUFFER4_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.DRAW_BUFFER5_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.DRAW_BUFFER6_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.DRAW_BUFFER7_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.DRAW_BUFFER8_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.DRAW_BUFFER9_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.DRAW_BUFFER10_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.DRAW_BUFFER11_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.DRAW_BUFFER12_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.DRAW_BUFFER13_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.DRAW_BUFFER14_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.DRAW_BUFFER15_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.MAX_COLOR_ATTACHMENTS_WEBGL;
<new GLenum> = <WEBGL_draw_buffers>.MAX_DRAW_BUFFERS_WEBGL;
<new sequence_GLenum_> = [<GLenum>];
<new GLenum> = <sequence_GLenum_>[0];
<new void> = <WEBGL_draw_buffers>.drawBuffersWEBGL(<sequence_GLenum_>);
<new GLenum> = <OES_texture_half_float>.HALF_FLOAT_OES;
<new GLenum> = <WEBGL_color_buffer_float>.RGBA32F_EXT;
<new GLenum> = <WEBGL_color_buffer_float>.RGB32F_EXT;
<new GLenum> = <WEBGL_color_buffer_float>.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT;
<new GLenum> = <WEBGL_color_buffer_float>.UNSIGNED_NORMALIZED_EXT;
<new GLenum> = <EXT_color_buffer_half_float>.RGBA16F_EXT;
<new GLenum> = <EXT_color_buffer_half_float>.RGB16F_EXT;
<new GLenum> = <EXT_color_buffer_half_float>.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT;
<new GLenum> = <EXT_color_buffer_half_float>.UNSIGNED_NORMALIZED_EXT;
<new GLenum> = <OES_vertex_array_object>.VERTEX_ARRAY_BINDING_OES;
<new WebGLVertexArrayObject> = <OES_vertex_array_object>.createVertexArrayOES();
<new void> = <OES_vertex_array_object>.deleteVertexArrayOES(<WebGLVertexArrayObject>);
<new GLboolean> = <OES_vertex_array_object>.isVertexArrayOES(<WebGLVertexArrayObject>);
<new void> = <OES_vertex_array_object>.bindVertexArrayOES(<WebGLVertexArrayObject>);
<new GLenum> = <ANGLE_instanced_arrays>.VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE;
<new void> = <ANGLE_instanced_arrays>.drawArraysInstancedANGLE(<GLenum>,<GLint>,<GLsizei>,<GLsizei>);
<new void> = <ANGLE_instanced_arrays>.drawElementsInstancedANGLE(<GLenum>,<GLsizei>,<GLenum>,<GLintptr>,<GLsizei>);
<new void> = <ANGLE_instanced_arrays>.vertexAttribDivisorANGLE(<GLuint>,<GLuint>);
<new GLenum> = <EXT_blend_minmax>.MIN_EXT;
<new GLenum> = <EXT_blend_minmax>.MAX_EXT;
<new GLenum> = <EXT_disjoint_timer_query>.QUERY_COUNTER_BITS_EXT;
<new GLenum> = <EXT_disjoint_timer_query>.CURRENT_QUERY_EXT;
<new GLenum> = <EXT_disjoint_timer_query>.QUERY_RESULT_EXT;
<new GLenum> = <EXT_disjoint_timer_query>.QUERY_RESULT_AVAILABLE_EXT;
<new GLenum> = <EXT_disjoint_timer_query>.TIME_ELAPSED_EXT;
<new GLenum> = <EXT_disjoint_timer_query>.TIMESTAMP_EXT;
<new GLenum> = <EXT_disjoint_timer_query>.GPU_DISJOINT_EXT;
<new WebGLQuery> = <EXT_disjoint_timer_query>.createQueryEXT();
<new void> = <EXT_disjoint_timer_query>.deleteQueryEXT(<WebGLQuery>);
<EXT_disjoint_timer_query>.isQueryEXT(<WebGLQuery>);
<new void> = <EXT_disjoint_timer_query>.beginQueryEXT(<GLenum>,<WebGLQuery>);
<new void> = <EXT_disjoint_timer_query>.endQueryEXT(<GLenum>);
<new void> = <EXT_disjoint_timer_query>.queryCounterEXT(<WebGLQuery>,<GLenum>);
<new any> = <EXT_disjoint_timer_query>.getQueryEXT(<GLenum>,<GLenum>);
<new any> = <EXT_disjoint_timer_query>.getQueryObjectEXT(<WebGLQuery>,<GLenum>);
<new GLenum> = <MOZ_debug>.EXTENSIONS;
<new GLenum> = <MOZ_debug>.WSI_INFO;
<new GLenum> = <MOZ_debug>.UNPACK_REQUIRE_FASTPATH;
<new GLenum> = <MOZ_debug>.DOES_INDEX_VALIDATION;
<new any> = <MOZ_debug>.getParameter(<GLenum>);
<new void> = <WEBGL_explicit_present>.present();
<new void> = <OES_draw_buffers_indexed>.enableiOES(<GLenum>,<GLuint>);
<new void> = <OES_draw_buffers_indexed>.disableiOES(<GLenum>,<GLuint>);
<new void> = <OES_draw_buffers_indexed>.blendEquationiOES(<GLuint>,<GLenum>);
<new void> = <OES_draw_buffers_indexed>.blendEquationSeparateiOES(<GLuint>,<GLenum>,<GLenum>);
<new void> = <OES_draw_buffers_indexed>.blendFunciOES(<GLuint>,<GLenum>,<GLenum>);
<new void> = <OES_draw_buffers_indexed>.blendFuncSeparateiOES(<GLuint>,<GLenum>,<GLenum>,<GLenum>,<GLenum>);
<new void> = <OES_draw_buffers_indexed>.colorMaskiOES(<GLuint>,<GLboolean>,<GLboolean>,<GLboolean>,<GLboolean>);
<new Promise_GPUAdapter_> = new Promise(function(x){console.log("ok")});
<new Promise_GPUAdapter_> = <GPU>.requestAdapter();
<new Promise_GPUAdapter_> = <GPU>.requestAdapter(<GPURequestAdapterOptions>);
<new unsigned long> = <GPUSupportedLimits>.maxTextureDimension1D;
<new unsigned long> = <GPUSupportedLimits>.maxTextureDimension2D;
<new unsigned long> = <GPUSupportedLimits>.maxTextureDimension3D;
<new unsigned long> = <GPUSupportedLimits>.maxTextureArrayLayers;
<new unsigned long> = <GPUSupportedLimits>.maxBindGroups;
<new unsigned long> = <GPUSupportedLimits>.maxDynamicUniformBuffersPerPipelineLayout;
<new unsigned long> = <GPUSupportedLimits>.maxDynamicStorageBuffersPerPipelineLayout;
<new unsigned long> = <GPUSupportedLimits>.maxSampledTexturesPerShaderStage;
<new unsigned long> = <GPUSupportedLimits>.maxSamplersPerShaderStage;
<new unsigned long> = <GPUSupportedLimits>.maxStorageBuffersPerShaderStage;
<new unsigned long> = <GPUSupportedLimits>.maxStorageTexturesPerShaderStage;
<new unsigned long> = <GPUSupportedLimits>.maxUniformBuffersPerShaderStage;
<new unsigned long> = <GPUSupportedLimits>.maxUniformBufferBindingSize;
<new unsigned long> = <GPUSupportedLimits>.maxStorageBufferBindingSize;
<new unsigned long> = <GPUSupportedLimits>.maxVertexBuffers;
<new unsigned long> = <GPUSupportedLimits>.maxVertexAttributes;
<new unsigned long> = <GPUSupportedLimits>.maxVertexBufferArrayStride;
<new DOMString> = <GPUAdapter>.name;
<new GPUAdapterFeatures> = <GPUAdapter>.features;
<new GPUSupportedLimits> = <GPUAdapter>.limits;
<new boolean> = <GPUAdapter>.isSoftware;
<new Promise_GPUDevice_> = new Promise(function(x){console.log("ok")});
<new Promise_GPUDevice_> = <GPUAdapter>.requestDevice();
<new Promise_GPUDevice_> = <GPUAdapter>.requestDevice(<GPUDeviceDescriptor>);
!extends GPUDevice EventTarget;
<new EventTarget> = <GPUDevice>;
<new GPUQueue> = <GPUDevice>.queue;
<new void> = <GPUDevice>.destroy();
<new GPUBuffer> = <GPUDevice>.createBuffer(<GPUBufferDescriptor>);
<new GPUTexture> = <GPUDevice>.createTexture(<GPUTextureDescriptor>);
<new GPUSampler> = <GPUDevice>.createSampler();
<new GPUSampler> = <GPUDevice>.createSampler(<GPUSamplerDescriptor>);
<new GPUBindGroupLayout> = <GPUDevice>.createBindGroupLayout(<GPUBindGroupLayoutDescriptor>);
<new GPUPipelineLayout> = <GPUDevice>.createPipelineLayout(<GPUPipelineLayoutDescriptor>);
<new GPUBindGroup> = <GPUDevice>.createBindGroup(<GPUBindGroupDescriptor>);
<new GPUShaderModule> = <GPUDevice>.createShaderModule(<GPUShaderModuleDescriptor>);
<new GPUComputePipeline> = <GPUDevice>.createComputePipeline(<GPUComputePipelineDescriptor>);
<new GPURenderPipeline> = <GPUDevice>.createRenderPipeline(<GPURenderPipelineDescriptor>);
<new GPUCommandEncoder> = <GPUDevice>.createCommandEncoder();
<new GPUCommandEncoder> = <GPUDevice>.createCommandEncoder(<GPUCommandEncoderDescriptor>);
<new GPURenderBundleEncoder> = <GPUDevice>.createRenderBundleEncoder(<GPURenderBundleEncoderDescriptor>);
<new DOMString> = <GPUDeviceLostInfo>.message;
<new GPUValidationError> = new GPUValidationError(<DOMString>);
<new DOMString> = <GPUValidationError>.message;
<new void> = <GPUDevice>.pushErrorScope(<GPUErrorFilter>);
<new Promise_GPUError_> = new Promise(function(x){console.log("ok")});
<new Promise_GPUError_> = <GPUDevice>.popErrorScope();
<new EventHandler> = <GPUDevice>.onuncapturederror;
<GPUDevice>.onuncapturederror = <EventHandler>;
<new GPUBufferUsageFlags> = <GPUBufferUsage>.MAP_READ;
<new GPUBufferUsageFlags> = <GPUBufferUsage>.MAP_WRITE;
<new GPUBufferUsageFlags> = <GPUBufferUsage>.COPY_SRC;
<new GPUBufferUsageFlags> = <GPUBufferUsage>.COPY_DST;
<new GPUBufferUsageFlags> = <GPUBufferUsage>.INDEX;
<new GPUBufferUsageFlags> = <GPUBufferUsage>.VERTEX;
<new GPUBufferUsageFlags> = <GPUBufferUsage>.UNIFORM;
<new GPUBufferUsageFlags> = <GPUBufferUsage>.STORAGE;
<new GPUBufferUsageFlags> = <GPUBufferUsage>.INDIRECT;
<new GPUBufferUsageFlags> = <GPUBufferUsage>.QUERY_RESOLVE;
<new GPUMapModeFlags> = <GPUMapMode>.READ;
<new GPUMapModeFlags> = <GPUMapMode>.WRITE;
<new Promise_void_> = <GPUBuffer>.mapAsync(<GPUMapModeFlags>);
<new Promise_void_> = <GPUBuffer>.mapAsync(<GPUMapModeFlags>,<GPUSize64>);
<new Promise_void_> = <GPUBuffer>.mapAsync(<GPUMapModeFlags>,<GPUSize64>,<GPUSize64>);
<new ArrayBuffer> = <GPUBuffer>.getMappedRange();
<new ArrayBuffer> = <GPUBuffer>.getMappedRange(<GPUSize64>);
<new ArrayBuffer> = <GPUBuffer>.getMappedRange(<GPUSize64>,<GPUSize64>);
<new void> = <GPUBuffer>.unmap();
<new void> = <GPUBuffer>.destroy();
<new GPUTextureUsageFlags> = <GPUTextureUsage>.COPY_SRC;
<new GPUTextureUsageFlags> = <GPUTextureUsage>.COPY_DST;
<new GPUTextureUsageFlags> = <GPUTextureUsage>.SAMPLED;
<new GPUTextureUsageFlags> = <GPUTextureUsage>.STORAGE;
<new GPUTextureUsageFlags> = <GPUTextureUsage>.RENDER_ATTACHMENT;
<new GPUTextureView> = <GPUTexture>.createView();
<new GPUTextureView> = <GPUTexture>.createView(<GPUTextureViewDescriptor>);
<new void> = <GPUTexture>.destroy();
<new GPUShaderStageFlags> = <GPUShaderStage>.VERTEX;
<new GPUShaderStageFlags> = <GPUShaderStage>.FRAGMENT;
<new GPUShaderStageFlags> = <GPUShaderStage>.COMPUTE;
<new DOMString> = <GPUCompilationMessage>.message;
<new GPUCompilationMessageType> = <GPUCompilationMessage>.type;
<new unsigned long long> = <GPUCompilationMessage>.lineNum;
<new unsigned long long> = <GPUCompilationMessage>.linePos;
<new unsigned long long> = <GPUCompilationMessage>.offset;
<new unsigned long long> = <GPUCompilationMessage>.length;
<new GPUColorWriteFlags> = <GPUColorWrite>.RED;
<new GPUColorWriteFlags> = <GPUColorWrite>.GREEN;
<new GPUColorWriteFlags> = <GPUColorWrite>.BLUE;
<new GPUColorWriteFlags> = <GPUColorWrite>.ALPHA;
<new GPUColorWriteFlags> = <GPUColorWrite>.ALL;
<new GPUComputePassEncoder> = <GPUCommandEncoder>.beginComputePass();
<new GPUComputePassEncoder> = <GPUCommandEncoder>.beginComputePass(<GPUComputePassDescriptor>);
<new GPURenderPassEncoder> = <GPUCommandEncoder>.beginRenderPass(<GPURenderPassDescriptor>);
<new void> = <GPUCommandEncoder>.copyBufferToBuffer(<GPUBuffer>,<GPUSize64>,<GPUBuffer>,<GPUSize64>,<GPUSize64>);
<new void> = <GPUCommandEncoder>.copyBufferToTexture(<GPUImageCopyBuffer>,<GPUImageCopyTexture>,<GPUExtent3D>);
<new void> = <GPUCommandEncoder>.copyTextureToBuffer(<GPUImageCopyTexture>,<GPUImageCopyBuffer>,<GPUExtent3D>);
<new void> = <GPUCommandEncoder>.copyTextureToTexture(<GPUImageCopyTexture>,<GPUImageCopyTexture>,<GPUExtent3D>);
<new GPUCommandBuffer> = <GPUCommandEncoder>.finish();
<new GPUCommandBuffer> = <GPUCommandEncoder>.finish(<GPUCommandBufferDescriptor>);
<new void> = <GPURenderPassEncoder>.setViewport(<float>,<float>,<float>,<float>,<float>,<float>);
<new void> = <GPURenderPassEncoder>.setScissorRect(<GPUIntegerCoordinate>,<GPUIntegerCoordinate>,<GPUIntegerCoordinate>,<GPUIntegerCoordinate>);
<new void> = <GPURenderPassEncoder>.setBlendConstant(<GPUColor>);
<new void> = <GPURenderPassEncoder>.setStencilReference(<GPUStencilValue>);
<new sequence_GPURenderBundle_> = [<GPURenderBundle>];
<new GPURenderBundle> = <sequence_GPURenderBundle_>[0];
<new void> = <GPURenderPassEncoder>.executeBundles(<sequence_GPURenderBundle_>);
<new void> = <GPURenderPassEncoder>.endPass();
<new void> = <GPUComputePassEncoder>.setPipeline(<GPUComputePipeline>);
<new void> = <GPUComputePassEncoder>.dispatch(<GPUSize32>);
<new void> = <GPUComputePassEncoder>.dispatch(<GPUSize32>,<GPUSize32>);
<new void> = <GPUComputePassEncoder>.dispatch(<GPUSize32>,<GPUSize32>,<GPUSize32>);
<new void> = <GPUComputePassEncoder>.dispatchIndirect(<GPUBuffer>,<GPUSize64>);
<new void> = <GPUComputePassEncoder>.endPass();
<new GPURenderBundle> = <GPURenderBundleEncoder>.finish();
<new GPURenderBundle> = <GPURenderBundleEncoder>.finish(<GPURenderBundleDescriptor>);
<new void> = <GPUQuerySet>.destroy();
<new sequence_GPUCommandBuffer_> = [<GPUCommandBuffer>];
<new GPUCommandBuffer> = <sequence_GPUCommandBuffer_>[0];
<new void> = <GPUQueue>.submit(<sequence_GPUCommandBuffer_>);
<new void> = <GPUQueue>.writeBuffer(<GPUBuffer>,<GPUSize64>,<BufferSource>);
<new void> = <GPUQueue>.writeBuffer(<GPUBuffer>,<GPUSize64>,<BufferSource>,<GPUSize64>);
<new void> = <GPUQueue>.writeBuffer(<GPUBuffer>,<GPUSize64>,<BufferSource>,<GPUSize64>,<GPUSize64>);
<new void> = <GPUQueue>.writeTexture(<GPUImageCopyTexture>,<BufferSource>,<GPUImageDataLayout>,<GPUExtent3D>);
<new void> = <GPUCanvasContext>.configure(<GPUCanvasConfiguration>);
<new void> = <GPUCanvasContext>.unconfigure();
<new GPUTextureFormat> = <GPUCanvasContext>.getPreferredFormat(<GPUAdapter>);
<new GPUTexture> = <GPUCanvasContext>.getCurrentTexture();
!extends mozRTCIceCandidate RTCIceCandidate;
<new RTCIceCandidate> = <mozRTCIceCandidate>;
<new mozRTCIceCandidate> = new mozRTCIceCandidate();
<new mozRTCIceCandidate> = new mozRTCIceCandidate(<RTCIceCandidateInit>);
!extends mozRTCPeerConnection RTCPeerConnection;
<new RTCPeerConnection> = <mozRTCPeerConnection>;
<new mozRTCPeerConnection> = new mozRTCPeerConnection();
<new mozRTCPeerConnection> = new mozRTCPeerConnection(<RTCConfiguration>);
<new mozRTCPeerConnection> = new mozRTCPeerConnection(<RTCConfiguration>,<object>);
!extends mozRTCSessionDescription RTCSessionDescription;
<new RTCSessionDescription> = <mozRTCSessionDescription>;
<new mozRTCSessionDescription> = new mozRTCSessionDescription();
<new mozRTCSessionDescription> = new mozRTCSessionDescription(<RTCSessionDescriptionInit>);
!extends WebSocket EventTarget;
<new EventTarget> = <WebSocket>;
<new WebSocket> = new WebSocket(<DOMString>);
<new WebSocket> = new WebSocket(<DOMString>,<union_DOMString1sequence_DOMString__>);
<new DOMString> = <WebSocket>.url;
<new unsigned short> = <WebSocket>.CONNECTING;
<new unsigned short> = <WebSocket>.OPEN;
<new unsigned short> = <WebSocket>.CLOSING;
<new unsigned short> = <WebSocket>.CLOSED;
<new unsigned short> = <WebSocket>.readyState;
<new unsigned long long> = <WebSocket>.bufferedAmount;
<new EventHandler> = <WebSocket>.onopen;
<WebSocket>.onopen = <EventHandler>;
<new EventHandler> = <WebSocket>.onerror;
<WebSocket>.onerror = <EventHandler>;
<new EventHandler> = <WebSocket>.onclose;
<WebSocket>.onclose = <EventHandler>;
<new DOMString> = <WebSocket>.extensions;
<new DOMString> = <WebSocket>.protocol;
<new void> = <WebSocket>.close();
<new void> = <WebSocket>.close(<unsigned short>);
<new void> = <WebSocket>.close(<unsigned short>,<DOMString>);
<new EventHandler> = <WebSocket>.onmessage;
<WebSocket>.onmessage = <EventHandler>;
<new BinaryType> = <WebSocket>.binaryType;
<WebSocket>.binaryType = <BinaryType>;
<new void> = <WebSocket>.send(<DOMString>);
<new void> = <WebSocket>.send(<Blob>);
<new void> = <WebSocket>.send(<ArrayBuffer>);
<new void> = <WebSocket>.send(<ArrayBufferView>);
<new WebSocket> = <WebSocket>.createServerWebSocket(<DOMString>,<sequence_DOMString_>,<nsITransportProvider>,<DOMString>);
!extends XRSystem EventTarget;
<new EventTarget> = <XRSystem>;
<new Promise_boolean_> = <XRSystem>.isSessionSupported(<XRSessionMode>);
<new Promise_XRSession_> = new Promise(function(x){console.log("ok")});
<new Promise_XRSession_> = <XRSystem>.requestSession(<XRSessionMode>);
<new Promise_XRSession_> = <XRSystem>.requestSession(<XRSessionMode>,<XRSessionInit>);
<new EventHandler> = <XRSystem>.ondevicechange;
<XRSystem>.ondevicechange = <EventHandler>;
!extends XRSession EventTarget;
<new EventTarget> = <XRSession>;
<new XRVisibilityState> = <XRSession>.visibilityState;
<new XRRenderState> = <XRSession>.renderState;
<new XRInputSourceArray> = <XRSession>.inputSources;
<new void> = <XRSession>.updateRenderState();
<new void> = <XRSession>.updateRenderState(<XRRenderStateInit>);
<new Promise_XRReferenceSpace_> = new Promise(function(x){console.log("ok")});
<new Promise_XRReferenceSpace_> = <XRSession>.requestReferenceSpace(<XRReferenceSpaceType>);
<XRSession>.requestAnimationFrame(<XRFrameRequestCallback>);
<new void> = <XRSession>.cancelAnimationFrame(<long>);
<new Promise_void_> = <XRSession>.end();
<new EventHandler> = <XRSession>.onend;
<XRSession>.onend = <EventHandler>;
<new EventHandler> = <XRSession>.oninputsourceschange;
<XRSession>.oninputsourceschange = <EventHandler>;
<new EventHandler> = <XRSession>.onselect;
<XRSession>.onselect = <EventHandler>;
<new EventHandler> = <XRSession>.onselectstart;
<XRSession>.onselectstart = <EventHandler>;
<new EventHandler> = <XRSession>.onselectend;
<XRSession>.onselectend = <EventHandler>;
<new EventHandler> = <XRSession>.onsqueeze;
<XRSession>.onsqueeze = <EventHandler>;
<new EventHandler> = <XRSession>.onsqueezestart;
<XRSession>.onsqueezestart = <EventHandler>;
<new EventHandler> = <XRSession>.onsqueezeend;
<XRSession>.onsqueezeend = <EventHandler>;
<new EventHandler> = <XRSession>.onvisibilitychange;
<XRSession>.onvisibilitychange = <EventHandler>;
<new double> = <XRRenderState>.depthNear;
<new double> = <XRRenderState>.depthFar;
<new double> = <XRRenderState>.inlineVerticalFieldOfView;
<new XRWebGLLayer> = <XRRenderState>.baseLayer;
<new XRSession> = <XRFrame>.session;
<new XRViewerPose> = <XRFrame>.getViewerPose(<XRReferenceSpace>);
<new XRPose> = <XRFrame>.getPose(<XRSpace>,<XRSpace>);
!extends XRSpace EventTarget;
<new EventTarget> = <XRSpace>;
!extends XRReferenceSpace XRSpace;
<new XRSpace> = <XRReferenceSpace>;
<new XRReferenceSpace> = <XRReferenceSpace>.getOffsetReferenceSpace(<XRRigidTransform>);
<new EventHandler> = <XRReferenceSpace>.onreset;
<XRReferenceSpace>.onreset = <EventHandler>;
!extends XRBoundedReferenceSpace XRReferenceSpace;
<new XRReferenceSpace> = <XRBoundedReferenceSpace>;
<new sequence_DOMPointReadOnly_> = [<DOMPointReadOnly>];
<new DOMPointReadOnly> = <sequence_DOMPointReadOnly_>[0];
<new sequence_DOMPointReadOnly_> = <XRBoundedReferenceSpace>.boundsGeometry;
<new XREye> = <XRView>.eye;
<new Float32Array> = <XRView>.projectionMatrix;
<new XRRigidTransform> = <XRView>.transform;
<new long> = <XRViewport>.x;
<new long> = <XRViewport>.y;
<new long> = <XRViewport>.width;
<new long> = <XRViewport>.height;
<new XRRigidTransform> = new XRRigidTransform();
<new XRRigidTransform> = new XRRigidTransform(<DOMPointInit>);
<new XRRigidTransform> = new XRRigidTransform(<DOMPointInit>,<DOMPointInit>);
<new DOMPointReadOnly> = <XRRigidTransform>.position;
<new DOMPointReadOnly> = <XRRigidTransform>.orientation;
<new Float32Array> = <XRRigidTransform>.matrix;
<new XRRigidTransform> = <XRRigidTransform>.inverse;
<new XRRigidTransform> = <XRPose>.transform;
<new boolean> = <XRPose>.emulatedPosition;
!extends XRViewerPose XRPose;
<new XRPose> = <XRViewerPose>;
<new sequence_XRView_> = [<XRView>];
<new XRView> = <sequence_XRView_>[0];
<new sequence_XRView_> = <XRViewerPose>.views;
<new XRHandedness> = <XRInputSource>.handedness;
<new XRTargetRayMode> = <XRInputSource>.targetRayMode;
<new XRSpace> = <XRInputSource>.targetRaySpace;
<new XRSpace> = <XRInputSource>.gripSpace;
<new sequence_DOMString_> = <XRInputSource>.profiles;
<new Gamepad> = <XRInputSource>.gamepad;
<new unsigned long> = <XRInputSourceArray>.length;
<new XRInputSource> = <XRInputSourceArray>(<unsigned long>);
<new XRWebGLLayer> = new XRWebGLLayer(<XRSession>,<XRWebGLRenderingContext>);
<new XRWebGLLayer> = new XRWebGLLayer(<XRSession>,<XRWebGLRenderingContext>,<XRWebGLLayerInit>);
<new boolean> = <XRWebGLLayer>.antialias;
<new boolean> = <XRWebGLLayer>.ignoreDepthValues;
<new WebGLFramebuffer> = <XRWebGLLayer>.framebuffer;
<new unsigned long> = <XRWebGLLayer>.framebufferWidth;
<new unsigned long> = <XRWebGLLayer>.framebufferHeight;
<new XRViewport> = <XRWebGLLayer>.getViewport(<XRView>);
<new double> = <XRWebGLLayer>.getNativeFramebufferScaleFactor(<XRSession>);
!extends WheelEvent MouseEvent;
<new MouseEvent> = <WheelEvent>;
<new WheelEvent> = new WheelEvent(<DOMString>);
<new WheelEvent> = new WheelEvent(<DOMString>,<WheelEventInit>);
<new unsigned long> = <WheelEvent>.DOM_DELTA_PIXEL;
<new unsigned long> = <WheelEvent>.DOM_DELTA_LINE;
<new unsigned long> = <WheelEvent>.DOM_DELTA_PAGE;
<new long> = <WheelEvent>.wheelDeltaX;
<new long> = <WheelEvent>.wheelDeltaY;
<new long> = <WheelEvent>.wheelDelta;
<new double> = <WheelEvent>.deltaX;
<new double> = <WheelEvent>.deltaY;
<new double> = <WheelEvent>.deltaZ;
<new unsigned long> = <WheelEvent>.deltaMode;
!extends Window EventTarget;
<new EventTarget> = <Window>;
<new WindowProxy> = <Window>.window;
<new WindowProxy> = <Window>.self;
<new Document> = <Window>.document;
<new DOMString> = <Window>.name;
<Window>.name = <DOMString>;
<new Location> = <Window>.location;
<new History> = <Window>.history;
<new CustomElementRegistry> = <Window>.customElements;
<new BarProp> = <Window>.locationbar;
<new BarProp> = <Window>.menubar;
<new BarProp> = <Window>.personalbar;
<new BarProp> = <Window>.scrollbars;
<new BarProp> = <Window>.statusbar;
<new BarProp> = <Window>.toolbar;
<new DOMString> = <Window>.status;
<Window>.status = <DOMString>;
# <new void> = <Window>.close();
<new boolean> = <Window>.closed;
<new void> = <Window>.stop();
<new void> = <Window>.focus();
<new void> = <Window>.blur();
<new any> = <Window>.event;
<new WindowProxy> = <Window>.frames;
<new unsigned long> = <Window>.length;
<new WindowProxy> = <Window>.top;
<new any> = <Window>.opener;
<Window>.opener = <any>;
<new WindowProxy> = <Window>.parent;
<new Element> = <Window>.frameElement;
# <new WindowProxy> = <Window>.open();
# <new WindowProxy> = <Window>.open(<USVString>);
# <new WindowProxy> = <Window>.open(<USVString>,<DOMString>);
# <new WindowProxy> = <Window>.open(<USVString>,<DOMString>,<DOMString>);
<new object> = <Window>(<DOMString>);
<new Navigator> = <Window>.navigator;
<new Navigator> = <Window>.clientInformation;
<new External> = <Window>.external;
<new ApplicationCache> = <Window>.applicationCache;
# <new void> = <Window>.alert();
# <new void> = <Window>.alert(<DOMString>);
# <Window>.confirm();
# <Window>.confirm(<DOMString>);
# <new DOMString> = <Window>.prompt();
# <new DOMString> = <Window>.prompt(<DOMString>);
# <new DOMString> = <Window>.prompt(<DOMString>,<DOMString>);
<new void> = <Window>.print();
<new WindowProxy> = <Window>.printPreview();
<new WindowProxy> = <Window>.printPreview(<nsIPrintSettings>);
<new WindowProxy> = <Window>.printPreview(<nsIPrintSettings>,<nsIWebProgressListener>);
<new WindowProxy> = <Window>.printPreview(<nsIPrintSettings>,<nsIWebProgressListener>,<nsIDocShell>);
<new void> = <Window>.postMessage(<any>,<DOMString>);
<new void> = <Window>.postMessage(<any>,<DOMString>,<sequence_object_>);
<new void> = <Window>.postMessage(<any>);
<new void> = <Window>.postMessage(<any>,<WindowPostMessageOptions>);
<new void> = <Window>.captureEvents();
<new void> = <Window>.releaseEvents();
<new Selection> = <Window>.getSelection();
<new CSSStyleDeclaration> = <Window>.getComputedStyle(<Element>);
<new CSSStyleDeclaration> = <Window>.getComputedStyle(<Element>,<DOMString>);
<new MediaQueryList> = <Window>.matchMedia(<UTF8String>);
<new Screen> = <Window>.screen;
<new void> = <Window>.moveTo(<long>,<long>);
<new void> = <Window>.moveBy(<long>,<long>);
<new void> = <Window>.resizeTo(<long>,<long>);
<new void> = <Window>.resizeBy(<long>,<long>);
<new any> = <Window>.innerWidth;
<Window>.innerWidth = <any>;
<new any> = <Window>.innerHeight;
<Window>.innerHeight = <any>;
<new void> = <Window>.scroll(<unrestricted double>,<unrestricted double>);
<new void> = <Window>.scroll();
<new void> = <Window>.scroll(<ScrollToOptions>);
<new void> = <Window>.scrollTo(<unrestricted double>,<unrestricted double>);
<new void> = <Window>.scrollTo();
<new void> = <Window>.scrollTo(<ScrollToOptions>);
<new void> = <Window>.scrollBy(<unrestricted double>,<unrestricted double>);
<new void> = <Window>.scrollBy();
<new void> = <Window>.scrollBy(<ScrollToOptions>);
<new void> = <Window>.mozScrollSnap();
<new double> = <Window>.scrollX;
<new double> = <Window>.pageXOffset;
<new double> = <Window>.scrollY;
<new double> = <Window>.pageYOffset;
<new double> = <Window>.screenLeft;
<new double> = <Window>.screenTop;
<new any> = <Window>.screenX;
<Window>.screenX = <any>;
<new any> = <Window>.screenY;
<Window>.screenY = <any>;
<new any> = <Window>.outerWidth;
<Window>.outerWidth = <any>;
<new any> = <Window>.outerHeight;
<Window>.outerHeight = <any>;
<Window>.requestAnimationFrame(<FrameRequestCallback>);
<new void> = <Window>.cancelAnimationFrame(<long>);
<new Performance> = <Window>.performance;
<new CSSStyleDeclaration> = <Window>.getDefaultComputedStyle(<Element>);
<new CSSStyleDeclaration> = <Window>.getDefaultComputedStyle(<Element>,<DOMString>);
<new void> = <Window>.scrollByLines(<long>);
<new void> = <Window>.scrollByLines(<long>,<ScrollOptions>);
<new void> = <Window>.scrollByPages(<long>);
<new void> = <Window>.scrollByPages(<long>,<ScrollOptions>);
<new void> = <Window>.sizeToContent();
<new XULControllers> = <Window>.controllers;
<new Element> = <Window>.realFrameElement;
<new nsIDocShell> = <Window>.docShell;
<new BrowsingContext> = <Window>.browsingContext;
<new float> = <Window>.mozInnerScreenX;
<new float> = <Window>.mozInnerScreenY;
<new double> = <Window>.devicePixelRatio;
<new long> = <Window>.scrollMinX;
<new long> = <Window>.scrollMinY;
<new long> = <Window>.scrollMaxX;
<new long> = <Window>.scrollMaxY;
<new boolean> = <Window>.fullScreen;
<Window>.fullScreen = <boolean>;
<new void> = <Window>.updateCommands(<DOMString>);
<new void> = <Window>.updateCommands(<DOMString>,<Selection>);
<new void> = <Window>.updateCommands(<DOMString>,<Selection>,<short>);
<Window>.find();
<Window>.find(<DOMString>);
<Window>.find(<DOMString>,<boolean>);
<Window>.find(<DOMString>,<boolean>,<boolean>);
<Window>.find(<DOMString>,<boolean>,<boolean>,<boolean>);
<Window>.find(<DOMString>,<boolean>,<boolean>,<boolean>,<boolean>);
<Window>.find(<DOMString>,<boolean>,<boolean>,<boolean>,<boolean>,<boolean>);
<Window>.find(<DOMString>,<boolean>,<boolean>,<boolean>,<boolean>,<boolean>,<boolean>);
<new unsigned long long> = <Window>.mozPaintCount;
<new EventHandler> = <Window>.ondevicemotion;
<Window>.ondevicemotion = <EventHandler>;
<new EventHandler> = <Window>.ondeviceorientation;
<Window>.ondeviceorientation = <EventHandler>;
<new EventHandler> = <Window>.onabsolutedeviceorientation;
<Window>.onabsolutedeviceorientation = <EventHandler>;
<new EventHandler> = <Window>.onuserproximity;
<Window>.onuserproximity = <EventHandler>;
<new EventHandler> = <Window>.ondevicelight;
<Window>.ondevicelight = <EventHandler>;
<new void> = <Window>.dump(<DOMString>);
<new void> = <Window>.setResizable(<boolean>);
<new WindowProxy> = <Window>.openDialog();
<new WindowProxy> = <Window>.openDialog(<DOMString>);
<new WindowProxy> = <Window>.openDialog(<DOMString>,<DOMString>);
<new WindowProxy> = <Window>.openDialog(<DOMString>,<DOMString>,<DOMString>);
<new WindowProxy> = <Window>.openDialog(<DOMString>,<DOMString>,<DOMString>,<any>);
<new object> = <Window>.content;
<new any> = <Window>.getInterface(<any>);
<new WindowRoot> = <Window>.windowRoot;
<Window>.shouldReportForServiceWorkerScope(<USVString>);
<new InstallTriggerImpl> = <Window>.InstallTrigger;
<new nsIDOMWindowUtils> = <Window>.windowUtils;
<new WindowGlobalChild> = <Window>.windowGlobalChild;
<new union_External1WindowProxy_> = <External>;
<new union_External1WindowProxy_> = <WindowProxy>;
<new union_External1WindowProxy_> = <Window>.sidebar;
<new unsigned short> = <Window>.STATE_MAXIMIZED;
<new unsigned short> = <Window>.STATE_MINIMIZED;
<new unsigned short> = <Window>.STATE_NORMAL;
<new unsigned short> = <Window>.STATE_FULLSCREEN;
<new unsigned short> = <Window>.windowState;
<new boolean> = <Window>.isFullyOccluded;
<new nsIBrowserDOMWindow> = <Window>.browserDOMWindow;
<Window>.browserDOMWindow = <nsIBrowserDOMWindow>;
<Window>.browserDOMWindow = null;
<new void> = <Window>.getAttention();
<new void> = <Window>.getAttentionWithCycleCount(<long>);
<new void> = <Window>.setCursor(<UTF8String>);
<new void> = <Window>.maximize();
<new void> = <Window>.minimize();
<new void> = <Window>.restore();
<new DOMString> = <Window>.getWorkspaceID();
<new void> = <Window>.moveToWorkspace(<DOMString>);
<new void> = <Window>.notifyDefaultButtonLoaded(<Element>);
<new ChromeMessageBroadcaster> = <Window>.messageManager;
<new ChromeMessageBroadcaster> = <Window>.getGroupMessageManager(<DOMString>);
<new Promise_any_> = <Window>.promiseDocumentFlushed(<PromiseDocumentFlushedCallback>);
<new boolean> = <Window>.isChromeWindow;
<new GleanImpl> = <Window>.Glean;
<new GleanPingsImpl> = <Window>.GleanPings;
<new EventHandler> = <Window>.onvrdisplayconnect;
<Window>.onvrdisplayconnect = <EventHandler>;
<new EventHandler> = <Window>.onvrdisplaydisconnect;
<Window>.onvrdisplaydisconnect = <EventHandler>;
<new EventHandler> = <Window>.onvrdisplayactivate;
<Window>.onvrdisplayactivate = <EventHandler>;
<new EventHandler> = <Window>.onvrdisplaydeactivate;
<Window>.onvrdisplaydeactivate = <EventHandler>;
<new EventHandler> = <Window>.onvrdisplaypresentchange;
<Window>.onvrdisplaypresentchange = <EventHandler>;
<Window>.requestIdleCallback(<IdleRequestCallback>);
<Window>.requestIdleCallback(<IdleRequestCallback>,<IdleRequestOptions>);
<new void> = <Window>.cancelIdleCallback(<unsigned long>);
<new sequence_DOMString_> = <Window>.getRegionalPrefsLocales();
<new sequence_DOMString_> = <Window>.getWebExposedLocales();
<new IntlUtils> = <Window>.intlUtils;
<new VisualViewport> = <Window>.visualViewport;
<new void> = <Window>.setScrollMarks(<sequence_unsigned long_>);
!extends WindowRoot EventTarget;
<new EventTarget> = <WindowRoot>;
!extends Worker EventTarget;
<new EventTarget> = <Worker>;
<new Worker> = new Worker(<USVString>);
<new Worker> = new Worker(<USVString>,<WorkerOptions>);
<new void> = <Worker>.terminate();
<new void> = <Worker>.postMessage(<any>,<sequence_object_>);
<new void> = <Worker>.postMessage(<any>);
<new void> = <Worker>.postMessage(<any>,<StructuredSerializeOptions>);
<new EventHandler> = <Worker>.onmessage;
<Worker>.onmessage = <EventHandler>;
<new EventHandler> = <Worker>.onmessageerror;
<Worker>.onmessageerror = <EventHandler>;
!extends ChromeWorker Worker;
<new Worker> = <ChromeWorker>;
<new ChromeWorker> = new ChromeWorker(<USVString>);
!extends WorkerDebuggerGlobalScope EventTarget;
<new EventTarget> = <WorkerDebuggerGlobalScope>;
<new object> = <WorkerDebuggerGlobalScope>.global;
<new object> = <WorkerDebuggerGlobalScope>.createSandbox(<DOMString>,<object>);
<new void> = <WorkerDebuggerGlobalScope>.loadSubScript(<DOMString>);
<new void> = <WorkerDebuggerGlobalScope>.loadSubScript(<DOMString>,<object>);
<new void> = <WorkerDebuggerGlobalScope>.enterEventLoop();
<new void> = <WorkerDebuggerGlobalScope>.leaveEventLoop();
<new void> = <WorkerDebuggerGlobalScope>.postMessage(<DOMString>);
<new EventHandler> = <WorkerDebuggerGlobalScope>.onmessage;
<WorkerDebuggerGlobalScope>.onmessage = <EventHandler>;
<new EventHandler> = <WorkerDebuggerGlobalScope>.onmessageerror;
<WorkerDebuggerGlobalScope>.onmessageerror = <EventHandler>;
<new void> = <WorkerDebuggerGlobalScope>.setImmediate(<Function>);
<new void> = <WorkerDebuggerGlobalScope>.reportError(<DOMString>);
<new sequence_any_> = <WorkerDebuggerGlobalScope>.retrieveConsoleEvents();
<new void> = <WorkerDebuggerGlobalScope>.setConsoleEventHandler(<AnyCallback>);
<new DOMString> = <WorkerDebuggerGlobalScope>.btoa(<DOMString>);
<new DOMString> = <WorkerDebuggerGlobalScope>.atob(<DOMString>);
<new void> = <WorkerDebuggerGlobalScope>.dump();
<new void> = <WorkerDebuggerGlobalScope>.dump(<DOMString>);
!extends WorkerGlobalScope EventTarget;
<new EventTarget> = <WorkerGlobalScope>;
<new WorkerGlobalScope> = <WorkerGlobalScope>.self;
<new WorkerLocation> = <WorkerGlobalScope>.location;
<new WorkerNavigator> = <WorkerGlobalScope>.navigator;
<new void> = <WorkerGlobalScope>.importScripts();
<new void> = <WorkerGlobalScope>.importScripts(<DOMString>);
<new OnErrorEventHandler> = <WorkerGlobalScope>.onerror;
<WorkerGlobalScope>.onerror = <OnErrorEventHandler>;
<new EventHandler> = <WorkerGlobalScope>.onlanguagechange;
<WorkerGlobalScope>.onlanguagechange = <EventHandler>;
<new EventHandler> = <WorkerGlobalScope>.onoffline;
<WorkerGlobalScope>.onoffline = <EventHandler>;
<new EventHandler> = <WorkerGlobalScope>.ononline;
<WorkerGlobalScope>.ononline = <EventHandler>;
<new EventHandler> = <WorkerGlobalScope>.onrejectionhandled;
<WorkerGlobalScope>.onrejectionhandled = <EventHandler>;
<new EventHandler> = <WorkerGlobalScope>.onunhandledrejection;
<WorkerGlobalScope>.onunhandledrejection = <EventHandler>;
<new void> = <WorkerGlobalScope>.dump();
<new void> = <WorkerGlobalScope>.dump(<DOMString>);
<new Performance> = <WorkerGlobalScope>.performance;
<new object> = <WorkerGlobalScope>.getJSTestingFunctions();
<new USVString> = <WorkerLocation>.href;
<new USVString> = <WorkerLocation>.origin;
<new USVString> = <WorkerLocation>.protocol;
<new USVString> = <WorkerLocation>.host;
<new USVString> = <WorkerLocation>.hostname;
<new USVString> = <WorkerLocation>.port;
<new USVString> = <WorkerLocation>.pathname;
<new USVString> = <WorkerLocation>.search;
<new USVString> = <WorkerLocation>.hash;
<new NetworkInformation> = <WorkerNavigator>.connection;
<new MediaCapabilities> = <WorkerNavigator>.mediaCapabilities;
<new Promise_void_> = <Worklet>.addModule(<USVString>);
<new Promise_void_> = <Worklet>.addModule(<USVString>,<WorkletOptions>);
<new void> = <WorkletGlobalScope>.dump();
<new void> = <WorkletGlobalScope>.dump(<DOMString>);
!extends XMLDocument Document;
<new Document> = <XMLDocument>;
!extends XMLHttpRequest XMLHttpRequestEventTarget;
<new XMLHttpRequestEventTarget> = <XMLHttpRequest>;
<new XMLHttpRequest> = new XMLHttpRequest();
<new XMLHttpRequest> = new XMLHttpRequest(<MozXMLHttpRequestParameters>);
<new XMLHttpRequest> = new XMLHttpRequest(<DOMString>);
<new EventHandler> = <XMLHttpRequest>.onreadystatechange;
<XMLHttpRequest>.onreadystatechange = <EventHandler>;
<new unsigned short> = <XMLHttpRequest>.UNSENT;
<new unsigned short> = <XMLHttpRequest>.OPENED;
<new unsigned short> = <XMLHttpRequest>.HEADERS_RECEIVED;
<new unsigned short> = <XMLHttpRequest>.LOADING;
<new unsigned short> = <XMLHttpRequest>.DONE;
<new unsigned short> = <XMLHttpRequest>.readyState;
<new void> = <XMLHttpRequest>.open(<ByteString>,<USVString>);
<new void> = <XMLHttpRequest>.open(<ByteString>,<USVString>,<boolean>);
<new void> = <XMLHttpRequest>.open(<ByteString>,<USVString>,<boolean>,<USVString>);
<new void> = <XMLHttpRequest>.open(<ByteString>,<USVString>,<boolean>,<USVString>,<USVString>);
<new void> = <XMLHttpRequest>.setRequestHeader(<ByteString>,<ByteString>);
<new unsigned long> = <XMLHttpRequest>.timeout;
<XMLHttpRequest>.timeout = <unsigned long>;
<new boolean> = <XMLHttpRequest>.withCredentials;
<XMLHttpRequest>.withCredentials = <boolean>;
<new XMLHttpRequestUpload> = <XMLHttpRequest>.upload;
<new union_Document1XMLHttpRequestBodyInit_> = <Document>;
<new union_Document1XMLHttpRequestBodyInit_> = <XMLHttpRequestBodyInit>;
<new void> = <XMLHttpRequest>.send();
<new void> = <XMLHttpRequest>.send(<union_Document1XMLHttpRequestBodyInit_>);
<new void> = <XMLHttpRequest>.abort();
<new USVString> = <XMLHttpRequest>.responseURL;
<new unsigned short> = <XMLHttpRequest>.status;
<new ByteString> = <XMLHttpRequest>.statusText;
<new ByteString> = <XMLHttpRequest>.getResponseHeader(<ByteString>);
<new ByteString> = <XMLHttpRequest>.getAllResponseHeaders();
<new void> = <XMLHttpRequest>.overrideMimeType(<DOMString>);
<new XMLHttpRequestResponseType> = <XMLHttpRequest>.responseType;
<XMLHttpRequest>.responseType = <XMLHttpRequestResponseType>;
<new any> = <XMLHttpRequest>.response;
<new USVString> = <XMLHttpRequest>.responseText;
<new Document> = <XMLHttpRequest>.responseXML;
<new boolean> = <XMLHttpRequest>.mozBackgroundRequest;
<XMLHttpRequest>.mozBackgroundRequest = <boolean>;
<new MozChannel> = <XMLHttpRequest>.channel;
<new any> = <XMLHttpRequest>.getInterface(<any>);
<new void> = <XMLHttpRequest>.setOriginAttributes();
<new void> = <XMLHttpRequest>.setOriginAttributes(<OriginAttributesDictionary>);
<new void> = <XMLHttpRequest>.sendInputStream(<InputStream>);
<new unsigned short> = <XMLHttpRequest>.errorCode;
<new boolean> = <XMLHttpRequest>.mozAnon;
<new boolean> = <XMLHttpRequest>.mozSystem;
!extends XMLHttpRequestEventTarget EventTarget;
<new EventTarget> = <XMLHttpRequestEventTarget>;
<new EventHandler> = <XMLHttpRequestEventTarget>.onloadstart;
<XMLHttpRequestEventTarget>.onloadstart = <EventHandler>;
<new EventHandler> = <XMLHttpRequestEventTarget>.onprogress;
<XMLHttpRequestEventTarget>.onprogress = <EventHandler>;
<new EventHandler> = <XMLHttpRequestEventTarget>.onabort;
<XMLHttpRequestEventTarget>.onabort = <EventHandler>;
<new EventHandler> = <XMLHttpRequestEventTarget>.onerror;
<XMLHttpRequestEventTarget>.onerror = <EventHandler>;
<new EventHandler> = <XMLHttpRequestEventTarget>.onload;
<XMLHttpRequestEventTarget>.onload = <EventHandler>;
<new EventHandler> = <XMLHttpRequestEventTarget>.ontimeout;
<XMLHttpRequestEventTarget>.ontimeout = <EventHandler>;
<new EventHandler> = <XMLHttpRequestEventTarget>.onloadend;
<XMLHttpRequestEventTarget>.onloadend = <EventHandler>;
!extends XMLHttpRequestUpload XMLHttpRequestEventTarget;
<new XMLHttpRequestEventTarget> = <XMLHttpRequestUpload>;
<new XMLSerializer> = new XMLSerializer();
<new DOMString> = <XMLSerializer>.serializeToString(<Node>);
<new void> = <XMLSerializer>.serializeToStream(<Node>,<OutputStream>,<DOMString>);
<new XPathEvaluator> = new XPathEvaluator();
<new XPathResult> = <XPathExpression>.evaluate(<Node>);
<new XPathResult> = <XPathExpression>.evaluate(<Node>,<unsigned short>);
<new XPathResult> = <XPathExpression>.evaluate(<Node>,<unsigned short>,<object>);
<new XPathResult> = <XPathExpression>.evaluateWithContext(<Node>,<unsigned long>,<unsigned long>);
<new XPathResult> = <XPathExpression>.evaluateWithContext(<Node>,<unsigned long>,<unsigned long>,<unsigned short>);
<new XPathResult> = <XPathExpression>.evaluateWithContext(<Node>,<unsigned long>,<unsigned long>,<unsigned short>,<object>);
<new unsigned short> = <XPathResult>.ANY_TYPE;
<new unsigned short> = <XPathResult>.NUMBER_TYPE;
<new unsigned short> = <XPathResult>.STRING_TYPE;
<new unsigned short> = <XPathResult>.BOOLEAN_TYPE;
<new unsigned short> = <XPathResult>.UNORDERED_NODE_ITERATOR_TYPE;
<new unsigned short> = <XPathResult>.ORDERED_NODE_ITERATOR_TYPE;
<new unsigned short> = <XPathResult>.UNORDERED_NODE_SNAPSHOT_TYPE;
<new unsigned short> = <XPathResult>.ORDERED_NODE_SNAPSHOT_TYPE;
<new unsigned short> = <XPathResult>.ANY_UNORDERED_NODE_TYPE;
<new unsigned short> = <XPathResult>.FIRST_ORDERED_NODE_TYPE;
<new unsigned short> = <XPathResult>.resultType;
<new double> = <XPathResult>.numberValue;
<new DOMString> = <XPathResult>.stringValue;
<new boolean> = <XPathResult>.booleanValue;
<new Node> = <XPathResult>.singleNodeValue;
<new boolean> = <XPathResult>.invalidIteratorState;
<new unsigned long> = <XPathResult>.snapshotLength;
<new Node> = <XPathResult>.iterateNext();
<new Node> = <XPathResult>.snapshotItem(<unsigned long>);
!extends XRInputSourceEvent Event;
<new Event> = <XRInputSourceEvent>;
<new XRInputSourceEvent> = new XRInputSourceEvent(<DOMString>,<XRInputSourceEventInit>);
<new XRFrame> = <XRInputSourceEvent>.frame;
<new XRInputSource> = <XRInputSourceEvent>.inputSource;
!extends XRInputSourcesChangeEvent Event;
<new Event> = <XRInputSourcesChangeEvent>;
<new XRInputSourcesChangeEvent> = new XRInputSourcesChangeEvent(<DOMString>,<XRInputSourcesChangeEventInit>);
<new XRSession> = <XRInputSourcesChangeEvent>.session;
<new sequence_XRInputSource_> = [<XRInputSource>];
<new XRInputSource> = <sequence_XRInputSource_>[0];
<new sequence_XRInputSource_> = <XRInputSourcesChangeEvent>.added;
<new sequence_XRInputSource_> = <XRInputSourcesChangeEvent>.removed;
!extends XRReferenceSpaceEvent Event;
<new Event> = <XRReferenceSpaceEvent>;
<new XRReferenceSpaceEvent> = new XRReferenceSpaceEvent(<DOMString>,<XRReferenceSpaceEventInit>);
<new XRReferenceSpace> = <XRReferenceSpaceEvent>.referenceSpace;
<new XRRigidTransform> = <XRReferenceSpaceEvent>.transform;
!extends XRSessionEvent Event;
<new Event> = <XRSessionEvent>;
<new XRSessionEvent> = new XRSessionEvent(<DOMString>,<XRSessionEventInit>);
<new XRSession> = <XRSessionEvent>.session;
<new XSLTProcessor> = new XSLTProcessor();
<new void> = <XSLTProcessor>.importStylesheet(<Node>);
<new DocumentFragment> = <XSLTProcessor>.transformToFragment(<Node>,<Document>);
<new Document> = <XSLTProcessor>.transformToDocument(<Node>);
<new void> = <XSLTProcessor>.setParameter(<DOMString>,<DOMString>,<any>);
<new nsIVariant> = <XSLTProcessor>.getParameter(<DOMString>,<DOMString>);
<new void> = <XSLTProcessor>.removeParameter(<DOMString>,<DOMString>);
<new void> = <XSLTProcessor>.clearParameters();
<new void> = <XSLTProcessor>.reset();
<new unsigned long> = <XSLTProcessor>.DISABLE_ALL_LOADS;
<new unsigned long> = <XSLTProcessor>.flags;
<XSLTProcessor>.flags = <unsigned long>;
!extends XULCommandEvent UIEvent;
<new UIEvent> = <XULCommandEvent>;
<new boolean> = <XULCommandEvent>.ctrlKey;
<new boolean> = <XULCommandEvent>.shiftKey;
<new boolean> = <XULCommandEvent>.altKey;
<new boolean> = <XULCommandEvent>.metaKey;
<new short> = <XULCommandEvent>.button;
<new unsigned short> = <XULCommandEvent>.inputSource;
<new Event> = <XULCommandEvent>.sourceEvent;
<new void> = <XULCommandEvent>.initCommandEvent(<DOMString>);
<new void> = <XULCommandEvent>.initCommandEvent(<DOMString>,<boolean>);
<new void> = <XULCommandEvent>.initCommandEvent(<DOMString>,<boolean>,<boolean>);
<new void> = <XULCommandEvent>.initCommandEvent(<DOMString>,<boolean>,<boolean>,<Window>);
<new void> = <XULCommandEvent>.initCommandEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>);
<new void> = <XULCommandEvent>.initCommandEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<boolean>);
<new void> = <XULCommandEvent>.initCommandEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<boolean>,<boolean>);
<new void> = <XULCommandEvent>.initCommandEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<boolean>,<boolean>,<boolean>);
<new void> = <XULCommandEvent>.initCommandEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<boolean>,<boolean>,<boolean>,<boolean>);
<new void> = <XULCommandEvent>.initCommandEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<boolean>,<boolean>,<boolean>,<boolean>,<short>);
<new void> = <XULCommandEvent>.initCommandEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<boolean>,<boolean>,<boolean>,<boolean>,<short>,<Event>);
<new void> = <XULCommandEvent>.initCommandEvent(<DOMString>,<boolean>,<boolean>,<Window>,<long>,<boolean>,<boolean>,<boolean>,<boolean>,<short>,<Event>,<unsigned short>);
!extends XULElement Element;
<new Element> = <XULElement>;
<new XULElement> = new XULElement();
<new DOMString> = <XULElement>.flex;
<XULElement>.flex = <DOMString>;
<new boolean> = <XULElement>.hidden;
<XULElement>.hidden = <boolean>;
<new boolean> = <XULElement>.collapsed;
<XULElement>.collapsed = <boolean>;
<new DOMString> = <XULElement>.observes;
<XULElement>.observes = <DOMString>;
<new DOMString> = <XULElement>.menu;
<XULElement>.menu = <DOMString>;
<new DOMString> = <XULElement>.contextMenu;
<XULElement>.contextMenu = <DOMString>;
<new DOMString> = <XULElement>.tooltip;
<XULElement>.tooltip = <DOMString>;
<new DOMString> = <XULElement>.width;
<XULElement>.width = <DOMString>;
<new DOMString> = <XULElement>.height;
<XULElement>.height = <DOMString>;
<new DOMString> = <XULElement>.minWidth;
<XULElement>.minWidth = <DOMString>;
<new DOMString> = <XULElement>.minHeight;
<XULElement>.minHeight = <DOMString>;
<new DOMString> = <XULElement>.maxWidth;
<XULElement>.maxWidth = <DOMString>;
<new DOMString> = <XULElement>.maxHeight;
<XULElement>.maxHeight = <DOMString>;
<new long> = <XULElement>.screenX;
<new long> = <XULElement>.screenY;
<new DOMString> = <XULElement>.tooltipText;
<XULElement>.tooltipText = <DOMString>;
<new DOMString> = <XULElement>.src;
<XULElement>.src = <DOMString>;
<new XULControllers> = <XULElement>.controllers;
<new void> = <XULElement>.click();
<new void> = <XULElement>.doCommand();
<XULElement>.hasMenu();
<new void> = <XULElement>.openMenu(<boolean>);
!extends XULPopupElement XULElement;
<new XULElement> = <XULPopupElement>;
<new XULPopupElement> = new XULPopupElement();
<new boolean> = <XULPopupElement>.autoPosition;
<XULPopupElement>.autoPosition = <boolean>;
<new void> = <XULPopupElement>.openPopup();
<new void> = <XULPopupElement>.openPopup(<Element>);
<new void> = <XULPopupElement>.openPopup(<Element>,<StringOrOpenPopupOptions>);
<new void> = <XULPopupElement>.openPopup(<Element>,<StringOrOpenPopupOptions>,<long>);
<new void> = <XULPopupElement>.openPopup(<Element>,<StringOrOpenPopupOptions>,<long>,<long>);
<new void> = <XULPopupElement>.openPopup(<Element>,<StringOrOpenPopupOptions>,<long>,<long>,<boolean>);
<new void> = <XULPopupElement>.openPopup(<Element>,<StringOrOpenPopupOptions>,<long>,<long>,<boolean>,<boolean>);
<new void> = <XULPopupElement>.openPopup(<Element>,<StringOrOpenPopupOptions>,<long>,<long>,<boolean>,<boolean>,<Event>);
<new void> = <XULPopupElement>.openPopupAtScreen();
<new void> = <XULPopupElement>.openPopupAtScreen(<long>);
<new void> = <XULPopupElement>.openPopupAtScreen(<long>,<long>);
<new void> = <XULPopupElement>.openPopupAtScreen(<long>,<long>,<boolean>);
<new void> = <XULPopupElement>.openPopupAtScreen(<long>,<long>,<boolean>,<Event>);
<new void> = <XULPopupElement>.openPopupAtScreenRect();
<new void> = <XULPopupElement>.openPopupAtScreenRect(<DOMString>);
<new void> = <XULPopupElement>.openPopupAtScreenRect(<DOMString>,<long>);
<new void> = <XULPopupElement>.openPopupAtScreenRect(<DOMString>,<long>,<long>);
<new void> = <XULPopupElement>.openPopupAtScreenRect(<DOMString>,<long>,<long>,<long>);
<new void> = <XULPopupElement>.openPopupAtScreenRect(<DOMString>,<long>,<long>,<long>,<long>);
<new void> = <XULPopupElement>.openPopupAtScreenRect(<DOMString>,<long>,<long>,<long>,<long>,<boolean>);
<new void> = <XULPopupElement>.openPopupAtScreenRect(<DOMString>,<long>,<long>,<long>,<long>,<boolean>,<boolean>);
<new void> = <XULPopupElement>.openPopupAtScreenRect(<DOMString>,<long>,<long>,<long>,<long>,<boolean>,<boolean>,<Event>);
<new void> = <XULPopupElement>.hidePopup();
<new void> = <XULPopupElement>.hidePopup(<boolean>);
<new void> = <XULPopupElement>.activateItem(<Element>);
<new void> = <XULPopupElement>.activateItem(<Element>,<ActivateMenuItemOptions>);
<new DOMString> = <XULPopupElement>.label;
<XULPopupElement>.label = <DOMString>;
<new DOMString> = <XULPopupElement>.position;
<XULPopupElement>.position = <DOMString>;
<new DOMString> = <XULPopupElement>.state;
<new Node> = <XULPopupElement>.triggerNode;
<new boolean> = <XULPopupElement>.isAnchored;
<new Element> = <XULPopupElement>.anchorNode;
<new DOMRect> = <XULPopupElement>.getOuterScreenRect();
<new void> = <XULPopupElement>.moveTo(<long>,<long>);
<new void> = <XULPopupElement>.moveToAnchor();
<new void> = <XULPopupElement>.moveToAnchor(<Element>);
<new void> = <XULPopupElement>.moveToAnchor(<Element>,<DOMString>);
<new void> = <XULPopupElement>.moveToAnchor(<Element>,<DOMString>,<long>);
<new void> = <XULPopupElement>.moveToAnchor(<Element>,<DOMString>,<long>,<long>);
<new void> = <XULPopupElement>.moveToAnchor(<Element>,<DOMString>,<long>,<long>,<boolean>);
<new void> = <XULPopupElement>.sizeTo(<long>,<long>);
<new void> = <XULPopupElement>.setConstraintRect(<DOMRectReadOnly>);
<new BlobPart> = <BufferSource>;
<new BlobPart> = <Blob>;
<new BlobPart> = <USVString>;
<new HTMLOrSVGImageElement> = <HTMLImageElement>;
<new HTMLOrSVGImageElement> = <SVGImageElement>;
<new CanvasImageSource> = <HTMLOrSVGImageElement>;
<new CanvasImageSource> = <HTMLCanvasElement>;
<new CanvasImageSource> = <HTMLVideoElement>;
<new CanvasImageSource> = <ImageBitmap>;
<new sequence_ClipboardItem_> = [<ClipboardItem>];
<new ClipboardItem> = <sequence_ClipboardItem_>[0];
<new ClipboardItems> = <sequence_ClipboardItem_>;
<new ClipboardItemDataType> = <DOMString>;
<new ClipboardItemDataType> = <Blob>;
<new EventHandler> = <EventHandlerNonNull>;
<new OnBeforeUnloadEventHandler> = <OnBeforeUnloadEventHandlerNonNull>;
<new OnErrorEventHandler> = <OnErrorEventHandlerNonNull>;
<new JSON> = <object>;
<new XMLHttpRequestBodyInit> = <Blob>;
<new XMLHttpRequestBodyInit> = <BufferSource>;
<new XMLHttpRequestBodyInit> = <FormData>;
<new XMLHttpRequestBodyInit> = <URLSearchParams>;
<new XMLHttpRequestBodyInit> = <USVString>;
<new BodyInit> = <XMLHttpRequestBodyInit>;
<new BinaryData> = <ArrayBuffer>;
<new BinaryData> = <ArrayBufferView>;
<new FormDataEntryValue> = <Blob>;
<new FormDataEntryValue> = <Directory>;
<new FormDataEntryValue> = <USVString>;
<new GeometryNode> = <Text>;
<new GeometryNode> = <Element>;
<new GeometryNode> = <Document>;
<new sequence_ByteString_> = [<ByteString>];
<new ByteString> = <sequence_ByteString_>[0];
<new sequence_sequence_ByteString__> = [<sequence_ByteString_>];
<new sequence_ByteString_> = <sequence_sequence_ByteString__>[0];
<new record_ByteString1ByteString_> = {a: <ByteString>};
<new ByteString> = <record_ByteString1ByteString_>[<ByteString>];
<new HeadersInit> = <sequence_sequence_ByteString__>;
<new HeadersInit> = <record_ByteString1ByteString_>;
<new ImageBitmapSource> = <CanvasImageSource>;
<new ImageBitmapSource> = <Blob>;
<new ImageBitmapSource> = <CanvasRenderingContext2D>;
<new ImageBitmapSource> = <ImageData>;
<new sequence_ChannelPixelLayout_> = [<ChannelPixelLayout>];
<new ChannelPixelLayout> = <sequence_ChannelPixelLayout_>[0];
<new ImagePixelLayout> = <sequence_ChannelPixelLayout_>;
<new UnrestrictedDoubleOrKeyframeAnimationOptions> = <unrestricted double>;
<new UnrestrictedDoubleOrKeyframeAnimationOptions> = <KeyframeAnimationOptions>;
<new L10nKey> = <UTF8String>;
<new L10nKey> = <L10nIdArgs>;
<new ConstrainLong> = <long>;
<new ConstrainLong> = <ConstrainLongRange>;
<new ConstrainDouble> = <double>;
<new ConstrainDouble> = <ConstrainDoubleRange>;
<new ConstrainBoolean> = <boolean>;
<new ConstrainBoolean> = <ConstrainBooleanParameters>;
<new ConstrainDOMString> = <DOMString>;
<new ConstrainDOMString> = <sequence_DOMString_>;
<new ConstrainDOMString> = <ConstrainDOMStringParameters>;
<new MessageEventSource> = <WindowProxy>;
<new MessageEventSource> = <MessagePort>;
<new MessageEventSource> = <ServiceWorker>;
<new VibratePattern> = <unsigned long>;
<new VibratePattern> = <sequence_unsigned long_>;
<new DOMHighResTimeStamp> = <double>;
<new sequence_PerformanceEntry_> = [<PerformanceEntry>];
<new PerformanceEntry> = <sequence_PerformanceEntry_>[0];
<new PerformanceEntryList> = <sequence_PerformanceEntry_>;
<new PushMessageDataInit> = <BufferSource>;
<new PushMessageDataInit> = <USVString>;
<new ReadableStreamReader> = <ReadableStreamDefaultReader>;
<new sequence_Report_> = [<Report>];
<new Report> = <sequence_Report_>[0];
<new ReportList> = <sequence_Report_>;
<new RequestInfo> = <Request>;
<new RequestInfo> = <USVString>;
<new nsContentPolicyType> = <unsigned long>;
<new SanitizerInput> = <DocumentFragment>;
<new SanitizerInput> = <Document>;
<new record_DOMString1sequence_DOMString__> = {a: <sequence_DOMString_>};
<new sequence_DOMString_> = <record_DOMString1sequence_DOMString__>[<DOMString>];
<new AttributeMatchList> = <record_DOMString1sequence_DOMString__>;
<new KeyType> = <DOMString>;
<new KeyUsage> = <DOMString>;
<new NamedCurve> = <DOMString>;
<new BigInteger> = <Uint8Array>;
<new KeyFormat> = <DOMString>;
<new AlgorithmIdentifier> = <object>;
<new AlgorithmIdentifier> = <DOMString>;
<new ErrorCode> = <unsigned short>;
<new sequence_Transport_> = [<Transport>];
<new Transport> = <sequence_Transport_>[0];
<new Transports> = <sequence_Transport_>;
<new ReadableStreamController> = <ReadableStreamDefaultController>;
<new VRSource> = <HTMLCanvasElement>;
<new VRSource> = <OffscreenCanvas>;
<new record_DOMString1DOMString_> = {a: <DOMString>};
<new DOMString> = <record_DOMString1DOMString_>[<DOMString>];
<new AuthenticationExtensionsAuthenticatorInputs> = <record_DOMString1DOMString_>;
<new COSEAlgorithmIdentifier> = <long>;
<new sequence_AAGUID_> = [<AAGUID>];
<new AAGUID> = <sequence_AAGUID_>[0];
<new AuthenticatorSelectionList> = <sequence_AAGUID_>;
<new AAGUID> = <BufferSource>;
<new GLint64> = <long long>;
<new GLuint64> = <unsigned long long>;
<new sequence_GLuint_> = [<GLuint>];
<new GLuint> = <sequence_GLuint_>[0];
<new Uint32List> = <Uint32Array>;
<new Uint32List> = <sequence_GLuint_>;
<new GLenum> = <unsigned long>;
<new GLboolean> = <boolean>;
<new GLbitfield> = <unsigned long>;
<new GLbyte> = <byte>;
<new GLshort> = <short>;
<new GLint> = <long>;
<new GLsizei> = <long>;
<new GLintptr> = <long long>;
<new GLsizeiptr> = <long long>;
<new GLubyte> = <octet>;
<new GLushort> = <unsigned short>;
<new GLuint> = <unsigned long>;
<new GLfloat> = <unrestricted float>;
<new GLclampf> = <unrestricted float>;
<new GLuint64EXT> = <unsigned long long>;
<new sequence_GLfloat_> = [<GLfloat>];
<new GLfloat> = <sequence_GLfloat_>[0];
<new Float32List> = <Float32Array>;
<new Float32List> = <sequence_GLfloat_>;
<new sequence_GLint_> = [<GLint>];
<new GLint> = <sequence_GLint_>[0];
<new Int32List> = <Int32Array>;
<new Int32List> = <sequence_GLint_>;
<new GPUBufferDynamicOffset> = <unsigned long>;
<new GPUStencilValue> = <unsigned long>;
<new GPUSampleMask> = <unsigned long>;
<new GPUDepthBias> = <long>;
<new GPUSize64> = <unsigned long long>;
<new GPUIntegerCoordinate> = <unsigned long>;
<new GPUIndex32> = <unsigned long>;
<new GPUSize32> = <unsigned long>;
<new GPUSignedOffset32> = <long>;
<new GPUColor> = <sequence_double_>;
<new GPUColor> = <GPUColorDict>;
<new sequence_GPUIntegerCoordinate_> = [<GPUIntegerCoordinate>];
<new GPUIntegerCoordinate> = <sequence_GPUIntegerCoordinate_>[0];
<new GPUOrigin2D> = <sequence_GPUIntegerCoordinate_>;
<new GPUOrigin2D> = <GPUOrigin2DDict>;
<new GPUOrigin3D> = <sequence_GPUIntegerCoordinate_>;
<new GPUOrigin3D> = <GPUOrigin3DDict>;
<new GPUExtent3D> = <sequence_GPUIntegerCoordinate_>;
<new GPUExtent3D> = <GPUExtent3DDict>;
<new GPUError> = <GPUOutOfMemoryError>;
<new GPUError> = <GPUValidationError>;
<new GPUBufferUsageFlags> = <unsigned long>;
<new GPUMapModeFlags> = <unsigned long>;
<new GPUMappedBuffer> = <sequence_any_>;
<new GPUTextureUsageFlags> = <unsigned long>;
<new GPUShaderStageFlags> = <unsigned long>;
<new GPUBindingResource> = <GPUSampler>;
<new GPUBindingResource> = <GPUTextureView>;
<new GPUBindingResource> = <GPUBufferBinding>;
<new GPUColorWriteFlags> = <unsigned long>;
<new XRWebGLRenderingContext> = <WebGLRenderingContext>;
<new XRWebGLRenderingContext> = <WebGL2RenderingContext>;
<new ApplicationCache> = <OfflineResourceList>;
<new StringOrOpenPopupOptions> = <DOMString>;
<new StringOrOpenPopupOptions> = <OpenPopupOptions>;
!extends AddonEventInit EventInit;
<new EventInit> = <AddonEventInit>;
<new AddonEventInit> = {id:<DOMString>};
<new addonInstallOptions> = {url:<DOMString>};
!extends AnalyserOptions AudioNodeOptions;
<new AudioNodeOptions> = <AnalyserOptions>;
<new AnalyserOptions> = {};
!extends KeyframeAnimationOptions KeyframeEffectOptions;
<new KeyframeEffectOptions> = <KeyframeAnimationOptions>;
<new KeyframeAnimationOptions> = {};
<new GetAnimationsOptions> = {};
<new EffectTiming> = {};
<new OptionalEffectTiming> = {};
!extends ComputedEffectTiming EffectTiming;
<new EffectTiming> = <ComputedEffectTiming>;
<new ComputedEffectTiming> = {};
!extends AnimationEventInit EventInit;
<new EventInit> = <AnimationEventInit>;
<new AnimationEventInit> = {};
!extends AnimationPlaybackEventInit EventInit;
<new EventInit> = <AnimationPlaybackEventInit>;
<new AnimationPlaybackEventInit> = {};
<new AppInfo> = {};
<new AppNotificationServiceOptions> = {};
<new ScrollFrameDataEntry> = {};
<new ScrollFrameData> = {};
<new APZBucket> = {};
<new APZHitResult> = {};
<new APZSampledResult> = {};
<new AdditionalDataEntry> = {};
<new APZTestData> = {};
<new FrameUniformity> = {};
<new FrameUniformityResults> = {};
<new AudioBufferOptions> = {length:<unsigned long>,sampleRate:<float>};
<new AudioBufferSourceOptions> = {};
<new AudioContextOptions> = {};
<new AudioTimestamp> = {};
<new AudioNodeOptions> = {};
<new AudioParamDescriptor> = {name:<DOMString>};
!extends AudioWorkletNodeOptions AudioNodeOptions;
<new AudioNodeOptions> = <AudioWorkletNodeOptions>;
<new AudioWorkletNodeOptions> = {};
<new AutocompleteInfo> = {};
<new BasePropertyIndexedKeyframe> = {};
<new BaseKeyframe> = {};
!extends BaseComputedKeyframe BaseKeyframe;
<new BaseKeyframe> = <BaseComputedKeyframe>;
<new BaseComputedKeyframe> = {};
<new BasicCardRequest> = {};
<new BasicCardResponse> = {cardNumber:<DOMString>};
<new BasicCardChangeDetails> = {};
<new BasicCardErrors> = {};
!extends BiquadFilterOptions AudioNodeOptions;
<new AudioNodeOptions> = <BiquadFilterOptions>;
<new BiquadFilterOptions> = {};
<new BlobPropertyBag> = {};
!extends BlobEventInit EventInit;
<new EventInit> = <BlobEventInit>;
<new BlobEventInit> = {data:<Blob>};
<new OpenWindowEventDetail> = {};
<new DOMWindowResizeEventDetail> = {};
<new CacheQueryOptions> = {};
<new CacheBatchOperation> = {};
!extends MultiCacheQueryOptions CacheQueryOptions;
<new CacheQueryOptions> = <MultiCacheQueryOptions>;
<new MultiCacheQueryOptions> = {};
<new CancelContentJSOptions> = {};
<new ContextAttributes2D> = {};
<new HitRegionOptions> = {};
!extends CaretStateChangedEventInit EventInit;
<new EventInit> = <CaretStateChangedEventInit>;
<new CaretStateChangedEventInit> = {};
!extends ChannelMergerOptions AudioNodeOptions;
<new AudioNodeOptions> = <ChannelMergerOptions>;
<new ChannelMergerOptions> = {};
!extends ChannelSplitterOptions AudioNodeOptions;
<new AudioNodeOptions> = <ChannelSplitterOptions>;
<new ChannelSplitterOptions> = {};
<new CheckerboardReport> = {};
<new ClientQueryOptions> = {};
<new ClipboardItemOptions> = {};
!extends ClipboardEventInit EventInit;
<new EventInit> = <ClipboardEventInit>;
<new ClipboardEventInit> = {};
!extends CloseEventInit EventInit;
<new EventInit> = <CloseEventInit>;
<new CloseEventInit> = {};
!extends CompositionEventInit UIEventInit;
<new UIEventInit> = <CompositionEventInit>;
<new CompositionEventInit> = {};
<new ConsoleEvent> = {};
<new ConsoleProfileEvent> = {};
<new ConsoleStackEntry> = {};
<new ConsoleTimerStart> = {};
<new ConsoleTimerLogOrEnd> = {};
<new ConsoleTimerError> = {};
<new ConsoleCounter> = {};
<new ConsoleCounterError> = {};
<new ConsoleInstanceOptions> = {};
<new ConstantSourceOptions> = {};
!extends ConvolverOptions AudioNodeOptions;
<new AudioNodeOptions> = <ConvolverOptions>;
<new ConvolverOptions> = {};
<new CredentialRequestOptions> = {};
<new CredentialCreationOptions> = {};
<new CSP> = {};
<new CSPPolicies> = {};
<new CSPReportProperties> = {};
<new CSPReport> = {};
<new CSSStyleSheetInit> = {};
!extends CustomEventInit EventInit;
<new EventInit> = <CustomEventInit>;
<new CustomEventInit> = {};
<new DecoderDoctorNotification> = {type:<DecoderDoctorNotificationType>,isSolved:<boolean>,decoderDoctorReportId:<DOMString>};
!extends DelayOptions AudioNodeOptions;
<new AudioNodeOptions> = <DelayOptions>;
<new DelayOptions> = {};
!extends DeviceLightEventInit EventInit;
<new EventInit> = <DeviceLightEventInit>;
<new DeviceLightEventInit> = {};
<new DeviceAccelerationInit> = {};
<new DeviceRotationRateInit> = {};
!extends DeviceMotionEventInit EventInit;
<new EventInit> = <DeviceMotionEventInit>;
<new DeviceMotionEventInit> = {};
!extends DeviceOrientationEventInit EventInit;
<new EventInit> = <DeviceOrientationEventInit>;
<new DeviceOrientationEventInit> = {};
<new ElementCreationOptions> = {};
<new BlockParsingOptions> = {};
<new WireframeTaggedRect> = {};
<new Wireframe> = {};
<new DocumentTimelineOptions> = {};
<new DOMMatrix2DInit> = {};
!extends DOMMatrixInit DOMMatrix2DInit;
<new DOMMatrix2DInit> = <DOMMatrixInit>;
<new DOMMatrixInit> = {};
<new DOMPointInit> = {};
<new DOMQuadInit> = {};
<new DOMRectInit> = {};
!extends DragEventInit MouseEventInit;
<new MouseEventInit> = <DragEventInit>;
<new DragEventInit> = {};
!extends DynamicsCompressorOptions AudioNodeOptions;
<new AudioNodeOptions> = <DynamicsCompressorOptions>;
<new DynamicsCompressorOptions> = {};
<new FocusOptions> = {};
!extends ScrollIntoViewOptions ScrollOptions;
<new ScrollOptions> = <ScrollIntoViewOptions>;
<new ScrollIntoViewOptions> = {};
<new ShadowRootInit> = {mode:<ShadowRootMode>};
<new SetHTMLOptions> = {};
!extends ErrorEventInit EventInit;
<new EventInit> = <ErrorEventInit>;
<new ErrorEventInit> = {};
<new EventInit> = {};
<new EventSourceInit> = {};
<new EventListenerOptions> = {};
!extends AddEventListenerOptions EventListenerOptions;
<new EventListenerOptions> = <AddEventListenerOptions>;
<new AddEventListenerOptions> = {};
!extends ExtendableEventInit EventInit;
<new EventInit> = <ExtendableEventInit>;
<new ExtendableEventInit> = {};
!extends ExtendableMessageEventInit ExtendableEventInit;
<new ExtendableEventInit> = <ExtendableMessageEventInit>;
<new ExtendableMessageEventInit> = {};
<new ExtensionPortDescriptor> = {portId:<DOMString>};
<new FailedCertSecurityInfo> = {};
<new sequence_FakePluginMimeEntry_> = [<FakePluginMimeEntry>];
<new FakePluginMimeEntry> = <sequence_FakePluginMimeEntry_>[0];
<new FakePluginTagInit> = {handlerURI:<DOMString>,mimeEntries:<sequence_FakePluginMimeEntry_>};
<new FakePluginMimeEntry> = {type:<DOMString>};
<new FetchReadableStreamReadDataDone> = {};
<new FetchReadableStreamReadDataArray> = {};
!extends FetchEventInit EventInit;
<new EventInit> = <FetchEventInit>;
<new FetchEventInit> = {request:<Request>};
!extends FilePropertyBag BlobPropertyBag;
<new BlobPropertyBag> = <FilePropertyBag>;
<new FilePropertyBag> = {};
!extends ChromeFilePropertyBag FilePropertyBag;
<new FilePropertyBag> = <ChromeFilePropertyBag>;
<new ChromeFilePropertyBag> = {};
<new FileSystemFlags> = {};
!extends FocusEventInit UIEventInit;
<new UIEventInit> = <FocusEventInit>;
<new FocusEventInit> = {};
<new FontFaceDescriptors> = {};
<new FontFaceSetIteratorResult> = {value:<any>,done:<boolean>};
!extends FontFaceSetLoadEventInit EventInit;
<new EventInit> = <FontFaceSetLoadEventInit>;
<new FontFaceSetLoadEventInit> = {};
!extends FormDataEventInit EventInit;
<new EventInit> = <FormDataEventInit>;
<new FormDataEventInit> = {formData:<FormData>};
!extends FrameCrashedEventInit EventInit;
<new EventInit> = <FrameCrashedEventInit>;
<new FrameCrashedEventInit> = {};
!extends GainOptions AudioNodeOptions;
<new AudioNodeOptions> = <GainOptions>;
<new GainOptions> = {};
!extends GamepadAxisMoveEventInit GamepadEventInit;
<new GamepadEventInit> = <GamepadAxisMoveEventInit>;
<new GamepadAxisMoveEventInit> = {};
!extends GamepadButtonEventInit GamepadEventInit;
<new GamepadEventInit> = <GamepadButtonEventInit>;
<new GamepadButtonEventInit> = {};
!extends GamepadEventInit EventInit;
<new EventInit> = <GamepadEventInit>;
<new GamepadEventInit> = {};
<new GamepadLightColor> = {red:<octet>,green:<octet>,blue:<octet>};
<new PositionOptions> = {};
<new BoxQuadOptions> = {};
<new ConvertCoordinateOptions> = {};
!extends GPUUncapturedErrorEventInit EventInit;
<new EventInit> = <GPUUncapturedErrorEventInit>;
<new GPUUncapturedErrorEventInit> = {error:<GPUError>};
!extends HashChangeEventInit EventInit;
<new EventInit> = <HashChangeEventInit>;
<new HashChangeEventInit> = {};
<new DateTimeValue> = {};
<new MozPluginParameter> = {};
<new AssignedNodesOptions> = {};
<new IDBOpenDBOptions> = {};
<new IDBFileMetadataParameters> = {};
<new IDBIndexParameters> = {};
<new IDBObjectStoreParameters> = {};
!extends IDBVersionChangeEventInit EventInit;
<new EventInit> = <IDBVersionChangeEventInit>;
<new IDBVersionChangeEventInit> = {};
!extends IIRFilterOptions AudioNodeOptions;
<new AudioNodeOptions> = <IIRFilterOptions>;
<new IIRFilterOptions> = {feedforward:<sequence_double_>,feedback:<sequence_double_>};
<new ChannelPixelLayout> = {offset:<unsigned long>,width:<unsigned long>,height:<unsigned long>,dataType:<ChannelPixelLayoutDataType>,stride:<unsigned long>,skip:<unsigned long>};
<new ImageBitmapOptions> = {};
!extends ImageCaptureErrorEventInit EventInit;
<new EventInit> = <ImageCaptureErrorEventInit>;
<new ImageCaptureErrorEventInit> = {};
!extends InputEventInit UIEventInit;
<new UIEventInit> = <InputEventInit>;
<new InputEventInit> = {};
<new InstallTriggerData> = {};
<new IntersectionObserverEntryInit> = {time:<DOMHighResTimeStamp>,rootBounds:<DOMRectInit>,boundingClientRect:<DOMRectInit>,intersectionRect:<DOMRectInit>,target:<Element>};
<new IntersectionObserverInit> = {};
<new DisplayNameOptions> = {};
<new DisplayNameResult> = {};
<new LocaleInfo> = {};
<new IterableKeyOrValueResult> = {};
<new IterableKeyAndValueResult> = {};
<new KeyAlgorithm> = {name:<DOMString>};
!extends AesKeyAlgorithm KeyAlgorithm;
<new KeyAlgorithm> = <AesKeyAlgorithm>;
<new AesKeyAlgorithm> = {length:<unsigned short>};
!extends EcKeyAlgorithm KeyAlgorithm;
<new KeyAlgorithm> = <EcKeyAlgorithm>;
<new EcKeyAlgorithm> = {namedCurve:<DOMString>};
!extends HmacKeyAlgorithm KeyAlgorithm;
<new KeyAlgorithm> = <HmacKeyAlgorithm>;
<new HmacKeyAlgorithm> = {hash:<KeyAlgorithm>,length:<unsigned long>};
!extends RsaHashedKeyAlgorithm KeyAlgorithm;
<new KeyAlgorithm> = <RsaHashedKeyAlgorithm>;
<new RsaHashedKeyAlgorithm> = {modulusLength:<unsigned short>,publicExponent:<Uint8Array>,hash:<KeyAlgorithm>};
!extends DhKeyAlgorithm KeyAlgorithm;
<new KeyAlgorithm> = <DhKeyAlgorithm>;
<new DhKeyAlgorithm> = {prime:<Uint8Array>,generator:<Uint8Array>};
!extends KeyboardEventInit EventModifierInit;
<new EventModifierInit> = <KeyboardEventInit>;
<new KeyboardEventInit> = {};
!extends KeyframeEffectOptions EffectTiming;
<new EffectTiming> = <KeyframeEffectOptions>;
<new KeyframeEffectOptions> = {};
<new AnimationPropertyValueDetails> = {offset:<double>,composite:<CompositeOperation>};
<new sequence_AnimationPropertyValueDetails_> = [<AnimationPropertyValueDetails>];
<new AnimationPropertyValueDetails> = <sequence_AnimationPropertyValueDetails_>[0];
<new AnimationPropertyDetails> = {property:<DOMString>,runningOnCompositor:<boolean>,values:<sequence_AnimationPropertyValueDetails_>};
<new KeyIdsInitData> = {kids:<sequence_DOMString_>};
<new LoadURIOptions> = {};
<new L10nIdArgs> = {};
<new AttributeNameValue> = {name:<UTF8String>,value:<UTF8String>};
<new L10nMessage> = {};
<new L10nArgsHelperDict> = {args:<L10nArgs>};
<new LockOptions> = {};
<new LockManagerSnapshot> = {};
<new LockInfo> = {};
<new MediaConfiguration> = {};
!extends MediaDecodingConfiguration MediaConfiguration;
<new MediaConfiguration> = <MediaDecodingConfiguration>;
<new MediaDecodingConfiguration> = {type:<MediaDecodingType>};
!extends MediaEncodingConfiguration MediaConfiguration;
<new MediaConfiguration> = <MediaEncodingConfiguration>;
<new MediaEncodingConfiguration> = {type:<MediaEncodingType>};
<new VideoConfiguration> = {contentType:<DOMString>,width:<unsigned long>,height:<unsigned long>,bitrate:<unsigned long long>,framerate:<DOMString>};
<new AudioConfiguration> = {contentType:<DOMString>};
<new MediaCacheStreamDebugInfo> = {};
<new MediaResourceDebugInfo> = {};
<new MediaDecoderDebugInfo> = {};
<new AudioSinkDebugInfo> = {};
<new AudioSinkWrapperDebugInfo> = {};
<new VideoSinkDebugInfo> = {};
<new DecodedStreamDataDebugInfo> = {};
<new DecodedStreamDebugInfo> = {};
<new MediaSinkDebugInfo> = {};
<new MediaDecoderStateMachineDecodingStateDebugInfo> = {};
<new MediaDecoderStateMachineDebugInfo> = {};
<new MediaStateDebugInfo> = {};
<new MediaFrameStats> = {};
<new MediaFormatReaderDebugInfo> = {};
<new BufferRange> = {};
<new TrackBuffersManagerDebugInfo> = {};
<new MediaSourceDemuxerDebugInfo> = {};
<new MediaSourceDecoderDebugInfo> = {};
<new EMEDebugInfo> = {};
<new HTMLMediaElementDebugInfo> = {};
<new AudioOutputOptions> = {};
<new MediaElementAudioSourceOptions> = {mediaElement:<HTMLMediaElement>};
!extends MediaKeyNeededEventInit EventInit;
<new EventInit> = <MediaKeyNeededEventInit>;
<new MediaKeyNeededEventInit> = {};
!extends MediaKeyMessageEventInit EventInit;
<new EventInit> = <MediaKeyMessageEventInit>;
<new MediaKeyMessageEventInit> = {messageType:<MediaKeyMessageType>,message:<ArrayBuffer>};
<new MediaKeysPolicy> = {};
<new RequestMediaKeySystemAccessNotification> = {keySystem:<DOMString>,status:<MediaKeySystemStatus>};
<new MediaKeySystemMediaCapability> = {};
<new MediaKeySystemConfiguration> = {};
!extends MediaQueryListEventInit EventInit;
<new EventInit> = <MediaQueryListEventInit>;
<new MediaQueryListEventInit> = {};
<new MediaRecorderOptions> = {};
!extends MediaRecorderErrorEventInit EventInit;
<new EventInit> = <MediaRecorderErrorEventInit>;
<new MediaRecorderErrorEventInit> = {error:<DOMException>};
<new MediaMetadataInit> = {};
<new MediaImage> = {src:<USVString>};
<new MediaSessionActionDetails> = {action:<MediaSessionAction>};
<new MediaPositionState> = {};
<new MediaStreamConstraints> = {};
<new DisplayMediaStreamConstraints> = {};
<new MediaStreamAudioSourceOptions> = {mediaStream:<MediaStream>};
!extends MediaStreamEventInit EventInit;
<new EventInit> = <MediaStreamEventInit>;
<new MediaStreamEventInit> = {};
<new ConstrainLongRange> = {};
<new ConstrainDoubleRange> = {};
<new ConstrainBooleanParameters> = {};
<new ConstrainDOMStringParameters> = {};
<new MediaTrackConstraintSet> = {};
!extends MediaTrackConstraints MediaTrackConstraintSet;
<new MediaTrackConstraintSet> = <MediaTrackConstraints>;
<new MediaTrackConstraints> = {};
<new MediaStreamTrackAudioSourceOptions> = {mediaStreamTrack:<MediaStreamTrack>};
!extends MediaStreamTrackEventInit EventInit;
<new EventInit> = <MediaStreamTrackEventInit>;
<new MediaStreamTrackEventInit> = {track:<MediaStreamTrack>};
<new MediaTrackSettings> = {};
<new MediaTrackSupportedConstraints> = {};
!extends MerchantValidationEventInit EventInit;
<new EventInit> = <MerchantValidationEventInit>;
<new MerchantValidationEventInit> = {};
!extends MessageEventInit EventInit;
<new EventInit> = <MessageEventInit>;
<new MessageEventInit> = {};
<new StructuredSerializeOptions> = {};
!extends MIDIConnectionEventInit EventInit;
<new EventInit> = <MIDIConnectionEventInit>;
<new MIDIConnectionEventInit> = {};
!extends MIDIMessageEventInit EventInit;
<new EventInit> = <MIDIMessageEventInit>;
<new MIDIMessageEventInit> = {};
<new MIDIOptions> = {};
!extends MouseEventInit EventModifierInit;
<new EventModifierInit> = <MouseEventInit>;
<new MouseEventInit> = {};
!extends MozApplicationEventInit EventInit;
<new EventInit> = <MozApplicationEventInit>;
<new MozApplicationEventInit> = {};
<new RemotenessOptions> = {remoteType:<UTF8String>};
<new MutationObserverInit> = {};
!extends MutationObservingInfo MutationObserverInit;
<new MutationObserverInit> = <MutationObservingInfo>;
<new MutationObservingInfo> = {};
<new NativeOSFileReadOptions> = {};
<new NativeOSFileWriteAtomicOptions> = {};
<new NavigationPreloadState> = {};
<new ShareData> = {};
<new NetErrorInfo> = {};
<new NetworkCommandOptions> = {};
<new NetworkResultOptions> = {};
<new GetRootNodeOptions> = {};
<new NotificationOptions> = {};
<new GetNotificationOptions> = {};
<new NotificationBehavior> = {};
!extends NotificationEventInit ExtendableEventInit;
<new ExtendableEventInit> = <NotificationEventInit>;
<new NotificationEventInit> = {notification:<Notification>};
!extends OfflineAudioCompletionEventInit EventInit;
<new EventInit> = <OfflineAudioCompletionEventInit>;
<new OfflineAudioCompletionEventInit> = {renderedBuffer:<AudioBuffer>};
<new OfflineAudioContextOptions> = {length:<unsigned long>,sampleRate:<float>};
!extends OscillatorOptions AudioNodeOptions;
<new AudioNodeOptions> = <OscillatorOptions>;
<new OscillatorOptions> = {};
!extends PageTransitionEventInit EventInit;
<new EventInit> = <PageTransitionEventInit>;
<new PageTransitionEventInit> = {};
!extends PannerOptions AudioNodeOptions;
<new AudioNodeOptions> = <PannerOptions>;
<new PannerOptions> = {};
!extends PaymentMethodChangeEventInit PaymentRequestUpdateEventInit;
<new PaymentRequestUpdateEventInit> = <PaymentMethodChangeEventInit>;
<new PaymentMethodChangeEventInit> = {};
<new PaymentMethodData> = {supportedMethods:<DOMString>};
<new PaymentCurrencyAmount> = {currency:<DOMString>,value:<DOMString>};
<new PaymentItem> = {label:<DOMString>,amount:<PaymentCurrencyAmount>};
<new PaymentShippingOption> = {id:<DOMString>,label:<DOMString>,amount:<PaymentCurrencyAmount>};
<new PaymentDetailsModifier> = {supportedMethods:<DOMString>};
<new PaymentDetailsBase> = {};
!extends PaymentDetailsInit PaymentDetailsBase;
<new PaymentDetailsBase> = <PaymentDetailsInit>;
<new PaymentDetailsInit> = {total:<PaymentItem>};
<new AddressErrors> = {};
<new PaymentValidationErrors> = {};
<new PayerErrors> = {};
!extends PaymentDetailsUpdate PaymentDetailsBase;
<new PaymentDetailsBase> = <PaymentDetailsUpdate>;
<new PaymentDetailsUpdate> = {};
<new PaymentOptions> = {};
!extends PaymentRequestUpdateEventInit EventInit;
<new EventInit> = <PaymentRequestUpdateEventInit>;
<new PaymentRequestUpdateEventInit> = {};
<new PCErrorData> = {name:<PCError>,message:<DOMString>};
!extends PerformanceEntryEventInit EventInit;
<new EventInit> = <PerformanceEntryEventInit>;
<new PerformanceEntryEventInit> = {};
<new PerformanceObserverInit> = {};
<new PerformanceEntryFilterOptions> = {};
<new PeriodicWaveConstraints> = {};
!extends PeriodicWaveOptions PeriodicWaveConstraints;
<new PeriodicWaveConstraints> = <PeriodicWaveOptions>;
<new PeriodicWaveOptions> = {};
<new PermissionDescriptor> = {name:<PermissionName>};
!extends PluginCrashedEventInit EventInit;
<new EventInit> = <PluginCrashedEventInit>;
<new PluginCrashedEventInit> = {};
!extends PointerEventInit MouseEventInit;
<new MouseEventInit> = <PointerEventInit>;
<new PointerEventInit> = {};
!extends PopStateEventInit EventInit;
<new EventInit> = <PopStateEventInit>;
<new PopStateEventInit> = {};
!extends PopupBlockedEventInit EventInit;
<new EventInit> = <PopupBlockedEventInit>;
<new PopupBlockedEventInit> = {};
!extends PopupPositionedEventInit EventInit;
<new EventInit> = <PopupPositionedEventInit>;
<new PopupPositionedEventInit> = {};
!extends PositionStateEventInit EventInit;
<new EventInit> = <PositionStateEventInit>;
<new PositionStateEventInit> = {duration:<double>,playbackRate:<double>,position:<double>};
<new ProfileTimelineStackFrame> = {};
<new ProfileTimelineLayerRect> = {};
<new ProfileTimelineMarker> = {};
!extends ProgressEventInit EventInit;
<new EventInit> = <ProgressEventInit>;
<new ProgressEventInit> = {};
!extends PromiseRejectionEventInit EventInit;
<new EventInit> = <PromiseRejectionEventInit>;
<new PromiseRejectionEventInit> = {promise:<Promise_any_>};
!extends PushEventInit ExtendableEventInit;
<new ExtendableEventInit> = <PushEventInit>;
<new PushEventInit> = {};
<new PushSubscriptionOptionsInit> = {};
<new PushSubscriptionKeys> = {};
<new PushSubscriptionJSON> = {};
<new PushSubscriptionInit> = {endpoint:<USVString>,scope:<USVString>};
<new QueuingStrategy> = {};
<new QueuingStrategyInit> = {highWaterMark:<unrestricted double>};
<new ClientRectsAndTexts> = {rectList:<DOMRectList>,textList:<sequence_DOMString_>};
<new ReadableStreamGetReaderOptions> = {};
<new ReadableStreamDefaultReadResult> = {};
<new ReportingObserverOptions> = {};
<new ReportingHeaderValue> = {};
<new ReportingItem> = {};
<new ReportingEndpoint> = {};
<new RequestInit> = {};
<new ResizeObserverOptions> = {};
<new ResponseInit> = {};
<new RTCCertificateExpiration> = {};
<new RTCIceServer> = {};
<new RTCConfiguration> = {};
!extends RTCDataChannelEventInit EventInit;
<new EventInit> = <RTCDataChannelEventInit>;
<new RTCDataChannelEventInit> = {channel:<RTCDataChannel>};
!extends RTCDTMFToneChangeEventInit EventInit;
<new EventInit> = <RTCDTMFToneChangeEventInit>;
<new RTCDTMFToneChangeEventInit> = {};
<new RTCIceCandidateInit> = {};
<new RTCIdentityAssertion> = {};
<new RTCIdentityProvider> = {generateAssertion:<GenerateAssertionCallback>,validateAssertion:<ValidateAssertionCallback>};
<new RTCIdentityAssertionResult> = {idp:<RTCIdentityProviderDetails>,assertion:<DOMString>};
<new RTCIdentityProviderDetails> = {domain:<DOMString>};
<new RTCIdentityValidationResult> = {identity:<DOMString>,contents:<DOMString>};
<new RTCIdentityProviderOptions> = {};
<new RTCDataChannelInit> = {};
<new RTCOfferAnswerOptions> = {};
!extends RTCAnswerOptions RTCOfferAnswerOptions;
<new RTCOfferAnswerOptions> = <RTCAnswerOptions>;
<new RTCAnswerOptions> = {};
!extends RTCOfferOptions RTCOfferAnswerOptions;
<new RTCOfferAnswerOptions> = <RTCOfferOptions>;
<new RTCOfferOptions> = {};
!extends RTCPeerConnectionIceEventInit EventInit;
<new EventInit> = <RTCPeerConnectionIceEventInit>;
<new RTCPeerConnectionIceEventInit> = {};
<new RTCRtxParameters> = {};
<new RTCFecParameters> = {};
<new RTCRtpEncodingParameters> = {};
<new RTCRtpHeaderExtensionParameters> = {};
<new RTCRtcpParameters> = {};
<new RTCRtpCodecParameters> = {};
<new RTCRtpParameters> = {};
<new RTCRtpContributingSource> = {timestamp:<DOMHighResTimeStamp>,source:<unsigned long>,rtpTimestamp:<unsigned long>};
!extends RTCRtpSynchronizationSource RTCRtpContributingSource;
<new RTCRtpContributingSource> = <RTCRtpSynchronizationSource>;
<new RTCRtpSynchronizationSource> = {};
!extends RTCRtpSourceEntry RTCRtpSynchronizationSource;
<new RTCRtpSynchronizationSource> = <RTCRtpSourceEntry>;
<new RTCRtpSourceEntry> = {sourceType:<RTCRtpSourceEntryType>};
<new RTCRtpTransceiverInit> = {};
<new RTCSessionDescriptionInit> = {};
<new RTCStats> = {};
!extends RTCRtpStreamStats RTCStats;
<new RTCStats> = <RTCRtpStreamStats>;
<new RTCRtpStreamStats> = {};
!extends RTCReceivedRtpStreamStats RTCRtpStreamStats;
<new RTCRtpStreamStats> = <RTCReceivedRtpStreamStats>;
<new RTCReceivedRtpStreamStats> = {};
!extends RTCInboundRtpStreamStats RTCReceivedRtpStreamStats;
<new RTCReceivedRtpStreamStats> = <RTCInboundRtpStreamStats>;
<new RTCInboundRtpStreamStats> = {};
!extends RTCRemoteInboundRtpStreamStats RTCReceivedRtpStreamStats;
<new RTCReceivedRtpStreamStats> = <RTCRemoteInboundRtpStreamStats>;
<new RTCRemoteInboundRtpStreamStats> = {};
!extends RTCSentRtpStreamStats RTCRtpStreamStats;
<new RTCRtpStreamStats> = <RTCSentRtpStreamStats>;
<new RTCSentRtpStreamStats> = {};
!extends RTCOutboundRtpStreamStats RTCSentRtpStreamStats;
<new RTCSentRtpStreamStats> = <RTCOutboundRtpStreamStats>;
<new RTCOutboundRtpStreamStats> = {};
!extends RTCRemoteOutboundRtpStreamStats RTCSentRtpStreamStats;
<new RTCSentRtpStreamStats> = <RTCRemoteOutboundRtpStreamStats>;
<new RTCRemoteOutboundRtpStreamStats> = {};
!extends RTCRTPContributingSourceStats RTCStats;
<new RTCStats> = <RTCRTPContributingSourceStats>;
<new RTCRTPContributingSourceStats> = {};
!extends RTCDataChannelStats RTCStats;
<new RTCStats> = <RTCDataChannelStats>;
<new RTCDataChannelStats> = {};
!extends RTCIceCandidatePairStats RTCStats;
<new RTCStats> = <RTCIceCandidatePairStats>;
<new RTCIceCandidatePairStats> = {};
!extends RTCIceCandidateStats RTCStats;
<new RTCStats> = <RTCIceCandidateStats>;
<new RTCIceCandidateStats> = {};
<new RTCVideoFrameHistoryEntryInternal> = {width:<unsigned long>,height:<unsigned long>,rotationAngle:<unsigned long>,firstFrameTimestamp:<DOMHighResTimeStamp>,lastFrameTimestamp:<DOMHighResTimeStamp>,consecutiveFrames:<unsigned long long>,localSsrc:<unsigned long>,remoteSsrc:<unsigned long>};
<new RTCVideoFrameHistoryInternal> = {trackIdentifier:<DOMString>};
<new RTCBandwidthEstimationInternal> = {trackIdentifier:<DOMString>};
<new RTCSdpParsingErrorInternal> = {lineNumber:<unsigned long>,error:<DOMString>};
<new RTCSdpHistoryEntryInternal> = {timestamp:<DOMHighResTimeStamp>,isLocal:<boolean>,sdp:<DOMString>};
<new RTCStatsCollection> = {};
<new RTCIceServerInternal> = {credentialProvided:<boolean>,userNameProvided:<boolean>};
<new RTCConfigurationInternal> = {certificatesProvided:<boolean>,peerIdentityProvided:<boolean>};
!extends RTCStatsReportInternal RTCStatsCollection;
<new RTCStatsCollection> = <RTCStatsReportInternal>;
<new RTCStatsReportInternal> = {pcid:<DOMString>,browserId:<unsigned long>,timestamp:<DOMHighResTimeStamp>,iceRestarts:<unsigned long>,iceRollbacks:<unsigned long>,closed:<boolean>};
!extends RTCTrackEventInit EventInit;
<new EventInit> = <RTCTrackEventInit>;
<new RTCTrackEventInit> = {receiver:<RTCRtpReceiver>,track:<MediaStreamTrack>,transceiver:<RTCRtpTransceiver>};
<new SanitizerConfig> = {};
!extends ScrollViewChangeEventInit EventInit;
<new EventInit> = <ScrollViewChangeEventInit>;
<new ScrollViewChangeEventInit> = {};
!extends SecurityPolicyViolationEventInit EventInit;
<new EventInit> = <SecurityPolicyViolationEventInit>;
<new SecurityPolicyViolationEventInit> = {};
<new RegistrationOptions> = {};
!extends SpeechRecognitionErrorInit EventInit;
<new EventInit> = <SpeechRecognitionErrorInit>;
<new SpeechRecognitionErrorInit> = {};
!extends SpeechRecognitionEventInit EventInit;
<new EventInit> = <SpeechRecognitionEventInit>;
<new SpeechRecognitionEventInit> = {};
!extends SpeechSynthesisErrorEventInit SpeechSynthesisEventInit;
<new SpeechSynthesisEventInit> = <SpeechSynthesisErrorEventInit>;
<new SpeechSynthesisErrorEventInit> = {error:<SpeechSynthesisErrorCode>};
!extends SpeechSynthesisEventInit EventInit;
<new EventInit> = <SpeechSynthesisEventInit>;
<new SpeechSynthesisEventInit> = {utterance:<SpeechSynthesisUtterance>};
<new StaticRangeInit> = {startContainer:<Node>,startOffset:<unsigned long>,endContainer:<Node>,endOffset:<unsigned long>};
!extends StereoPannerOptions AudioNodeOptions;
<new AudioNodeOptions> = <StereoPannerOptions>;
<new StereoPannerOptions> = {};
!extends StorageEventInit EventInit;
<new EventInit> = <StorageEventInit>;
<new StorageEventInit> = {};
<new StorageEstimate> = {};
!extends StreamFilterDataEventInit EventInit;
<new EventInit> = <StreamFilterDataEventInit>;
<new StreamFilterDataEventInit> = {data:<ArrayBuffer>};
!extends StyleSheetApplicableStateChangeEventInit EventInit;
<new EventInit> = <StyleSheetApplicableStateChangeEventInit>;
<new StyleSheetApplicableStateChangeEventInit> = {};
!extends SubmitEventInit EventInit;
<new EventInit> = <SubmitEventInit>;
<new SubmitEventInit> = {};
<new Algorithm> = {name:<DOMString>};
!extends AesCbcParams Algorithm;
<new Algorithm> = <AesCbcParams>;
<new AesCbcParams> = {iv:<BufferSource>};
!extends AesCtrParams Algorithm;
<new Algorithm> = <AesCtrParams>;
<new AesCtrParams> = {counter:<BufferSource>,length:<octet>};
!extends AesGcmParams Algorithm;
<new Algorithm> = <AesGcmParams>;
<new AesGcmParams> = {iv:<BufferSource>};
!extends HmacImportParams Algorithm;
<new Algorithm> = <HmacImportParams>;
<new HmacImportParams> = {hash:<AlgorithmIdentifier>};
!extends Pbkdf2Params Algorithm;
<new Algorithm> = <Pbkdf2Params>;
<new Pbkdf2Params> = {salt:<BufferSource>,iterations:<unsigned long>,hash:<AlgorithmIdentifier>};
<new RsaHashedImportParams> = {hash:<AlgorithmIdentifier>};
!extends AesKeyGenParams Algorithm;
<new Algorithm> = <AesKeyGenParams>;
<new AesKeyGenParams> = {length:<unsigned short>};
!extends HmacKeyGenParams Algorithm;
<new Algorithm> = <HmacKeyGenParams>;
<new HmacKeyGenParams> = {hash:<AlgorithmIdentifier>};
!extends RsaHashedKeyGenParams Algorithm;
<new Algorithm> = <RsaHashedKeyGenParams>;
<new RsaHashedKeyGenParams> = {modulusLength:<unsigned long>,publicExponent:<BigInteger>,hash:<AlgorithmIdentifier>};
!extends RsaOaepParams Algorithm;
<new Algorithm> = <RsaOaepParams>;
<new RsaOaepParams> = {};
!extends RsaPssParams Algorithm;
<new Algorithm> = <RsaPssParams>;
<new RsaPssParams> = {saltLength:<unsigned long>};
!extends EcKeyGenParams Algorithm;
<new Algorithm> = <EcKeyGenParams>;
<new EcKeyGenParams> = {namedCurve:<NamedCurve>};
!extends AesDerivedKeyParams Algorithm;
<new Algorithm> = <AesDerivedKeyParams>;
<new AesDerivedKeyParams> = {length:<unsigned long>};
!extends HmacDerivedKeyParams HmacImportParams;
<new HmacImportParams> = <HmacDerivedKeyParams>;
<new HmacDerivedKeyParams> = {};
!extends EcdhKeyDeriveParams Algorithm;
<new Algorithm> = <EcdhKeyDeriveParams>;
<new EcdhKeyDeriveParams> = {public:<CryptoKey>};
!extends DhImportKeyParams Algorithm;
<new Algorithm> = <DhImportKeyParams>;
<new DhImportKeyParams> = {prime:<BigInteger>,generator:<BigInteger>};
!extends EcdsaParams Algorithm;
<new Algorithm> = <EcdsaParams>;
<new EcdsaParams> = {hash:<AlgorithmIdentifier>};
!extends EcKeyImportParams Algorithm;
<new Algorithm> = <EcKeyImportParams>;
<new EcKeyImportParams> = {};
!extends HkdfParams Algorithm;
<new Algorithm> = <HkdfParams>;
<new HkdfParams> = {hash:<AlgorithmIdentifier>,salt:<BufferSource>,info:<BufferSource>};
<new RsaOtherPrimesInfo> = {r:<DOMString>,d:<DOMString>,t:<DOMString>};
<new JsonWebKey> = {kty:<DOMString>};
<new CryptoKeyPair> = {publicKey:<CryptoKey>,privateKey:<CryptoKey>};
<new SVGBoundingBoxOptions> = {};
<new ServerSocketOptions> = {};
!extends TCPServerSocketEventInit EventInit;
<new EventInit> = <TCPServerSocketEventInit>;
<new TCPServerSocketEventInit> = {};
<new SocketOptions> = {};
!extends TCPSocketErrorEventInit EventInit;
<new EventInit> = <TCPSocketErrorEventInit>;
<new TCPSocketErrorEventInit> = {};
!extends TCPSocketEventInit EventInit;
<new EventInit> = <TCPSocketEventInit>;
<new TCPSocketEventInit> = {};
<new DictWithAllowSharedBufferSource> = {};
<new TestInterfaceJSUnionableDictionary> = {};
<new TestInterfaceJSDictionary2> = {};
<new TestInterfaceJSDictionary> = {};
<new TextDecoderOptions> = {};
<new TextDecodeOptions> = {};
<new TextEncoderEncodeIntoResult> = {};
<new TouchInit> = {identifier:<long>,target:<EventTarget>};
!extends TouchEventInit EventModifierInit;
<new EventModifierInit> = <TouchEventInit>;
<new TouchEventInit> = {};
!extends TrackEventInit EventInit;
<new EventInit> = <TrackEventInit>;
<new TrackEventInit> = {};
!extends TransitionEventInit EventInit;
<new EventInit> = <TransitionEventInit>;
<new TransitionEventInit> = {};
<new U2FClientData> = {};
<new RegisterRequest> = {};
<new RegisterResponse> = {};
<new RegisteredKey> = {};
<new SignResponse> = {};
!extends UDPMessageEventInit EventInit;
<new EventInit> = <UDPMessageEventInit>;
<new UDPMessageEventInit> = {};
<new UDPOptions> = {};
!extends UIEventInit EventInit;
<new EventInit> = <UIEventInit>;
<new UIEventInit> = {};
!extends EventModifierInit UIEventInit;
<new UIEventInit> = <EventModifierInit>;
<new EventModifierInit> = {};
<new UnderlyingSource> = {};
!extends UserProximityEventInit EventInit;
<new EventInit> = <UserProximityEventInit>;
<new UserProximityEventInit> = {};
<new VRLayer> = {};
!extends VRDisplayEventInit EventInit;
<new EventInit> = <VRDisplayEventInit>;
<new VRDisplayEventInit> = {display:<VRDisplay>};
!extends WaveShaperOptions AudioNodeOptions;
<new AudioNodeOptions> = <WaveShaperOptions>;
<new WaveShaperOptions> = {};
<new PublicKeyCredentialParameters> = {type:<PublicKeyCredentialType>,alg:<COSEAlgorithmIdentifier>};
<new sequence_PublicKeyCredentialParameters_> = [<PublicKeyCredentialParameters>];
<new PublicKeyCredentialParameters> = <sequence_PublicKeyCredentialParameters_>[0];
<new PublicKeyCredentialCreationOptions> = {rp:<PublicKeyCredentialRpEntity>,user:<PublicKeyCredentialUserEntity>,challenge:<BufferSource>,pubKeyCredParams:<sequence_PublicKeyCredentialParameters_>};
<new PublicKeyCredentialEntity> = {name:<DOMString>};
!extends PublicKeyCredentialRpEntity PublicKeyCredentialEntity;
<new PublicKeyCredentialEntity> = <PublicKeyCredentialRpEntity>;
<new PublicKeyCredentialRpEntity> = {};
!extends PublicKeyCredentialUserEntity PublicKeyCredentialEntity;
<new PublicKeyCredentialEntity> = <PublicKeyCredentialUserEntity>;
<new PublicKeyCredentialUserEntity> = {id:<BufferSource>,displayName:<DOMString>};
<new AuthenticatorSelectionCriteria> = {};
<new PublicKeyCredentialRequestOptions> = {challenge:<BufferSource>};
<new AuthenticationExtensionsClientInputs> = {};
<new AuthenticationExtensionsClientOutputs> = {};
<new CollectedClientData> = {type:<DOMString>,challenge:<DOMString>,origin:<DOMString>,hashAlgorithm:<DOMString>};
<new PublicKeyCredentialDescriptor> = {type:<PublicKeyCredentialType>,id:<BufferSource>};
!extends WebGLContextEventInit EventInit;
<new EventInit> = <WebGLContextEventInit>;
<new WebGLContextEventInit> = {};
<new WebGLContextAttributes> = {};
<new GPUColorDict> = {r:<double>,g:<double>,b:<double>,a:<double>};
<new GPUOrigin2DDict> = {};
<new GPUOrigin3DDict> = {};
<new GPUExtent3DDict> = {width:<GPUIntegerCoordinate>};
<new GPUObjectDescriptorBase> = {};
<new GPURequestAdapterOptions> = {};
<new GPUDeviceDescriptor> = {};
!extends GPUBufferDescriptor GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPUBufferDescriptor>;
<new GPUBufferDescriptor> = {size:<GPUSize64>,usage:<GPUBufferUsageFlags>};
!extends GPUTextureDescriptor GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPUTextureDescriptor>;
<new GPUTextureDescriptor> = {size:<GPUExtent3D>,format:<GPUTextureFormat>,usage:<GPUTextureUsageFlags>};
!extends GPUTextureViewDescriptor GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPUTextureViewDescriptor>;
<new GPUTextureViewDescriptor> = {};
!extends GPUSamplerDescriptor GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPUSamplerDescriptor>;
<new GPUSamplerDescriptor> = {};
!extends GPUPipelineLayoutDescriptor GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPUPipelineLayoutDescriptor>;
<new sequence_GPUBindGroupLayout_> = [<GPUBindGroupLayout>];
<new GPUBindGroupLayout> = <sequence_GPUBindGroupLayout_>[0];
<new GPUPipelineLayoutDescriptor> = {bindGroupLayouts:<sequence_GPUBindGroupLayout_>};
<new GPUBufferBindingLayout> = {};
<new GPUSamplerBindingLayout> = {};
<new GPUTextureBindingLayout> = {};
<new GPUStorageTextureBindingLayout> = {format:<GPUTextureFormat>};
<new GPUBindGroupLayoutEntry> = {binding:<GPUIndex32>,visibility:<GPUShaderStageFlags>};
!extends GPUBindGroupLayoutDescriptor GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPUBindGroupLayoutDescriptor>;
<new sequence_GPUBindGroupLayoutEntry_> = [<GPUBindGroupLayoutEntry>];
<new GPUBindGroupLayoutEntry> = <sequence_GPUBindGroupLayoutEntry_>[0];
<new GPUBindGroupLayoutDescriptor> = {entries:<sequence_GPUBindGroupLayoutEntry_>};
<new GPUBufferBinding> = {buffer:<GPUBuffer>};
<new GPUBindGroupEntry> = {binding:<GPUIndex32>,resource:<GPUBindingResource>};
!extends GPUBindGroupDescriptor GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPUBindGroupDescriptor>;
<new sequence_GPUBindGroupEntry_> = [<GPUBindGroupEntry>];
<new GPUBindGroupEntry> = <sequence_GPUBindGroupEntry_>[0];
<new GPUBindGroupDescriptor> = {layout:<GPUBindGroupLayout>,entries:<sequence_GPUBindGroupEntry_>};
!extends GPUShaderModuleDescriptor GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPUShaderModuleDescriptor>;
<new GPUShaderModuleDescriptor> = {code:<UTF8String>};
!extends GPUPipelineDescriptorBase GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPUPipelineDescriptorBase>;
<new GPUPipelineDescriptorBase> = {};
<new GPUProgrammableStage> = {module:<GPUShaderModule>,entryPoint:<USVString>};
!extends GPUComputePipelineDescriptor GPUPipelineDescriptorBase;
<new GPUPipelineDescriptorBase> = <GPUComputePipelineDescriptor>;
<new GPUComputePipelineDescriptor> = {compute:<GPUProgrammableStage>};
<new GPUVertexAttribute> = {format:<GPUVertexFormat>,offset:<GPUSize64>,shaderLocation:<GPUIndex32>};
<new sequence_GPUVertexAttribute_> = [<GPUVertexAttribute>];
<new GPUVertexAttribute> = <sequence_GPUVertexAttribute_>[0];
<new GPUVertexBufferLayout> = {arrayStride:<GPUSize64>,attributes:<sequence_GPUVertexAttribute_>};
!extends GPUVertexState GPUProgrammableStage;
<new GPUProgrammableStage> = <GPUVertexState>;
<new GPUVertexState> = {};
<new GPUPrimitiveState> = {};
<new GPUMultisampleState> = {};
<new GPUBlendComponent> = {};
<new GPUBlendState> = {color:<GPUBlendComponent>,alpha:<GPUBlendComponent>};
<new GPUColorTargetState> = {format:<GPUTextureFormat>};
!extends GPUFragmentState GPUProgrammableStage;
<new GPUProgrammableStage> = <GPUFragmentState>;
<new sequence_GPUColorTargetState_> = [<GPUColorTargetState>];
<new GPUColorTargetState> = <sequence_GPUColorTargetState_>[0];
<new GPUFragmentState> = {targets:<sequence_GPUColorTargetState_>};
<new GPUStencilFaceState> = {};
<new GPUDepthStencilState> = {format:<GPUTextureFormat>};
!extends GPURenderPipelineDescriptor GPUPipelineDescriptorBase;
<new GPUPipelineDescriptorBase> = <GPURenderPipelineDescriptor>;
<new GPURenderPipelineDescriptor> = {vertex:<GPUVertexState>};
<new union_GPULoadOp1GPUColor_> = <GPULoadOp>;
<new union_GPULoadOp1GPUColor_> = <GPUColor>;
<new GPURenderPassColorAttachment> = {view:<GPUTextureView>,loadValue:<union_GPULoadOp1GPUColor_>,storeOp:<GPUStoreOp>};
<new union_GPULoadOp1float_> = <GPULoadOp>;
<new union_GPULoadOp1float_> = <float>;
<new union_GPULoadOp1GPUStencilValue_> = <GPULoadOp>;
<new union_GPULoadOp1GPUStencilValue_> = <GPUStencilValue>;
<new GPURenderPassDepthStencilAttachment> = {view:<GPUTextureView>,depthLoadValue:<union_GPULoadOp1float_>,depthStoreOp:<GPUStoreOp>,stencilLoadValue:<union_GPULoadOp1GPUStencilValue_>,stencilStoreOp:<GPUStoreOp>};
!extends GPURenderPassDescriptor GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPURenderPassDescriptor>;
<new sequence_GPURenderPassColorAttachment_> = [<GPURenderPassColorAttachment>];
<new GPURenderPassColorAttachment> = <sequence_GPURenderPassColorAttachment_>[0];
<new GPURenderPassDescriptor> = {colorAttachments:<sequence_GPURenderPassColorAttachment_>};
<new GPUImageDataLayout> = {bytesPerRow:<GPUSize32>};
!extends GPUImageCopyBuffer GPUImageDataLayout;
<new GPUImageDataLayout> = <GPUImageCopyBuffer>;
<new GPUImageCopyBuffer> = {buffer:<GPUBuffer>};
<new GPUImageCopyTexture> = {texture:<GPUTexture>};
<new GPUImageBitmapCopyView> = {};
!extends GPUCommandEncoderDescriptor GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPUCommandEncoderDescriptor>;
<new GPUCommandEncoderDescriptor> = {};
!extends GPUComputePassDescriptor GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPUComputePassDescriptor>;
<new GPUComputePassDescriptor> = {};
!extends GPUCommandBufferDescriptor GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPUCommandBufferDescriptor>;
<new GPUCommandBufferDescriptor> = {};
!extends GPURenderBundleDescriptor GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPURenderBundleDescriptor>;
<new GPURenderBundleDescriptor> = {};
!extends GPURenderBundleEncoderDescriptor GPURenderPassLayout;
<new GPURenderPassLayout> = <GPURenderBundleEncoderDescriptor>;
<new GPURenderBundleEncoderDescriptor> = {};
!extends GPURenderPassLayout GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPURenderPassLayout>;
<new sequence_GPUTextureFormat_> = [<GPUTextureFormat>];
<new GPUTextureFormat> = <sequence_GPUTextureFormat_>[0];
<new GPURenderPassLayout> = {colorFormats:<sequence_GPUTextureFormat_>};
!extends GPUQuerySetDescriptor GPUObjectDescriptorBase;
<new GPUObjectDescriptorBase> = <GPUQuerySetDescriptor>;
<new GPUQuerySetDescriptor> = {type:<GPUQueryType>,count:<GPUSize32>};
<new GPUCanvasConfiguration> = {device:<GPUDevice>,format:<GPUTextureFormat>};
<new WebrtcGlobalStatisticsReport> = {};
<new XRSessionInit> = {};
<new XRRenderStateInit> = {};
<new XRWebGLLayerInit> = {};
!extends WheelEventInit MouseEventInit;
<new MouseEventInit> = <WheelEventInit>;
<new WheelEventInit> = {};
<new WidevineCDMManifest> = {name:<DOMString>,description:<DOMString>,version:<DOMString>,x-cdm-module-versions:<DOMString>,x-cdm-interface-versions:<DOMString>,x-cdm-host-versions:<DOMString>,x-cdm-codecs:<DOMString>};
<new ScrollOptions> = {};
!extends ScrollToOptions ScrollOptions;
<new ScrollOptions> = <ScrollToOptions>;
<new ScrollToOptions> = {};
<new IdleRequestOptions> = {};
!extends WindowPostMessageOptions StructuredSerializeOptions;
<new StructuredSerializeOptions> = <WindowPostMessageOptions>;
<new WindowPostMessageOptions> = {};
<new WorkerOptions> = {};
<new WorkletOptions> = {};
<new MozXMLHttpRequestParameters> = {};
!extends XRInputSourceEventInit EventInit;
<new EventInit> = <XRInputSourceEventInit>;
<new XRInputSourceEventInit> = {frame:<XRFrame>,inputSource:<XRInputSource>};
!extends XRInputSourcesChangeEventInit EventInit;
<new EventInit> = <XRInputSourcesChangeEventInit>;
<new XRInputSourcesChangeEventInit> = {session:<XRSession>,added:<sequence_XRInputSource_>,removed:<sequence_XRInputSource_>};
!extends XRReferenceSpaceEventInit EventInit;
<new EventInit> = <XRReferenceSpaceEventInit>;
<new XRReferenceSpaceEventInit> = {referenceSpace:<XRReferenceSpace>};
!extends XRSessionEventInit EventInit;
<new EventInit> = <XRSessionEventInit>;
<new XRSessionEventInit> = {session:<XRSession>};
<new OpenPopupOptions> = {};
<new ActivateMenuItemOptions> = {};
<new DecodeSuccessCallback> = function(x){console.log("ok")};
<new DecodeErrorCallback> = function(x){console.log("ok")};
<new ConsoleInstanceDumpCallback> = function(x){console.log("ok")};
<new FunctionStringCallback> = function(x){console.log("ok")};
<new EventHandlerNonNull> = function(x){console.log("ok")};
<new OnBeforeUnloadEventHandlerNonNull> = function(x){console.log("ok")};
<new union_Event1DOMString_> = <Event>;
<new union_Event1DOMString_> = <DOMString>;
<new OnErrorEventHandlerNonNull> = function(x){console.log("ok")};
<new FileSystemEntryCallback> = function(x){console.log("ok")};
<new ErrorCallback> = function(x){console.log("ok")};
<new FileSystemEntriesCallback> = function(x){console.log("ok")};
<new FileCallback> = function(x){console.log("ok")};
<new FinalizationRegistryCleanupCallback> = function(x){console.log("ok")};
<new FontFaceSetForEachCallback> = function(x){console.log("ok")};
<new Function> = function(x){console.log("ok")};
<new VoidFunction> = function(x){console.log("ok")};
<new PositionCallback> = function(x){console.log("ok")};
<new PositionErrorCallback> = function(x){console.log("ok")};
<new PrintCallback> = function(x){console.log("ok")};
<new BlobCallback> = function(x){console.log("ok")};
<new InstallTriggerCallback> = function(x){console.log("ok")};
<new IntersectionCallback> = function(x){console.log("ok")};
<new LockGrantedCallback> = function(x){console.log("ok")};
<new MediaSessionActionHandler> = function(x){console.log("ok")};
<new MutationCallback> = function(x){console.log("ok")};
<new NavigatorUserMediaSuccessCallback> = function(x){console.log("ok")};
<new NavigatorUserMediaErrorCallback> = function(x){console.log("ok")};
<new NotificationPermissionCallback> = function(x){console.log("ok")};
<new PerformanceObserverCallback> = function(x){console.log("ok")};
<new PromiseJobCallback> = function(x){console.log("ok")};
<new AnyCallback> = function(x){console.log("ok")};
<new QueuingStrategySize> = function(x){console.log("ok")};
<new ReportingObserverCallback> = function(x){console.log("ok")};
<new sequence_ResizeObserverEntry_> = [<ResizeObserverEntry>];
<new ResizeObserverEntry> = <sequence_ResizeObserverEntry_>[0];
<new ResizeObserverCallback> = function(x){console.log("ok")};
<new GenerateAssertionCallback> = function(x){console.log("ok")};
<new ValidateAssertionCallback> = function(x){console.log("ok")};
<new RTCSessionDescriptionCallback> = function(x){console.log("ok")};
<new RTCPeerConnectionErrorCallback> = function(x){console.log("ok")};
<new RTCStatsCallback> = function(x){console.log("ok")};
<new mozPacketCallback> = function(x){console.log("ok")};
<new PeerConnectionLifecycleCallback> = function(x){console.log("ok")};
<new PromiseReturner> = function(x){console.log("ok")};
<new PromiseReturner2> = function(x){console.log("ok")};
<new U2FRegisterCallback> = function(x){console.log("ok")};
<new U2FSignCallback> = function(x){console.log("ok")};
<new UnderlyingSourceStartCallback> = function(x){console.log("ok")};
<new UnderlyingSourcePullCallback> = function(x){console.log("ok")};
<new UnderlyingSourceCancelCallback> = function(x){console.log("ok")};
<new WebrtcGlobalStatisticsCallback> = function(x){console.log("ok")};
<new WebrtcGlobalLoggingCallback> = function(x){console.log("ok")};
<new XRFrameRequestCallback> = function(x){console.log("ok")};
<new FrameRequestCallback> = function(x){console.log("ok")};
<new PromiseDocumentFlushedCallback> = function(x){console.log("ok")};
<new IdleRequestCallback> = function(x){console.log("ok")};
<new EventHandler> = <ServiceWorker>.onerror;
<ServiceWorker>.onerror = <EventHandler>;
<new EventHandler> = <SharedWorker>.onerror;
<SharedWorker>.onerror = <EventHandler>;
<new EventHandler> = <Worker>.onerror;
<Worker>.onerror = <EventHandler>;
<new DOMString> = <Element>.role;
<Element>.role = <DOMString>;
<new Animation> = <Element>.animate(<object>);
<new Animation> = <Element>.animate(<object>,<UnrestrictedDoubleOrKeyframeAnimationOptions>);
<new sequence_Animation_> = <Element>.getAnimations();
<new sequence_Animation_> = <Element>.getAnimations(<GetAnimationsOptions>);
<new DOMString> = <Element>.ariaAtomic;
<Element>.ariaAtomic = <DOMString>;
<new DOMString> = <Element>.ariaAutoComplete;
<Element>.ariaAutoComplete = <DOMString>;
<new DOMString> = <Element>.ariaBusy;
<Element>.ariaBusy = <DOMString>;
<new DOMString> = <Element>.ariaChecked;
<Element>.ariaChecked = <DOMString>;
<new DOMString> = <Element>.ariaColCount;
<Element>.ariaColCount = <DOMString>;
<new DOMString> = <Element>.ariaColIndex;
<Element>.ariaColIndex = <DOMString>;
<new DOMString> = <Element>.ariaColIndexText;
<Element>.ariaColIndexText = <DOMString>;
<new DOMString> = <Element>.ariaColSpan;
<Element>.ariaColSpan = <DOMString>;
<new DOMString> = <Element>.ariaCurrent;
<Element>.ariaCurrent = <DOMString>;
<new DOMString> = <Element>.ariaDescription;
<Element>.ariaDescription = <DOMString>;
<new DOMString> = <Element>.ariaDisabled;
<Element>.ariaDisabled = <DOMString>;
<new DOMString> = <Element>.ariaExpanded;
<Element>.ariaExpanded = <DOMString>;
<new DOMString> = <Element>.ariaHasPopup;
<Element>.ariaHasPopup = <DOMString>;
<new DOMString> = <Element>.ariaHidden;
<Element>.ariaHidden = <DOMString>;
<new DOMString> = <Element>.ariaInvalid;
<Element>.ariaInvalid = <DOMString>;
<new DOMString> = <Element>.ariaKeyShortcuts;
<Element>.ariaKeyShortcuts = <DOMString>;
<new DOMString> = <Element>.ariaLabel;
<Element>.ariaLabel = <DOMString>;
<new DOMString> = <Element>.ariaLevel;
<Element>.ariaLevel = <DOMString>;
<new DOMString> = <Element>.ariaLive;
<Element>.ariaLive = <DOMString>;
<new DOMString> = <Element>.ariaModal;
<Element>.ariaModal = <DOMString>;
<new DOMString> = <Element>.ariaMultiLine;
<Element>.ariaMultiLine = <DOMString>;
<new DOMString> = <Element>.ariaMultiSelectable;
<Element>.ariaMultiSelectable = <DOMString>;
<new DOMString> = <Element>.ariaOrientation;
<Element>.ariaOrientation = <DOMString>;
<new DOMString> = <Element>.ariaPlaceholder;
<Element>.ariaPlaceholder = <DOMString>;
<new DOMString> = <Element>.ariaPosInSet;
<Element>.ariaPosInSet = <DOMString>;
<new DOMString> = <Element>.ariaPressed;
<Element>.ariaPressed = <DOMString>;
<new DOMString> = <Element>.ariaReadOnly;
<Element>.ariaReadOnly = <DOMString>;
<new DOMString> = <Element>.ariaRelevant;
<Element>.ariaRelevant = <DOMString>;
<new DOMString> = <Element>.ariaRequired;
<Element>.ariaRequired = <DOMString>;
<new DOMString> = <Element>.ariaRoleDescription;
<Element>.ariaRoleDescription = <DOMString>;
<new DOMString> = <Element>.ariaRowCount;
<Element>.ariaRowCount = <DOMString>;
<new DOMString> = <Element>.ariaRowIndex;
<Element>.ariaRowIndex = <DOMString>;
<new DOMString> = <Element>.ariaRowIndexText;
<Element>.ariaRowIndexText = <DOMString>;
<new DOMString> = <Element>.ariaRowSpan;
<Element>.ariaRowSpan = <DOMString>;
<new DOMString> = <Element>.ariaSelected;
<Element>.ariaSelected = <DOMString>;
<new DOMString> = <Element>.ariaSetSize;
<Element>.ariaSetSize = <DOMString>;
<new DOMString> = <Element>.ariaSort;
<Element>.ariaSort = <DOMString>;
<new DOMString> = <Element>.ariaValueMax;
<Element>.ariaValueMax = <DOMString>;
<new DOMString> = <Element>.ariaValueMin;
<Element>.ariaValueMin = <DOMString>;
<new DOMString> = <Element>.ariaValueNow;
<Element>.ariaValueNow = <DOMString>;
<new DOMString> = <Element>.ariaValueText;
<Element>.ariaValueText = <DOMString>;
<new boolean> = <DynamicsCompressorNode>.passThrough;
<DynamicsCompressorNode>.passThrough = <boolean>;
<new boolean> = <IIRFilterNode>.passThrough;
<IIRFilterNode>.passThrough = <boolean>;
<new boolean> = <MediaStreamAudioSourceNode>.passThrough;
<MediaStreamAudioSourceNode>.passThrough = <boolean>;
<new boolean> = <AnalyserNode>.passThrough;
<AnalyserNode>.passThrough = <boolean>;
<new boolean> = <MediaStreamTrackAudioSourceNode>.passThrough;
<MediaStreamTrackAudioSourceNode>.passThrough = <boolean>;
<new boolean> = <WaveShaperNode>.passThrough;
<WaveShaperNode>.passThrough = <boolean>;
<new boolean> = <OscillatorNode>.passThrough;
<OscillatorNode>.passThrough = <boolean>;
<new boolean> = <AudioBufferSourceNode>.passThrough;
<AudioBufferSourceNode>.passThrough = <boolean>;
<new boolean> = <MediaElementAudioSourceNode>.passThrough;
<MediaElementAudioSourceNode>.passThrough = <boolean>;
<new boolean> = <StereoPannerNode>.passThrough;
<StereoPannerNode>.passThrough = <boolean>;
<new boolean> = <PannerNode>.passThrough;
<PannerNode>.passThrough = <boolean>;
<new boolean> = <GainNode>.passThrough;
<GainNode>.passThrough = <boolean>;
<new boolean> = <BiquadFilterNode>.passThrough;
<BiquadFilterNode>.passThrough = <boolean>;
<new boolean> = <DelayNode>.passThrough;
<DelayNode>.passThrough = <boolean>;
<new boolean> = <ConvolverNode>.passThrough;
<ConvolverNode>.passThrough = <boolean>;
<new boolean> = <ScriptProcessorNode>.passThrough;
<ScriptProcessorNode>.passThrough = <boolean>;
<new void> = <CanvasRenderingContext2D>.save();
<new void> = <CanvasRenderingContext2D>.restore();
<new void> = <CanvasRenderingContext2D>.scale(<double>,<double>);
<new void> = <CanvasRenderingContext2D>.rotate(<double>);
<new void> = <CanvasRenderingContext2D>.translate(<double>,<double>);
<new void> = <CanvasRenderingContext2D>.transform(<double>,<double>,<double>,<double>,<double>,<double>);
<new DOMMatrix> = <CanvasRenderingContext2D>.getTransform();
<new void> = <CanvasRenderingContext2D>.setTransform(<double>,<double>,<double>,<double>,<double>,<double>);
<new void> = <CanvasRenderingContext2D>.setTransform();
<new void> = <CanvasRenderingContext2D>.setTransform(<DOMMatrix2DInit>);
<new void> = <CanvasRenderingContext2D>.resetTransform();
<new unrestricted double> = <CanvasRenderingContext2D>.globalAlpha;
<CanvasRenderingContext2D>.globalAlpha = <unrestricted double>;
<new DOMString> = <CanvasRenderingContext2D>.globalCompositeOperation;
<CanvasRenderingContext2D>.globalCompositeOperation = <DOMString>;
<new boolean> = <CanvasRenderingContext2D>.imageSmoothingEnabled;
<CanvasRenderingContext2D>.imageSmoothingEnabled = <boolean>;
<new union_UTF8String1CanvasGradient1CanvasPattern_> = <UTF8String>;
<new union_UTF8String1CanvasGradient1CanvasPattern_> = <CanvasGradient>;
<new union_UTF8String1CanvasGradient1CanvasPattern_> = <CanvasPattern>;
<new union_UTF8String1CanvasGradient1CanvasPattern_> = <CanvasRenderingContext2D>.strokeStyle;
<CanvasRenderingContext2D>.strokeStyle = <union_UTF8String1CanvasGradient1CanvasPattern_>;
<new union_UTF8String1CanvasGradient1CanvasPattern_> = <CanvasRenderingContext2D>.fillStyle;
<CanvasRenderingContext2D>.fillStyle = <union_UTF8String1CanvasGradient1CanvasPattern_>;
<new CanvasGradient> = <CanvasRenderingContext2D>.createLinearGradient(<double>,<double>,<double>,<double>);
<new CanvasGradient> = <CanvasRenderingContext2D>.createRadialGradient(<double>,<double>,<double>,<double>,<double>,<double>);
<new CanvasGradient> = <CanvasRenderingContext2D>.createConicGradient(<double>,<double>,<double>);
<new CanvasPattern> = <CanvasRenderingContext2D>.createPattern(<CanvasImageSource>,<DOMString>);
<new double> = <CanvasRenderingContext2D>.shadowOffsetX;
<CanvasRenderingContext2D>.shadowOffsetX = <double>;
<new double> = <CanvasRenderingContext2D>.shadowOffsetY;
<CanvasRenderingContext2D>.shadowOffsetY = <double>;
<new double> = <CanvasRenderingContext2D>.shadowBlur;
<CanvasRenderingContext2D>.shadowBlur = <double>;
<new UTF8String> = <CanvasRenderingContext2D>.shadowColor;
<CanvasRenderingContext2D>.shadowColor = <UTF8String>;
<new UTF8String> = <CanvasRenderingContext2D>.filter;
<CanvasRenderingContext2D>.filter = <UTF8String>;
<new void> = <CanvasRenderingContext2D>.clearRect(<double>,<double>,<double>,<double>);
<new void> = <CanvasRenderingContext2D>.fillRect(<double>,<double>,<double>,<double>);
<new void> = <CanvasRenderingContext2D>.strokeRect(<double>,<double>,<double>,<double>);
<new void> = <CanvasRenderingContext2D>.beginPath();
<new void> = <CanvasRenderingContext2D>.fill();
<new void> = <CanvasRenderingContext2D>.fill(<CanvasWindingRule>);
<new void> = <CanvasRenderingContext2D>.fill(<Path2D>);
<new void> = <CanvasRenderingContext2D>.fill(<Path2D>,<CanvasWindingRule>);
<new void> = <CanvasRenderingContext2D>.stroke();
<new void> = <CanvasRenderingContext2D>.stroke(<Path2D>);
<new void> = <CanvasRenderingContext2D>.clip();
<new void> = <CanvasRenderingContext2D>.clip(<CanvasWindingRule>);
<new void> = <CanvasRenderingContext2D>.clip(<Path2D>);
<new void> = <CanvasRenderingContext2D>.clip(<Path2D>,<CanvasWindingRule>);
<CanvasRenderingContext2D>.isPointInPath(<unrestricted double>,<unrestricted double>);
<CanvasRenderingContext2D>.isPointInPath(<unrestricted double>,<unrestricted double>,<CanvasWindingRule>);
<CanvasRenderingContext2D>.isPointInPath(<Path2D>,<unrestricted double>,<unrestricted double>);
<CanvasRenderingContext2D>.isPointInPath(<Path2D>,<unrestricted double>,<unrestricted double>,<CanvasWindingRule>);
<CanvasRenderingContext2D>.isPointInStroke(<double>,<double>);
<CanvasRenderingContext2D>.isPointInStroke(<Path2D>,<unrestricted double>,<unrestricted double>);
<new void> = <CanvasRenderingContext2D>.drawFocusIfNeeded(<Element>);
<new void> = <CanvasRenderingContext2D>.fillText(<DOMString>,<double>,<double>);
<new void> = <CanvasRenderingContext2D>.fillText(<DOMString>,<double>,<double>,<double>);
<new void> = <CanvasRenderingContext2D>.strokeText(<DOMString>,<double>,<double>);
<new void> = <CanvasRenderingContext2D>.strokeText(<DOMString>,<double>,<double>,<double>);
<new TextMetrics> = <CanvasRenderingContext2D>.measureText(<DOMString>);
<new void> = <CanvasRenderingContext2D>.drawImage(<CanvasImageSource>,<double>,<double>);
<new void> = <CanvasRenderingContext2D>.drawImage(<CanvasImageSource>,<double>,<double>,<double>,<double>);
<new void> = <CanvasRenderingContext2D>.drawImage(<CanvasImageSource>,<double>,<double>,<double>,<double>,<double>,<double>,<double>,<double>);
<new ImageData> = <CanvasRenderingContext2D>.createImageData(<long>,<long>);
<new ImageData> = <CanvasRenderingContext2D>.createImageData(<ImageData>);
<new ImageData> = <CanvasRenderingContext2D>.getImageData(<long>,<long>,<long>,<long>);
<new void> = <CanvasRenderingContext2D>.putImageData(<ImageData>,<long>,<long>);
<new void> = <CanvasRenderingContext2D>.putImageData(<ImageData>,<long>,<long>,<long>,<long>,<long>,<long>);
<new double> = <CanvasRenderingContext2D>.lineWidth;
<CanvasRenderingContext2D>.lineWidth = <double>;
<new DOMString> = <CanvasRenderingContext2D>.lineCap;
<CanvasRenderingContext2D>.lineCap = <DOMString>;
<new DOMString> = <CanvasRenderingContext2D>.lineJoin;
<CanvasRenderingContext2D>.lineJoin = <DOMString>;
<new double> = <CanvasRenderingContext2D>.miterLimit;
<CanvasRenderingContext2D>.miterLimit = <double>;
<new void> = <CanvasRenderingContext2D>.setLineDash(<sequence_double_>);
<new sequence_double_> = <CanvasRenderingContext2D>.getLineDash();
<new double> = <CanvasRenderingContext2D>.lineDashOffset;
<CanvasRenderingContext2D>.lineDashOffset = <double>;
<new UTF8String> = <CanvasRenderingContext2D>.font;
<CanvasRenderingContext2D>.font = <UTF8String>;
<new DOMString> = <CanvasRenderingContext2D>.textAlign;
<CanvasRenderingContext2D>.textAlign = <DOMString>;
<new DOMString> = <CanvasRenderingContext2D>.textBaseline;
<CanvasRenderingContext2D>.textBaseline = <DOMString>;
<new void> = <Path2D>.closePath();
<new void> = <CanvasRenderingContext2D>.closePath();
<new void> = <Path2D>.moveTo(<double>,<double>);
<new void> = <CanvasRenderingContext2D>.moveTo(<double>,<double>);
<new void> = <Path2D>.lineTo(<double>,<double>);
<new void> = <CanvasRenderingContext2D>.lineTo(<double>,<double>);
<new void> = <Path2D>.quadraticCurveTo(<double>,<double>,<double>,<double>);
<new void> = <CanvasRenderingContext2D>.quadraticCurveTo(<double>,<double>,<double>,<double>);
<new void> = <Path2D>.bezierCurveTo(<double>,<double>,<double>,<double>,<double>,<double>);
<new void> = <CanvasRenderingContext2D>.bezierCurveTo(<double>,<double>,<double>,<double>,<double>,<double>);
<new void> = <Path2D>.arcTo(<double>,<double>,<double>,<double>,<double>);
<new void> = <CanvasRenderingContext2D>.arcTo(<double>,<double>,<double>,<double>,<double>);
<new void> = <Path2D>.rect(<double>,<double>,<double>,<double>);
<new void> = <CanvasRenderingContext2D>.rect(<double>,<double>,<double>,<double>);
<new void> = <Path2D>.arc(<double>,<double>,<double>,<double>,<double>);
<new void> = <Path2D>.arc(<double>,<double>,<double>,<double>,<double>,<boolean>);
<new void> = <CanvasRenderingContext2D>.arc(<double>,<double>,<double>,<double>,<double>);
<new void> = <CanvasRenderingContext2D>.arc(<double>,<double>,<double>,<double>,<double>,<boolean>);
<new void> = <Path2D>.ellipse(<double>,<double>,<double>,<double>,<double>,<double>,<double>);
<new void> = <Path2D>.ellipse(<double>,<double>,<double>,<double>,<double>,<double>,<double>,<boolean>);
<new void> = <CanvasRenderingContext2D>.ellipse(<double>,<double>,<double>,<double>,<double>,<double>,<double>);
<new void> = <CanvasRenderingContext2D>.ellipse(<double>,<double>,<double>,<double>,<double>,<double>,<double>,<boolean>);
<new void> = <CanvasRenderingContext2D>.addHitRegion();
<new void> = <CanvasRenderingContext2D>.addHitRegion(<HitRegionOptions>);
<new void> = <CanvasRenderingContext2D>.removeHitRegion(<DOMString>);
<new void> = <CanvasRenderingContext2D>.clearHitRegions();
<new union_Node1DOMString_> = <Node>;
<new union_Node1DOMString_> = <DOMString>;
<new void> = <CharacterData>.before();
<new void> = <CharacterData>.before(<union_Node1DOMString_>);
<new void> = <DocumentType>.before();
<new void> = <DocumentType>.before(<union_Node1DOMString_>);
<new void> = <Element>.before();
<new void> = <Element>.before(<union_Node1DOMString_>);
<new void> = <CharacterData>.after();
<new void> = <CharacterData>.after(<union_Node1DOMString_>);
<new void> = <DocumentType>.after();
<new void> = <DocumentType>.after(<union_Node1DOMString_>);
<new void> = <Element>.after();
<new void> = <Element>.after(<union_Node1DOMString_>);
<new void> = <CharacterData>.replaceWith();
<new void> = <CharacterData>.replaceWith(<union_Node1DOMString_>);
<new void> = <DocumentType>.replaceWith();
<new void> = <DocumentType>.replaceWith(<union_Node1DOMString_>);
<new void> = <Element>.replaceWith();
<new void> = <Element>.replaceWith(<union_Node1DOMString_>);
<new void> = <CharacterData>.remove();
<new void> = <DocumentType>.remove();
<new void> = <Element>.remove();
<new Element> = <CharacterData>.previousElementSibling;
<new Element> = <Element>.previousElementSibling;
<new Element> = <CharacterData>.nextElementSibling;
<new Element> = <Element>.nextElementSibling;
<new Crypto> = <WorkerGlobalScope>.crypto;
<new Crypto> = <Window>.crypto;
<new Element> = <ShadowRoot>.elementFromPoint(<float>,<float>);
<new Element> = <Document>.elementFromPoint(<float>,<float>);
<new sequence_Element_> = <ShadowRoot>.elementsFromPoint(<float>,<float>);
<new sequence_Element_> = <Document>.elementsFromPoint(<float>,<float>);
<new Node> = <ShadowRoot>.nodeFromPoint(<float>,<float>);
<new Node> = <Document>.nodeFromPoint(<float>,<float>);
<new sequence_Node_> = <ShadowRoot>.nodesFromPoint(<float>,<float>);
<new sequence_Node_> = <Document>.nodesFromPoint(<float>,<float>);
<new Element> = <ShadowRoot>.activeElement;
<new Element> = <Document>.activeElement;
<new StyleSheetList> = <ShadowRoot>.styleSheets;
<new StyleSheetList> = <Document>.styleSheets;
<new Element> = <ShadowRoot>.pointerLockElement;
<new Element> = <Document>.pointerLockElement;
<new Element> = <ShadowRoot>.fullscreenElement;
<new Element> = <Document>.fullscreenElement;
<new Element> = <ShadowRoot>.mozFullScreenElement;
<new Element> = <Document>.mozFullScreenElement;
<new sequence_Animation_> = <ShadowRoot>.getAnimations();
<new sequence_Animation_> = <Document>.getAnimations();
<new sequence_CSSStyleSheet_> = [<CSSStyleSheet>];
<new CSSStyleSheet> = <sequence_CSSStyleSheet_>[0];
<new sequence_CSSStyleSheet_> = <ShadowRoot>.adoptedStyleSheets;
<ShadowRoot>.adoptedStyleSheets = <sequence_CSSStyleSheet_>;
<new sequence_CSSStyleSheet_> = <Document>.adoptedStyleSheets;
<Document>.adoptedStyleSheets = <sequence_CSSStyleSheet_>;
<new unsigned long> = <Exception>.result;
<new unsigned long> = <DOMException>.result;
<new DOMString> = <Exception>.filename;
<new DOMString> = <DOMException>.filename;
<new unsigned long> = <Exception>.lineNumber;
<new unsigned long> = <DOMException>.lineNumber;
<new unsigned long> = <Exception>.columnNumber;
<new unsigned long> = <DOMException>.columnNumber;
<new StackFrame> = <Exception>.location;
<new StackFrame> = <DOMException>.location;
<new nsISupports> = <Exception>.data;
<new nsISupports> = <DOMException>.data;
<new DOMString> = <Exception>.stack;
<new DOMString> = <DOMException>.stack;
<new DOMRequestReadyState> = <DOMRequest>.readyState;
<new any> = <DOMRequest>.result;
<new DOMException> = <DOMRequest>.error;
<new EventHandler> = <DOMRequest>.onsuccess;
<DOMRequest>.onsuccess = <EventHandler>;
<new EventHandler> = <DOMRequest>.onerror;
<DOMRequest>.onerror = <EventHandler>;
<new DOMStringMap> = <XULElement>.dataset;
<new DOMStringMap> = <HTMLElement>.dataset;
<new DOMStringMap> = <SVGElement>.dataset;
<new DOMStringMap> = <MathMLElement>.dataset;
<new long> = <XULElement>.tabIndex;
<XULElement>.tabIndex = <long>;
<new long> = <HTMLElement>.tabIndex;
<HTMLElement>.tabIndex = <long>;
<new long> = <SVGElement>.tabIndex;
<SVGElement>.tabIndex = <long>;
<new long> = <MathMLElement>.tabIndex;
<MathMLElement>.tabIndex = <long>;
<new void> = <XULElement>.focus();
<new void> = <XULElement>.focus(<FocusOptions>);
<new void> = <HTMLElement>.focus();
<new void> = <HTMLElement>.focus(<FocusOptions>);
<new void> = <SVGElement>.focus();
<new void> = <SVGElement>.focus(<FocusOptions>);
<new void> = <MathMLElement>.focus();
<new void> = <MathMLElement>.focus(<FocusOptions>);
<new void> = <XULElement>.blur();
<new void> = <HTMLElement>.blur();
<new void> = <SVGElement>.blur();
<new void> = <MathMLElement>.blur();
<new CSSStyleDeclaration> = <XULElement>.style;
<new CSSStyleDeclaration> = <HTMLElement>.style;
<new CSSStyleDeclaration> = <SVGElement>.style;
<new CSSStyleDeclaration> = <MathMLElement>.style;
<new EventHandler> = <HTMLElement>.onabort;
<HTMLElement>.onabort = <EventHandler>;
<new EventHandler> = <XULElement>.onabort;
<XULElement>.onabort = <EventHandler>;
<new EventHandler> = <MathMLElement>.onabort;
<MathMLElement>.onabort = <EventHandler>;
<new EventHandler> = <SVGElement>.onabort;
<SVGElement>.onabort = <EventHandler>;
<new EventHandler> = <Document>.onabort;
<Document>.onabort = <EventHandler>;
<new EventHandler> = <Window>.onabort;
<Window>.onabort = <EventHandler>;
<new EventHandler> = <HTMLElement>.onblur;
<HTMLElement>.onblur = <EventHandler>;
<new EventHandler> = <XULElement>.onblur;
<XULElement>.onblur = <EventHandler>;
<new EventHandler> = <MathMLElement>.onblur;
<MathMLElement>.onblur = <EventHandler>;
<new EventHandler> = <SVGElement>.onblur;
<SVGElement>.onblur = <EventHandler>;
<new EventHandler> = <Document>.onblur;
<Document>.onblur = <EventHandler>;
<new EventHandler> = <Window>.onblur;
<Window>.onblur = <EventHandler>;
<new EventHandler> = <HTMLElement>.onfocus;
<HTMLElement>.onfocus = <EventHandler>;
<new EventHandler> = <XULElement>.onfocus;
<XULElement>.onfocus = <EventHandler>;
<new EventHandler> = <MathMLElement>.onfocus;
<MathMLElement>.onfocus = <EventHandler>;
<new EventHandler> = <SVGElement>.onfocus;
<SVGElement>.onfocus = <EventHandler>;
<new EventHandler> = <Document>.onfocus;
<Document>.onfocus = <EventHandler>;
<new EventHandler> = <Window>.onfocus;
<Window>.onfocus = <EventHandler>;
<new EventHandler> = <HTMLElement>.onauxclick;
<HTMLElement>.onauxclick = <EventHandler>;
<new EventHandler> = <XULElement>.onauxclick;
<XULElement>.onauxclick = <EventHandler>;
<new EventHandler> = <MathMLElement>.onauxclick;
<MathMLElement>.onauxclick = <EventHandler>;
<new EventHandler> = <SVGElement>.onauxclick;
<SVGElement>.onauxclick = <EventHandler>;
<new EventHandler> = <Document>.onauxclick;
<Document>.onauxclick = <EventHandler>;
<new EventHandler> = <Window>.onauxclick;
<Window>.onauxclick = <EventHandler>;
<new EventHandler> = <HTMLElement>.onbeforeinput;
<HTMLElement>.onbeforeinput = <EventHandler>;
<new EventHandler> = <XULElement>.onbeforeinput;
<XULElement>.onbeforeinput = <EventHandler>;
<new EventHandler> = <MathMLElement>.onbeforeinput;
<MathMLElement>.onbeforeinput = <EventHandler>;
<new EventHandler> = <SVGElement>.onbeforeinput;
<SVGElement>.onbeforeinput = <EventHandler>;
<new EventHandler> = <Document>.onbeforeinput;
<Document>.onbeforeinput = <EventHandler>;
<new EventHandler> = <Window>.onbeforeinput;
<Window>.onbeforeinput = <EventHandler>;
<new EventHandler> = <HTMLElement>.oncanplay;
<HTMLElement>.oncanplay = <EventHandler>;
<new EventHandler> = <XULElement>.oncanplay;
<XULElement>.oncanplay = <EventHandler>;
<new EventHandler> = <MathMLElement>.oncanplay;
<MathMLElement>.oncanplay = <EventHandler>;
<new EventHandler> = <SVGElement>.oncanplay;
<SVGElement>.oncanplay = <EventHandler>;
<new EventHandler> = <Document>.oncanplay;
<Document>.oncanplay = <EventHandler>;
<new EventHandler> = <Window>.oncanplay;
<Window>.oncanplay = <EventHandler>;
<new EventHandler> = <HTMLElement>.oncanplaythrough;
<HTMLElement>.oncanplaythrough = <EventHandler>;
<new EventHandler> = <XULElement>.oncanplaythrough;
<XULElement>.oncanplaythrough = <EventHandler>;
<new EventHandler> = <MathMLElement>.oncanplaythrough;
<MathMLElement>.oncanplaythrough = <EventHandler>;
<new EventHandler> = <SVGElement>.oncanplaythrough;
<SVGElement>.oncanplaythrough = <EventHandler>;
<new EventHandler> = <Document>.oncanplaythrough;
<Document>.oncanplaythrough = <EventHandler>;
<new EventHandler> = <Window>.oncanplaythrough;
<Window>.oncanplaythrough = <EventHandler>;
<new EventHandler> = <HTMLElement>.onchange;
<HTMLElement>.onchange = <EventHandler>;
<new EventHandler> = <XULElement>.onchange;
<XULElement>.onchange = <EventHandler>;
<new EventHandler> = <MathMLElement>.onchange;
<MathMLElement>.onchange = <EventHandler>;
<new EventHandler> = <SVGElement>.onchange;
<SVGElement>.onchange = <EventHandler>;
<new EventHandler> = <Document>.onchange;
<Document>.onchange = <EventHandler>;
<new EventHandler> = <Window>.onchange;
<Window>.onchange = <EventHandler>;
<new EventHandler> = <HTMLElement>.onclick;
<HTMLElement>.onclick = <EventHandler>;
<new EventHandler> = <XULElement>.onclick;
<XULElement>.onclick = <EventHandler>;
<new EventHandler> = <MathMLElement>.onclick;
<MathMLElement>.onclick = <EventHandler>;
<new EventHandler> = <SVGElement>.onclick;
<SVGElement>.onclick = <EventHandler>;
<new EventHandler> = <Document>.onclick;
<Document>.onclick = <EventHandler>;
<new EventHandler> = <Window>.onclick;
<Window>.onclick = <EventHandler>;
<new EventHandler> = <HTMLElement>.onclose;
<HTMLElement>.onclose = <EventHandler>;
<new EventHandler> = <XULElement>.onclose;
<XULElement>.onclose = <EventHandler>;
<new EventHandler> = <MathMLElement>.onclose;
<MathMLElement>.onclose = <EventHandler>;
<new EventHandler> = <SVGElement>.onclose;
<SVGElement>.onclose = <EventHandler>;
<new EventHandler> = <Document>.onclose;
<Document>.onclose = <EventHandler>;
<new EventHandler> = <Window>.onclose;
<Window>.onclose = <EventHandler>;
<new EventHandler> = <HTMLElement>.oncontextmenu;
<HTMLElement>.oncontextmenu = <EventHandler>;
<new EventHandler> = <XULElement>.oncontextmenu;
<XULElement>.oncontextmenu = <EventHandler>;
<new EventHandler> = <MathMLElement>.oncontextmenu;
<MathMLElement>.oncontextmenu = <EventHandler>;
<new EventHandler> = <SVGElement>.oncontextmenu;
<SVGElement>.oncontextmenu = <EventHandler>;
<new EventHandler> = <Document>.oncontextmenu;
<Document>.oncontextmenu = <EventHandler>;
<new EventHandler> = <Window>.oncontextmenu;
<Window>.oncontextmenu = <EventHandler>;
<new EventHandler> = <HTMLElement>.oncuechange;
<HTMLElement>.oncuechange = <EventHandler>;
<new EventHandler> = <XULElement>.oncuechange;
<XULElement>.oncuechange = <EventHandler>;
<new EventHandler> = <MathMLElement>.oncuechange;
<MathMLElement>.oncuechange = <EventHandler>;
<new EventHandler> = <SVGElement>.oncuechange;
<SVGElement>.oncuechange = <EventHandler>;
<new EventHandler> = <Document>.oncuechange;
<Document>.oncuechange = <EventHandler>;
<new EventHandler> = <Window>.oncuechange;
<Window>.oncuechange = <EventHandler>;
<new EventHandler> = <HTMLElement>.ondblclick;
<HTMLElement>.ondblclick = <EventHandler>;
<new EventHandler> = <XULElement>.ondblclick;
<XULElement>.ondblclick = <EventHandler>;
<new EventHandler> = <MathMLElement>.ondblclick;
<MathMLElement>.ondblclick = <EventHandler>;
<new EventHandler> = <SVGElement>.ondblclick;
<SVGElement>.ondblclick = <EventHandler>;
<new EventHandler> = <Document>.ondblclick;
<Document>.ondblclick = <EventHandler>;
<new EventHandler> = <Window>.ondblclick;
<Window>.ondblclick = <EventHandler>;
<new EventHandler> = <HTMLElement>.ondrag;
<HTMLElement>.ondrag = <EventHandler>;
<new EventHandler> = <XULElement>.ondrag;
<XULElement>.ondrag = <EventHandler>;
<new EventHandler> = <MathMLElement>.ondrag;
<MathMLElement>.ondrag = <EventHandler>;
<new EventHandler> = <SVGElement>.ondrag;
<SVGElement>.ondrag = <EventHandler>;
<new EventHandler> = <Document>.ondrag;
<Document>.ondrag = <EventHandler>;
<new EventHandler> = <Window>.ondrag;
<Window>.ondrag = <EventHandler>;
<new EventHandler> = <HTMLElement>.ondragend;
<HTMLElement>.ondragend = <EventHandler>;
<new EventHandler> = <XULElement>.ondragend;
<XULElement>.ondragend = <EventHandler>;
<new EventHandler> = <MathMLElement>.ondragend;
<MathMLElement>.ondragend = <EventHandler>;
<new EventHandler> = <SVGElement>.ondragend;
<SVGElement>.ondragend = <EventHandler>;
<new EventHandler> = <Document>.ondragend;
<Document>.ondragend = <EventHandler>;
<new EventHandler> = <Window>.ondragend;
<Window>.ondragend = <EventHandler>;
<new EventHandler> = <HTMLElement>.ondragenter;
<HTMLElement>.ondragenter = <EventHandler>;
<new EventHandler> = <XULElement>.ondragenter;
<XULElement>.ondragenter = <EventHandler>;
<new EventHandler> = <MathMLElement>.ondragenter;
<MathMLElement>.ondragenter = <EventHandler>;
<new EventHandler> = <SVGElement>.ondragenter;
<SVGElement>.ondragenter = <EventHandler>;
<new EventHandler> = <Document>.ondragenter;
<Document>.ondragenter = <EventHandler>;
<new EventHandler> = <Window>.ondragenter;
<Window>.ondragenter = <EventHandler>;
<new EventHandler> = <HTMLElement>.ondragexit;
<HTMLElement>.ondragexit = <EventHandler>;
<new EventHandler> = <XULElement>.ondragexit;
<XULElement>.ondragexit = <EventHandler>;
<new EventHandler> = <MathMLElement>.ondragexit;
<MathMLElement>.ondragexit = <EventHandler>;
<new EventHandler> = <SVGElement>.ondragexit;
<SVGElement>.ondragexit = <EventHandler>;
<new EventHandler> = <Document>.ondragexit;
<Document>.ondragexit = <EventHandler>;
<new EventHandler> = <Window>.ondragexit;
<Window>.ondragexit = <EventHandler>;
<new EventHandler> = <HTMLElement>.ondragleave;
<HTMLElement>.ondragleave = <EventHandler>;
<new EventHandler> = <XULElement>.ondragleave;
<XULElement>.ondragleave = <EventHandler>;
<new EventHandler> = <MathMLElement>.ondragleave;
<MathMLElement>.ondragleave = <EventHandler>;
<new EventHandler> = <SVGElement>.ondragleave;
<SVGElement>.ondragleave = <EventHandler>;
<new EventHandler> = <Document>.ondragleave;
<Document>.ondragleave = <EventHandler>;
<new EventHandler> = <Window>.ondragleave;
<Window>.ondragleave = <EventHandler>;
<new EventHandler> = <HTMLElement>.ondragover;
<HTMLElement>.ondragover = <EventHandler>;
<new EventHandler> = <XULElement>.ondragover;
<XULElement>.ondragover = <EventHandler>;
<new EventHandler> = <MathMLElement>.ondragover;
<MathMLElement>.ondragover = <EventHandler>;
<new EventHandler> = <SVGElement>.ondragover;
<SVGElement>.ondragover = <EventHandler>;
<new EventHandler> = <Document>.ondragover;
<Document>.ondragover = <EventHandler>;
<new EventHandler> = <Window>.ondragover;
<Window>.ondragover = <EventHandler>;
<new EventHandler> = <HTMLElement>.ondragstart;
<HTMLElement>.ondragstart = <EventHandler>;
<new EventHandler> = <XULElement>.ondragstart;
<XULElement>.ondragstart = <EventHandler>;
<new EventHandler> = <MathMLElement>.ondragstart;
<MathMLElement>.ondragstart = <EventHandler>;
<new EventHandler> = <SVGElement>.ondragstart;
<SVGElement>.ondragstart = <EventHandler>;
<new EventHandler> = <Document>.ondragstart;
<Document>.ondragstart = <EventHandler>;
<new EventHandler> = <Window>.ondragstart;
<Window>.ondragstart = <EventHandler>;
<new EventHandler> = <HTMLElement>.ondrop;
<HTMLElement>.ondrop = <EventHandler>;
<new EventHandler> = <XULElement>.ondrop;
<XULElement>.ondrop = <EventHandler>;
<new EventHandler> = <MathMLElement>.ondrop;
<MathMLElement>.ondrop = <EventHandler>;
<new EventHandler> = <SVGElement>.ondrop;
<SVGElement>.ondrop = <EventHandler>;
<new EventHandler> = <Document>.ondrop;
<Document>.ondrop = <EventHandler>;
<new EventHandler> = <Window>.ondrop;
<Window>.ondrop = <EventHandler>;
<new EventHandler> = <HTMLElement>.ondurationchange;
<HTMLElement>.ondurationchange = <EventHandler>;
<new EventHandler> = <XULElement>.ondurationchange;
<XULElement>.ondurationchange = <EventHandler>;
<new EventHandler> = <MathMLElement>.ondurationchange;
<MathMLElement>.ondurationchange = <EventHandler>;
<new EventHandler> = <SVGElement>.ondurationchange;
<SVGElement>.ondurationchange = <EventHandler>;
<new EventHandler> = <Document>.ondurationchange;
<Document>.ondurationchange = <EventHandler>;
<new EventHandler> = <Window>.ondurationchange;
<Window>.ondurationchange = <EventHandler>;
<new EventHandler> = <HTMLElement>.onemptied;
<HTMLElement>.onemptied = <EventHandler>;
<new EventHandler> = <XULElement>.onemptied;
<XULElement>.onemptied = <EventHandler>;
<new EventHandler> = <MathMLElement>.onemptied;
<MathMLElement>.onemptied = <EventHandler>;
<new EventHandler> = <SVGElement>.onemptied;
<SVGElement>.onemptied = <EventHandler>;
<new EventHandler> = <Document>.onemptied;
<Document>.onemptied = <EventHandler>;
<new EventHandler> = <Window>.onemptied;
<Window>.onemptied = <EventHandler>;
<new EventHandler> = <HTMLElement>.onended;
<HTMLElement>.onended = <EventHandler>;
<new EventHandler> = <XULElement>.onended;
<XULElement>.onended = <EventHandler>;
<new EventHandler> = <MathMLElement>.onended;
<MathMLElement>.onended = <EventHandler>;
<new EventHandler> = <SVGElement>.onended;
<SVGElement>.onended = <EventHandler>;
<new EventHandler> = <Document>.onended;
<Document>.onended = <EventHandler>;
<new EventHandler> = <Window>.onended;
<Window>.onended = <EventHandler>;
<new EventHandler> = <HTMLElement>.onformdata;
<HTMLElement>.onformdata = <EventHandler>;
<new EventHandler> = <XULElement>.onformdata;
<XULElement>.onformdata = <EventHandler>;
<new EventHandler> = <MathMLElement>.onformdata;
<MathMLElement>.onformdata = <EventHandler>;
<new EventHandler> = <SVGElement>.onformdata;
<SVGElement>.onformdata = <EventHandler>;
<new EventHandler> = <Document>.onformdata;
<Document>.onformdata = <EventHandler>;
<new EventHandler> = <Window>.onformdata;
<Window>.onformdata = <EventHandler>;
<new EventHandler> = <HTMLElement>.oninput;
<HTMLElement>.oninput = <EventHandler>;
<new EventHandler> = <XULElement>.oninput;
<XULElement>.oninput = <EventHandler>;
<new EventHandler> = <MathMLElement>.oninput;
<MathMLElement>.oninput = <EventHandler>;
<new EventHandler> = <SVGElement>.oninput;
<SVGElement>.oninput = <EventHandler>;
<new EventHandler> = <Document>.oninput;
<Document>.oninput = <EventHandler>;
<new EventHandler> = <Window>.oninput;
<Window>.oninput = <EventHandler>;
<new EventHandler> = <HTMLElement>.oninvalid;
<HTMLElement>.oninvalid = <EventHandler>;
<new EventHandler> = <XULElement>.oninvalid;
<XULElement>.oninvalid = <EventHandler>;
<new EventHandler> = <MathMLElement>.oninvalid;
<MathMLElement>.oninvalid = <EventHandler>;
<new EventHandler> = <SVGElement>.oninvalid;
<SVGElement>.oninvalid = <EventHandler>;
<new EventHandler> = <Document>.oninvalid;
<Document>.oninvalid = <EventHandler>;
<new EventHandler> = <Window>.oninvalid;
<Window>.oninvalid = <EventHandler>;
<new EventHandler> = <HTMLElement>.onkeydown;
<HTMLElement>.onkeydown = <EventHandler>;
<new EventHandler> = <XULElement>.onkeydown;
<XULElement>.onkeydown = <EventHandler>;
<new EventHandler> = <MathMLElement>.onkeydown;
<MathMLElement>.onkeydown = <EventHandler>;
<new EventHandler> = <SVGElement>.onkeydown;
<SVGElement>.onkeydown = <EventHandler>;
<new EventHandler> = <Document>.onkeydown;
<Document>.onkeydown = <EventHandler>;
<new EventHandler> = <Window>.onkeydown;
<Window>.onkeydown = <EventHandler>;
<new EventHandler> = <HTMLElement>.onkeypress;
<HTMLElement>.onkeypress = <EventHandler>;
<new EventHandler> = <XULElement>.onkeypress;
<XULElement>.onkeypress = <EventHandler>;
<new EventHandler> = <MathMLElement>.onkeypress;
<MathMLElement>.onkeypress = <EventHandler>;
<new EventHandler> = <SVGElement>.onkeypress;
<SVGElement>.onkeypress = <EventHandler>;
<new EventHandler> = <Document>.onkeypress;
<Document>.onkeypress = <EventHandler>;
<new EventHandler> = <Window>.onkeypress;
<Window>.onkeypress = <EventHandler>;
<new EventHandler> = <HTMLElement>.onkeyup;
<HTMLElement>.onkeyup = <EventHandler>;
<new EventHandler> = <XULElement>.onkeyup;
<XULElement>.onkeyup = <EventHandler>;
<new EventHandler> = <MathMLElement>.onkeyup;
<MathMLElement>.onkeyup = <EventHandler>;
<new EventHandler> = <SVGElement>.onkeyup;
<SVGElement>.onkeyup = <EventHandler>;
<new EventHandler> = <Document>.onkeyup;
<Document>.onkeyup = <EventHandler>;
<new EventHandler> = <Window>.onkeyup;
<Window>.onkeyup = <EventHandler>;
<new EventHandler> = <HTMLElement>.onload;
<HTMLElement>.onload = <EventHandler>;
<new EventHandler> = <XULElement>.onload;
<XULElement>.onload = <EventHandler>;
<new EventHandler> = <MathMLElement>.onload;
<MathMLElement>.onload = <EventHandler>;
<new EventHandler> = <SVGElement>.onload;
<SVGElement>.onload = <EventHandler>;
<new EventHandler> = <Document>.onload;
<Document>.onload = <EventHandler>;
<new EventHandler> = <Window>.onload;
<Window>.onload = <EventHandler>;
<new EventHandler> = <HTMLElement>.onloadeddata;
<HTMLElement>.onloadeddata = <EventHandler>;
<new EventHandler> = <XULElement>.onloadeddata;
<XULElement>.onloadeddata = <EventHandler>;
<new EventHandler> = <MathMLElement>.onloadeddata;
<MathMLElement>.onloadeddata = <EventHandler>;
<new EventHandler> = <SVGElement>.onloadeddata;
<SVGElement>.onloadeddata = <EventHandler>;
<new EventHandler> = <Document>.onloadeddata;
<Document>.onloadeddata = <EventHandler>;
<new EventHandler> = <Window>.onloadeddata;
<Window>.onloadeddata = <EventHandler>;
<new EventHandler> = <HTMLElement>.onloadedmetadata;
<HTMLElement>.onloadedmetadata = <EventHandler>;
<new EventHandler> = <XULElement>.onloadedmetadata;
<XULElement>.onloadedmetadata = <EventHandler>;
<new EventHandler> = <MathMLElement>.onloadedmetadata;
<MathMLElement>.onloadedmetadata = <EventHandler>;
<new EventHandler> = <SVGElement>.onloadedmetadata;
<SVGElement>.onloadedmetadata = <EventHandler>;
<new EventHandler> = <Document>.onloadedmetadata;
<Document>.onloadedmetadata = <EventHandler>;
<new EventHandler> = <Window>.onloadedmetadata;
<Window>.onloadedmetadata = <EventHandler>;
<new EventHandler> = <HTMLElement>.onloadend;
<HTMLElement>.onloadend = <EventHandler>;
<new EventHandler> = <XULElement>.onloadend;
<XULElement>.onloadend = <EventHandler>;
<new EventHandler> = <MathMLElement>.onloadend;
<MathMLElement>.onloadend = <EventHandler>;
<new EventHandler> = <SVGElement>.onloadend;
<SVGElement>.onloadend = <EventHandler>;
<new EventHandler> = <Document>.onloadend;
<Document>.onloadend = <EventHandler>;
<new EventHandler> = <Window>.onloadend;
<Window>.onloadend = <EventHandler>;
<new EventHandler> = <HTMLElement>.onloadstart;
<HTMLElement>.onloadstart = <EventHandler>;
<new EventHandler> = <XULElement>.onloadstart;
<XULElement>.onloadstart = <EventHandler>;
<new EventHandler> = <MathMLElement>.onloadstart;
<MathMLElement>.onloadstart = <EventHandler>;
<new EventHandler> = <SVGElement>.onloadstart;
<SVGElement>.onloadstart = <EventHandler>;
<new EventHandler> = <Document>.onloadstart;
<Document>.onloadstart = <EventHandler>;
<new EventHandler> = <Window>.onloadstart;
<Window>.onloadstart = <EventHandler>;
<new EventHandler> = <HTMLElement>.onmousedown;
<HTMLElement>.onmousedown = <EventHandler>;
<new EventHandler> = <XULElement>.onmousedown;
<XULElement>.onmousedown = <EventHandler>;
<new EventHandler> = <MathMLElement>.onmousedown;
<MathMLElement>.onmousedown = <EventHandler>;
<new EventHandler> = <SVGElement>.onmousedown;
<SVGElement>.onmousedown = <EventHandler>;
<new EventHandler> = <Document>.onmousedown;
<Document>.onmousedown = <EventHandler>;
<new EventHandler> = <Window>.onmousedown;
<Window>.onmousedown = <EventHandler>;
<new EventHandler> = <HTMLElement>.onmouseenter;
<HTMLElement>.onmouseenter = <EventHandler>;
<new EventHandler> = <XULElement>.onmouseenter;
<XULElement>.onmouseenter = <EventHandler>;
<new EventHandler> = <MathMLElement>.onmouseenter;
<MathMLElement>.onmouseenter = <EventHandler>;
<new EventHandler> = <SVGElement>.onmouseenter;
<SVGElement>.onmouseenter = <EventHandler>;
<new EventHandler> = <Document>.onmouseenter;
<Document>.onmouseenter = <EventHandler>;
<new EventHandler> = <Window>.onmouseenter;
<Window>.onmouseenter = <EventHandler>;
<new EventHandler> = <HTMLElement>.onmouseleave;
<HTMLElement>.onmouseleave = <EventHandler>;
<new EventHandler> = <XULElement>.onmouseleave;
<XULElement>.onmouseleave = <EventHandler>;
<new EventHandler> = <MathMLElement>.onmouseleave;
<MathMLElement>.onmouseleave = <EventHandler>;
<new EventHandler> = <SVGElement>.onmouseleave;
<SVGElement>.onmouseleave = <EventHandler>;
<new EventHandler> = <Document>.onmouseleave;
<Document>.onmouseleave = <EventHandler>;
<new EventHandler> = <Window>.onmouseleave;
<Window>.onmouseleave = <EventHandler>;
<new EventHandler> = <HTMLElement>.onmousemove;
<HTMLElement>.onmousemove = <EventHandler>;
<new EventHandler> = <XULElement>.onmousemove;
<XULElement>.onmousemove = <EventHandler>;
<new EventHandler> = <MathMLElement>.onmousemove;
<MathMLElement>.onmousemove = <EventHandler>;
<new EventHandler> = <SVGElement>.onmousemove;
<SVGElement>.onmousemove = <EventHandler>;
<new EventHandler> = <Document>.onmousemove;
<Document>.onmousemove = <EventHandler>;
<new EventHandler> = <Window>.onmousemove;
<Window>.onmousemove = <EventHandler>;
<new EventHandler> = <HTMLElement>.onmouseout;
<HTMLElement>.onmouseout = <EventHandler>;
<new EventHandler> = <XULElement>.onmouseout;
<XULElement>.onmouseout = <EventHandler>;
<new EventHandler> = <MathMLElement>.onmouseout;
<MathMLElement>.onmouseout = <EventHandler>;
<new EventHandler> = <SVGElement>.onmouseout;
<SVGElement>.onmouseout = <EventHandler>;
<new EventHandler> = <Document>.onmouseout;
<Document>.onmouseout = <EventHandler>;
<new EventHandler> = <Window>.onmouseout;
<Window>.onmouseout = <EventHandler>;
<new EventHandler> = <HTMLElement>.onmouseover;
<HTMLElement>.onmouseover = <EventHandler>;
<new EventHandler> = <XULElement>.onmouseover;
<XULElement>.onmouseover = <EventHandler>;
<new EventHandler> = <MathMLElement>.onmouseover;
<MathMLElement>.onmouseover = <EventHandler>;
<new EventHandler> = <SVGElement>.onmouseover;
<SVGElement>.onmouseover = <EventHandler>;
<new EventHandler> = <Document>.onmouseover;
<Document>.onmouseover = <EventHandler>;
<new EventHandler> = <Window>.onmouseover;
<Window>.onmouseover = <EventHandler>;
<new EventHandler> = <HTMLElement>.onmouseup;
<HTMLElement>.onmouseup = <EventHandler>;
<new EventHandler> = <XULElement>.onmouseup;
<XULElement>.onmouseup = <EventHandler>;
<new EventHandler> = <MathMLElement>.onmouseup;
<MathMLElement>.onmouseup = <EventHandler>;
<new EventHandler> = <SVGElement>.onmouseup;
<SVGElement>.onmouseup = <EventHandler>;
<new EventHandler> = <Document>.onmouseup;
<Document>.onmouseup = <EventHandler>;
<new EventHandler> = <Window>.onmouseup;
<Window>.onmouseup = <EventHandler>;
<new EventHandler> = <HTMLElement>.onwheel;
<HTMLElement>.onwheel = <EventHandler>;
<new EventHandler> = <XULElement>.onwheel;
<XULElement>.onwheel = <EventHandler>;
<new EventHandler> = <MathMLElement>.onwheel;
<MathMLElement>.onwheel = <EventHandler>;
<new EventHandler> = <SVGElement>.onwheel;
<SVGElement>.onwheel = <EventHandler>;
<new EventHandler> = <Document>.onwheel;
<Document>.onwheel = <EventHandler>;
<new EventHandler> = <Window>.onwheel;
<Window>.onwheel = <EventHandler>;
<new EventHandler> = <HTMLElement>.onpause;
<HTMLElement>.onpause = <EventHandler>;
<new EventHandler> = <XULElement>.onpause;
<XULElement>.onpause = <EventHandler>;
<new EventHandler> = <MathMLElement>.onpause;
<MathMLElement>.onpause = <EventHandler>;
<new EventHandler> = <SVGElement>.onpause;
<SVGElement>.onpause = <EventHandler>;
<new EventHandler> = <Document>.onpause;
<Document>.onpause = <EventHandler>;
<new EventHandler> = <Window>.onpause;
<Window>.onpause = <EventHandler>;
<new EventHandler> = <HTMLElement>.onplay;
<HTMLElement>.onplay = <EventHandler>;
<new EventHandler> = <XULElement>.onplay;
<XULElement>.onplay = <EventHandler>;
<new EventHandler> = <MathMLElement>.onplay;
<MathMLElement>.onplay = <EventHandler>;
<new EventHandler> = <SVGElement>.onplay;
<SVGElement>.onplay = <EventHandler>;
<new EventHandler> = <Document>.onplay;
<Document>.onplay = <EventHandler>;
<new EventHandler> = <Window>.onplay;
<Window>.onplay = <EventHandler>;
<new EventHandler> = <HTMLElement>.onplaying;
<HTMLElement>.onplaying = <EventHandler>;
<new EventHandler> = <XULElement>.onplaying;
<XULElement>.onplaying = <EventHandler>;
<new EventHandler> = <MathMLElement>.onplaying;
<MathMLElement>.onplaying = <EventHandler>;
<new EventHandler> = <SVGElement>.onplaying;
<SVGElement>.onplaying = <EventHandler>;
<new EventHandler> = <Document>.onplaying;
<Document>.onplaying = <EventHandler>;
<new EventHandler> = <Window>.onplaying;
<Window>.onplaying = <EventHandler>;
<new EventHandler> = <HTMLElement>.onprogress;
<HTMLElement>.onprogress = <EventHandler>;
<new EventHandler> = <XULElement>.onprogress;
<XULElement>.onprogress = <EventHandler>;
<new EventHandler> = <MathMLElement>.onprogress;
<MathMLElement>.onprogress = <EventHandler>;
<new EventHandler> = <SVGElement>.onprogress;
<SVGElement>.onprogress = <EventHandler>;
<new EventHandler> = <Document>.onprogress;
<Document>.onprogress = <EventHandler>;
<new EventHandler> = <Window>.onprogress;
<Window>.onprogress = <EventHandler>;
<new EventHandler> = <HTMLElement>.onratechange;
<HTMLElement>.onratechange = <EventHandler>;
<new EventHandler> = <XULElement>.onratechange;
<XULElement>.onratechange = <EventHandler>;
<new EventHandler> = <MathMLElement>.onratechange;
<MathMLElement>.onratechange = <EventHandler>;
<new EventHandler> = <SVGElement>.onratechange;
<SVGElement>.onratechange = <EventHandler>;
<new EventHandler> = <Document>.onratechange;
<Document>.onratechange = <EventHandler>;
<new EventHandler> = <Window>.onratechange;
<Window>.onratechange = <EventHandler>;
<new EventHandler> = <HTMLElement>.onreset;
<HTMLElement>.onreset = <EventHandler>;
<new EventHandler> = <XULElement>.onreset;
<XULElement>.onreset = <EventHandler>;
<new EventHandler> = <MathMLElement>.onreset;
<MathMLElement>.onreset = <EventHandler>;
<new EventHandler> = <SVGElement>.onreset;
<SVGElement>.onreset = <EventHandler>;
<new EventHandler> = <Document>.onreset;
<Document>.onreset = <EventHandler>;
<new EventHandler> = <Window>.onreset;
<Window>.onreset = <EventHandler>;
<new EventHandler> = <HTMLElement>.onresize;
<HTMLElement>.onresize = <EventHandler>;
<new EventHandler> = <XULElement>.onresize;
<XULElement>.onresize = <EventHandler>;
<new EventHandler> = <MathMLElement>.onresize;
<MathMLElement>.onresize = <EventHandler>;
<new EventHandler> = <SVGElement>.onresize;
<SVGElement>.onresize = <EventHandler>;
<new EventHandler> = <Document>.onresize;
<Document>.onresize = <EventHandler>;
<new EventHandler> = <Window>.onresize;
<Window>.onresize = <EventHandler>;
<new EventHandler> = <HTMLElement>.onscroll;
<HTMLElement>.onscroll = <EventHandler>;
<new EventHandler> = <XULElement>.onscroll;
<XULElement>.onscroll = <EventHandler>;
<new EventHandler> = <MathMLElement>.onscroll;
<MathMLElement>.onscroll = <EventHandler>;
<new EventHandler> = <SVGElement>.onscroll;
<SVGElement>.onscroll = <EventHandler>;
<new EventHandler> = <Document>.onscroll;
<Document>.onscroll = <EventHandler>;
<new EventHandler> = <Window>.onscroll;
<Window>.onscroll = <EventHandler>;
<new EventHandler> = <HTMLElement>.onsecuritypolicyviolation;
<HTMLElement>.onsecuritypolicyviolation = <EventHandler>;
<new EventHandler> = <XULElement>.onsecuritypolicyviolation;
<XULElement>.onsecuritypolicyviolation = <EventHandler>;
<new EventHandler> = <MathMLElement>.onsecuritypolicyviolation;
<MathMLElement>.onsecuritypolicyviolation = <EventHandler>;
<new EventHandler> = <SVGElement>.onsecuritypolicyviolation;
<SVGElement>.onsecuritypolicyviolation = <EventHandler>;
<new EventHandler> = <Document>.onsecuritypolicyviolation;
<Document>.onsecuritypolicyviolation = <EventHandler>;
<new EventHandler> = <Window>.onsecuritypolicyviolation;
<Window>.onsecuritypolicyviolation = <EventHandler>;
<new EventHandler> = <HTMLElement>.onseeked;
<HTMLElement>.onseeked = <EventHandler>;
<new EventHandler> = <XULElement>.onseeked;
<XULElement>.onseeked = <EventHandler>;
<new EventHandler> = <MathMLElement>.onseeked;
<MathMLElement>.onseeked = <EventHandler>;
<new EventHandler> = <SVGElement>.onseeked;
<SVGElement>.onseeked = <EventHandler>;
<new EventHandler> = <Document>.onseeked;
<Document>.onseeked = <EventHandler>;
<new EventHandler> = <Window>.onseeked;
<Window>.onseeked = <EventHandler>;
<new EventHandler> = <HTMLElement>.onseeking;
<HTMLElement>.onseeking = <EventHandler>;
<new EventHandler> = <XULElement>.onseeking;
<XULElement>.onseeking = <EventHandler>;
<new EventHandler> = <MathMLElement>.onseeking;
<MathMLElement>.onseeking = <EventHandler>;
<new EventHandler> = <SVGElement>.onseeking;
<SVGElement>.onseeking = <EventHandler>;
<new EventHandler> = <Document>.onseeking;
<Document>.onseeking = <EventHandler>;
<new EventHandler> = <Window>.onseeking;
<Window>.onseeking = <EventHandler>;
<new EventHandler> = <HTMLElement>.onselect;
<HTMLElement>.onselect = <EventHandler>;
<new EventHandler> = <XULElement>.onselect;
<XULElement>.onselect = <EventHandler>;
<new EventHandler> = <MathMLElement>.onselect;
<MathMLElement>.onselect = <EventHandler>;
<new EventHandler> = <SVGElement>.onselect;
<SVGElement>.onselect = <EventHandler>;
<new EventHandler> = <Document>.onselect;
<Document>.onselect = <EventHandler>;
<new EventHandler> = <Window>.onselect;
<Window>.onselect = <EventHandler>;
<new EventHandler> = <HTMLElement>.onshow;
<HTMLElement>.onshow = <EventHandler>;
<new EventHandler> = <XULElement>.onshow;
<XULElement>.onshow = <EventHandler>;
<new EventHandler> = <MathMLElement>.onshow;
<MathMLElement>.onshow = <EventHandler>;
<new EventHandler> = <SVGElement>.onshow;
<SVGElement>.onshow = <EventHandler>;
<new EventHandler> = <Document>.onshow;
<Document>.onshow = <EventHandler>;
<new EventHandler> = <Window>.onshow;
<Window>.onshow = <EventHandler>;
<new EventHandler> = <HTMLElement>.onslotchange;
<HTMLElement>.onslotchange = <EventHandler>;
<new EventHandler> = <XULElement>.onslotchange;
<XULElement>.onslotchange = <EventHandler>;
<new EventHandler> = <MathMLElement>.onslotchange;
<MathMLElement>.onslotchange = <EventHandler>;
<new EventHandler> = <SVGElement>.onslotchange;
<SVGElement>.onslotchange = <EventHandler>;
<new EventHandler> = <Document>.onslotchange;
<Document>.onslotchange = <EventHandler>;
<new EventHandler> = <Window>.onslotchange;
<Window>.onslotchange = <EventHandler>;
<new EventHandler> = <HTMLElement>.onstalled;
<HTMLElement>.onstalled = <EventHandler>;
<new EventHandler> = <XULElement>.onstalled;
<XULElement>.onstalled = <EventHandler>;
<new EventHandler> = <MathMLElement>.onstalled;
<MathMLElement>.onstalled = <EventHandler>;
<new EventHandler> = <SVGElement>.onstalled;
<SVGElement>.onstalled = <EventHandler>;
<new EventHandler> = <Document>.onstalled;
<Document>.onstalled = <EventHandler>;
<new EventHandler> = <Window>.onstalled;
<Window>.onstalled = <EventHandler>;
<new EventHandler> = <HTMLElement>.onsubmit;
<HTMLElement>.onsubmit = <EventHandler>;
<new EventHandler> = <XULElement>.onsubmit;
<XULElement>.onsubmit = <EventHandler>;
<new EventHandler> = <MathMLElement>.onsubmit;
<MathMLElement>.onsubmit = <EventHandler>;
<new EventHandler> = <SVGElement>.onsubmit;
<SVGElement>.onsubmit = <EventHandler>;
<new EventHandler> = <Document>.onsubmit;
<Document>.onsubmit = <EventHandler>;
<new EventHandler> = <Window>.onsubmit;
<Window>.onsubmit = <EventHandler>;
<new EventHandler> = <HTMLElement>.onsuspend;
<HTMLElement>.onsuspend = <EventHandler>;
<new EventHandler> = <XULElement>.onsuspend;
<XULElement>.onsuspend = <EventHandler>;
<new EventHandler> = <MathMLElement>.onsuspend;
<MathMLElement>.onsuspend = <EventHandler>;
<new EventHandler> = <SVGElement>.onsuspend;
<SVGElement>.onsuspend = <EventHandler>;
<new EventHandler> = <Document>.onsuspend;
<Document>.onsuspend = <EventHandler>;
<new EventHandler> = <Window>.onsuspend;
<Window>.onsuspend = <EventHandler>;
<new EventHandler> = <HTMLElement>.ontimeupdate;
<HTMLElement>.ontimeupdate = <EventHandler>;
<new EventHandler> = <XULElement>.ontimeupdate;
<XULElement>.ontimeupdate = <EventHandler>;
<new EventHandler> = <MathMLElement>.ontimeupdate;
<MathMLElement>.ontimeupdate = <EventHandler>;
<new EventHandler> = <SVGElement>.ontimeupdate;
<SVGElement>.ontimeupdate = <EventHandler>;
<new EventHandler> = <Document>.ontimeupdate;
<Document>.ontimeupdate = <EventHandler>;
<new EventHandler> = <Window>.ontimeupdate;
<Window>.ontimeupdate = <EventHandler>;
<new EventHandler> = <HTMLElement>.onvolumechange;
<HTMLElement>.onvolumechange = <EventHandler>;
<new EventHandler> = <XULElement>.onvolumechange;
<XULElement>.onvolumechange = <EventHandler>;
<new EventHandler> = <MathMLElement>.onvolumechange;
<MathMLElement>.onvolumechange = <EventHandler>;
<new EventHandler> = <SVGElement>.onvolumechange;
<SVGElement>.onvolumechange = <EventHandler>;
<new EventHandler> = <Document>.onvolumechange;
<Document>.onvolumechange = <EventHandler>;
<new EventHandler> = <Window>.onvolumechange;
<Window>.onvolumechange = <EventHandler>;
<new EventHandler> = <HTMLElement>.onwaiting;
<HTMLElement>.onwaiting = <EventHandler>;
<new EventHandler> = <XULElement>.onwaiting;
<XULElement>.onwaiting = <EventHandler>;
<new EventHandler> = <MathMLElement>.onwaiting;
<MathMLElement>.onwaiting = <EventHandler>;
<new EventHandler> = <SVGElement>.onwaiting;
<SVGElement>.onwaiting = <EventHandler>;
<new EventHandler> = <Document>.onwaiting;
<Document>.onwaiting = <EventHandler>;
<new EventHandler> = <Window>.onwaiting;
<Window>.onwaiting = <EventHandler>;
<new EventHandler> = <HTMLElement>.onselectstart;
<HTMLElement>.onselectstart = <EventHandler>;
<new EventHandler> = <XULElement>.onselectstart;
<XULElement>.onselectstart = <EventHandler>;
<new EventHandler> = <MathMLElement>.onselectstart;
<MathMLElement>.onselectstart = <EventHandler>;
<new EventHandler> = <SVGElement>.onselectstart;
<SVGElement>.onselectstart = <EventHandler>;
<new EventHandler> = <Document>.onselectstart;
<Document>.onselectstart = <EventHandler>;
<new EventHandler> = <Window>.onselectstart;
<Window>.onselectstart = <EventHandler>;
<new EventHandler> = <HTMLElement>.onselectionchange;
<HTMLElement>.onselectionchange = <EventHandler>;
<new EventHandler> = <XULElement>.onselectionchange;
<XULElement>.onselectionchange = <EventHandler>;
<new EventHandler> = <MathMLElement>.onselectionchange;
<MathMLElement>.onselectionchange = <EventHandler>;
<new EventHandler> = <SVGElement>.onselectionchange;
<SVGElement>.onselectionchange = <EventHandler>;
<new EventHandler> = <Document>.onselectionchange;
<Document>.onselectionchange = <EventHandler>;
<new EventHandler> = <Window>.onselectionchange;
<Window>.onselectionchange = <EventHandler>;
<new EventHandler> = <HTMLElement>.ontoggle;
<HTMLElement>.ontoggle = <EventHandler>;
<new EventHandler> = <XULElement>.ontoggle;
<XULElement>.ontoggle = <EventHandler>;
<new EventHandler> = <MathMLElement>.ontoggle;
<MathMLElement>.ontoggle = <EventHandler>;
<new EventHandler> = <SVGElement>.ontoggle;
<SVGElement>.ontoggle = <EventHandler>;
<new EventHandler> = <Document>.ontoggle;
<Document>.ontoggle = <EventHandler>;
<new EventHandler> = <Window>.ontoggle;
<Window>.ontoggle = <EventHandler>;
<new EventHandler> = <HTMLElement>.onpointercancel;
<HTMLElement>.onpointercancel = <EventHandler>;
<new EventHandler> = <XULElement>.onpointercancel;
<XULElement>.onpointercancel = <EventHandler>;
<new EventHandler> = <MathMLElement>.onpointercancel;
<MathMLElement>.onpointercancel = <EventHandler>;
<new EventHandler> = <SVGElement>.onpointercancel;
<SVGElement>.onpointercancel = <EventHandler>;
<new EventHandler> = <Document>.onpointercancel;
<Document>.onpointercancel = <EventHandler>;
<new EventHandler> = <Window>.onpointercancel;
<Window>.onpointercancel = <EventHandler>;
<new EventHandler> = <HTMLElement>.onpointerdown;
<HTMLElement>.onpointerdown = <EventHandler>;
<new EventHandler> = <XULElement>.onpointerdown;
<XULElement>.onpointerdown = <EventHandler>;
<new EventHandler> = <MathMLElement>.onpointerdown;
<MathMLElement>.onpointerdown = <EventHandler>;
<new EventHandler> = <SVGElement>.onpointerdown;
<SVGElement>.onpointerdown = <EventHandler>;
<new EventHandler> = <Document>.onpointerdown;
<Document>.onpointerdown = <EventHandler>;
<new EventHandler> = <Window>.onpointerdown;
<Window>.onpointerdown = <EventHandler>;
<new EventHandler> = <HTMLElement>.onpointerup;
<HTMLElement>.onpointerup = <EventHandler>;
<new EventHandler> = <XULElement>.onpointerup;
<XULElement>.onpointerup = <EventHandler>;
<new EventHandler> = <MathMLElement>.onpointerup;
<MathMLElement>.onpointerup = <EventHandler>;
<new EventHandler> = <SVGElement>.onpointerup;
<SVGElement>.onpointerup = <EventHandler>;
<new EventHandler> = <Document>.onpointerup;
<Document>.onpointerup = <EventHandler>;
<new EventHandler> = <Window>.onpointerup;
<Window>.onpointerup = <EventHandler>;
<new EventHandler> = <HTMLElement>.onpointermove;
<HTMLElement>.onpointermove = <EventHandler>;
<new EventHandler> = <XULElement>.onpointermove;
<XULElement>.onpointermove = <EventHandler>;
<new EventHandler> = <MathMLElement>.onpointermove;
<MathMLElement>.onpointermove = <EventHandler>;
<new EventHandler> = <SVGElement>.onpointermove;
<SVGElement>.onpointermove = <EventHandler>;
<new EventHandler> = <Document>.onpointermove;
<Document>.onpointermove = <EventHandler>;
<new EventHandler> = <Window>.onpointermove;
<Window>.onpointermove = <EventHandler>;
<new EventHandler> = <HTMLElement>.onpointerout;
<HTMLElement>.onpointerout = <EventHandler>;
<new EventHandler> = <XULElement>.onpointerout;
<XULElement>.onpointerout = <EventHandler>;
<new EventHandler> = <MathMLElement>.onpointerout;
<MathMLElement>.onpointerout = <EventHandler>;
<new EventHandler> = <SVGElement>.onpointerout;
<SVGElement>.onpointerout = <EventHandler>;
<new EventHandler> = <Document>.onpointerout;
<Document>.onpointerout = <EventHandler>;
<new EventHandler> = <Window>.onpointerout;
<Window>.onpointerout = <EventHandler>;
<new EventHandler> = <HTMLElement>.onpointerover;
<HTMLElement>.onpointerover = <EventHandler>;
<new EventHandler> = <XULElement>.onpointerover;
<XULElement>.onpointerover = <EventHandler>;
<new EventHandler> = <MathMLElement>.onpointerover;
<MathMLElement>.onpointerover = <EventHandler>;
<new EventHandler> = <SVGElement>.onpointerover;
<SVGElement>.onpointerover = <EventHandler>;
<new EventHandler> = <Document>.onpointerover;
<Document>.onpointerover = <EventHandler>;
<new EventHandler> = <Window>.onpointerover;
<Window>.onpointerover = <EventHandler>;
<new EventHandler> = <HTMLElement>.onpointerenter;
<HTMLElement>.onpointerenter = <EventHandler>;
<new EventHandler> = <XULElement>.onpointerenter;
<XULElement>.onpointerenter = <EventHandler>;
<new EventHandler> = <MathMLElement>.onpointerenter;
<MathMLElement>.onpointerenter = <EventHandler>;
<new EventHandler> = <SVGElement>.onpointerenter;
<SVGElement>.onpointerenter = <EventHandler>;
<new EventHandler> = <Document>.onpointerenter;
<Document>.onpointerenter = <EventHandler>;
<new EventHandler> = <Window>.onpointerenter;
<Window>.onpointerenter = <EventHandler>;
<new EventHandler> = <HTMLElement>.onpointerleave;
<HTMLElement>.onpointerleave = <EventHandler>;
<new EventHandler> = <XULElement>.onpointerleave;
<XULElement>.onpointerleave = <EventHandler>;
<new EventHandler> = <MathMLElement>.onpointerleave;
<MathMLElement>.onpointerleave = <EventHandler>;
<new EventHandler> = <SVGElement>.onpointerleave;
<SVGElement>.onpointerleave = <EventHandler>;
<new EventHandler> = <Document>.onpointerleave;
<Document>.onpointerleave = <EventHandler>;
<new EventHandler> = <Window>.onpointerleave;
<Window>.onpointerleave = <EventHandler>;
<new EventHandler> = <HTMLElement>.ongotpointercapture;
<HTMLElement>.ongotpointercapture = <EventHandler>;
<new EventHandler> = <XULElement>.ongotpointercapture;
<XULElement>.ongotpointercapture = <EventHandler>;
<new EventHandler> = <MathMLElement>.ongotpointercapture;
<MathMLElement>.ongotpointercapture = <EventHandler>;
<new EventHandler> = <SVGElement>.ongotpointercapture;
<SVGElement>.ongotpointercapture = <EventHandler>;
<new EventHandler> = <Document>.ongotpointercapture;
<Document>.ongotpointercapture = <EventHandler>;
<new EventHandler> = <Window>.ongotpointercapture;
<Window>.ongotpointercapture = <EventHandler>;
<new EventHandler> = <HTMLElement>.onlostpointercapture;
<HTMLElement>.onlostpointercapture = <EventHandler>;
<new EventHandler> = <XULElement>.onlostpointercapture;
<XULElement>.onlostpointercapture = <EventHandler>;
<new EventHandler> = <MathMLElement>.onlostpointercapture;
<MathMLElement>.onlostpointercapture = <EventHandler>;
<new EventHandler> = <SVGElement>.onlostpointercapture;
<SVGElement>.onlostpointercapture = <EventHandler>;
<new EventHandler> = <Document>.onlostpointercapture;
<Document>.onlostpointercapture = <EventHandler>;
<new EventHandler> = <Window>.onlostpointercapture;
<Window>.onlostpointercapture = <EventHandler>;
<new EventHandler> = <HTMLElement>.onmozfullscreenchange;
<HTMLElement>.onmozfullscreenchange = <EventHandler>;
<new EventHandler> = <XULElement>.onmozfullscreenchange;
<XULElement>.onmozfullscreenchange = <EventHandler>;
<new EventHandler> = <MathMLElement>.onmozfullscreenchange;
<MathMLElement>.onmozfullscreenchange = <EventHandler>;
<new EventHandler> = <SVGElement>.onmozfullscreenchange;
<SVGElement>.onmozfullscreenchange = <EventHandler>;
<new EventHandler> = <Document>.onmozfullscreenchange;
<Document>.onmozfullscreenchange = <EventHandler>;
<new EventHandler> = <Window>.onmozfullscreenchange;
<Window>.onmozfullscreenchange = <EventHandler>;
<new EventHandler> = <HTMLElement>.onmozfullscreenerror;
<HTMLElement>.onmozfullscreenerror = <EventHandler>;
<new EventHandler> = <XULElement>.onmozfullscreenerror;
<XULElement>.onmozfullscreenerror = <EventHandler>;
<new EventHandler> = <MathMLElement>.onmozfullscreenerror;
<MathMLElement>.onmozfullscreenerror = <EventHandler>;
<new EventHandler> = <SVGElement>.onmozfullscreenerror;
<SVGElement>.onmozfullscreenerror = <EventHandler>;
<new EventHandler> = <Document>.onmozfullscreenerror;
<Document>.onmozfullscreenerror = <EventHandler>;
<new EventHandler> = <Window>.onmozfullscreenerror;
<Window>.onmozfullscreenerror = <EventHandler>;
<new EventHandler> = <HTMLElement>.onanimationcancel;
<HTMLElement>.onanimationcancel = <EventHandler>;
<new EventHandler> = <XULElement>.onanimationcancel;
<XULElement>.onanimationcancel = <EventHandler>;
<new EventHandler> = <MathMLElement>.onanimationcancel;
<MathMLElement>.onanimationcancel = <EventHandler>;
<new EventHandler> = <SVGElement>.onanimationcancel;
<SVGElement>.onanimationcancel = <EventHandler>;
<new EventHandler> = <Document>.onanimationcancel;
<Document>.onanimationcancel = <EventHandler>;
<new EventHandler> = <Window>.onanimationcancel;
<Window>.onanimationcancel = <EventHandler>;
<new EventHandler> = <HTMLElement>.onanimationend;
<HTMLElement>.onanimationend = <EventHandler>;
<new EventHandler> = <XULElement>.onanimationend;
<XULElement>.onanimationend = <EventHandler>;
<new EventHandler> = <MathMLElement>.onanimationend;
<MathMLElement>.onanimationend = <EventHandler>;
<new EventHandler> = <SVGElement>.onanimationend;
<SVGElement>.onanimationend = <EventHandler>;
<new EventHandler> = <Document>.onanimationend;
<Document>.onanimationend = <EventHandler>;
<new EventHandler> = <Window>.onanimationend;
<Window>.onanimationend = <EventHandler>;
<new EventHandler> = <HTMLElement>.onanimationiteration;
<HTMLElement>.onanimationiteration = <EventHandler>;
<new EventHandler> = <XULElement>.onanimationiteration;
<XULElement>.onanimationiteration = <EventHandler>;
<new EventHandler> = <MathMLElement>.onanimationiteration;
<MathMLElement>.onanimationiteration = <EventHandler>;
<new EventHandler> = <SVGElement>.onanimationiteration;
<SVGElement>.onanimationiteration = <EventHandler>;
<new EventHandler> = <Document>.onanimationiteration;
<Document>.onanimationiteration = <EventHandler>;
<new EventHandler> = <Window>.onanimationiteration;
<Window>.onanimationiteration = <EventHandler>;
<new EventHandler> = <HTMLElement>.onanimationstart;
<HTMLElement>.onanimationstart = <EventHandler>;
<new EventHandler> = <XULElement>.onanimationstart;
<XULElement>.onanimationstart = <EventHandler>;
<new EventHandler> = <MathMLElement>.onanimationstart;
<MathMLElement>.onanimationstart = <EventHandler>;
<new EventHandler> = <SVGElement>.onanimationstart;
<SVGElement>.onanimationstart = <EventHandler>;
<new EventHandler> = <Document>.onanimationstart;
<Document>.onanimationstart = <EventHandler>;
<new EventHandler> = <Window>.onanimationstart;
<Window>.onanimationstart = <EventHandler>;
<new EventHandler> = <HTMLElement>.ontransitioncancel;
<HTMLElement>.ontransitioncancel = <EventHandler>;
<new EventHandler> = <XULElement>.ontransitioncancel;
<XULElement>.ontransitioncancel = <EventHandler>;
<new EventHandler> = <MathMLElement>.ontransitioncancel;
<MathMLElement>.ontransitioncancel = <EventHandler>;
<new EventHandler> = <SVGElement>.ontransitioncancel;
<SVGElement>.ontransitioncancel = <EventHandler>;
<new EventHandler> = <Document>.ontransitioncancel;
<Document>.ontransitioncancel = <EventHandler>;
<new EventHandler> = <Window>.ontransitioncancel;
<Window>.ontransitioncancel = <EventHandler>;
<new EventHandler> = <HTMLElement>.ontransitionend;
<HTMLElement>.ontransitionend = <EventHandler>;
<new EventHandler> = <XULElement>.ontransitionend;
<XULElement>.ontransitionend = <EventHandler>;
<new EventHandler> = <MathMLElement>.ontransitionend;
<MathMLElement>.ontransitionend = <EventHandler>;
<new EventHandler> = <SVGElement>.ontransitionend;
<SVGElement>.ontransitionend = <EventHandler>;
<new EventHandler> = <Document>.ontransitionend;
<Document>.ontransitionend = <EventHandler>;
<new EventHandler> = <Window>.ontransitionend;
<Window>.ontransitionend = <EventHandler>;
<new EventHandler> = <HTMLElement>.ontransitionrun;
<HTMLElement>.ontransitionrun = <EventHandler>;
<new EventHandler> = <XULElement>.ontransitionrun;
<XULElement>.ontransitionrun = <EventHandler>;
<new EventHandler> = <MathMLElement>.ontransitionrun;
<MathMLElement>.ontransitionrun = <EventHandler>;
<new EventHandler> = <SVGElement>.ontransitionrun;
<SVGElement>.ontransitionrun = <EventHandler>;
<new EventHandler> = <Document>.ontransitionrun;
<Document>.ontransitionrun = <EventHandler>;
<new EventHandler> = <Window>.ontransitionrun;
<Window>.ontransitionrun = <EventHandler>;
<new EventHandler> = <HTMLElement>.ontransitionstart;
<HTMLElement>.ontransitionstart = <EventHandler>;
<new EventHandler> = <XULElement>.ontransitionstart;
<XULElement>.ontransitionstart = <EventHandler>;
<new EventHandler> = <MathMLElement>.ontransitionstart;
<MathMLElement>.ontransitionstart = <EventHandler>;
<new EventHandler> = <SVGElement>.ontransitionstart;
<SVGElement>.ontransitionstart = <EventHandler>;
<new EventHandler> = <Document>.ontransitionstart;
<Document>.ontransitionstart = <EventHandler>;
<new EventHandler> = <Window>.ontransitionstart;
<Window>.ontransitionstart = <EventHandler>;
<new EventHandler> = <HTMLElement>.onwebkitanimationend;
<HTMLElement>.onwebkitanimationend = <EventHandler>;
<new EventHandler> = <XULElement>.onwebkitanimationend;
<XULElement>.onwebkitanimationend = <EventHandler>;
<new EventHandler> = <MathMLElement>.onwebkitanimationend;
<MathMLElement>.onwebkitanimationend = <EventHandler>;
<new EventHandler> = <SVGElement>.onwebkitanimationend;
<SVGElement>.onwebkitanimationend = <EventHandler>;
<new EventHandler> = <Document>.onwebkitanimationend;
<Document>.onwebkitanimationend = <EventHandler>;
<new EventHandler> = <Window>.onwebkitanimationend;
<Window>.onwebkitanimationend = <EventHandler>;
<new EventHandler> = <HTMLElement>.onwebkitanimationiteration;
<HTMLElement>.onwebkitanimationiteration = <EventHandler>;
<new EventHandler> = <XULElement>.onwebkitanimationiteration;
<XULElement>.onwebkitanimationiteration = <EventHandler>;
<new EventHandler> = <MathMLElement>.onwebkitanimationiteration;
<MathMLElement>.onwebkitanimationiteration = <EventHandler>;
<new EventHandler> = <SVGElement>.onwebkitanimationiteration;
<SVGElement>.onwebkitanimationiteration = <EventHandler>;
<new EventHandler> = <Document>.onwebkitanimationiteration;
<Document>.onwebkitanimationiteration = <EventHandler>;
<new EventHandler> = <Window>.onwebkitanimationiteration;
<Window>.onwebkitanimationiteration = <EventHandler>;
<new EventHandler> = <HTMLElement>.onwebkitanimationstart;
<HTMLElement>.onwebkitanimationstart = <EventHandler>;
<new EventHandler> = <XULElement>.onwebkitanimationstart;
<XULElement>.onwebkitanimationstart = <EventHandler>;
<new EventHandler> = <MathMLElement>.onwebkitanimationstart;
<MathMLElement>.onwebkitanimationstart = <EventHandler>;
<new EventHandler> = <SVGElement>.onwebkitanimationstart;
<SVGElement>.onwebkitanimationstart = <EventHandler>;
<new EventHandler> = <Document>.onwebkitanimationstart;
<Document>.onwebkitanimationstart = <EventHandler>;
<new EventHandler> = <Window>.onwebkitanimationstart;
<Window>.onwebkitanimationstart = <EventHandler>;
<new EventHandler> = <HTMLElement>.onwebkittransitionend;
<HTMLElement>.onwebkittransitionend = <EventHandler>;
<new EventHandler> = <XULElement>.onwebkittransitionend;
<XULElement>.onwebkittransitionend = <EventHandler>;
<new EventHandler> = <MathMLElement>.onwebkittransitionend;
<MathMLElement>.onwebkittransitionend = <EventHandler>;
<new EventHandler> = <SVGElement>.onwebkittransitionend;
<SVGElement>.onwebkittransitionend = <EventHandler>;
<new EventHandler> = <Document>.onwebkittransitionend;
<Document>.onwebkittransitionend = <EventHandler>;
<new EventHandler> = <Window>.onwebkittransitionend;
<Window>.onwebkittransitionend = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.onafterprint;
<HTMLBodyElement>.onafterprint = <EventHandler>;
<new EventHandler> = <Window>.onafterprint;
<Window>.onafterprint = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.onafterprint;
<HTMLFrameSetElement>.onafterprint = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.onbeforeprint;
<HTMLBodyElement>.onbeforeprint = <EventHandler>;
<new EventHandler> = <Window>.onbeforeprint;
<Window>.onbeforeprint = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.onbeforeprint;
<HTMLFrameSetElement>.onbeforeprint = <EventHandler>;
<new OnBeforeUnloadEventHandler> = <HTMLBodyElement>.onbeforeunload;
<HTMLBodyElement>.onbeforeunload = <OnBeforeUnloadEventHandler>;
<new OnBeforeUnloadEventHandler> = <Window>.onbeforeunload;
<Window>.onbeforeunload = <OnBeforeUnloadEventHandler>;
<new OnBeforeUnloadEventHandler> = <HTMLFrameSetElement>.onbeforeunload;
<HTMLFrameSetElement>.onbeforeunload = <OnBeforeUnloadEventHandler>;
<new EventHandler> = <HTMLBodyElement>.onhashchange;
<HTMLBodyElement>.onhashchange = <EventHandler>;
<new EventHandler> = <Window>.onhashchange;
<Window>.onhashchange = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.onhashchange;
<HTMLFrameSetElement>.onhashchange = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.onlanguagechange;
<HTMLBodyElement>.onlanguagechange = <EventHandler>;
<new EventHandler> = <Window>.onlanguagechange;
<Window>.onlanguagechange = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.onlanguagechange;
<HTMLFrameSetElement>.onlanguagechange = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.onmessage;
<HTMLBodyElement>.onmessage = <EventHandler>;
<new EventHandler> = <Window>.onmessage;
<Window>.onmessage = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.onmessage;
<HTMLFrameSetElement>.onmessage = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.onmessageerror;
<HTMLBodyElement>.onmessageerror = <EventHandler>;
<new EventHandler> = <Window>.onmessageerror;
<Window>.onmessageerror = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.onmessageerror;
<HTMLFrameSetElement>.onmessageerror = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.onoffline;
<HTMLBodyElement>.onoffline = <EventHandler>;
<new EventHandler> = <Window>.onoffline;
<Window>.onoffline = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.onoffline;
<HTMLFrameSetElement>.onoffline = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.ononline;
<HTMLBodyElement>.ononline = <EventHandler>;
<new EventHandler> = <Window>.ononline;
<Window>.ononline = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.ononline;
<HTMLFrameSetElement>.ononline = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.onpagehide;
<HTMLBodyElement>.onpagehide = <EventHandler>;
<new EventHandler> = <Window>.onpagehide;
<Window>.onpagehide = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.onpagehide;
<HTMLFrameSetElement>.onpagehide = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.onpageshow;
<HTMLBodyElement>.onpageshow = <EventHandler>;
<new EventHandler> = <Window>.onpageshow;
<Window>.onpageshow = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.onpageshow;
<HTMLFrameSetElement>.onpageshow = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.onpopstate;
<HTMLBodyElement>.onpopstate = <EventHandler>;
<new EventHandler> = <Window>.onpopstate;
<Window>.onpopstate = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.onpopstate;
<HTMLFrameSetElement>.onpopstate = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.onrejectionhandled;
<HTMLBodyElement>.onrejectionhandled = <EventHandler>;
<new EventHandler> = <Window>.onrejectionhandled;
<Window>.onrejectionhandled = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.onrejectionhandled;
<HTMLFrameSetElement>.onrejectionhandled = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.onstorage;
<HTMLBodyElement>.onstorage = <EventHandler>;
<new EventHandler> = <Window>.onstorage;
<Window>.onstorage = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.onstorage;
<HTMLFrameSetElement>.onstorage = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.onunhandledrejection;
<HTMLBodyElement>.onunhandledrejection = <EventHandler>;
<new EventHandler> = <Window>.onunhandledrejection;
<Window>.onunhandledrejection = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.onunhandledrejection;
<HTMLFrameSetElement>.onunhandledrejection = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.onunload;
<HTMLBodyElement>.onunload = <EventHandler>;
<new EventHandler> = <Window>.onunload;
<Window>.onunload = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.onunload;
<HTMLFrameSetElement>.onunload = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.ongamepadconnected;
<HTMLBodyElement>.ongamepadconnected = <EventHandler>;
<new EventHandler> = <Window>.ongamepadconnected;
<Window>.ongamepadconnected = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.ongamepadconnected;
<HTMLFrameSetElement>.ongamepadconnected = <EventHandler>;
<new EventHandler> = <HTMLBodyElement>.ongamepaddisconnected;
<HTMLBodyElement>.ongamepaddisconnected = <EventHandler>;
<new EventHandler> = <Window>.ongamepaddisconnected;
<Window>.ongamepaddisconnected = <EventHandler>;
<new EventHandler> = <HTMLFrameSetElement>.ongamepaddisconnected;
<HTMLFrameSetElement>.ongamepaddisconnected = <EventHandler>;
<new EventHandler> = <HTMLElement>.oncopy;
<HTMLElement>.oncopy = <EventHandler>;
<new EventHandler> = <SVGElement>.oncopy;
<SVGElement>.oncopy = <EventHandler>;
<new EventHandler> = <MathMLElement>.oncopy;
<MathMLElement>.oncopy = <EventHandler>;
<new EventHandler> = <Document>.oncopy;
<Document>.oncopy = <EventHandler>;
<new EventHandler> = <HTMLElement>.oncut;
<HTMLElement>.oncut = <EventHandler>;
<new EventHandler> = <SVGElement>.oncut;
<SVGElement>.oncut = <EventHandler>;
<new EventHandler> = <MathMLElement>.oncut;
<MathMLElement>.oncut = <EventHandler>;
<new EventHandler> = <Document>.oncut;
<Document>.oncut = <EventHandler>;
<new EventHandler> = <HTMLElement>.onpaste;
<HTMLElement>.onpaste = <EventHandler>;
<new EventHandler> = <SVGElement>.onpaste;
<SVGElement>.onpaste = <EventHandler>;
<new EventHandler> = <MathMLElement>.onpaste;
<MathMLElement>.onpaste = <EventHandler>;
<new EventHandler> = <Document>.onpaste;
<Document>.onpaste = <EventHandler>;
<new EventHandler> = <HTMLElement>.onerror;
<HTMLElement>.onerror = <EventHandler>;
<new EventHandler> = <XULElement>.onerror;
<XULElement>.onerror = <EventHandler>;
<new EventHandler> = <MathMLElement>.onerror;
<MathMLElement>.onerror = <EventHandler>;
<new EventHandler> = <SVGElement>.onerror;
<SVGElement>.onerror = <EventHandler>;
<new EventHandler> = <Document>.onerror;
<Document>.onerror = <EventHandler>;
<new OnErrorEventHandler> = <Window>.onerror;
<Window>.onerror = <OnErrorEventHandler>;
<new ExtensionBrowser> = <ServiceWorkerGlobalScope>.browser;
<new boolean> = <Response>.bodyUsed;
<new boolean> = <Request>.bodyUsed;
<new Promise_ArrayBuffer_> = <Response>.arrayBuffer();
<new Promise_ArrayBuffer_> = <Request>.arrayBuffer();
<new Promise_Blob_> = <Response>.blob();
<new Promise_Blob_> = <Request>.blob();
<new Promise_FormData_> = new Promise(function(x){console.log("ok")});
<new Promise_FormData_> = <Response>.formData();
<new Promise_FormData_> = <Request>.formData();
<new Promise_JSON_> = new Promise(function(x){console.log("ok")});
<new Promise_JSON_> = <Response>.json();
<new Promise_JSON_> = <Request>.json();
<new Promise_USVString_> = <Response>.text();
<new Promise_USVString_> = <Request>.text();
<new FontFaceSet> = <Document>.fonts;
<new sequence_DOMQuad_> = [<DOMQuad>];
<new DOMQuad> = <sequence_DOMQuad_>[0];
<new sequence_DOMQuad_> = <Text>.getBoxQuads();
<new sequence_DOMQuad_> = <Text>.getBoxQuads(<BoxQuadOptions>);
<new sequence_DOMQuad_> = <Element>.getBoxQuads();
<new sequence_DOMQuad_> = <Element>.getBoxQuads(<BoxQuadOptions>);
<new sequence_DOMQuad_> = <Document>.getBoxQuads();
<new sequence_DOMQuad_> = <Document>.getBoxQuads(<BoxQuadOptions>);
<new sequence_DOMQuad_> = <Text>.getBoxQuadsFromWindowOrigin();
<new sequence_DOMQuad_> = <Text>.getBoxQuadsFromWindowOrigin(<BoxQuadOptions>);
<new sequence_DOMQuad_> = <Element>.getBoxQuadsFromWindowOrigin();
<new sequence_DOMQuad_> = <Element>.getBoxQuadsFromWindowOrigin(<BoxQuadOptions>);
<new sequence_DOMQuad_> = <Document>.getBoxQuadsFromWindowOrigin();
<new sequence_DOMQuad_> = <Document>.getBoxQuadsFromWindowOrigin(<BoxQuadOptions>);
<new DOMQuad> = <Text>.convertQuadFromNode(<DOMQuad>,<GeometryNode>);
<new DOMQuad> = <Text>.convertQuadFromNode(<DOMQuad>,<GeometryNode>,<ConvertCoordinateOptions>);
<new DOMQuad> = <Element>.convertQuadFromNode(<DOMQuad>,<GeometryNode>);
<new DOMQuad> = <Element>.convertQuadFromNode(<DOMQuad>,<GeometryNode>,<ConvertCoordinateOptions>);
<new DOMQuad> = <Document>.convertQuadFromNode(<DOMQuad>,<GeometryNode>);
<new DOMQuad> = <Document>.convertQuadFromNode(<DOMQuad>,<GeometryNode>,<ConvertCoordinateOptions>);
<new DOMQuad> = <Text>.convertRectFromNode(<DOMRectReadOnly>,<GeometryNode>);
<new DOMQuad> = <Text>.convertRectFromNode(<DOMRectReadOnly>,<GeometryNode>,<ConvertCoordinateOptions>);
<new DOMQuad> = <Element>.convertRectFromNode(<DOMRectReadOnly>,<GeometryNode>);
<new DOMQuad> = <Element>.convertRectFromNode(<DOMRectReadOnly>,<GeometryNode>,<ConvertCoordinateOptions>);
<new DOMQuad> = <Document>.convertRectFromNode(<DOMRectReadOnly>,<GeometryNode>);
<new DOMQuad> = <Document>.convertRectFromNode(<DOMRectReadOnly>,<GeometryNode>,<ConvertCoordinateOptions>);
<new DOMPoint> = <Text>.convertPointFromNode(<DOMPointInit>,<GeometryNode>);
<new DOMPoint> = <Text>.convertPointFromNode(<DOMPointInit>,<GeometryNode>,<ConvertCoordinateOptions>);
<new DOMPoint> = <Element>.convertPointFromNode(<DOMPointInit>,<GeometryNode>);
<new DOMPoint> = <Element>.convertPointFromNode(<DOMPointInit>,<GeometryNode>,<ConvertCoordinateOptions>);
<new DOMPoint> = <Document>.convertPointFromNode(<DOMPointInit>,<GeometryNode>);
<new DOMPoint> = <Document>.convertPointFromNode(<DOMPointInit>,<GeometryNode>,<ConvertCoordinateOptions>);
<new EventHandler> = <HTMLElement>.ontouchstart;
<HTMLElement>.ontouchstart = <EventHandler>;
<new EventHandler> = <XULElement>.ontouchstart;
<XULElement>.ontouchstart = <EventHandler>;
<new EventHandler> = <MathMLElement>.ontouchstart;
<MathMLElement>.ontouchstart = <EventHandler>;
<new EventHandler> = <SVGElement>.ontouchstart;
<SVGElement>.ontouchstart = <EventHandler>;
<new EventHandler> = <Document>.ontouchstart;
<Document>.ontouchstart = <EventHandler>;
<new EventHandler> = <Window>.ontouchstart;
<Window>.ontouchstart = <EventHandler>;
<new EventHandler> = <HTMLElement>.ontouchend;
<HTMLElement>.ontouchend = <EventHandler>;
<new EventHandler> = <XULElement>.ontouchend;
<XULElement>.ontouchend = <EventHandler>;
<new EventHandler> = <MathMLElement>.ontouchend;
<MathMLElement>.ontouchend = <EventHandler>;
<new EventHandler> = <SVGElement>.ontouchend;
<SVGElement>.ontouchend = <EventHandler>;
<new EventHandler> = <Document>.ontouchend;
<Document>.ontouchend = <EventHandler>;
<new EventHandler> = <Window>.ontouchend;
<Window>.ontouchend = <EventHandler>;
<new EventHandler> = <HTMLElement>.ontouchmove;
<HTMLElement>.ontouchmove = <EventHandler>;
<new EventHandler> = <XULElement>.ontouchmove;
<XULElement>.ontouchmove = <EventHandler>;
<new EventHandler> = <MathMLElement>.ontouchmove;
<MathMLElement>.ontouchmove = <EventHandler>;
<new EventHandler> = <SVGElement>.ontouchmove;
<SVGElement>.ontouchmove = <EventHandler>;
<new EventHandler> = <Document>.ontouchmove;
<Document>.ontouchmove = <EventHandler>;
<new EventHandler> = <Window>.ontouchmove;
<Window>.ontouchmove = <EventHandler>;
<new EventHandler> = <HTMLElement>.ontouchcancel;
<HTMLElement>.ontouchcancel = <EventHandler>;
<new EventHandler> = <XULElement>.ontouchcancel;
<XULElement>.ontouchcancel = <EventHandler>;
<new EventHandler> = <MathMLElement>.ontouchcancel;
<MathMLElement>.ontouchcancel = <EventHandler>;
<new EventHandler> = <SVGElement>.ontouchcancel;
<SVGElement>.ontouchcancel = <EventHandler>;
<new EventHandler> = <Document>.ontouchcancel;
<Document>.ontouchcancel = <EventHandler>;
<new EventHandler> = <Window>.ontouchcancel;
<Window>.ontouchcancel = <EventHandler>;
<new USVString> = <HTMLAreaElement>.href;
<HTMLAreaElement>.href = <USVString>;
<new USVString> = <HTMLAnchorElement>.href;
<HTMLAnchorElement>.href = <USVString>;
<new USVString> = <HTMLAreaElement>.origin;
<new USVString> = <HTMLAnchorElement>.origin;
<new USVString> = <HTMLAreaElement>.protocol;
<HTMLAreaElement>.protocol = <USVString>;
<new USVString> = <HTMLAnchorElement>.protocol;
<HTMLAnchorElement>.protocol = <USVString>;
<new USVString> = <HTMLAreaElement>.username;
<HTMLAreaElement>.username = <USVString>;
<new USVString> = <HTMLAnchorElement>.username;
<HTMLAnchorElement>.username = <USVString>;
<new USVString> = <HTMLAreaElement>.password;
<HTMLAreaElement>.password = <USVString>;
<new USVString> = <HTMLAnchorElement>.password;
<HTMLAnchorElement>.password = <USVString>;
<new USVString> = <HTMLAreaElement>.host;
<HTMLAreaElement>.host = <USVString>;
<new USVString> = <HTMLAnchorElement>.host;
<HTMLAnchorElement>.host = <USVString>;
<new USVString> = <HTMLAreaElement>.hostname;
<HTMLAreaElement>.hostname = <USVString>;
<new USVString> = <HTMLAnchorElement>.hostname;
<HTMLAnchorElement>.hostname = <USVString>;
<new USVString> = <HTMLAreaElement>.port;
<HTMLAreaElement>.port = <USVString>;
<new USVString> = <HTMLAnchorElement>.port;
<HTMLAnchorElement>.port = <USVString>;
<new USVString> = <HTMLAreaElement>.pathname;
<HTMLAreaElement>.pathname = <USVString>;
<new USVString> = <HTMLAnchorElement>.pathname;
<HTMLAnchorElement>.pathname = <USVString>;
<new USVString> = <HTMLAreaElement>.search;
<HTMLAreaElement>.search = <USVString>;
<new USVString> = <HTMLAnchorElement>.search;
<HTMLAnchorElement>.search = <USVString>;
<new USVString> = <HTMLAreaElement>.hash;
<HTMLAreaElement>.hash = <USVString>;
<new USVString> = <HTMLAnchorElement>.hash;
<HTMLAnchorElement>.hash = <USVString>;
<new long> = <HTMLInputElement>.UNKNOWN_REQUEST;
<new long> = <HTMLImageElement>.UNKNOWN_REQUEST;
<new long> = <HTMLEmbedElement>.UNKNOWN_REQUEST;
<new long> = <SVGImageElement>.UNKNOWN_REQUEST;
<new long> = <HTMLObjectElement>.UNKNOWN_REQUEST;
<new long> = <HTMLInputElement>.CURRENT_REQUEST;
<new long> = <HTMLImageElement>.CURRENT_REQUEST;
<new long> = <HTMLEmbedElement>.CURRENT_REQUEST;
<new long> = <SVGImageElement>.CURRENT_REQUEST;
<new long> = <HTMLObjectElement>.CURRENT_REQUEST;
<new long> = <HTMLInputElement>.PENDING_REQUEST;
<new long> = <HTMLImageElement>.PENDING_REQUEST;
<new long> = <HTMLEmbedElement>.PENDING_REQUEST;
<new long> = <SVGImageElement>.PENDING_REQUEST;
<new long> = <HTMLObjectElement>.PENDING_REQUEST;
<new boolean> = <HTMLInputElement>.loadingEnabled;
<HTMLInputElement>.loadingEnabled = <boolean>;
<new boolean> = <HTMLImageElement>.loadingEnabled;
<HTMLImageElement>.loadingEnabled = <boolean>;
<new boolean> = <HTMLEmbedElement>.loadingEnabled;
<HTMLEmbedElement>.loadingEnabled = <boolean>;
<new boolean> = <SVGImageElement>.loadingEnabled;
<SVGImageElement>.loadingEnabled = <boolean>;
<new boolean> = <HTMLObjectElement>.loadingEnabled;
<HTMLObjectElement>.loadingEnabled = <boolean>;
<new void> = <HTMLInputElement>.addObserver(<imgINotificationObserver>);
<new void> = <HTMLImageElement>.addObserver(<imgINotificationObserver>);
<new void> = <HTMLEmbedElement>.addObserver(<imgINotificationObserver>);
<new void> = <SVGImageElement>.addObserver(<imgINotificationObserver>);
<new void> = <HTMLObjectElement>.addObserver(<imgINotificationObserver>);
<new void> = <HTMLInputElement>.removeObserver(<imgINotificationObserver>);
<new void> = <HTMLImageElement>.removeObserver(<imgINotificationObserver>);
<new void> = <HTMLEmbedElement>.removeObserver(<imgINotificationObserver>);
<new void> = <SVGImageElement>.removeObserver(<imgINotificationObserver>);
<new void> = <HTMLObjectElement>.removeObserver(<imgINotificationObserver>);
<new imgIRequest> = <HTMLInputElement>.getRequest(<long>);
<new imgIRequest> = <HTMLImageElement>.getRequest(<long>);
<new imgIRequest> = <HTMLEmbedElement>.getRequest(<long>);
<new imgIRequest> = <SVGImageElement>.getRequest(<long>);
<new imgIRequest> = <HTMLObjectElement>.getRequest(<long>);
<HTMLInputElement>.getRequestType(<imgIRequest>);
<HTMLImageElement>.getRequestType(<imgIRequest>);
<HTMLEmbedElement>.getRequestType(<imgIRequest>);
<SVGImageElement>.getRequestType(<imgIRequest>);
<HTMLObjectElement>.getRequestType(<imgIRequest>);
<new URI> = <HTMLInputElement>.currentURI;
<new URI> = <HTMLImageElement>.currentURI;
<new URI> = <HTMLEmbedElement>.currentURI;
<new URI> = <SVGImageElement>.currentURI;
<new URI> = <HTMLObjectElement>.currentURI;
<new URI> = <HTMLInputElement>.currentRequestFinalURI;
<new URI> = <HTMLImageElement>.currentRequestFinalURI;
<new URI> = <HTMLEmbedElement>.currentRequestFinalURI;
<new URI> = <SVGImageElement>.currentRequestFinalURI;
<new URI> = <HTMLObjectElement>.currentRequestFinalURI;
<new void> = <HTMLInputElement>.forceReload();
<new void> = <HTMLInputElement>.forceReload(<boolean>);
<new void> = <HTMLImageElement>.forceReload();
<new void> = <HTMLImageElement>.forceReload(<boolean>);
<new void> = <HTMLEmbedElement>.forceReload();
<new void> = <HTMLEmbedElement>.forceReload(<boolean>);
<new void> = <SVGImageElement>.forceReload();
<new void> = <SVGImageElement>.forceReload(<boolean>);
<new void> = <HTMLObjectElement>.forceReload();
<new void> = <HTMLObjectElement>.forceReload(<boolean>);
<new nsIEditor> = <HTMLInputElement>.editor;
<new nsIEditor> = <HTMLTextAreaElement>.editor;
<new boolean> = <HTMLInputElement>.hasEditor;
<new boolean> = <HTMLTextAreaElement>.hasEditor;
<new boolean> = <HTMLInputElement>.isInputEventTarget;
<new boolean> = <HTMLTextAreaElement>.isInputEventTarget;
<new void> = <HTMLInputElement>.setUserInput(<DOMString>);
<new void> = <HTMLTextAreaElement>.setUserInput(<DOMString>);
<new unsigned long> = <HTMLEmbedElement>.TYPE_LOADING;
<new unsigned long> = <HTMLObjectElement>.TYPE_LOADING;
<new unsigned long> = <HTMLEmbedElement>.TYPE_IMAGE;
<new unsigned long> = <HTMLObjectElement>.TYPE_IMAGE;
<new unsigned long> = <HTMLEmbedElement>.TYPE_FALLBACK;
<new unsigned long> = <HTMLObjectElement>.TYPE_FALLBACK;
<new unsigned long> = <HTMLEmbedElement>.TYPE_FAKE_PLUGIN;
<new unsigned long> = <HTMLObjectElement>.TYPE_FAKE_PLUGIN;
<new unsigned long> = <HTMLEmbedElement>.TYPE_DOCUMENT;
<new unsigned long> = <HTMLObjectElement>.TYPE_DOCUMENT;
<new unsigned long> = <HTMLEmbedElement>.TYPE_NULL;
<new unsigned long> = <HTMLObjectElement>.TYPE_NULL;
<new DOMString> = <HTMLEmbedElement>.actualType;
<new DOMString> = <HTMLObjectElement>.actualType;
<new unsigned long> = <HTMLEmbedElement>.displayedType;
<new unsigned long> = <HTMLObjectElement>.displayedType;
<HTMLEmbedElement>.getContentTypeForMIMEType(<DOMString>);
<HTMLObjectElement>.getContentTypeForMIMEType(<DOMString>);
<new sequence_MozPluginParameter_> = [<MozPluginParameter>];
<new MozPluginParameter> = <sequence_MozPluginParameter_>[0];
<new sequence_MozPluginParameter_> = <HTMLEmbedElement>.getPluginAttributes();
<new sequence_MozPluginParameter_> = <HTMLObjectElement>.getPluginAttributes();
<new sequence_MozPluginParameter_> = <HTMLEmbedElement>.getPluginParameters();
<new sequence_MozPluginParameter_> = <HTMLObjectElement>.getPluginParameters();
<new void> = <HTMLEmbedElement>.reload(<boolean>);
<new void> = <HTMLObjectElement>.reload(<boolean>);
<new URI> = <HTMLEmbedElement>.srcURI;
<new URI> = <HTMLObjectElement>.srcURI;
<new void> = <HTMLEmbedElement>.skipFakePlugins();
<new void> = <HTMLObjectElement>.skipFakePlugins();
<new unsigned long> = <HTMLEmbedElement>.runID;
<new unsigned long> = <HTMLObjectElement>.runID;
<new unsigned long> = <KeyboardEvent>.DOM_VK_CANCEL;
<new unsigned long> = <KeyEvent>.DOM_VK_CANCEL;
<new unsigned long> = <KeyboardEvent>.DOM_VK_HELP;
<new unsigned long> = <KeyEvent>.DOM_VK_HELP;
<new unsigned long> = <KeyboardEvent>.DOM_VK_BACK_SPACE;
<new unsigned long> = <KeyEvent>.DOM_VK_BACK_SPACE;
<new unsigned long> = <KeyboardEvent>.DOM_VK_TAB;
<new unsigned long> = <KeyEvent>.DOM_VK_TAB;
<new unsigned long> = <KeyboardEvent>.DOM_VK_CLEAR;
<new unsigned long> = <KeyEvent>.DOM_VK_CLEAR;
<new unsigned long> = <KeyboardEvent>.DOM_VK_RETURN;
<new unsigned long> = <KeyEvent>.DOM_VK_RETURN;
<new unsigned long> = <KeyboardEvent>.DOM_VK_SHIFT;
<new unsigned long> = <KeyEvent>.DOM_VK_SHIFT;
<new unsigned long> = <KeyboardEvent>.DOM_VK_CONTROL;
<new unsigned long> = <KeyEvent>.DOM_VK_CONTROL;
<new unsigned long> = <KeyboardEvent>.DOM_VK_ALT;
<new unsigned long> = <KeyEvent>.DOM_VK_ALT;
<new unsigned long> = <KeyboardEvent>.DOM_VK_PAUSE;
<new unsigned long> = <KeyEvent>.DOM_VK_PAUSE;
<new unsigned long> = <KeyboardEvent>.DOM_VK_CAPS_LOCK;
<new unsigned long> = <KeyEvent>.DOM_VK_CAPS_LOCK;
<new unsigned long> = <KeyboardEvent>.DOM_VK_KANA;
<new unsigned long> = <KeyEvent>.DOM_VK_KANA;
<new unsigned long> = <KeyboardEvent>.DOM_VK_HANGUL;
<new unsigned long> = <KeyEvent>.DOM_VK_HANGUL;
<new unsigned long> = <KeyboardEvent>.DOM_VK_EISU;
<new unsigned long> = <KeyEvent>.DOM_VK_EISU;
<new unsigned long> = <KeyboardEvent>.DOM_VK_JUNJA;
<new unsigned long> = <KeyEvent>.DOM_VK_JUNJA;
<new unsigned long> = <KeyboardEvent>.DOM_VK_FINAL;
<new unsigned long> = <KeyEvent>.DOM_VK_FINAL;
<new unsigned long> = <KeyboardEvent>.DOM_VK_HANJA;
<new unsigned long> = <KeyEvent>.DOM_VK_HANJA;
<new unsigned long> = <KeyboardEvent>.DOM_VK_KANJI;
<new unsigned long> = <KeyEvent>.DOM_VK_KANJI;
<new unsigned long> = <KeyboardEvent>.DOM_VK_ESCAPE;
<new unsigned long> = <KeyEvent>.DOM_VK_ESCAPE;
<new unsigned long> = <KeyboardEvent>.DOM_VK_CONVERT;
<new unsigned long> = <KeyEvent>.DOM_VK_CONVERT;
<new unsigned long> = <KeyboardEvent>.DOM_VK_NONCONVERT;
<new unsigned long> = <KeyEvent>.DOM_VK_NONCONVERT;
<new unsigned long> = <KeyboardEvent>.DOM_VK_ACCEPT;
<new unsigned long> = <KeyEvent>.DOM_VK_ACCEPT;
<new unsigned long> = <KeyboardEvent>.DOM_VK_MODECHANGE;
<new unsigned long> = <KeyEvent>.DOM_VK_MODECHANGE;
<new unsigned long> = <KeyboardEvent>.DOM_VK_SPACE;
<new unsigned long> = <KeyEvent>.DOM_VK_SPACE;
<new unsigned long> = <KeyboardEvent>.DOM_VK_PAGE_UP;
<new unsigned long> = <KeyEvent>.DOM_VK_PAGE_UP;
<new unsigned long> = <KeyboardEvent>.DOM_VK_PAGE_DOWN;
<new unsigned long> = <KeyEvent>.DOM_VK_PAGE_DOWN;
<new unsigned long> = <KeyboardEvent>.DOM_VK_END;
<new unsigned long> = <KeyEvent>.DOM_VK_END;
<new unsigned long> = <KeyboardEvent>.DOM_VK_HOME;
<new unsigned long> = <KeyEvent>.DOM_VK_HOME;
<new unsigned long> = <KeyboardEvent>.DOM_VK_LEFT;
<new unsigned long> = <KeyEvent>.DOM_VK_LEFT;
<new unsigned long> = <KeyboardEvent>.DOM_VK_UP;
<new unsigned long> = <KeyEvent>.DOM_VK_UP;
<new unsigned long> = <KeyboardEvent>.DOM_VK_RIGHT;
<new unsigned long> = <KeyEvent>.DOM_VK_RIGHT;
<new unsigned long> = <KeyboardEvent>.DOM_VK_DOWN;
<new unsigned long> = <KeyEvent>.DOM_VK_DOWN;
<new unsigned long> = <KeyboardEvent>.DOM_VK_SELECT;
<new unsigned long> = <KeyEvent>.DOM_VK_SELECT;
<new unsigned long> = <KeyboardEvent>.DOM_VK_PRINT;
<new unsigned long> = <KeyEvent>.DOM_VK_PRINT;
<new unsigned long> = <KeyboardEvent>.DOM_VK_EXECUTE;
<new unsigned long> = <KeyEvent>.DOM_VK_EXECUTE;
<new unsigned long> = <KeyboardEvent>.DOM_VK_PRINTSCREEN;
<new unsigned long> = <KeyEvent>.DOM_VK_PRINTSCREEN;
<new unsigned long> = <KeyboardEvent>.DOM_VK_INSERT;
<new unsigned long> = <KeyEvent>.DOM_VK_INSERT;
<new unsigned long> = <KeyboardEvent>.DOM_VK_DELETE;
<new unsigned long> = <KeyEvent>.DOM_VK_DELETE;
<new unsigned long> = <KeyboardEvent>.DOM_VK_0;
<new unsigned long> = <KeyEvent>.DOM_VK_0;
<new unsigned long> = <KeyboardEvent>.DOM_VK_1;
<new unsigned long> = <KeyEvent>.DOM_VK_1;
<new unsigned long> = <KeyboardEvent>.DOM_VK_2;
<new unsigned long> = <KeyEvent>.DOM_VK_2;
<new unsigned long> = <KeyboardEvent>.DOM_VK_3;
<new unsigned long> = <KeyEvent>.DOM_VK_3;
<new unsigned long> = <KeyboardEvent>.DOM_VK_4;
<new unsigned long> = <KeyEvent>.DOM_VK_4;
<new unsigned long> = <KeyboardEvent>.DOM_VK_5;
<new unsigned long> = <KeyEvent>.DOM_VK_5;
<new unsigned long> = <KeyboardEvent>.DOM_VK_6;
<new unsigned long> = <KeyEvent>.DOM_VK_6;
<new unsigned long> = <KeyboardEvent>.DOM_VK_7;
<new unsigned long> = <KeyEvent>.DOM_VK_7;
<new unsigned long> = <KeyboardEvent>.DOM_VK_8;
<new unsigned long> = <KeyEvent>.DOM_VK_8;
<new unsigned long> = <KeyboardEvent>.DOM_VK_9;
<new unsigned long> = <KeyEvent>.DOM_VK_9;
<new unsigned long> = <KeyboardEvent>.DOM_VK_COLON;
<new unsigned long> = <KeyEvent>.DOM_VK_COLON;
<new unsigned long> = <KeyboardEvent>.DOM_VK_SEMICOLON;
<new unsigned long> = <KeyEvent>.DOM_VK_SEMICOLON;
<new unsigned long> = <KeyboardEvent>.DOM_VK_LESS_THAN;
<new unsigned long> = <KeyEvent>.DOM_VK_LESS_THAN;
<new unsigned long> = <KeyboardEvent>.DOM_VK_EQUALS;
<new unsigned long> = <KeyEvent>.DOM_VK_EQUALS;
<new unsigned long> = <KeyboardEvent>.DOM_VK_GREATER_THAN;
<new unsigned long> = <KeyEvent>.DOM_VK_GREATER_THAN;
<new unsigned long> = <KeyboardEvent>.DOM_VK_QUESTION_MARK;
<new unsigned long> = <KeyEvent>.DOM_VK_QUESTION_MARK;
<new unsigned long> = <KeyboardEvent>.DOM_VK_AT;
<new unsigned long> = <KeyEvent>.DOM_VK_AT;
<new unsigned long> = <KeyboardEvent>.DOM_VK_A;
<new unsigned long> = <KeyEvent>.DOM_VK_A;
<new unsigned long> = <KeyboardEvent>.DOM_VK_B;
<new unsigned long> = <KeyEvent>.DOM_VK_B;
<new unsigned long> = <KeyboardEvent>.DOM_VK_C;
<new unsigned long> = <KeyEvent>.DOM_VK_C;
<new unsigned long> = <KeyboardEvent>.DOM_VK_D;
<new unsigned long> = <KeyEvent>.DOM_VK_D;
<new unsigned long> = <KeyboardEvent>.DOM_VK_E;
<new unsigned long> = <KeyEvent>.DOM_VK_E;
<new unsigned long> = <KeyboardEvent>.DOM_VK_F;
<new unsigned long> = <KeyEvent>.DOM_VK_F;
<new unsigned long> = <KeyboardEvent>.DOM_VK_G;
<new unsigned long> = <KeyEvent>.DOM_VK_G;
<new unsigned long> = <KeyboardEvent>.DOM_VK_H;
<new unsigned long> = <KeyEvent>.DOM_VK_H;
<new unsigned long> = <KeyboardEvent>.DOM_VK_I;
<new unsigned long> = <KeyEvent>.DOM_VK_I;
<new unsigned long> = <KeyboardEvent>.DOM_VK_J;
<new unsigned long> = <KeyEvent>.DOM_VK_J;
<new unsigned long> = <KeyboardEvent>.DOM_VK_K;
<new unsigned long> = <KeyEvent>.DOM_VK_K;
<new unsigned long> = <KeyboardEvent>.DOM_VK_L;
<new unsigned long> = <KeyEvent>.DOM_VK_L;
<new unsigned long> = <KeyboardEvent>.DOM_VK_M;
<new unsigned long> = <KeyEvent>.DOM_VK_M;
<new unsigned long> = <KeyboardEvent>.DOM_VK_N;
<new unsigned long> = <KeyEvent>.DOM_VK_N;
<new unsigned long> = <KeyboardEvent>.DOM_VK_O;
<new unsigned long> = <KeyEvent>.DOM_VK_O;
<new unsigned long> = <KeyboardEvent>.DOM_VK_P;
<new unsigned long> = <KeyEvent>.DOM_VK_P;
<new unsigned long> = <KeyboardEvent>.DOM_VK_Q;
<new unsigned long> = <KeyEvent>.DOM_VK_Q;
<new unsigned long> = <KeyboardEvent>.DOM_VK_R;
<new unsigned long> = <KeyEvent>.DOM_VK_R;
<new unsigned long> = <KeyboardEvent>.DOM_VK_S;
<new unsigned long> = <KeyEvent>.DOM_VK_S;
<new unsigned long> = <KeyboardEvent>.DOM_VK_T;
<new unsigned long> = <KeyEvent>.DOM_VK_T;
<new unsigned long> = <KeyboardEvent>.DOM_VK_U;
<new unsigned long> = <KeyEvent>.DOM_VK_U;
<new unsigned long> = <KeyboardEvent>.DOM_VK_V;
<new unsigned long> = <KeyEvent>.DOM_VK_V;
<new unsigned long> = <KeyboardEvent>.DOM_VK_W;
<new unsigned long> = <KeyEvent>.DOM_VK_W;
<new unsigned long> = <KeyboardEvent>.DOM_VK_X;
<new unsigned long> = <KeyEvent>.DOM_VK_X;
<new unsigned long> = <KeyboardEvent>.DOM_VK_Y;
<new unsigned long> = <KeyEvent>.DOM_VK_Y;
<new unsigned long> = <KeyboardEvent>.DOM_VK_Z;
<new unsigned long> = <KeyEvent>.DOM_VK_Z;
<new unsigned long> = <KeyboardEvent>.DOM_VK_WIN;
<new unsigned long> = <KeyEvent>.DOM_VK_WIN;
<new unsigned long> = <KeyboardEvent>.DOM_VK_CONTEXT_MENU;
<new unsigned long> = <KeyEvent>.DOM_VK_CONTEXT_MENU;
<new unsigned long> = <KeyboardEvent>.DOM_VK_SLEEP;
<new unsigned long> = <KeyEvent>.DOM_VK_SLEEP;
<new unsigned long> = <KeyboardEvent>.DOM_VK_NUMPAD0;
<new unsigned long> = <KeyEvent>.DOM_VK_NUMPAD0;
<new unsigned long> = <KeyboardEvent>.DOM_VK_NUMPAD1;
<new unsigned long> = <KeyEvent>.DOM_VK_NUMPAD1;
<new unsigned long> = <KeyboardEvent>.DOM_VK_NUMPAD2;
<new unsigned long> = <KeyEvent>.DOM_VK_NUMPAD2;
<new unsigned long> = <KeyboardEvent>.DOM_VK_NUMPAD3;
<new unsigned long> = <KeyEvent>.DOM_VK_NUMPAD3;
<new unsigned long> = <KeyboardEvent>.DOM_VK_NUMPAD4;
<new unsigned long> = <KeyEvent>.DOM_VK_NUMPAD4;
<new unsigned long> = <KeyboardEvent>.DOM_VK_NUMPAD5;
<new unsigned long> = <KeyEvent>.DOM_VK_NUMPAD5;
<new unsigned long> = <KeyboardEvent>.DOM_VK_NUMPAD6;
<new unsigned long> = <KeyEvent>.DOM_VK_NUMPAD6;
<new unsigned long> = <KeyboardEvent>.DOM_VK_NUMPAD7;
<new unsigned long> = <KeyEvent>.DOM_VK_NUMPAD7;
<new unsigned long> = <KeyboardEvent>.DOM_VK_NUMPAD8;
<new unsigned long> = <KeyEvent>.DOM_VK_NUMPAD8;
<new unsigned long> = <KeyboardEvent>.DOM_VK_NUMPAD9;
<new unsigned long> = <KeyEvent>.DOM_VK_NUMPAD9;
<new unsigned long> = <KeyboardEvent>.DOM_VK_MULTIPLY;
<new unsigned long> = <KeyEvent>.DOM_VK_MULTIPLY;
<new unsigned long> = <KeyboardEvent>.DOM_VK_ADD;
<new unsigned long> = <KeyEvent>.DOM_VK_ADD;
<new unsigned long> = <KeyboardEvent>.DOM_VK_SEPARATOR;
<new unsigned long> = <KeyEvent>.DOM_VK_SEPARATOR;
<new unsigned long> = <KeyboardEvent>.DOM_VK_SUBTRACT;
<new unsigned long> = <KeyEvent>.DOM_VK_SUBTRACT;
<new unsigned long> = <KeyboardEvent>.DOM_VK_DECIMAL;
<new unsigned long> = <KeyEvent>.DOM_VK_DECIMAL;
<new unsigned long> = <KeyboardEvent>.DOM_VK_DIVIDE;
<new unsigned long> = <KeyEvent>.DOM_VK_DIVIDE;
<new unsigned long> = <KeyboardEvent>.DOM_VK_F1;
<new unsigned long> = <KeyEvent>.DOM_VK_F1;
<new unsigned long> = <KeyboardEvent>.DOM_VK_F2;
<new unsigned long> = <KeyEvent>.DOM_VK_F2;
<new unsigned long> = <KeyboardEvent>.DOM_VK_F3;
<new unsigned long> = <KeyEvent>.DOM_VK_F3;
<new unsigned long> = <KeyboardEvent>.DOM_VK_F4;
<new unsigned long> = <KeyEvent>.DOM_VK_F4;
<new unsigned long> = <KeyboardEvent>.DOM_VK_F5;
<new unsigned long> = <KeyEvent>.DOM_VK_F5;
<new unsigned long> = <KeyboardEvent>.DOM_VK_F6;
<new unsigned long> = <KeyEvent>.DOM_VK_F6;
<new unsigned long> = <KeyboardEvent>.DOM_VK_F7;
<new unsigned long> = <KeyEvent>.DOM_VK_F7;
<new unsigned long> = <KeyboardEvent>.DOM_VK_F8;
<new unsigned long> = <KeyEvent>.DOM_VK_F8;
<new unsigned long> = <KeyboardEvent>.DOM_VK_F9;
<new unsigned long> = <KeyEvent>.DOM_VK_F9;
<new unsigned long> = <KeyboardEvent>.DOM_VK_F10;
<new unsigned long> = <KeyEvent>.DOM_VK_F10;
<new unsigned long> = <KeyboardEvent>.DOM_VK_F11;
<new unsigned long> = <KeyEvent>.DOM_VK_F11;
<new unsigned long> = <KeyboardEvent>.DOM_VK_F12;
<new unsigned long> = <KeyEvent>.DOM_VK_F12;
<new unsigned long> = <KeyboardEvent>.DOM_VK_F13;
<new unsigned long> = <KeyEvent>.DOM_VK_F13;
<new unsigned long> = <KeyboardEvent>.DOM_VK_F14;
<new unsigned long> = <KeyEvent>.DOM_VK_F14;
<new unsigned long> = <KeyboardEvent>.DOM_VK_F15;
<new unsigned long> = <KeyEvent>.DOM_VK_F15;
<new unsigned long> = <KeyboardEvent>.DOM_VK_F16;
<new unsigned long> = <KeyEvent>.DOM_VK_F16;
<new unsigned long> = <KeyboardEvent>.DOM_VK_F17;
<new unsigned long> = <KeyEvent>.DOM_VK_F17;
<new unsigned long> = <KeyboardEvent>.DOM_VK_F18;
<new unsigned long> = <KeyEvent>.DOM_VK_F18;
<new unsigned long> = <KeyboardEvent>.DOM_VK_F19;
<new unsigned long> = <KeyEvent>.DOM_VK_F19;
<new unsigned long> = <KeyboardEvent>.DOM_VK_F20;
<new unsigned long> = <KeyEvent>.DOM_VK_F20;
<new unsigned long> = <KeyboardEvent>.DOM_VK_F21;
<new unsigned long> = <KeyEvent>.DOM_VK_F21;
<new unsigned long> = <KeyboardEvent>.DOM_VK_F22;
<new unsigned long> = <KeyEvent>.DOM_VK_F22;
<new unsigned long> = <KeyboardEvent>.DOM_VK_F23;
<new unsigned long> = <KeyEvent>.DOM_VK_F23;
<new unsigned long> = <KeyboardEvent>.DOM_VK_F24;
<new unsigned long> = <KeyEvent>.DOM_VK_F24;
<new unsigned long> = <KeyboardEvent>.DOM_VK_NUM_LOCK;
<new unsigned long> = <KeyEvent>.DOM_VK_NUM_LOCK;
<new unsigned long> = <KeyboardEvent>.DOM_VK_SCROLL_LOCK;
<new unsigned long> = <KeyEvent>.DOM_VK_SCROLL_LOCK;
<new unsigned long> = <KeyboardEvent>.DOM_VK_WIN_OEM_FJ_JISHO;
<new unsigned long> = <KeyEvent>.DOM_VK_WIN_OEM_FJ_JISHO;
<new unsigned long> = <KeyboardEvent>.DOM_VK_WIN_OEM_FJ_MASSHOU;
<new unsigned long> = <KeyEvent>.DOM_VK_WIN_OEM_FJ_MASSHOU;
<new unsigned long> = <KeyboardEvent>.DOM_VK_WIN_OEM_FJ_TOUROKU;
<new unsigned long> = <KeyEvent>.DOM_VK_WIN_OEM_FJ_TOUROKU;
<new unsigned long> = <KeyboardEvent>.DOM_VK_WIN_OEM_FJ_LOYA;
<new unsigned long> = <KeyEvent>.DOM_VK_WIN_OEM_FJ_LOYA;
<new unsigned long> = <KeyboardEvent>.DOM_VK_WIN_OEM_FJ_ROYA;
<new unsigned long> = <KeyEvent>.DOM_VK_WIN_OEM_FJ_ROYA;
<new unsigned long> = <KeyboardEvent>.DOM_VK_CIRCUMFLEX;
<new unsigned long> = <KeyEvent>.DOM_VK_CIRCUMFLEX;
<new unsigned long> = <KeyboardEvent>.DOM_VK_EXCLAMATION;
<new unsigned long> = <KeyEvent>.DOM_VK_EXCLAMATION;
<new unsigned long> = <KeyboardEvent>.DOM_VK_DOUBLE_QUOTE;
<new unsigned long> = <KeyEvent>.DOM_VK_DOUBLE_QUOTE;
<new unsigned long> = <KeyboardEvent>.DOM_VK_HASH;
<new unsigned long> = <KeyEvent>.DOM_VK_HASH;
<new unsigned long> = <KeyboardEvent>.DOM_VK_DOLLAR;
<new unsigned long> = <KeyEvent>.DOM_VK_DOLLAR;
<new unsigned long> = <KeyboardEvent>.DOM_VK_PERCENT;
<new unsigned long> = <KeyEvent>.DOM_VK_PERCENT;
<new unsigned long> = <KeyboardEvent>.DOM_VK_AMPERSAND;
<new unsigned long> = <KeyEvent>.DOM_VK_AMPERSAND;
<new unsigned long> = <KeyboardEvent>.DOM_VK_UNDERSCORE;
<new unsigned long> = <KeyEvent>.DOM_VK_UNDERSCORE;
<new unsigned long> = <KeyboardEvent>.DOM_VK_OPEN_PAREN;
<new unsigned long> = <KeyEvent>.DOM_VK_OPEN_PAREN;
<new unsigned long> = <KeyboardEvent>.DOM_VK_CLOSE_PAREN;
<new unsigned long> = <KeyEvent>.DOM_VK_CLOSE_PAREN;
<new unsigned long> = <KeyboardEvent>.DOM_VK_ASTERISK;
<new unsigned long> = <KeyEvent>.DOM_VK_ASTERISK;
<new unsigned long> = <KeyboardEvent>.DOM_VK_PLUS;
<new unsigned long> = <KeyEvent>.DOM_VK_PLUS;
<new unsigned long> = <KeyboardEvent>.DOM_VK_PIPE;
<new unsigned long> = <KeyEvent>.DOM_VK_PIPE;
<new unsigned long> = <KeyboardEvent>.DOM_VK_HYPHEN_MINUS;
<new unsigned long> = <KeyEvent>.DOM_VK_HYPHEN_MINUS;
<new unsigned long> = <KeyboardEvent>.DOM_VK_OPEN_CURLY_BRACKET;
<new unsigned long> = <KeyEvent>.DOM_VK_OPEN_CURLY_BRACKET;
<new unsigned long> = <KeyboardEvent>.DOM_VK_CLOSE_CURLY_BRACKET;
<new unsigned long> = <KeyEvent>.DOM_VK_CLOSE_CURLY_BRACKET;
<new unsigned long> = <KeyboardEvent>.DOM_VK_TILDE;
<new unsigned long> = <KeyEvent>.DOM_VK_TILDE;
<new unsigned long> = <KeyboardEvent>.DOM_VK_VOLUME_MUTE;
<new unsigned long> = <KeyEvent>.DOM_VK_VOLUME_MUTE;
<new unsigned long> = <KeyboardEvent>.DOM_VK_VOLUME_DOWN;
<new unsigned long> = <KeyEvent>.DOM_VK_VOLUME_DOWN;
<new unsigned long> = <KeyboardEvent>.DOM_VK_VOLUME_UP;
<new unsigned long> = <KeyEvent>.DOM_VK_VOLUME_UP;
<new unsigned long> = <KeyboardEvent>.DOM_VK_COMMA;
<new unsigned long> = <KeyEvent>.DOM_VK_COMMA;
<new unsigned long> = <KeyboardEvent>.DOM_VK_PERIOD;
<new unsigned long> = <KeyEvent>.DOM_VK_PERIOD;
<new unsigned long> = <KeyboardEvent>.DOM_VK_SLASH;
<new unsigned long> = <KeyEvent>.DOM_VK_SLASH;
<new unsigned long> = <KeyboardEvent>.DOM_VK_BACK_QUOTE;
<new unsigned long> = <KeyEvent>.DOM_VK_BACK_QUOTE;
<new unsigned long> = <KeyboardEvent>.DOM_VK_OPEN_BRACKET;
<new unsigned long> = <KeyEvent>.DOM_VK_OPEN_BRACKET;
<new unsigned long> = <KeyboardEvent>.DOM_VK_BACK_SLASH;
<new unsigned long> = <KeyEvent>.DOM_VK_BACK_SLASH;
<new unsigned long> = <KeyboardEvent>.DOM_VK_CLOSE_BRACKET;
<new unsigned long> = <KeyEvent>.DOM_VK_CLOSE_BRACKET;
<new unsigned long> = <KeyboardEvent>.DOM_VK_QUOTE;
<new unsigned long> = <KeyEvent>.DOM_VK_QUOTE;
<new unsigned long> = <KeyboardEvent>.DOM_VK_META;
<new unsigned long> = <KeyEvent>.DOM_VK_META;
<new unsigned long> = <KeyboardEvent>.DOM_VK_ALTGR;
<new unsigned long> = <KeyEvent>.DOM_VK_ALTGR;
<new unsigned long> = <KeyboardEvent>.DOM_VK_WIN_ICO_HELP;
<new unsigned long> = <KeyEvent>.DOM_VK_WIN_ICO_HELP;
<new unsigned long> = <KeyboardEvent>.DOM_VK_WIN_ICO_00;
<new unsigned long> = <KeyEvent>.DOM_VK_WIN_ICO_00;
<new unsigned long> = <KeyboardEvent>.DOM_VK_PROCESSKEY;
<new unsigned long> = <KeyEvent>.DOM_VK_PROCESSKEY;
<new unsigned long> = <KeyboardEvent>.DOM_VK_WIN_ICO_CLEAR;
<new unsigned long> = <KeyEvent>.DOM_VK_WIN_ICO_CLEAR;
<new unsigned long> = <KeyboardEvent>.DOM_VK_WIN_OEM_RESET;
<new unsigned long> = <KeyEvent>.DOM_VK_WIN_OEM_RESET;
<new unsigned long> = <KeyboardEvent>.DOM_VK_WIN_OEM_JUMP;
<new unsigned long> = <KeyEvent>.DOM_VK_WIN_OEM_JUMP;
<new unsigned long> = <KeyboardEvent>.DOM_VK_WIN_OEM_PA1;
<new unsigned long> = <KeyEvent>.DOM_VK_WIN_OEM_PA1;
<new unsigned long> = <KeyboardEvent>.DOM_VK_WIN_OEM_PA2;
<new unsigned long> = <KeyEvent>.DOM_VK_WIN_OEM_PA2;
<new unsigned long> = <KeyboardEvent>.DOM_VK_WIN_OEM_PA3;
<new unsigned long> = <KeyEvent>.DOM_VK_WIN_OEM_PA3;
<new unsigned long> = <KeyboardEvent>.DOM_VK_WIN_OEM_WSCTRL;
<new unsigned long> = <KeyEvent>.DOM_VK_WIN_OEM_WSCTRL;
<new unsigned long> = <KeyboardEvent>.DOM_VK_WIN_OEM_CUSEL;
<new unsigned long> = <KeyEvent>.DOM_VK_WIN_OEM_CUSEL;
<new unsigned long> = <KeyboardEvent>.DOM_VK_WIN_OEM_ATTN;
<new unsigned long> = <KeyEvent>.DOM_VK_WIN_OEM_ATTN;
<new unsigned long> = <KeyboardEvent>.DOM_VK_WIN_OEM_FINISH;
<new unsigned long> = <KeyEvent>.DOM_VK_WIN_OEM_FINISH;
<new unsigned long> = <KeyboardEvent>.DOM_VK_WIN_OEM_COPY;
<new unsigned long> = <KeyEvent>.DOM_VK_WIN_OEM_COPY;
<new unsigned long> = <KeyboardEvent>.DOM_VK_WIN_OEM_AUTO;
<new unsigned long> = <KeyEvent>.DOM_VK_WIN_OEM_AUTO;
<new unsigned long> = <KeyboardEvent>.DOM_VK_WIN_OEM_ENLW;
<new unsigned long> = <KeyEvent>.DOM_VK_WIN_OEM_ENLW;
<new unsigned long> = <KeyboardEvent>.DOM_VK_WIN_OEM_BACKTAB;
<new unsigned long> = <KeyEvent>.DOM_VK_WIN_OEM_BACKTAB;
<new unsigned long> = <KeyboardEvent>.DOM_VK_ATTN;
<new unsigned long> = <KeyEvent>.DOM_VK_ATTN;
<new unsigned long> = <KeyboardEvent>.DOM_VK_CRSEL;
<new unsigned long> = <KeyEvent>.DOM_VK_CRSEL;
<new unsigned long> = <KeyboardEvent>.DOM_VK_EXSEL;
<new unsigned long> = <KeyEvent>.DOM_VK_EXSEL;
<new unsigned long> = <KeyboardEvent>.DOM_VK_EREOF;
<new unsigned long> = <KeyEvent>.DOM_VK_EREOF;
<new unsigned long> = <KeyboardEvent>.DOM_VK_PLAY;
<new unsigned long> = <KeyEvent>.DOM_VK_PLAY;
<new unsigned long> = <KeyboardEvent>.DOM_VK_ZOOM;
<new unsigned long> = <KeyEvent>.DOM_VK_ZOOM;
<new unsigned long> = <KeyboardEvent>.DOM_VK_PA1;
<new unsigned long> = <KeyEvent>.DOM_VK_PA1;
<new unsigned long> = <KeyboardEvent>.DOM_VK_WIN_OEM_CLEAR;
<new unsigned long> = <KeyEvent>.DOM_VK_WIN_OEM_CLEAR;
<new void> = <KeyboardEvent>.initKeyEvent(<DOMString>);
<new void> = <KeyboardEvent>.initKeyEvent(<DOMString>,<boolean>);
<new void> = <KeyboardEvent>.initKeyEvent(<DOMString>,<boolean>,<boolean>);
<new void> = <KeyboardEvent>.initKeyEvent(<DOMString>,<boolean>,<boolean>,<Window>);
<new void> = <KeyboardEvent>.initKeyEvent(<DOMString>,<boolean>,<boolean>,<Window>,<boolean>);
<new void> = <KeyboardEvent>.initKeyEvent(<DOMString>,<boolean>,<boolean>,<Window>,<boolean>,<boolean>);
<new void> = <KeyboardEvent>.initKeyEvent(<DOMString>,<boolean>,<boolean>,<Window>,<boolean>,<boolean>,<boolean>);
<new void> = <KeyboardEvent>.initKeyEvent(<DOMString>,<boolean>,<boolean>,<Window>,<boolean>,<boolean>,<boolean>,<boolean>);
<new void> = <KeyboardEvent>.initKeyEvent(<DOMString>,<boolean>,<boolean>,<Window>,<boolean>,<boolean>,<boolean>,<boolean>,<unsigned long>);
<new void> = <KeyboardEvent>.initKeyEvent(<DOMString>,<boolean>,<boolean>,<Window>,<boolean>,<boolean>,<boolean>,<boolean>,<unsigned long>,<unsigned long>);
<new void> = <KeyEvent>.initKeyEvent(<DOMString>);
<new void> = <KeyEvent>.initKeyEvent(<DOMString>,<boolean>);
<new void> = <KeyEvent>.initKeyEvent(<DOMString>,<boolean>,<boolean>);
<new void> = <KeyEvent>.initKeyEvent(<DOMString>,<boolean>,<boolean>,<Window>);
<new void> = <KeyEvent>.initKeyEvent(<DOMString>,<boolean>,<boolean>,<Window>,<boolean>);
<new void> = <KeyEvent>.initKeyEvent(<DOMString>,<boolean>,<boolean>,<Window>,<boolean>,<boolean>);
<new void> = <KeyEvent>.initKeyEvent(<DOMString>,<boolean>,<boolean>,<Window>,<boolean>,<boolean>,<boolean>);
<new void> = <KeyEvent>.initKeyEvent(<DOMString>,<boolean>,<boolean>,<Window>,<boolean>,<boolean>,<boolean>,<boolean>);
<new void> = <KeyEvent>.initKeyEvent(<DOMString>,<boolean>,<boolean>,<Window>,<boolean>,<boolean>,<boolean>,<boolean>,<unsigned long>);
<new void> = <KeyEvent>.initKeyEvent(<DOMString>,<boolean>,<boolean>,<Window>,<boolean>,<boolean>,<boolean>,<boolean>,<unsigned long>,<unsigned long>);
<new StyleSheet> = <ProcessingInstruction>.sheet;
<new StyleSheet> = <HTMLLinkElement>.sheet;
<new StyleSheet> = <SVGStyleElement>.sheet;
<new StyleSheet> = <HTMLStyleElement>.sheet;
<new FrameLoader> = <HTMLEmbedElement>.frameLoader;
<new FrameLoader> = <HTMLObjectElement>.frameLoader;
<new FrameLoader> = <HTMLIFrameElement>.frameLoader;
<new FrameLoader> = <HTMLFrameElement>.frameLoader;
<new BrowsingContext> = <HTMLEmbedElement>.browsingContext;
<new BrowsingContext> = <HTMLObjectElement>.browsingContext;
<new BrowsingContext> = <HTMLIFrameElement>.browsingContext;
<new BrowsingContext> = <HTMLFrameElement>.browsingContext;
<new void> = <HTMLEmbedElement>.swapFrameLoaders(<XULFrameElement>);
<new void> = <HTMLObjectElement>.swapFrameLoaders(<XULFrameElement>);
<new void> = <HTMLIFrameElement>.swapFrameLoaders(<XULFrameElement>);
<new void> = <HTMLFrameElement>.swapFrameLoaders(<XULFrameElement>);
<new void> = <HTMLEmbedElement>.swapFrameLoaders(<HTMLIFrameElement>);
<new void> = <HTMLObjectElement>.swapFrameLoaders(<HTMLIFrameElement>);
<new void> = <HTMLIFrameElement>.swapFrameLoaders(<HTMLIFrameElement>);
<new void> = <HTMLFrameElement>.swapFrameLoaders(<HTMLIFrameElement>);
<new void> = <HTMLEmbedElement>.changeRemoteness(<RemotenessOptions>);
<new void> = <HTMLObjectElement>.changeRemoteness(<RemotenessOptions>);
<new void> = <HTMLIFrameElement>.changeRemoteness(<RemotenessOptions>);
<new void> = <HTMLFrameElement>.changeRemoteness(<RemotenessOptions>);
<new DOMString> = <WorkerNavigator>.appCodeName;
<new DOMString> = <Navigator>.appCodeName;
<new DOMString> = <WorkerNavigator>.appName;
<new DOMString> = <Navigator>.appName;
<new DOMString> = <WorkerNavigator>.appVersion;
<new DOMString> = <Navigator>.appVersion;
<new DOMString> = <WorkerNavigator>.platform;
<new DOMString> = <Navigator>.platform;
<new DOMString> = <WorkerNavigator>.userAgent;
<new DOMString> = <Navigator>.userAgent;
<new DOMString> = <WorkerNavigator>.product;
<new DOMString> = <Navigator>.product;
<WorkerNavigator>.taintEnabled();
<Navigator>.taintEnabled();
<new DOMString> = <WorkerNavigator>.language;
<new DOMString> = <Navigator>.language;
<new sequence_DOMString_> = <WorkerNavigator>.languages;
<new sequence_DOMString_> = <Navigator>.languages;
<new boolean> = <WorkerNavigator>.onLine;
<new boolean> = <Navigator>.onLine;
<new void> = <Navigator>.checkProtocolHandlerAllowed(<DOMString>,<URI>,<URI>);
<new void> = <Navigator>.registerProtocolHandler(<DOMString>,<DOMString>);
<new StorageManager> = <WorkerNavigator>.storage;
<new StorageManager> = <Navigator>.storage;
<new Geolocation> = <Navigator>.geolocation;
<new unsigned long long> = <WorkerNavigator>.hardwareConcurrency;
<new unsigned long long> = <Navigator>.hardwareConcurrency;
<new boolean> = <Navigator>.webdriver;
<new LockManager> = <WorkerNavigator>.locks;
<new LockManager> = <Navigator>.locks;
<new HTMLCollection> = <DocumentFragment>.children;
<new HTMLCollection> = <Element>.children;
<new HTMLCollection> = <Document>.children;
<new Element> = <DocumentFragment>.firstElementChild;
<new Element> = <Element>.firstElementChild;
<new Element> = <Document>.firstElementChild;
<new Element> = <DocumentFragment>.lastElementChild;
<new Element> = <Element>.lastElementChild;
<new Element> = <Document>.lastElementChild;
<new unsigned long> = <DocumentFragment>.childElementCount;
<new unsigned long> = <Element>.childElementCount;
<new unsigned long> = <Document>.childElementCount;
<new HTMLCollection> = <DocumentFragment>.getElementsByAttribute(<DOMString>,<DOMString>);
<new HTMLCollection> = <Element>.getElementsByAttribute(<DOMString>,<DOMString>);
<new HTMLCollection> = <Document>.getElementsByAttribute(<DOMString>,<DOMString>);
<new HTMLCollection> = <DocumentFragment>.getElementsByAttributeNS(<DOMString>,<DOMString>,<DOMString>);
<new HTMLCollection> = <Element>.getElementsByAttributeNS(<DOMString>,<DOMString>,<DOMString>);
<new HTMLCollection> = <Document>.getElementsByAttributeNS(<DOMString>,<DOMString>,<DOMString>);
<new void> = <DocumentFragment>.prepend();
<new void> = <DocumentFragment>.prepend(<union_Node1DOMString_>);
<new void> = <Element>.prepend();
<new void> = <Element>.prepend(<union_Node1DOMString_>);
<new void> = <Document>.prepend();
<new void> = <Document>.prepend(<union_Node1DOMString_>);
<new void> = <DocumentFragment>.append();
<new void> = <DocumentFragment>.append(<union_Node1DOMString_>);
<new void> = <Element>.append();
<new void> = <Element>.append(<union_Node1DOMString_>);
<new void> = <Document>.append();
<new void> = <Document>.append(<union_Node1DOMString_>);
<new void> = <DocumentFragment>.replaceChildren();
<new void> = <DocumentFragment>.replaceChildren(<union_Node1DOMString_>);
<new void> = <Element>.replaceChildren();
<new void> = <Element>.replaceChildren(<union_Node1DOMString_>);
<new void> = <Document>.replaceChildren();
<new void> = <Document>.replaceChildren(<union_Node1DOMString_>);
<new Promise_void_> = <ReadableStreamDefaultReader>.closed;
<new Promise_void_> = <ReadableStreamDefaultReader>.cancel();
<new Promise_void_> = <ReadableStreamDefaultReader>.cancel(<any>);
<new SVGPathSegList> = <SVGPathElement>.pathSegList;
<new SVGPathSegList> = <SVGPathElement>.animatedPathSegList;
<new SVGPointList> = <SVGPolylineElement>.points;
<new SVGPointList> = <SVGPolygonElement>.points;
<new SVGPointList> = <SVGPolylineElement>.animatedPoints;
<new SVGPointList> = <SVGPolygonElement>.animatedPoints;
<new SVGAnimatedLength> = <SVGFEDisplacementMapElement>.x;
<new SVGAnimatedLength> = <SVGFEImageElement>.x;
<new SVGAnimatedLength> = <SVGFECompositeElement>.x;
<new SVGAnimatedLength> = <SVGFEMorphologyElement>.x;
<new SVGAnimatedLength> = <SVGFEDropShadowElement>.x;
<new SVGAnimatedLength> = <SVGFEComponentTransferElement>.x;
<new SVGAnimatedLength> = <SVGFETurbulenceElement>.x;
<new SVGAnimatedLength> = <SVGFEConvolveMatrixElement>.x;
<new SVGAnimatedLength> = <SVGFEDiffuseLightingElement>.x;
<new SVGAnimatedLength> = <SVGFEColorMatrixElement>.x;
<new SVGAnimatedLength> = <SVGFEBlendElement>.x;
<new SVGAnimatedLength> = <SVGFEMergeElement>.x;
<new SVGAnimatedLength> = <SVGFEOffsetElement>.x;
<new SVGAnimatedLength> = <SVGFESpecularLightingElement>.x;
<new SVGAnimatedLength> = <SVGFEGaussianBlurElement>.x;
<new SVGAnimatedLength> = <SVGFETileElement>.x;
<new SVGAnimatedLength> = <SVGFEFloodElement>.x;
<new SVGAnimatedLength> = <SVGFEDisplacementMapElement>.y;
<new SVGAnimatedLength> = <SVGFEImageElement>.y;
<new SVGAnimatedLength> = <SVGFECompositeElement>.y;
<new SVGAnimatedLength> = <SVGFEMorphologyElement>.y;
<new SVGAnimatedLength> = <SVGFEDropShadowElement>.y;
<new SVGAnimatedLength> = <SVGFEComponentTransferElement>.y;
<new SVGAnimatedLength> = <SVGFETurbulenceElement>.y;
<new SVGAnimatedLength> = <SVGFEConvolveMatrixElement>.y;
<new SVGAnimatedLength> = <SVGFEDiffuseLightingElement>.y;
<new SVGAnimatedLength> = <SVGFEColorMatrixElement>.y;
<new SVGAnimatedLength> = <SVGFEBlendElement>.y;
<new SVGAnimatedLength> = <SVGFEMergeElement>.y;
<new SVGAnimatedLength> = <SVGFEOffsetElement>.y;
<new SVGAnimatedLength> = <SVGFESpecularLightingElement>.y;
<new SVGAnimatedLength> = <SVGFEGaussianBlurElement>.y;
<new SVGAnimatedLength> = <SVGFETileElement>.y;
<new SVGAnimatedLength> = <SVGFEFloodElement>.y;
<new SVGAnimatedLength> = <SVGFEDisplacementMapElement>.width;
<new SVGAnimatedLength> = <SVGFEImageElement>.width;
<new SVGAnimatedLength> = <SVGFECompositeElement>.width;
<new SVGAnimatedLength> = <SVGFEMorphologyElement>.width;
<new SVGAnimatedLength> = <SVGFEDropShadowElement>.width;
<new SVGAnimatedLength> = <SVGFEComponentTransferElement>.width;
<new SVGAnimatedLength> = <SVGFETurbulenceElement>.width;
<new SVGAnimatedLength> = <SVGFEConvolveMatrixElement>.width;
<new SVGAnimatedLength> = <SVGFEDiffuseLightingElement>.width;
<new SVGAnimatedLength> = <SVGFEColorMatrixElement>.width;
<new SVGAnimatedLength> = <SVGFEBlendElement>.width;
<new SVGAnimatedLength> = <SVGFEMergeElement>.width;
<new SVGAnimatedLength> = <SVGFEOffsetElement>.width;
<new SVGAnimatedLength> = <SVGFESpecularLightingElement>.width;
<new SVGAnimatedLength> = <SVGFEGaussianBlurElement>.width;
<new SVGAnimatedLength> = <SVGFETileElement>.width;
<new SVGAnimatedLength> = <SVGFEFloodElement>.width;
<new SVGAnimatedLength> = <SVGFEDisplacementMapElement>.height;
<new SVGAnimatedLength> = <SVGFEImageElement>.height;
<new SVGAnimatedLength> = <SVGFECompositeElement>.height;
<new SVGAnimatedLength> = <SVGFEMorphologyElement>.height;
<new SVGAnimatedLength> = <SVGFEDropShadowElement>.height;
<new SVGAnimatedLength> = <SVGFEComponentTransferElement>.height;
<new SVGAnimatedLength> = <SVGFETurbulenceElement>.height;
<new SVGAnimatedLength> = <SVGFEConvolveMatrixElement>.height;
<new SVGAnimatedLength> = <SVGFEDiffuseLightingElement>.height;
<new SVGAnimatedLength> = <SVGFEColorMatrixElement>.height;
<new SVGAnimatedLength> = <SVGFEBlendElement>.height;
<new SVGAnimatedLength> = <SVGFEMergeElement>.height;
<new SVGAnimatedLength> = <SVGFEOffsetElement>.height;
<new SVGAnimatedLength> = <SVGFESpecularLightingElement>.height;
<new SVGAnimatedLength> = <SVGFEGaussianBlurElement>.height;
<new SVGAnimatedLength> = <SVGFETileElement>.height;
<new SVGAnimatedLength> = <SVGFEFloodElement>.height;
<new SVGAnimatedString> = <SVGFEDisplacementMapElement>.result;
<new SVGAnimatedString> = <SVGFEImageElement>.result;
<new SVGAnimatedString> = <SVGFECompositeElement>.result;
<new SVGAnimatedString> = <SVGFEMorphologyElement>.result;
<new SVGAnimatedString> = <SVGFEDropShadowElement>.result;
<new SVGAnimatedString> = <SVGFEComponentTransferElement>.result;
<new SVGAnimatedString> = <SVGFETurbulenceElement>.result;
<new SVGAnimatedString> = <SVGFEConvolveMatrixElement>.result;
<new SVGAnimatedString> = <SVGFEDiffuseLightingElement>.result;
<new SVGAnimatedString> = <SVGFEColorMatrixElement>.result;
<new SVGAnimatedString> = <SVGFEBlendElement>.result;
<new SVGAnimatedString> = <SVGFEMergeElement>.result;
<new SVGAnimatedString> = <SVGFEOffsetElement>.result;
<new SVGAnimatedString> = <SVGFESpecularLightingElement>.result;
<new SVGAnimatedString> = <SVGFEGaussianBlurElement>.result;
<new SVGAnimatedString> = <SVGFETileElement>.result;
<new SVGAnimatedString> = <SVGFEFloodElement>.result;
<new SVGAnimatedRect> = <SVGSVGElement>.viewBox;
<new SVGAnimatedRect> = <SVGPatternElement>.viewBox;
<new SVGAnimatedRect> = <SVGSymbolElement>.viewBox;
<new SVGAnimatedRect> = <SVGViewElement>.viewBox;
<new SVGAnimatedRect> = <SVGMarkerElement>.viewBox;
<new SVGAnimatedPreserveAspectRatio> = <SVGSVGElement>.preserveAspectRatio;
<new SVGAnimatedPreserveAspectRatio> = <SVGPatternElement>.preserveAspectRatio;
<new SVGAnimatedPreserveAspectRatio> = <SVGSymbolElement>.preserveAspectRatio;
<new SVGAnimatedPreserveAspectRatio> = <SVGViewElement>.preserveAspectRatio;
<new SVGAnimatedPreserveAspectRatio> = <SVGMarkerElement>.preserveAspectRatio;
<new SVGStringList> = <SVGAnimationElement>.requiredExtensions;
<new SVGStringList> = <SVGSymbolElement>.requiredExtensions;
<new SVGStringList> = <SVGGraphicsElement>.requiredExtensions;
<new SVGStringList> = <SVGAnimationElement>.systemLanguage;
<new SVGStringList> = <SVGSymbolElement>.systemLanguage;
<new SVGStringList> = <SVGGraphicsElement>.systemLanguage;
<new SVGAnimatedString> = <SVGAElement>.href;
<new SVGAnimatedString> = <SVGPatternElement>.href;
<new SVGAnimatedString> = <SVGMPathElement>.href;
<new SVGAnimatedString> = <SVGUseElement>.href;
<new SVGAnimatedString> = <SVGImageElement>.href;
<new SVGAnimatedString> = <SVGScriptElement>.href;
<new SVGAnimatedString> = <SVGGradientElement>.href;
<new SVGAnimatedString> = <SVGTextPathElement>.href;
<new SVGAnimatedString> = <SVGFEImageElement>.href;
<new SVGAnimatedString> = <SVGFilterElement>.href;
<new unsigned short> = <SVGSVGElement>.SVG_ZOOMANDPAN_UNKNOWN;
<new unsigned short> = <SVGViewElement>.SVG_ZOOMANDPAN_UNKNOWN;
<new unsigned short> = <SVGSVGElement>.SVG_ZOOMANDPAN_DISABLE;
<new unsigned short> = <SVGViewElement>.SVG_ZOOMANDPAN_DISABLE;
<new unsigned short> = <SVGSVGElement>.SVG_ZOOMANDPAN_MAGNIFY;
<new unsigned short> = <SVGViewElement>.SVG_ZOOMANDPAN_MAGNIFY;
<new unsigned short> = <SVGSVGElement>.zoomAndPan;
<SVGSVGElement>.zoomAndPan = <unsigned short>;
<new unsigned short> = <SVGViewElement>.zoomAndPan;
<SVGViewElement>.zoomAndPan = <unsigned short>;
<new long> = <TreeContentView>.rowCount;
<new nsITreeSelection> = <TreeContentView>.selection;
<TreeContentView>.selection = <nsITreeSelection>;
<TreeContentView>.selection = null;
<new DOMString> = <TreeContentView>.getRowProperties(<long>);
<new DOMString> = <TreeContentView>.getCellProperties(<long>,<TreeColumn>);
<new DOMString> = <TreeContentView>.getColumnProperties(<TreeColumn>);
<TreeContentView>.isContainer(<long>);
<TreeContentView>.isContainerOpen(<long>);
<TreeContentView>.isContainerEmpty(<long>);
<TreeContentView>.isSeparator(<long>);
<TreeContentView>.isSorted();
<new short> = <TreeContentView>.DROP_BEFORE;
<new short> = <TreeContentView>.DROP_ON;
<new short> = <TreeContentView>.DROP_AFTER;
<TreeContentView>.canDrop(<long>,<long>,<DataTransfer>);
<new void> = <TreeContentView>.drop(<long>,<long>,<DataTransfer>);
<TreeContentView>.getParentIndex(<long>);
<TreeContentView>.hasNextSibling(<long>,<long>);
<TreeContentView>.getLevel(<long>);
<new DOMString> = <TreeContentView>.getImageSrc(<long>,<TreeColumn>);
<new DOMString> = <TreeContentView>.getCellValue(<long>,<TreeColumn>);
<new DOMString> = <TreeContentView>.getCellText(<long>,<TreeColumn>);
<new void> = <TreeContentView>.setTree(<XULTreeElement>);
<new void> = <TreeContentView>.toggleOpenState(<long>);
<new void> = <TreeContentView>.cycleHeader(<TreeColumn>);
<new void> = <TreeContentView>.selectionChanged();
<new void> = <TreeContentView>.cycleCell(<long>,<TreeColumn>);
<TreeContentView>.isEditable(<long>,<TreeColumn>);
<new void> = <TreeContentView>.setCellValue(<long>,<TreeColumn>,<DOMString>);
<new void> = <TreeContentView>.setCellText(<long>,<TreeColumn>,<DOMString>);
<new U2F> = <Window>.u2f;
<new GLenum> = <WebGL2RenderingContext>.READ_BUFFER;
<new GLenum> = <WebGL2RenderingContext>.UNPACK_ROW_LENGTH;
<new GLenum> = <WebGL2RenderingContext>.UNPACK_SKIP_ROWS;
<new GLenum> = <WebGL2RenderingContext>.UNPACK_SKIP_PIXELS;
<new GLenum> = <WebGL2RenderingContext>.PACK_ROW_LENGTH;
<new GLenum> = <WebGL2RenderingContext>.PACK_SKIP_ROWS;
<new GLenum> = <WebGL2RenderingContext>.PACK_SKIP_PIXELS;
<new GLenum> = <WebGL2RenderingContext>.COLOR;
<new GLenum> = <WebGL2RenderingContext>.DEPTH;
<new GLenum> = <WebGL2RenderingContext>.STENCIL;
<new GLenum> = <WebGL2RenderingContext>.RED;
<new GLenum> = <WebGL2RenderingContext>.RGB8;
<new GLenum> = <WebGL2RenderingContext>.RGBA8;
<new GLenum> = <WebGL2RenderingContext>.RGB10_A2;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE_BINDING_3D;
<new GLenum> = <WebGL2RenderingContext>.UNPACK_SKIP_IMAGES;
<new GLenum> = <WebGL2RenderingContext>.UNPACK_IMAGE_HEIGHT;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE_3D;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE_WRAP_R;
<new GLenum> = <WebGL2RenderingContext>.MAX_3D_TEXTURE_SIZE;
<new GLenum> = <WebGL2RenderingContext>.UNSIGNED_INT_2_10_10_10_REV;
<new GLenum> = <WebGL2RenderingContext>.MAX_ELEMENTS_VERTICES;
<new GLenum> = <WebGL2RenderingContext>.MAX_ELEMENTS_INDICES;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE_MIN_LOD;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE_MAX_LOD;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE_BASE_LEVEL;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE_MAX_LEVEL;
<new GLenum> = <WebGL2RenderingContext>.MIN;
<new GLenum> = <WebGL2RenderingContext>.MAX;
<new GLenum> = <WebGL2RenderingContext>.DEPTH_COMPONENT24;
<new GLenum> = <WebGL2RenderingContext>.MAX_TEXTURE_LOD_BIAS;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE_COMPARE_MODE;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE_COMPARE_FUNC;
<new GLenum> = <WebGL2RenderingContext>.CURRENT_QUERY;
<new GLenum> = <WebGL2RenderingContext>.QUERY_RESULT;
<new GLenum> = <WebGL2RenderingContext>.QUERY_RESULT_AVAILABLE;
<new GLenum> = <WebGL2RenderingContext>.STREAM_READ;
<new GLenum> = <WebGL2RenderingContext>.STREAM_COPY;
<new GLenum> = <WebGL2RenderingContext>.STATIC_READ;
<new GLenum> = <WebGL2RenderingContext>.STATIC_COPY;
<new GLenum> = <WebGL2RenderingContext>.DYNAMIC_READ;
<new GLenum> = <WebGL2RenderingContext>.DYNAMIC_COPY;
<new GLenum> = <WebGL2RenderingContext>.MAX_DRAW_BUFFERS;
<new GLenum> = <WebGL2RenderingContext>.DRAW_BUFFER0;
<new GLenum> = <WebGL2RenderingContext>.DRAW_BUFFER1;
<new GLenum> = <WebGL2RenderingContext>.DRAW_BUFFER2;
<new GLenum> = <WebGL2RenderingContext>.DRAW_BUFFER3;
<new GLenum> = <WebGL2RenderingContext>.DRAW_BUFFER4;
<new GLenum> = <WebGL2RenderingContext>.DRAW_BUFFER5;
<new GLenum> = <WebGL2RenderingContext>.DRAW_BUFFER6;
<new GLenum> = <WebGL2RenderingContext>.DRAW_BUFFER7;
<new GLenum> = <WebGL2RenderingContext>.DRAW_BUFFER8;
<new GLenum> = <WebGL2RenderingContext>.DRAW_BUFFER9;
<new GLenum> = <WebGL2RenderingContext>.DRAW_BUFFER10;
<new GLenum> = <WebGL2RenderingContext>.DRAW_BUFFER11;
<new GLenum> = <WebGL2RenderingContext>.DRAW_BUFFER12;
<new GLenum> = <WebGL2RenderingContext>.DRAW_BUFFER13;
<new GLenum> = <WebGL2RenderingContext>.DRAW_BUFFER14;
<new GLenum> = <WebGL2RenderingContext>.DRAW_BUFFER15;
<new GLenum> = <WebGL2RenderingContext>.MAX_FRAGMENT_UNIFORM_COMPONENTS;
<new GLenum> = <WebGL2RenderingContext>.MAX_VERTEX_UNIFORM_COMPONENTS;
<new GLenum> = <WebGL2RenderingContext>.SAMPLER_3D;
<new GLenum> = <WebGL2RenderingContext>.SAMPLER_2D_SHADOW;
<new GLenum> = <WebGL2RenderingContext>.FRAGMENT_SHADER_DERIVATIVE_HINT;
<new GLenum> = <WebGL2RenderingContext>.PIXEL_PACK_BUFFER;
<new GLenum> = <WebGL2RenderingContext>.PIXEL_UNPACK_BUFFER;
<new GLenum> = <WebGL2RenderingContext>.PIXEL_PACK_BUFFER_BINDING;
<new GLenum> = <WebGL2RenderingContext>.PIXEL_UNPACK_BUFFER_BINDING;
<new GLenum> = <WebGL2RenderingContext>.FLOAT_MAT2x3;
<new GLenum> = <WebGL2RenderingContext>.FLOAT_MAT2x4;
<new GLenum> = <WebGL2RenderingContext>.FLOAT_MAT3x2;
<new GLenum> = <WebGL2RenderingContext>.FLOAT_MAT3x4;
<new GLenum> = <WebGL2RenderingContext>.FLOAT_MAT4x2;
<new GLenum> = <WebGL2RenderingContext>.FLOAT_MAT4x3;
<new GLenum> = <WebGL2RenderingContext>.SRGB;
<new GLenum> = <WebGL2RenderingContext>.SRGB8;
<new GLenum> = <WebGL2RenderingContext>.SRGB8_ALPHA8;
<new GLenum> = <WebGL2RenderingContext>.COMPARE_REF_TO_TEXTURE;
<new GLenum> = <WebGL2RenderingContext>.RGBA32F;
<new GLenum> = <WebGL2RenderingContext>.RGB32F;
<new GLenum> = <WebGL2RenderingContext>.RGBA16F;
<new GLenum> = <WebGL2RenderingContext>.RGB16F;
<new GLenum> = <WebGL2RenderingContext>.VERTEX_ATTRIB_ARRAY_INTEGER;
<new GLenum> = <WebGL2RenderingContext>.MAX_ARRAY_TEXTURE_LAYERS;
<new GLenum> = <WebGL2RenderingContext>.MIN_PROGRAM_TEXEL_OFFSET;
<new GLenum> = <WebGL2RenderingContext>.MAX_PROGRAM_TEXEL_OFFSET;
<new GLenum> = <WebGL2RenderingContext>.MAX_VARYING_COMPONENTS;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE_2D_ARRAY;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE_BINDING_2D_ARRAY;
<new GLenum> = <WebGL2RenderingContext>.R11F_G11F_B10F;
<new GLenum> = <WebGL2RenderingContext>.UNSIGNED_INT_10F_11F_11F_REV;
<new GLenum> = <WebGL2RenderingContext>.RGB9_E5;
<new GLenum> = <WebGL2RenderingContext>.UNSIGNED_INT_5_9_9_9_REV;
<new GLenum> = <WebGL2RenderingContext>.TRANSFORM_FEEDBACK_BUFFER_MODE;
<new GLenum> = <WebGL2RenderingContext>.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS;
<new GLenum> = <WebGL2RenderingContext>.TRANSFORM_FEEDBACK_VARYINGS;
<new GLenum> = <WebGL2RenderingContext>.TRANSFORM_FEEDBACK_BUFFER_START;
<new GLenum> = <WebGL2RenderingContext>.TRANSFORM_FEEDBACK_BUFFER_SIZE;
<new GLenum> = <WebGL2RenderingContext>.TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN;
<new GLenum> = <WebGL2RenderingContext>.RASTERIZER_DISCARD;
<new GLenum> = <WebGL2RenderingContext>.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS;
<new GLenum> = <WebGL2RenderingContext>.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS;
<new GLenum> = <WebGL2RenderingContext>.INTERLEAVED_ATTRIBS;
<new GLenum> = <WebGL2RenderingContext>.SEPARATE_ATTRIBS;
<new GLenum> = <WebGL2RenderingContext>.TRANSFORM_FEEDBACK_BUFFER;
<new GLenum> = <WebGL2RenderingContext>.TRANSFORM_FEEDBACK_BUFFER_BINDING;
<new GLenum> = <WebGL2RenderingContext>.RGBA32UI;
<new GLenum> = <WebGL2RenderingContext>.RGB32UI;
<new GLenum> = <WebGL2RenderingContext>.RGBA16UI;
<new GLenum> = <WebGL2RenderingContext>.RGB16UI;
<new GLenum> = <WebGL2RenderingContext>.RGBA8UI;
<new GLenum> = <WebGL2RenderingContext>.RGB8UI;
<new GLenum> = <WebGL2RenderingContext>.RGBA32I;
<new GLenum> = <WebGL2RenderingContext>.RGB32I;
<new GLenum> = <WebGL2RenderingContext>.RGBA16I;
<new GLenum> = <WebGL2RenderingContext>.RGB16I;
<new GLenum> = <WebGL2RenderingContext>.RGBA8I;
<new GLenum> = <WebGL2RenderingContext>.RGB8I;
<new GLenum> = <WebGL2RenderingContext>.RED_INTEGER;
<new GLenum> = <WebGL2RenderingContext>.RGB_INTEGER;
<new GLenum> = <WebGL2RenderingContext>.RGBA_INTEGER;
<new GLenum> = <WebGL2RenderingContext>.SAMPLER_2D_ARRAY;
<new GLenum> = <WebGL2RenderingContext>.SAMPLER_2D_ARRAY_SHADOW;
<new GLenum> = <WebGL2RenderingContext>.SAMPLER_CUBE_SHADOW;
<new GLenum> = <WebGL2RenderingContext>.UNSIGNED_INT_VEC2;
<new GLenum> = <WebGL2RenderingContext>.UNSIGNED_INT_VEC3;
<new GLenum> = <WebGL2RenderingContext>.UNSIGNED_INT_VEC4;
<new GLenum> = <WebGL2RenderingContext>.INT_SAMPLER_2D;
<new GLenum> = <WebGL2RenderingContext>.INT_SAMPLER_3D;
<new GLenum> = <WebGL2RenderingContext>.INT_SAMPLER_CUBE;
<new GLenum> = <WebGL2RenderingContext>.INT_SAMPLER_2D_ARRAY;
<new GLenum> = <WebGL2RenderingContext>.UNSIGNED_INT_SAMPLER_2D;
<new GLenum> = <WebGL2RenderingContext>.UNSIGNED_INT_SAMPLER_3D;
<new GLenum> = <WebGL2RenderingContext>.UNSIGNED_INT_SAMPLER_CUBE;
<new GLenum> = <WebGL2RenderingContext>.UNSIGNED_INT_SAMPLER_2D_ARRAY;
<new GLenum> = <WebGL2RenderingContext>.DEPTH_COMPONENT32F;
<new GLenum> = <WebGL2RenderingContext>.DEPTH32F_STENCIL8;
<new GLenum> = <WebGL2RenderingContext>.FLOAT_32_UNSIGNED_INT_24_8_REV;
<new GLenum> = <WebGL2RenderingContext>.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING;
<new GLenum> = <WebGL2RenderingContext>.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE;
<new GLenum> = <WebGL2RenderingContext>.FRAMEBUFFER_ATTACHMENT_RED_SIZE;
<new GLenum> = <WebGL2RenderingContext>.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE;
<new GLenum> = <WebGL2RenderingContext>.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE;
<new GLenum> = <WebGL2RenderingContext>.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE;
<new GLenum> = <WebGL2RenderingContext>.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE;
<new GLenum> = <WebGL2RenderingContext>.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE;
<new GLenum> = <WebGL2RenderingContext>.FRAMEBUFFER_DEFAULT;
<new GLenum> = <WebGL2RenderingContext>.UNSIGNED_INT_24_8;
<new GLenum> = <WebGL2RenderingContext>.DEPTH24_STENCIL8;
<new GLenum> = <WebGL2RenderingContext>.UNSIGNED_NORMALIZED;
<new GLenum> = <WebGL2RenderingContext>.DRAW_FRAMEBUFFER_BINDING;
<new GLenum> = <WebGL2RenderingContext>.READ_FRAMEBUFFER;
<new GLenum> = <WebGL2RenderingContext>.DRAW_FRAMEBUFFER;
<new GLenum> = <WebGL2RenderingContext>.READ_FRAMEBUFFER_BINDING;
<new GLenum> = <WebGL2RenderingContext>.RENDERBUFFER_SAMPLES;
<new GLenum> = <WebGL2RenderingContext>.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER;
<new GLenum> = <WebGL2RenderingContext>.MAX_COLOR_ATTACHMENTS;
<new GLenum> = <WebGL2RenderingContext>.COLOR_ATTACHMENT1;
<new GLenum> = <WebGL2RenderingContext>.COLOR_ATTACHMENT2;
<new GLenum> = <WebGL2RenderingContext>.COLOR_ATTACHMENT3;
<new GLenum> = <WebGL2RenderingContext>.COLOR_ATTACHMENT4;
<new GLenum> = <WebGL2RenderingContext>.COLOR_ATTACHMENT5;
<new GLenum> = <WebGL2RenderingContext>.COLOR_ATTACHMENT6;
<new GLenum> = <WebGL2RenderingContext>.COLOR_ATTACHMENT7;
<new GLenum> = <WebGL2RenderingContext>.COLOR_ATTACHMENT8;
<new GLenum> = <WebGL2RenderingContext>.COLOR_ATTACHMENT9;
<new GLenum> = <WebGL2RenderingContext>.COLOR_ATTACHMENT10;
<new GLenum> = <WebGL2RenderingContext>.COLOR_ATTACHMENT11;
<new GLenum> = <WebGL2RenderingContext>.COLOR_ATTACHMENT12;
<new GLenum> = <WebGL2RenderingContext>.COLOR_ATTACHMENT13;
<new GLenum> = <WebGL2RenderingContext>.COLOR_ATTACHMENT14;
<new GLenum> = <WebGL2RenderingContext>.COLOR_ATTACHMENT15;
<new GLenum> = <WebGL2RenderingContext>.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE;
<new GLenum> = <WebGL2RenderingContext>.MAX_SAMPLES;
<new GLenum> = <WebGL2RenderingContext>.HALF_FLOAT;
<new GLenum> = <WebGL2RenderingContext>.RG;
<new GLenum> = <WebGL2RenderingContext>.RG_INTEGER;
<new GLenum> = <WebGL2RenderingContext>.R8;
<new GLenum> = <WebGL2RenderingContext>.RG8;
<new GLenum> = <WebGL2RenderingContext>.R16F;
<new GLenum> = <WebGL2RenderingContext>.R32F;
<new GLenum> = <WebGL2RenderingContext>.RG16F;
<new GLenum> = <WebGL2RenderingContext>.RG32F;
<new GLenum> = <WebGL2RenderingContext>.R8I;
<new GLenum> = <WebGL2RenderingContext>.R8UI;
<new GLenum> = <WebGL2RenderingContext>.R16I;
<new GLenum> = <WebGL2RenderingContext>.R16UI;
<new GLenum> = <WebGL2RenderingContext>.R32I;
<new GLenum> = <WebGL2RenderingContext>.R32UI;
<new GLenum> = <WebGL2RenderingContext>.RG8I;
<new GLenum> = <WebGL2RenderingContext>.RG8UI;
<new GLenum> = <WebGL2RenderingContext>.RG16I;
<new GLenum> = <WebGL2RenderingContext>.RG16UI;
<new GLenum> = <WebGL2RenderingContext>.RG32I;
<new GLenum> = <WebGL2RenderingContext>.RG32UI;
<new GLenum> = <WebGL2RenderingContext>.VERTEX_ARRAY_BINDING;
<new GLenum> = <WebGL2RenderingContext>.R8_SNORM;
<new GLenum> = <WebGL2RenderingContext>.RG8_SNORM;
<new GLenum> = <WebGL2RenderingContext>.RGB8_SNORM;
<new GLenum> = <WebGL2RenderingContext>.RGBA8_SNORM;
<new GLenum> = <WebGL2RenderingContext>.SIGNED_NORMALIZED;
<new GLenum> = <WebGL2RenderingContext>.COPY_READ_BUFFER;
<new GLenum> = <WebGL2RenderingContext>.COPY_WRITE_BUFFER;
<new GLenum> = <WebGL2RenderingContext>.COPY_READ_BUFFER_BINDING;
<new GLenum> = <WebGL2RenderingContext>.COPY_WRITE_BUFFER_BINDING;
<new GLenum> = <WebGL2RenderingContext>.UNIFORM_BUFFER;
<new GLenum> = <WebGL2RenderingContext>.UNIFORM_BUFFER_BINDING;
<new GLenum> = <WebGL2RenderingContext>.UNIFORM_BUFFER_START;
<new GLenum> = <WebGL2RenderingContext>.UNIFORM_BUFFER_SIZE;
<new GLenum> = <WebGL2RenderingContext>.MAX_VERTEX_UNIFORM_BLOCKS;
<new GLenum> = <WebGL2RenderingContext>.MAX_FRAGMENT_UNIFORM_BLOCKS;
<new GLenum> = <WebGL2RenderingContext>.MAX_COMBINED_UNIFORM_BLOCKS;
<new GLenum> = <WebGL2RenderingContext>.MAX_UNIFORM_BUFFER_BINDINGS;
<new GLenum> = <WebGL2RenderingContext>.MAX_UNIFORM_BLOCK_SIZE;
<new GLenum> = <WebGL2RenderingContext>.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS;
<new GLenum> = <WebGL2RenderingContext>.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS;
<new GLenum> = <WebGL2RenderingContext>.UNIFORM_BUFFER_OFFSET_ALIGNMENT;
<new GLenum> = <WebGL2RenderingContext>.ACTIVE_UNIFORM_BLOCKS;
<new GLenum> = <WebGL2RenderingContext>.UNIFORM_TYPE;
<new GLenum> = <WebGL2RenderingContext>.UNIFORM_SIZE;
<new GLenum> = <WebGL2RenderingContext>.UNIFORM_BLOCK_INDEX;
<new GLenum> = <WebGL2RenderingContext>.UNIFORM_OFFSET;
<new GLenum> = <WebGL2RenderingContext>.UNIFORM_ARRAY_STRIDE;
<new GLenum> = <WebGL2RenderingContext>.UNIFORM_MATRIX_STRIDE;
<new GLenum> = <WebGL2RenderingContext>.UNIFORM_IS_ROW_MAJOR;
<new GLenum> = <WebGL2RenderingContext>.UNIFORM_BLOCK_BINDING;
<new GLenum> = <WebGL2RenderingContext>.UNIFORM_BLOCK_DATA_SIZE;
<new GLenum> = <WebGL2RenderingContext>.UNIFORM_BLOCK_ACTIVE_UNIFORMS;
<new GLenum> = <WebGL2RenderingContext>.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES;
<new GLenum> = <WebGL2RenderingContext>.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER;
<new GLenum> = <WebGL2RenderingContext>.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER;
<new GLenum> = <WebGL2RenderingContext>.INVALID_INDEX;
<new GLenum> = <WebGL2RenderingContext>.MAX_VERTEX_OUTPUT_COMPONENTS;
<new GLenum> = <WebGL2RenderingContext>.MAX_FRAGMENT_INPUT_COMPONENTS;
<new GLenum> = <WebGL2RenderingContext>.MAX_SERVER_WAIT_TIMEOUT;
<new GLenum> = <WebGL2RenderingContext>.OBJECT_TYPE;
<new GLenum> = <WebGL2RenderingContext>.SYNC_CONDITION;
<new GLenum> = <WebGL2RenderingContext>.SYNC_STATUS;
<new GLenum> = <WebGL2RenderingContext>.SYNC_FLAGS;
<new GLenum> = <WebGL2RenderingContext>.SYNC_FENCE;
<new GLenum> = <WebGL2RenderingContext>.SYNC_GPU_COMMANDS_COMPLETE;
<new GLenum> = <WebGL2RenderingContext>.UNSIGNALED;
<new GLenum> = <WebGL2RenderingContext>.SIGNALED;
<new GLenum> = <WebGL2RenderingContext>.ALREADY_SIGNALED;
<new GLenum> = <WebGL2RenderingContext>.TIMEOUT_EXPIRED;
<new GLenum> = <WebGL2RenderingContext>.CONDITION_SATISFIED;
<new GLenum> = <WebGL2RenderingContext>.WAIT_FAILED;
<new GLenum> = <WebGL2RenderingContext>.SYNC_FLUSH_COMMANDS_BIT;
<new GLenum> = <WebGL2RenderingContext>.VERTEX_ATTRIB_ARRAY_DIVISOR;
<new GLenum> = <WebGL2RenderingContext>.ANY_SAMPLES_PASSED;
<new GLenum> = <WebGL2RenderingContext>.ANY_SAMPLES_PASSED_CONSERVATIVE;
<new GLenum> = <WebGL2RenderingContext>.SAMPLER_BINDING;
<new GLenum> = <WebGL2RenderingContext>.RGB10_A2UI;
<new GLenum> = <WebGL2RenderingContext>.INT_2_10_10_10_REV;
<new GLenum> = <WebGL2RenderingContext>.TRANSFORM_FEEDBACK;
<new GLenum> = <WebGL2RenderingContext>.TRANSFORM_FEEDBACK_PAUSED;
<new GLenum> = <WebGL2RenderingContext>.TRANSFORM_FEEDBACK_ACTIVE;
<new GLenum> = <WebGL2RenderingContext>.TRANSFORM_FEEDBACK_BINDING;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE_IMMUTABLE_FORMAT;
<new GLenum> = <WebGL2RenderingContext>.MAX_ELEMENT_INDEX;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE_IMMUTABLE_LEVELS;
<new GLint64> = <WebGL2RenderingContext>.TIMEOUT_IGNORED;
<new GLenum> = <WebGL2RenderingContext>.MAX_CLIENT_WAIT_TIMEOUT_WEBGL;
<new void> = <WebGL2RenderingContext>.bufferData(<GLenum>,<GLsizeiptr>,<GLenum>);
<new void> = <WebGL2RenderingContext>.bufferData(<GLenum>,<ArrayBuffer>,<GLenum>);
<new void> = <WebGL2RenderingContext>.bufferData(<GLenum>,<ArrayBufferView>,<GLenum>);
<new void> = <WebGL2RenderingContext>.bufferSubData(<GLenum>,<GLintptr>,<ArrayBuffer>);
<new void> = <WebGL2RenderingContext>.bufferSubData(<GLenum>,<GLintptr>,<ArrayBufferView>);
<new void> = <WebGL2RenderingContext>.bufferData(<GLenum>,<ArrayBufferView>,<GLenum>,<GLuint>);
<new void> = <WebGL2RenderingContext>.bufferData(<GLenum>,<ArrayBufferView>,<GLenum>,<GLuint>,<GLuint>);
<new void> = <WebGL2RenderingContext>.bufferSubData(<GLenum>,<GLintptr>,<ArrayBufferView>,<GLuint>);
<new void> = <WebGL2RenderingContext>.bufferSubData(<GLenum>,<GLintptr>,<ArrayBufferView>,<GLuint>,<GLuint>);
<new void> = <WebGL2RenderingContext>.copyBufferSubData(<GLenum>,<GLenum>,<GLintptr>,<GLintptr>,<GLsizeiptr>);
<new void> = <WebGL2RenderingContext>.getBufferSubData(<GLenum>,<GLintptr>,<ArrayBufferView>);
<new void> = <WebGL2RenderingContext>.getBufferSubData(<GLenum>,<GLintptr>,<ArrayBufferView>,<GLuint>);
<new void> = <WebGL2RenderingContext>.getBufferSubData(<GLenum>,<GLintptr>,<ArrayBufferView>,<GLuint>,<GLuint>);
<new void> = <WebGL2RenderingContext>.blitFramebuffer(<GLint>,<GLint>,<GLint>,<GLint>,<GLint>,<GLint>,<GLint>,<GLint>,<GLbitfield>,<GLenum>);
<new void> = <WebGL2RenderingContext>.framebufferTextureLayer(<GLenum>,<GLenum>,<WebGLTexture>,<GLint>,<GLint>);
<new void> = <WebGL2RenderingContext>.invalidateFramebuffer(<GLenum>,<sequence_GLenum_>);
<new void> = <WebGL2RenderingContext>.invalidateSubFramebuffer(<GLenum>,<sequence_GLenum_>,<GLint>,<GLint>,<GLsizei>,<GLsizei>);
<new void> = <WebGL2RenderingContext>.readBuffer(<GLenum>);
<new any> = <WebGL2RenderingContext>.getInternalformatParameter(<GLenum>,<GLenum>,<GLenum>);
<new void> = <WebGL2RenderingContext>.renderbufferStorageMultisample(<GLenum>,<GLsizei>,<GLenum>,<GLsizei>,<GLsizei>);
<new void> = <WebGL2RenderingContext>.texStorage2D(<GLenum>,<GLsizei>,<GLenum>,<GLsizei>,<GLsizei>);
<new void> = <WebGL2RenderingContext>.texStorage3D(<GLenum>,<GLsizei>,<GLenum>,<GLsizei>,<GLsizei>,<GLsizei>);
<new void> = <WebGL2RenderingContext>.texImage2D(<GLenum>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLint>,<GLenum>,<GLenum>,<ArrayBufferView>);
<new void> = <WebGL2RenderingContext>.texImage2D(<GLenum>,<GLint>,<GLint>,<GLenum>,<GLenum>,<HTMLCanvasElement>);
<new void> = <WebGL2RenderingContext>.texImage2D(<GLenum>,<GLint>,<GLint>,<GLenum>,<GLenum>,<HTMLImageElement>);
<new void> = <WebGL2RenderingContext>.texImage2D(<GLenum>,<GLint>,<GLint>,<GLenum>,<GLenum>,<HTMLVideoElement>);
<new void> = <WebGL2RenderingContext>.texImage2D(<GLenum>,<GLint>,<GLint>,<GLenum>,<GLenum>,<ImageBitmap>);
<new void> = <WebGL2RenderingContext>.texImage2D(<GLenum>,<GLint>,<GLint>,<GLenum>,<GLenum>,<ImageData>);
<new void> = <WebGL2RenderingContext>.texSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLenum>,<GLenum>,<ArrayBufferView>);
<new void> = <WebGL2RenderingContext>.texSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLenum>,<GLenum>,<HTMLCanvasElement>);
<new void> = <WebGL2RenderingContext>.texSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLenum>,<GLenum>,<HTMLImageElement>);
<new void> = <WebGL2RenderingContext>.texSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLenum>,<GLenum>,<HTMLVideoElement>);
<new void> = <WebGL2RenderingContext>.texSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLenum>,<GLenum>,<ImageBitmap>);
<new void> = <WebGL2RenderingContext>.texSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLenum>,<GLenum>,<ImageData>);
<new void> = <WebGL2RenderingContext>.texImage2D(<GLenum>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLint>,<GLenum>,<GLenum>,<GLintptr>);
<new void> = <WebGL2RenderingContext>.texImage2D(<GLenum>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLint>,<GLenum>,<GLenum>,<HTMLCanvasElement>);
<new void> = <WebGL2RenderingContext>.texImage2D(<GLenum>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLint>,<GLenum>,<GLenum>,<HTMLImageElement>);
<new void> = <WebGL2RenderingContext>.texImage2D(<GLenum>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLint>,<GLenum>,<GLenum>,<HTMLVideoElement>);
<new void> = <WebGL2RenderingContext>.texImage2D(<GLenum>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLint>,<GLenum>,<GLenum>,<ImageBitmap>);
<new void> = <WebGL2RenderingContext>.texImage2D(<GLenum>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLint>,<GLenum>,<GLenum>,<ImageData>);
<new void> = <WebGL2RenderingContext>.texImage2D(<GLenum>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLint>,<GLenum>,<GLenum>,<ArrayBufferView>,<GLuint>);
<new void> = <WebGL2RenderingContext>.texImage3D(<GLenum>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLsizei>,<GLint>,<GLenum>,<GLenum>,<GLintptr>);
<new void> = <WebGL2RenderingContext>.texImage3D(<GLenum>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLsizei>,<GLint>,<GLenum>,<GLenum>,<HTMLCanvasElement>);
<new void> = <WebGL2RenderingContext>.texImage3D(<GLenum>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLsizei>,<GLint>,<GLenum>,<GLenum>,<HTMLImageElement>);
<new void> = <WebGL2RenderingContext>.texImage3D(<GLenum>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLsizei>,<GLint>,<GLenum>,<GLenum>,<HTMLVideoElement>);
<new void> = <WebGL2RenderingContext>.texImage3D(<GLenum>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLsizei>,<GLint>,<GLenum>,<GLenum>,<ImageBitmap>);
<new void> = <WebGL2RenderingContext>.texImage3D(<GLenum>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLsizei>,<GLint>,<GLenum>,<GLenum>,<ImageData>);
<new void> = <WebGL2RenderingContext>.texImage3D(<GLenum>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLsizei>,<GLint>,<GLenum>,<GLenum>,<ArrayBufferView>);
<new void> = <WebGL2RenderingContext>.texImage3D(<GLenum>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLsizei>,<GLint>,<GLenum>,<GLenum>,<ArrayBufferView>,<GLuint>);
<new void> = <WebGL2RenderingContext>.texSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLenum>,<GLenum>,<GLintptr>);
<new void> = <WebGL2RenderingContext>.texSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLenum>,<GLenum>,<HTMLCanvasElement>);
<new void> = <WebGL2RenderingContext>.texSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLenum>,<GLenum>,<HTMLImageElement>);
<new void> = <WebGL2RenderingContext>.texSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLenum>,<GLenum>,<HTMLVideoElement>);
<new void> = <WebGL2RenderingContext>.texSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLenum>,<GLenum>,<ImageBitmap>);
<new void> = <WebGL2RenderingContext>.texSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLenum>,<GLenum>,<ImageData>);
<new void> = <WebGL2RenderingContext>.texSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLenum>,<GLenum>,<ArrayBufferView>,<GLuint>);
<new void> = <WebGL2RenderingContext>.texSubImage3D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLsizei>,<GLenum>,<GLenum>,<GLintptr>);
<new void> = <WebGL2RenderingContext>.texSubImage3D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLsizei>,<GLenum>,<GLenum>,<HTMLCanvasElement>);
<new void> = <WebGL2RenderingContext>.texSubImage3D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLsizei>,<GLenum>,<GLenum>,<HTMLImageElement>);
<new void> = <WebGL2RenderingContext>.texSubImage3D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLsizei>,<GLenum>,<GLenum>,<HTMLVideoElement>);
<new void> = <WebGL2RenderingContext>.texSubImage3D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLsizei>,<GLenum>,<GLenum>,<ImageBitmap>);
<new void> = <WebGL2RenderingContext>.texSubImage3D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLsizei>,<GLenum>,<GLenum>,<ImageData>);
<new void> = <WebGL2RenderingContext>.texSubImage3D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLsizei>,<GLenum>,<GLenum>,<ArrayBufferView>);
<new void> = <WebGL2RenderingContext>.texSubImage3D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLsizei>,<GLenum>,<GLenum>,<ArrayBufferView>,<GLuint>);
<new void> = <WebGL2RenderingContext>.copyTexSubImage3D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>);
<new void> = <WebGL2RenderingContext>.compressedTexImage2D(<GLenum>,<GLint>,<GLenum>,<GLsizei>,<GLsizei>,<GLint>,<GLsizei>,<GLintptr>);
<new void> = <WebGL2RenderingContext>.compressedTexImage2D(<GLenum>,<GLint>,<GLenum>,<GLsizei>,<GLsizei>,<GLint>,<ArrayBufferView>);
<new void> = <WebGL2RenderingContext>.compressedTexImage2D(<GLenum>,<GLint>,<GLenum>,<GLsizei>,<GLsizei>,<GLint>,<ArrayBufferView>,<GLuint>);
<new void> = <WebGL2RenderingContext>.compressedTexImage2D(<GLenum>,<GLint>,<GLenum>,<GLsizei>,<GLsizei>,<GLint>,<ArrayBufferView>,<GLuint>,<GLuint>);
<new void> = <WebGL2RenderingContext>.compressedTexImage3D(<GLenum>,<GLint>,<GLenum>,<GLsizei>,<GLsizei>,<GLsizei>,<GLint>,<GLsizei>,<GLintptr>);
<new void> = <WebGL2RenderingContext>.compressedTexImage3D(<GLenum>,<GLint>,<GLenum>,<GLsizei>,<GLsizei>,<GLsizei>,<GLint>,<ArrayBufferView>);
<new void> = <WebGL2RenderingContext>.compressedTexImage3D(<GLenum>,<GLint>,<GLenum>,<GLsizei>,<GLsizei>,<GLsizei>,<GLint>,<ArrayBufferView>,<GLuint>);
<new void> = <WebGL2RenderingContext>.compressedTexImage3D(<GLenum>,<GLint>,<GLenum>,<GLsizei>,<GLsizei>,<GLsizei>,<GLint>,<ArrayBufferView>,<GLuint>,<GLuint>);
<new void> = <WebGL2RenderingContext>.compressedTexSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLenum>,<GLsizei>,<GLintptr>);
<new void> = <WebGL2RenderingContext>.compressedTexSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLenum>,<ArrayBufferView>);
<new void> = <WebGL2RenderingContext>.compressedTexSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLenum>,<ArrayBufferView>,<GLuint>);
<new void> = <WebGL2RenderingContext>.compressedTexSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLenum>,<ArrayBufferView>,<GLuint>,<GLuint>);
<new void> = <WebGL2RenderingContext>.compressedTexSubImage3D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLsizei>,<GLenum>,<GLsizei>,<GLintptr>);
<new void> = <WebGL2RenderingContext>.compressedTexSubImage3D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLsizei>,<GLenum>,<ArrayBufferView>);
<new void> = <WebGL2RenderingContext>.compressedTexSubImage3D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLsizei>,<GLenum>,<ArrayBufferView>,<GLuint>);
<new void> = <WebGL2RenderingContext>.compressedTexSubImage3D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLsizei>,<GLenum>,<ArrayBufferView>,<GLuint>,<GLuint>);
<new GLint> = <WebGL2RenderingContext>.getFragDataLocation(<WebGLProgram>,<DOMString>);
<new void> = <WebGL2RenderingContext>.uniform1ui(<WebGLUniformLocation>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniform2ui(<WebGLUniformLocation>,<GLuint>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniform3ui(<WebGLUniformLocation>,<GLuint>,<GLuint>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniform4ui(<WebGLUniformLocation>,<GLuint>,<GLuint>,<GLuint>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniform1fv(<WebGLUniformLocation>,<Float32List>);
<new void> = <WebGL2RenderingContext>.uniform1fv(<WebGLUniformLocation>,<Float32List>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniform1fv(<WebGLUniformLocation>,<Float32List>,<GLuint>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniform2fv(<WebGLUniformLocation>,<Float32List>);
<new void> = <WebGL2RenderingContext>.uniform2fv(<WebGLUniformLocation>,<Float32List>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniform2fv(<WebGLUniformLocation>,<Float32List>,<GLuint>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniform3fv(<WebGLUniformLocation>,<Float32List>);
<new void> = <WebGL2RenderingContext>.uniform3fv(<WebGLUniformLocation>,<Float32List>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniform3fv(<WebGLUniformLocation>,<Float32List>,<GLuint>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniform4fv(<WebGLUniformLocation>,<Float32List>);
<new void> = <WebGL2RenderingContext>.uniform4fv(<WebGLUniformLocation>,<Float32List>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniform4fv(<WebGLUniformLocation>,<Float32List>,<GLuint>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniform1iv(<WebGLUniformLocation>,<Int32List>);
<new void> = <WebGL2RenderingContext>.uniform1iv(<WebGLUniformLocation>,<Int32List>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniform1iv(<WebGLUniformLocation>,<Int32List>,<GLuint>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniform2iv(<WebGLUniformLocation>,<Int32List>);
<new void> = <WebGL2RenderingContext>.uniform2iv(<WebGLUniformLocation>,<Int32List>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniform2iv(<WebGLUniformLocation>,<Int32List>,<GLuint>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniform3iv(<WebGLUniformLocation>,<Int32List>);
<new void> = <WebGL2RenderingContext>.uniform3iv(<WebGLUniformLocation>,<Int32List>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniform3iv(<WebGLUniformLocation>,<Int32List>,<GLuint>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniform4iv(<WebGLUniformLocation>,<Int32List>);
<new void> = <WebGL2RenderingContext>.uniform4iv(<WebGLUniformLocation>,<Int32List>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniform4iv(<WebGLUniformLocation>,<Int32List>,<GLuint>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniform1uiv(<WebGLUniformLocation>,<Uint32List>);
<new void> = <WebGL2RenderingContext>.uniform1uiv(<WebGLUniformLocation>,<Uint32List>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniform1uiv(<WebGLUniformLocation>,<Uint32List>,<GLuint>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniform2uiv(<WebGLUniformLocation>,<Uint32List>);
<new void> = <WebGL2RenderingContext>.uniform2uiv(<WebGLUniformLocation>,<Uint32List>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniform2uiv(<WebGLUniformLocation>,<Uint32List>,<GLuint>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniform3uiv(<WebGLUniformLocation>,<Uint32List>);
<new void> = <WebGL2RenderingContext>.uniform3uiv(<WebGLUniformLocation>,<Uint32List>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniform3uiv(<WebGLUniformLocation>,<Uint32List>,<GLuint>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniform4uiv(<WebGLUniformLocation>,<Uint32List>);
<new void> = <WebGL2RenderingContext>.uniform4uiv(<WebGLUniformLocation>,<Uint32List>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniform4uiv(<WebGLUniformLocation>,<Uint32List>,<GLuint>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniformMatrix2fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>);
<new void> = <WebGL2RenderingContext>.uniformMatrix2fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniformMatrix2fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniformMatrix3x2fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>);
<new void> = <WebGL2RenderingContext>.uniformMatrix3x2fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniformMatrix3x2fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniformMatrix4x2fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>);
<new void> = <WebGL2RenderingContext>.uniformMatrix4x2fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniformMatrix4x2fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniformMatrix2x3fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>);
<new void> = <WebGL2RenderingContext>.uniformMatrix2x3fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniformMatrix2x3fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniformMatrix3fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>);
<new void> = <WebGL2RenderingContext>.uniformMatrix3fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniformMatrix3fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniformMatrix4x3fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>);
<new void> = <WebGL2RenderingContext>.uniformMatrix4x3fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniformMatrix4x3fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniformMatrix2x4fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>);
<new void> = <WebGL2RenderingContext>.uniformMatrix2x4fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniformMatrix2x4fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniformMatrix3x4fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>);
<new void> = <WebGL2RenderingContext>.uniformMatrix3x4fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniformMatrix3x4fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniformMatrix4fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>);
<new void> = <WebGL2RenderingContext>.uniformMatrix4fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniformMatrix4fv(<WebGLUniformLocation>,<GLboolean>,<Float32List>,<GLuint>,<GLuint>);
<new void> = <WebGL2RenderingContext>.vertexAttribI4i(<GLuint>,<GLint>,<GLint>,<GLint>,<GLint>);
<new void> = <WebGL2RenderingContext>.vertexAttribI4iv(<GLuint>,<Int32List>);
<new void> = <WebGL2RenderingContext>.vertexAttribI4ui(<GLuint>,<GLuint>,<GLuint>,<GLuint>,<GLuint>);
<new void> = <WebGL2RenderingContext>.vertexAttribI4uiv(<GLuint>,<Uint32List>);
<new void> = <WebGL2RenderingContext>.vertexAttribIPointer(<GLuint>,<GLint>,<GLenum>,<GLsizei>,<GLintptr>);
<new void> = <WebGL2RenderingContext>.vertexAttribDivisor(<GLuint>,<GLuint>);
<new void> = <WebGL2RenderingContext>.drawArraysInstanced(<GLenum>,<GLint>,<GLsizei>,<GLsizei>);
<new void> = <WebGL2RenderingContext>.drawElementsInstanced(<GLenum>,<GLsizei>,<GLenum>,<GLintptr>,<GLsizei>);
<new void> = <WebGL2RenderingContext>.drawRangeElements(<GLenum>,<GLuint>,<GLuint>,<GLsizei>,<GLenum>,<GLintptr>);
<new void> = <WebGL2RenderingContext>.readPixels(<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLenum>,<GLenum>,<ArrayBufferView>);
<new void> = <WebGL2RenderingContext>.readPixels(<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLenum>,<GLenum>,<GLintptr>);
<new void> = <WebGL2RenderingContext>.readPixels(<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLenum>,<GLenum>,<ArrayBufferView>,<GLuint>);
<new void> = <WebGL2RenderingContext>.drawBuffers(<sequence_GLenum_>);
<new void> = <WebGL2RenderingContext>.clearBufferfv(<GLenum>,<GLint>,<Float32List>);
<new void> = <WebGL2RenderingContext>.clearBufferfv(<GLenum>,<GLint>,<Float32List>,<GLuint>);
<new void> = <WebGL2RenderingContext>.clearBufferiv(<GLenum>,<GLint>,<Int32List>);
<new void> = <WebGL2RenderingContext>.clearBufferiv(<GLenum>,<GLint>,<Int32List>,<GLuint>);
<new void> = <WebGL2RenderingContext>.clearBufferuiv(<GLenum>,<GLint>,<Uint32List>);
<new void> = <WebGL2RenderingContext>.clearBufferuiv(<GLenum>,<GLint>,<Uint32List>,<GLuint>);
<new void> = <WebGL2RenderingContext>.clearBufferfi(<GLenum>,<GLint>,<GLfloat>,<GLint>);
<new WebGLQuery> = <WebGL2RenderingContext>.createQuery();
<new void> = <WebGL2RenderingContext>.deleteQuery(<WebGLQuery>);
<new GLboolean> = <WebGL2RenderingContext>.isQuery(<WebGLQuery>);
<new void> = <WebGL2RenderingContext>.beginQuery(<GLenum>,<WebGLQuery>);
<new void> = <WebGL2RenderingContext>.endQuery(<GLenum>);
<new any> = <WebGL2RenderingContext>.getQuery(<GLenum>,<GLenum>);
<new any> = <WebGL2RenderingContext>.getQueryParameter(<WebGLQuery>,<GLenum>);
<new WebGLSampler> = <WebGL2RenderingContext>.createSampler();
<new void> = <WebGL2RenderingContext>.deleteSampler(<WebGLSampler>);
<new GLboolean> = <WebGL2RenderingContext>.isSampler(<WebGLSampler>);
<new void> = <WebGL2RenderingContext>.bindSampler(<GLuint>,<WebGLSampler>);
<new void> = <WebGL2RenderingContext>.samplerParameteri(<WebGLSampler>,<GLenum>,<GLint>);
<new void> = <WebGL2RenderingContext>.samplerParameterf(<WebGLSampler>,<GLenum>,<GLfloat>);
<new any> = <WebGL2RenderingContext>.getSamplerParameter(<WebGLSampler>,<GLenum>);
<new WebGLSync> = <WebGL2RenderingContext>.fenceSync(<GLenum>,<GLbitfield>);
<new GLboolean> = <WebGL2RenderingContext>.isSync(<WebGLSync>);
<new void> = <WebGL2RenderingContext>.deleteSync(<WebGLSync>);
<new GLenum> = <WebGL2RenderingContext>.clientWaitSync(<WebGLSync>,<GLbitfield>,<GLuint64>);
<new void> = <WebGL2RenderingContext>.waitSync(<WebGLSync>,<GLbitfield>,<GLint64>);
<new any> = <WebGL2RenderingContext>.getSyncParameter(<WebGLSync>,<GLenum>);
<new WebGLTransformFeedback> = <WebGL2RenderingContext>.createTransformFeedback();
<new void> = <WebGL2RenderingContext>.deleteTransformFeedback(<WebGLTransformFeedback>);
<new GLboolean> = <WebGL2RenderingContext>.isTransformFeedback(<WebGLTransformFeedback>);
<new void> = <WebGL2RenderingContext>.bindTransformFeedback(<GLenum>,<WebGLTransformFeedback>);
<new void> = <WebGL2RenderingContext>.beginTransformFeedback(<GLenum>);
<new void> = <WebGL2RenderingContext>.endTransformFeedback();
<new void> = <WebGL2RenderingContext>.transformFeedbackVaryings(<WebGLProgram>,<sequence_DOMString_>,<GLenum>);
<new WebGLActiveInfo> = <WebGL2RenderingContext>.getTransformFeedbackVarying(<WebGLProgram>,<GLuint>);
<new void> = <WebGL2RenderingContext>.pauseTransformFeedback();
<new void> = <WebGL2RenderingContext>.resumeTransformFeedback();
<new void> = <WebGL2RenderingContext>.bindBufferBase(<GLenum>,<GLuint>,<WebGLBuffer>);
<new void> = <WebGL2RenderingContext>.bindBufferRange(<GLenum>,<GLuint>,<WebGLBuffer>,<GLintptr>,<GLsizeiptr>);
<new any> = <WebGL2RenderingContext>.getIndexedParameter(<GLenum>,<GLuint>);
<new sequence_GLuint_> = <WebGL2RenderingContext>.getUniformIndices(<WebGLProgram>,<sequence_DOMString_>);
<new any> = <WebGL2RenderingContext>.getActiveUniforms(<WebGLProgram>,<sequence_GLuint_>,<GLenum>);
<new GLuint> = <WebGL2RenderingContext>.getUniformBlockIndex(<WebGLProgram>,<DOMString>);
<new any> = <WebGL2RenderingContext>.getActiveUniformBlockParameter(<WebGLProgram>,<GLuint>,<GLenum>);
<new DOMString> = <WebGL2RenderingContext>.getActiveUniformBlockName(<WebGLProgram>,<GLuint>);
<new void> = <WebGL2RenderingContext>.uniformBlockBinding(<WebGLProgram>,<GLuint>,<GLuint>);
<new WebGLVertexArrayObject> = <WebGL2RenderingContext>.createVertexArray();
<new void> = <WebGL2RenderingContext>.deleteVertexArray(<WebGLVertexArrayObject>);
<new GLboolean> = <WebGL2RenderingContext>.isVertexArray(<WebGLVertexArrayObject>);
<new void> = <WebGL2RenderingContext>.bindVertexArray(<WebGLVertexArrayObject>);
<new GLenum> = <WebGLRenderingContext>.DEPTH_BUFFER_BIT;
<new GLenum> = <WebGL2RenderingContext>.DEPTH_BUFFER_BIT;
<new GLenum> = <WebGLRenderingContext>.STENCIL_BUFFER_BIT;
<new GLenum> = <WebGL2RenderingContext>.STENCIL_BUFFER_BIT;
<new GLenum> = <WebGLRenderingContext>.COLOR_BUFFER_BIT;
<new GLenum> = <WebGL2RenderingContext>.COLOR_BUFFER_BIT;
<new GLenum> = <WebGLRenderingContext>.POINTS;
<new GLenum> = <WebGL2RenderingContext>.POINTS;
<new GLenum> = <WebGLRenderingContext>.LINES;
<new GLenum> = <WebGL2RenderingContext>.LINES;
<new GLenum> = <WebGLRenderingContext>.LINE_LOOP;
<new GLenum> = <WebGL2RenderingContext>.LINE_LOOP;
<new GLenum> = <WebGLRenderingContext>.LINE_STRIP;
<new GLenum> = <WebGL2RenderingContext>.LINE_STRIP;
<new GLenum> = <WebGLRenderingContext>.TRIANGLES;
<new GLenum> = <WebGL2RenderingContext>.TRIANGLES;
<new GLenum> = <WebGLRenderingContext>.TRIANGLE_STRIP;
<new GLenum> = <WebGL2RenderingContext>.TRIANGLE_STRIP;
<new GLenum> = <WebGLRenderingContext>.TRIANGLE_FAN;
<new GLenum> = <WebGL2RenderingContext>.TRIANGLE_FAN;
<new GLenum> = <WebGLRenderingContext>.ZERO;
<new GLenum> = <WebGL2RenderingContext>.ZERO;
<new GLenum> = <WebGLRenderingContext>.ONE;
<new GLenum> = <WebGL2RenderingContext>.ONE;
<new GLenum> = <WebGLRenderingContext>.SRC_COLOR;
<new GLenum> = <WebGL2RenderingContext>.SRC_COLOR;
<new GLenum> = <WebGLRenderingContext>.ONE_MINUS_SRC_COLOR;
<new GLenum> = <WebGL2RenderingContext>.ONE_MINUS_SRC_COLOR;
<new GLenum> = <WebGLRenderingContext>.SRC_ALPHA;
<new GLenum> = <WebGL2RenderingContext>.SRC_ALPHA;
<new GLenum> = <WebGLRenderingContext>.ONE_MINUS_SRC_ALPHA;
<new GLenum> = <WebGL2RenderingContext>.ONE_MINUS_SRC_ALPHA;
<new GLenum> = <WebGLRenderingContext>.DST_ALPHA;
<new GLenum> = <WebGL2RenderingContext>.DST_ALPHA;
<new GLenum> = <WebGLRenderingContext>.ONE_MINUS_DST_ALPHA;
<new GLenum> = <WebGL2RenderingContext>.ONE_MINUS_DST_ALPHA;
<new GLenum> = <WebGLRenderingContext>.DST_COLOR;
<new GLenum> = <WebGL2RenderingContext>.DST_COLOR;
<new GLenum> = <WebGLRenderingContext>.ONE_MINUS_DST_COLOR;
<new GLenum> = <WebGL2RenderingContext>.ONE_MINUS_DST_COLOR;
<new GLenum> = <WebGLRenderingContext>.SRC_ALPHA_SATURATE;
<new GLenum> = <WebGL2RenderingContext>.SRC_ALPHA_SATURATE;
<new GLenum> = <WebGLRenderingContext>.FUNC_ADD;
<new GLenum> = <WebGL2RenderingContext>.FUNC_ADD;
<new GLenum> = <WebGLRenderingContext>.BLEND_EQUATION;
<new GLenum> = <WebGL2RenderingContext>.BLEND_EQUATION;
<new GLenum> = <WebGLRenderingContext>.BLEND_EQUATION_RGB;
<new GLenum> = <WebGL2RenderingContext>.BLEND_EQUATION_RGB;
<new GLenum> = <WebGLRenderingContext>.BLEND_EQUATION_ALPHA;
<new GLenum> = <WebGL2RenderingContext>.BLEND_EQUATION_ALPHA;
<new GLenum> = <WebGLRenderingContext>.FUNC_SUBTRACT;
<new GLenum> = <WebGL2RenderingContext>.FUNC_SUBTRACT;
<new GLenum> = <WebGLRenderingContext>.FUNC_REVERSE_SUBTRACT;
<new GLenum> = <WebGL2RenderingContext>.FUNC_REVERSE_SUBTRACT;
<new GLenum> = <WebGLRenderingContext>.BLEND_DST_RGB;
<new GLenum> = <WebGL2RenderingContext>.BLEND_DST_RGB;
<new GLenum> = <WebGLRenderingContext>.BLEND_SRC_RGB;
<new GLenum> = <WebGL2RenderingContext>.BLEND_SRC_RGB;
<new GLenum> = <WebGLRenderingContext>.BLEND_DST_ALPHA;
<new GLenum> = <WebGL2RenderingContext>.BLEND_DST_ALPHA;
<new GLenum> = <WebGLRenderingContext>.BLEND_SRC_ALPHA;
<new GLenum> = <WebGL2RenderingContext>.BLEND_SRC_ALPHA;
<new GLenum> = <WebGLRenderingContext>.CONSTANT_COLOR;
<new GLenum> = <WebGL2RenderingContext>.CONSTANT_COLOR;
<new GLenum> = <WebGLRenderingContext>.ONE_MINUS_CONSTANT_COLOR;
<new GLenum> = <WebGL2RenderingContext>.ONE_MINUS_CONSTANT_COLOR;
<new GLenum> = <WebGLRenderingContext>.CONSTANT_ALPHA;
<new GLenum> = <WebGL2RenderingContext>.CONSTANT_ALPHA;
<new GLenum> = <WebGLRenderingContext>.ONE_MINUS_CONSTANT_ALPHA;
<new GLenum> = <WebGL2RenderingContext>.ONE_MINUS_CONSTANT_ALPHA;
<new GLenum> = <WebGLRenderingContext>.BLEND_COLOR;
<new GLenum> = <WebGL2RenderingContext>.BLEND_COLOR;
<new GLenum> = <WebGLRenderingContext>.ARRAY_BUFFER;
<new GLenum> = <WebGL2RenderingContext>.ARRAY_BUFFER;
<new GLenum> = <WebGLRenderingContext>.ELEMENT_ARRAY_BUFFER;
<new GLenum> = <WebGL2RenderingContext>.ELEMENT_ARRAY_BUFFER;
<new GLenum> = <WebGLRenderingContext>.ARRAY_BUFFER_BINDING;
<new GLenum> = <WebGL2RenderingContext>.ARRAY_BUFFER_BINDING;
<new GLenum> = <WebGLRenderingContext>.ELEMENT_ARRAY_BUFFER_BINDING;
<new GLenum> = <WebGL2RenderingContext>.ELEMENT_ARRAY_BUFFER_BINDING;
<new GLenum> = <WebGLRenderingContext>.STREAM_DRAW;
<new GLenum> = <WebGL2RenderingContext>.STREAM_DRAW;
<new GLenum> = <WebGLRenderingContext>.STATIC_DRAW;
<new GLenum> = <WebGL2RenderingContext>.STATIC_DRAW;
<new GLenum> = <WebGLRenderingContext>.DYNAMIC_DRAW;
<new GLenum> = <WebGL2RenderingContext>.DYNAMIC_DRAW;
<new GLenum> = <WebGLRenderingContext>.BUFFER_SIZE;
<new GLenum> = <WebGL2RenderingContext>.BUFFER_SIZE;
<new GLenum> = <WebGLRenderingContext>.BUFFER_USAGE;
<new GLenum> = <WebGL2RenderingContext>.BUFFER_USAGE;
<new GLenum> = <WebGLRenderingContext>.CURRENT_VERTEX_ATTRIB;
<new GLenum> = <WebGL2RenderingContext>.CURRENT_VERTEX_ATTRIB;
<new GLenum> = <WebGLRenderingContext>.FRONT;
<new GLenum> = <WebGL2RenderingContext>.FRONT;
<new GLenum> = <WebGLRenderingContext>.BACK;
<new GLenum> = <WebGL2RenderingContext>.BACK;
<new GLenum> = <WebGLRenderingContext>.FRONT_AND_BACK;
<new GLenum> = <WebGL2RenderingContext>.FRONT_AND_BACK;
<new GLenum> = <WebGLRenderingContext>.CULL_FACE;
<new GLenum> = <WebGL2RenderingContext>.CULL_FACE;
<new GLenum> = <WebGLRenderingContext>.BLEND;
<new GLenum> = <WebGL2RenderingContext>.BLEND;
<new GLenum> = <WebGLRenderingContext>.DITHER;
<new GLenum> = <WebGL2RenderingContext>.DITHER;
<new GLenum> = <WebGLRenderingContext>.STENCIL_TEST;
<new GLenum> = <WebGL2RenderingContext>.STENCIL_TEST;
<new GLenum> = <WebGLRenderingContext>.DEPTH_TEST;
<new GLenum> = <WebGL2RenderingContext>.DEPTH_TEST;
<new GLenum> = <WebGLRenderingContext>.SCISSOR_TEST;
<new GLenum> = <WebGL2RenderingContext>.SCISSOR_TEST;
<new GLenum> = <WebGLRenderingContext>.POLYGON_OFFSET_FILL;
<new GLenum> = <WebGL2RenderingContext>.POLYGON_OFFSET_FILL;
<new GLenum> = <WebGLRenderingContext>.SAMPLE_ALPHA_TO_COVERAGE;
<new GLenum> = <WebGL2RenderingContext>.SAMPLE_ALPHA_TO_COVERAGE;
<new GLenum> = <WebGLRenderingContext>.SAMPLE_COVERAGE;
<new GLenum> = <WebGL2RenderingContext>.SAMPLE_COVERAGE;
<new GLenum> = <WebGLRenderingContext>.NO_ERROR;
<new GLenum> = <WebGL2RenderingContext>.NO_ERROR;
<new GLenum> = <WebGLRenderingContext>.INVALID_ENUM;
<new GLenum> = <WebGL2RenderingContext>.INVALID_ENUM;
<new GLenum> = <WebGLRenderingContext>.INVALID_VALUE;
<new GLenum> = <WebGL2RenderingContext>.INVALID_VALUE;
<new GLenum> = <WebGLRenderingContext>.INVALID_OPERATION;
<new GLenum> = <WebGL2RenderingContext>.INVALID_OPERATION;
<new GLenum> = <WebGLRenderingContext>.OUT_OF_MEMORY;
<new GLenum> = <WebGL2RenderingContext>.OUT_OF_MEMORY;
<new GLenum> = <WebGLRenderingContext>.CW;
<new GLenum> = <WebGL2RenderingContext>.CW;
<new GLenum> = <WebGLRenderingContext>.CCW;
<new GLenum> = <WebGL2RenderingContext>.CCW;
<new GLenum> = <WebGLRenderingContext>.LINE_WIDTH;
<new GLenum> = <WebGL2RenderingContext>.LINE_WIDTH;
<new GLenum> = <WebGLRenderingContext>.ALIASED_POINT_SIZE_RANGE;
<new GLenum> = <WebGL2RenderingContext>.ALIASED_POINT_SIZE_RANGE;
<new GLenum> = <WebGLRenderingContext>.ALIASED_LINE_WIDTH_RANGE;
<new GLenum> = <WebGL2RenderingContext>.ALIASED_LINE_WIDTH_RANGE;
<new GLenum> = <WebGLRenderingContext>.CULL_FACE_MODE;
<new GLenum> = <WebGL2RenderingContext>.CULL_FACE_MODE;
<new GLenum> = <WebGLRenderingContext>.FRONT_FACE;
<new GLenum> = <WebGL2RenderingContext>.FRONT_FACE;
<new GLenum> = <WebGLRenderingContext>.DEPTH_RANGE;
<new GLenum> = <WebGL2RenderingContext>.DEPTH_RANGE;
<new GLenum> = <WebGLRenderingContext>.DEPTH_WRITEMASK;
<new GLenum> = <WebGL2RenderingContext>.DEPTH_WRITEMASK;
<new GLenum> = <WebGLRenderingContext>.DEPTH_CLEAR_VALUE;
<new GLenum> = <WebGL2RenderingContext>.DEPTH_CLEAR_VALUE;
<new GLenum> = <WebGLRenderingContext>.DEPTH_FUNC;
<new GLenum> = <WebGL2RenderingContext>.DEPTH_FUNC;
<new GLenum> = <WebGLRenderingContext>.STENCIL_CLEAR_VALUE;
<new GLenum> = <WebGL2RenderingContext>.STENCIL_CLEAR_VALUE;
<new GLenum> = <WebGLRenderingContext>.STENCIL_FUNC;
<new GLenum> = <WebGL2RenderingContext>.STENCIL_FUNC;
<new GLenum> = <WebGLRenderingContext>.STENCIL_FAIL;
<new GLenum> = <WebGL2RenderingContext>.STENCIL_FAIL;
<new GLenum> = <WebGLRenderingContext>.STENCIL_PASS_DEPTH_FAIL;
<new GLenum> = <WebGL2RenderingContext>.STENCIL_PASS_DEPTH_FAIL;
<new GLenum> = <WebGLRenderingContext>.STENCIL_PASS_DEPTH_PASS;
<new GLenum> = <WebGL2RenderingContext>.STENCIL_PASS_DEPTH_PASS;
<new GLenum> = <WebGLRenderingContext>.STENCIL_REF;
<new GLenum> = <WebGL2RenderingContext>.STENCIL_REF;
<new GLenum> = <WebGLRenderingContext>.STENCIL_VALUE_MASK;
<new GLenum> = <WebGL2RenderingContext>.STENCIL_VALUE_MASK;
<new GLenum> = <WebGLRenderingContext>.STENCIL_WRITEMASK;
<new GLenum> = <WebGL2RenderingContext>.STENCIL_WRITEMASK;
<new GLenum> = <WebGLRenderingContext>.STENCIL_BACK_FUNC;
<new GLenum> = <WebGL2RenderingContext>.STENCIL_BACK_FUNC;
<new GLenum> = <WebGLRenderingContext>.STENCIL_BACK_FAIL;
<new GLenum> = <WebGL2RenderingContext>.STENCIL_BACK_FAIL;
<new GLenum> = <WebGLRenderingContext>.STENCIL_BACK_PASS_DEPTH_FAIL;
<new GLenum> = <WebGL2RenderingContext>.STENCIL_BACK_PASS_DEPTH_FAIL;
<new GLenum> = <WebGLRenderingContext>.STENCIL_BACK_PASS_DEPTH_PASS;
<new GLenum> = <WebGL2RenderingContext>.STENCIL_BACK_PASS_DEPTH_PASS;
<new GLenum> = <WebGLRenderingContext>.STENCIL_BACK_REF;
<new GLenum> = <WebGL2RenderingContext>.STENCIL_BACK_REF;
<new GLenum> = <WebGLRenderingContext>.STENCIL_BACK_VALUE_MASK;
<new GLenum> = <WebGL2RenderingContext>.STENCIL_BACK_VALUE_MASK;
<new GLenum> = <WebGLRenderingContext>.STENCIL_BACK_WRITEMASK;
<new GLenum> = <WebGL2RenderingContext>.STENCIL_BACK_WRITEMASK;
<new GLenum> = <WebGLRenderingContext>.VIEWPORT;
<new GLenum> = <WebGL2RenderingContext>.VIEWPORT;
<new GLenum> = <WebGLRenderingContext>.SCISSOR_BOX;
<new GLenum> = <WebGL2RenderingContext>.SCISSOR_BOX;
<new GLenum> = <WebGLRenderingContext>.COLOR_CLEAR_VALUE;
<new GLenum> = <WebGL2RenderingContext>.COLOR_CLEAR_VALUE;
<new GLenum> = <WebGLRenderingContext>.COLOR_WRITEMASK;
<new GLenum> = <WebGL2RenderingContext>.COLOR_WRITEMASK;
<new GLenum> = <WebGLRenderingContext>.UNPACK_ALIGNMENT;
<new GLenum> = <WebGL2RenderingContext>.UNPACK_ALIGNMENT;
<new GLenum> = <WebGLRenderingContext>.PACK_ALIGNMENT;
<new GLenum> = <WebGL2RenderingContext>.PACK_ALIGNMENT;
<new GLenum> = <WebGLRenderingContext>.MAX_TEXTURE_SIZE;
<new GLenum> = <WebGL2RenderingContext>.MAX_TEXTURE_SIZE;
<new GLenum> = <WebGLRenderingContext>.MAX_VIEWPORT_DIMS;
<new GLenum> = <WebGL2RenderingContext>.MAX_VIEWPORT_DIMS;
<new GLenum> = <WebGLRenderingContext>.SUBPIXEL_BITS;
<new GLenum> = <WebGL2RenderingContext>.SUBPIXEL_BITS;
<new GLenum> = <WebGLRenderingContext>.RED_BITS;
<new GLenum> = <WebGL2RenderingContext>.RED_BITS;
<new GLenum> = <WebGLRenderingContext>.GREEN_BITS;
<new GLenum> = <WebGL2RenderingContext>.GREEN_BITS;
<new GLenum> = <WebGLRenderingContext>.BLUE_BITS;
<new GLenum> = <WebGL2RenderingContext>.BLUE_BITS;
<new GLenum> = <WebGLRenderingContext>.ALPHA_BITS;
<new GLenum> = <WebGL2RenderingContext>.ALPHA_BITS;
<new GLenum> = <WebGLRenderingContext>.DEPTH_BITS;
<new GLenum> = <WebGL2RenderingContext>.DEPTH_BITS;
<new GLenum> = <WebGLRenderingContext>.STENCIL_BITS;
<new GLenum> = <WebGL2RenderingContext>.STENCIL_BITS;
<new GLenum> = <WebGLRenderingContext>.POLYGON_OFFSET_UNITS;
<new GLenum> = <WebGL2RenderingContext>.POLYGON_OFFSET_UNITS;
<new GLenum> = <WebGLRenderingContext>.POLYGON_OFFSET_FACTOR;
<new GLenum> = <WebGL2RenderingContext>.POLYGON_OFFSET_FACTOR;
<new GLenum> = <WebGLRenderingContext>.TEXTURE_BINDING_2D;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE_BINDING_2D;
<new GLenum> = <WebGLRenderingContext>.SAMPLE_BUFFERS;
<new GLenum> = <WebGL2RenderingContext>.SAMPLE_BUFFERS;
<new GLenum> = <WebGLRenderingContext>.SAMPLES;
<new GLenum> = <WebGL2RenderingContext>.SAMPLES;
<new GLenum> = <WebGLRenderingContext>.SAMPLE_COVERAGE_VALUE;
<new GLenum> = <WebGL2RenderingContext>.SAMPLE_COVERAGE_VALUE;
<new GLenum> = <WebGLRenderingContext>.SAMPLE_COVERAGE_INVERT;
<new GLenum> = <WebGL2RenderingContext>.SAMPLE_COVERAGE_INVERT;
<new GLenum> = <WebGLRenderingContext>.COMPRESSED_TEXTURE_FORMATS;
<new GLenum> = <WebGL2RenderingContext>.COMPRESSED_TEXTURE_FORMATS;
<new GLenum> = <WebGLRenderingContext>.DONT_CARE;
<new GLenum> = <WebGL2RenderingContext>.DONT_CARE;
<new GLenum> = <WebGLRenderingContext>.FASTEST;
<new GLenum> = <WebGL2RenderingContext>.FASTEST;
<new GLenum> = <WebGLRenderingContext>.NICEST;
<new GLenum> = <WebGL2RenderingContext>.NICEST;
<new GLenum> = <WebGLRenderingContext>.GENERATE_MIPMAP_HINT;
<new GLenum> = <WebGL2RenderingContext>.GENERATE_MIPMAP_HINT;
<new GLenum> = <WebGLRenderingContext>.BYTE;
<new GLenum> = <WebGL2RenderingContext>.BYTE;
<new GLenum> = <WebGLRenderingContext>.UNSIGNED_BYTE;
<new GLenum> = <WebGL2RenderingContext>.UNSIGNED_BYTE;
<new GLenum> = <WebGLRenderingContext>.SHORT;
<new GLenum> = <WebGL2RenderingContext>.SHORT;
<new GLenum> = <WebGLRenderingContext>.UNSIGNED_SHORT;
<new GLenum> = <WebGL2RenderingContext>.UNSIGNED_SHORT;
<new GLenum> = <WebGLRenderingContext>.INT;
<new GLenum> = <WebGL2RenderingContext>.INT;
<new GLenum> = <WebGLRenderingContext>.UNSIGNED_INT;
<new GLenum> = <WebGL2RenderingContext>.UNSIGNED_INT;
<new GLenum> = <WebGLRenderingContext>.FLOAT;
<new GLenum> = <WebGL2RenderingContext>.FLOAT;
<new GLenum> = <WebGLRenderingContext>.DEPTH_COMPONENT;
<new GLenum> = <WebGL2RenderingContext>.DEPTH_COMPONENT;
<new GLenum> = <WebGLRenderingContext>.ALPHA;
<new GLenum> = <WebGL2RenderingContext>.ALPHA;
<new GLenum> = <WebGLRenderingContext>.RGB;
<new GLenum> = <WebGL2RenderingContext>.RGB;
<new GLenum> = <WebGLRenderingContext>.RGBA;
<new GLenum> = <WebGL2RenderingContext>.RGBA;
<new GLenum> = <WebGLRenderingContext>.LUMINANCE;
<new GLenum> = <WebGL2RenderingContext>.LUMINANCE;
<new GLenum> = <WebGLRenderingContext>.LUMINANCE_ALPHA;
<new GLenum> = <WebGL2RenderingContext>.LUMINANCE_ALPHA;
<new GLenum> = <WebGLRenderingContext>.UNSIGNED_SHORT_4_4_4_4;
<new GLenum> = <WebGL2RenderingContext>.UNSIGNED_SHORT_4_4_4_4;
<new GLenum> = <WebGLRenderingContext>.UNSIGNED_SHORT_5_5_5_1;
<new GLenum> = <WebGL2RenderingContext>.UNSIGNED_SHORT_5_5_5_1;
<new GLenum> = <WebGLRenderingContext>.UNSIGNED_SHORT_5_6_5;
<new GLenum> = <WebGL2RenderingContext>.UNSIGNED_SHORT_5_6_5;
<new GLenum> = <WebGLRenderingContext>.FRAGMENT_SHADER;
<new GLenum> = <WebGL2RenderingContext>.FRAGMENT_SHADER;
<new GLenum> = <WebGLRenderingContext>.VERTEX_SHADER;
<new GLenum> = <WebGL2RenderingContext>.VERTEX_SHADER;
<new GLenum> = <WebGLRenderingContext>.MAX_VERTEX_ATTRIBS;
<new GLenum> = <WebGL2RenderingContext>.MAX_VERTEX_ATTRIBS;
<new GLenum> = <WebGLRenderingContext>.MAX_VERTEX_UNIFORM_VECTORS;
<new GLenum> = <WebGL2RenderingContext>.MAX_VERTEX_UNIFORM_VECTORS;
<new GLenum> = <WebGLRenderingContext>.MAX_VARYING_VECTORS;
<new GLenum> = <WebGL2RenderingContext>.MAX_VARYING_VECTORS;
<new GLenum> = <WebGLRenderingContext>.MAX_COMBINED_TEXTURE_IMAGE_UNITS;
<new GLenum> = <WebGL2RenderingContext>.MAX_COMBINED_TEXTURE_IMAGE_UNITS;
<new GLenum> = <WebGLRenderingContext>.MAX_VERTEX_TEXTURE_IMAGE_UNITS;
<new GLenum> = <WebGL2RenderingContext>.MAX_VERTEX_TEXTURE_IMAGE_UNITS;
<new GLenum> = <WebGLRenderingContext>.MAX_TEXTURE_IMAGE_UNITS;
<new GLenum> = <WebGL2RenderingContext>.MAX_TEXTURE_IMAGE_UNITS;
<new GLenum> = <WebGLRenderingContext>.MAX_FRAGMENT_UNIFORM_VECTORS;
<new GLenum> = <WebGL2RenderingContext>.MAX_FRAGMENT_UNIFORM_VECTORS;
<new GLenum> = <WebGLRenderingContext>.SHADER_TYPE;
<new GLenum> = <WebGL2RenderingContext>.SHADER_TYPE;
<new GLenum> = <WebGLRenderingContext>.DELETE_STATUS;
<new GLenum> = <WebGL2RenderingContext>.DELETE_STATUS;
<new GLenum> = <WebGLRenderingContext>.LINK_STATUS;
<new GLenum> = <WebGL2RenderingContext>.LINK_STATUS;
<new GLenum> = <WebGLRenderingContext>.VALIDATE_STATUS;
<new GLenum> = <WebGL2RenderingContext>.VALIDATE_STATUS;
<new GLenum> = <WebGLRenderingContext>.ATTACHED_SHADERS;
<new GLenum> = <WebGL2RenderingContext>.ATTACHED_SHADERS;
<new GLenum> = <WebGLRenderingContext>.ACTIVE_UNIFORMS;
<new GLenum> = <WebGL2RenderingContext>.ACTIVE_UNIFORMS;
<new GLenum> = <WebGLRenderingContext>.ACTIVE_ATTRIBUTES;
<new GLenum> = <WebGL2RenderingContext>.ACTIVE_ATTRIBUTES;
<new GLenum> = <WebGLRenderingContext>.SHADING_LANGUAGE_VERSION;
<new GLenum> = <WebGL2RenderingContext>.SHADING_LANGUAGE_VERSION;
<new GLenum> = <WebGLRenderingContext>.CURRENT_PROGRAM;
<new GLenum> = <WebGL2RenderingContext>.CURRENT_PROGRAM;
<new GLenum> = <WebGLRenderingContext>.NEVER;
<new GLenum> = <WebGL2RenderingContext>.NEVER;
<new GLenum> = <WebGLRenderingContext>.LESS;
<new GLenum> = <WebGL2RenderingContext>.LESS;
<new GLenum> = <WebGLRenderingContext>.EQUAL;
<new GLenum> = <WebGL2RenderingContext>.EQUAL;
<new GLenum> = <WebGLRenderingContext>.LEQUAL;
<new GLenum> = <WebGL2RenderingContext>.LEQUAL;
<new GLenum> = <WebGLRenderingContext>.GREATER;
<new GLenum> = <WebGL2RenderingContext>.GREATER;
<new GLenum> = <WebGLRenderingContext>.NOTEQUAL;
<new GLenum> = <WebGL2RenderingContext>.NOTEQUAL;
<new GLenum> = <WebGLRenderingContext>.GEQUAL;
<new GLenum> = <WebGL2RenderingContext>.GEQUAL;
<new GLenum> = <WebGLRenderingContext>.ALWAYS;
<new GLenum> = <WebGL2RenderingContext>.ALWAYS;
<new GLenum> = <WebGLRenderingContext>.KEEP;
<new GLenum> = <WebGL2RenderingContext>.KEEP;
<new GLenum> = <WebGLRenderingContext>.REPLACE;
<new GLenum> = <WebGL2RenderingContext>.REPLACE;
<new GLenum> = <WebGLRenderingContext>.INCR;
<new GLenum> = <WebGL2RenderingContext>.INCR;
<new GLenum> = <WebGLRenderingContext>.DECR;
<new GLenum> = <WebGL2RenderingContext>.DECR;
<new GLenum> = <WebGLRenderingContext>.INVERT;
<new GLenum> = <WebGL2RenderingContext>.INVERT;
<new GLenum> = <WebGLRenderingContext>.INCR_WRAP;
<new GLenum> = <WebGL2RenderingContext>.INCR_WRAP;
<new GLenum> = <WebGLRenderingContext>.DECR_WRAP;
<new GLenum> = <WebGL2RenderingContext>.DECR_WRAP;
<new GLenum> = <WebGLRenderingContext>.VENDOR;
<new GLenum> = <WebGL2RenderingContext>.VENDOR;
<new GLenum> = <WebGLRenderingContext>.RENDERER;
<new GLenum> = <WebGL2RenderingContext>.RENDERER;
<new GLenum> = <WebGLRenderingContext>.VERSION;
<new GLenum> = <WebGL2RenderingContext>.VERSION;
<new GLenum> = <WebGLRenderingContext>.NEAREST;
<new GLenum> = <WebGL2RenderingContext>.NEAREST;
<new GLenum> = <WebGLRenderingContext>.LINEAR;
<new GLenum> = <WebGL2RenderingContext>.LINEAR;
<new GLenum> = <WebGLRenderingContext>.NEAREST_MIPMAP_NEAREST;
<new GLenum> = <WebGL2RenderingContext>.NEAREST_MIPMAP_NEAREST;
<new GLenum> = <WebGLRenderingContext>.LINEAR_MIPMAP_NEAREST;
<new GLenum> = <WebGL2RenderingContext>.LINEAR_MIPMAP_NEAREST;
<new GLenum> = <WebGLRenderingContext>.NEAREST_MIPMAP_LINEAR;
<new GLenum> = <WebGL2RenderingContext>.NEAREST_MIPMAP_LINEAR;
<new GLenum> = <WebGLRenderingContext>.LINEAR_MIPMAP_LINEAR;
<new GLenum> = <WebGL2RenderingContext>.LINEAR_MIPMAP_LINEAR;
<new GLenum> = <WebGLRenderingContext>.TEXTURE_MAG_FILTER;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE_MAG_FILTER;
<new GLenum> = <WebGLRenderingContext>.TEXTURE_MIN_FILTER;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE_MIN_FILTER;
<new GLenum> = <WebGLRenderingContext>.TEXTURE_WRAP_S;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE_WRAP_S;
<new GLenum> = <WebGLRenderingContext>.TEXTURE_WRAP_T;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE_WRAP_T;
<new GLenum> = <WebGLRenderingContext>.TEXTURE_2D;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE_2D;
<new GLenum> = <WebGLRenderingContext>.TEXTURE;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE;
<new GLenum> = <WebGLRenderingContext>.TEXTURE_CUBE_MAP;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE_CUBE_MAP;
<new GLenum> = <WebGLRenderingContext>.TEXTURE_BINDING_CUBE_MAP;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE_BINDING_CUBE_MAP;
<new GLenum> = <WebGLRenderingContext>.TEXTURE_CUBE_MAP_POSITIVE_X;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE_CUBE_MAP_POSITIVE_X;
<new GLenum> = <WebGLRenderingContext>.TEXTURE_CUBE_MAP_NEGATIVE_X;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE_CUBE_MAP_NEGATIVE_X;
<new GLenum> = <WebGLRenderingContext>.TEXTURE_CUBE_MAP_POSITIVE_Y;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE_CUBE_MAP_POSITIVE_Y;
<new GLenum> = <WebGLRenderingContext>.TEXTURE_CUBE_MAP_NEGATIVE_Y;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE_CUBE_MAP_NEGATIVE_Y;
<new GLenum> = <WebGLRenderingContext>.TEXTURE_CUBE_MAP_POSITIVE_Z;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE_CUBE_MAP_POSITIVE_Z;
<new GLenum> = <WebGLRenderingContext>.TEXTURE_CUBE_MAP_NEGATIVE_Z;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE_CUBE_MAP_NEGATIVE_Z;
<new GLenum> = <WebGLRenderingContext>.MAX_CUBE_MAP_TEXTURE_SIZE;
<new GLenum> = <WebGL2RenderingContext>.MAX_CUBE_MAP_TEXTURE_SIZE;
<new GLenum> = <WebGLRenderingContext>.TEXTURE0;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE0;
<new GLenum> = <WebGLRenderingContext>.TEXTURE1;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE1;
<new GLenum> = <WebGLRenderingContext>.TEXTURE2;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE2;
<new GLenum> = <WebGLRenderingContext>.TEXTURE3;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE3;
<new GLenum> = <WebGLRenderingContext>.TEXTURE4;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE4;
<new GLenum> = <WebGLRenderingContext>.TEXTURE5;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE5;
<new GLenum> = <WebGLRenderingContext>.TEXTURE6;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE6;
<new GLenum> = <WebGLRenderingContext>.TEXTURE7;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE7;
<new GLenum> = <WebGLRenderingContext>.TEXTURE8;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE8;
<new GLenum> = <WebGLRenderingContext>.TEXTURE9;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE9;
<new GLenum> = <WebGLRenderingContext>.TEXTURE10;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE10;
<new GLenum> = <WebGLRenderingContext>.TEXTURE11;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE11;
<new GLenum> = <WebGLRenderingContext>.TEXTURE12;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE12;
<new GLenum> = <WebGLRenderingContext>.TEXTURE13;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE13;
<new GLenum> = <WebGLRenderingContext>.TEXTURE14;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE14;
<new GLenum> = <WebGLRenderingContext>.TEXTURE15;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE15;
<new GLenum> = <WebGLRenderingContext>.TEXTURE16;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE16;
<new GLenum> = <WebGLRenderingContext>.TEXTURE17;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE17;
<new GLenum> = <WebGLRenderingContext>.TEXTURE18;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE18;
<new GLenum> = <WebGLRenderingContext>.TEXTURE19;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE19;
<new GLenum> = <WebGLRenderingContext>.TEXTURE20;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE20;
<new GLenum> = <WebGLRenderingContext>.TEXTURE21;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE21;
<new GLenum> = <WebGLRenderingContext>.TEXTURE22;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE22;
<new GLenum> = <WebGLRenderingContext>.TEXTURE23;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE23;
<new GLenum> = <WebGLRenderingContext>.TEXTURE24;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE24;
<new GLenum> = <WebGLRenderingContext>.TEXTURE25;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE25;
<new GLenum> = <WebGLRenderingContext>.TEXTURE26;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE26;
<new GLenum> = <WebGLRenderingContext>.TEXTURE27;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE27;
<new GLenum> = <WebGLRenderingContext>.TEXTURE28;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE28;
<new GLenum> = <WebGLRenderingContext>.TEXTURE29;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE29;
<new GLenum> = <WebGLRenderingContext>.TEXTURE30;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE30;
<new GLenum> = <WebGLRenderingContext>.TEXTURE31;
<new GLenum> = <WebGL2RenderingContext>.TEXTURE31;
<new GLenum> = <WebGLRenderingContext>.ACTIVE_TEXTURE;
<new GLenum> = <WebGL2RenderingContext>.ACTIVE_TEXTURE;
<new GLenum> = <WebGLRenderingContext>.REPEAT;
<new GLenum> = <WebGL2RenderingContext>.REPEAT;
<new GLenum> = <WebGLRenderingContext>.CLAMP_TO_EDGE;
<new GLenum> = <WebGL2RenderingContext>.CLAMP_TO_EDGE;
<new GLenum> = <WebGLRenderingContext>.MIRRORED_REPEAT;
<new GLenum> = <WebGL2RenderingContext>.MIRRORED_REPEAT;
<new GLenum> = <WebGLRenderingContext>.FLOAT_VEC2;
<new GLenum> = <WebGL2RenderingContext>.FLOAT_VEC2;
<new GLenum> = <WebGLRenderingContext>.FLOAT_VEC3;
<new GLenum> = <WebGL2RenderingContext>.FLOAT_VEC3;
<new GLenum> = <WebGLRenderingContext>.FLOAT_VEC4;
<new GLenum> = <WebGL2RenderingContext>.FLOAT_VEC4;
<new GLenum> = <WebGLRenderingContext>.INT_VEC2;
<new GLenum> = <WebGL2RenderingContext>.INT_VEC2;
<new GLenum> = <WebGLRenderingContext>.INT_VEC3;
<new GLenum> = <WebGL2RenderingContext>.INT_VEC3;
<new GLenum> = <WebGLRenderingContext>.INT_VEC4;
<new GLenum> = <WebGL2RenderingContext>.INT_VEC4;
<new GLenum> = <WebGLRenderingContext>.BOOL;
<new GLenum> = <WebGL2RenderingContext>.BOOL;
<new GLenum> = <WebGLRenderingContext>.BOOL_VEC2;
<new GLenum> = <WebGL2RenderingContext>.BOOL_VEC2;
<new GLenum> = <WebGLRenderingContext>.BOOL_VEC3;
<new GLenum> = <WebGL2RenderingContext>.BOOL_VEC3;
<new GLenum> = <WebGLRenderingContext>.BOOL_VEC4;
<new GLenum> = <WebGL2RenderingContext>.BOOL_VEC4;
<new GLenum> = <WebGLRenderingContext>.FLOAT_MAT2;
<new GLenum> = <WebGL2RenderingContext>.FLOAT_MAT2;
<new GLenum> = <WebGLRenderingContext>.FLOAT_MAT3;
<new GLenum> = <WebGL2RenderingContext>.FLOAT_MAT3;
<new GLenum> = <WebGLRenderingContext>.FLOAT_MAT4;
<new GLenum> = <WebGL2RenderingContext>.FLOAT_MAT4;
<new GLenum> = <WebGLRenderingContext>.SAMPLER_2D;
<new GLenum> = <WebGL2RenderingContext>.SAMPLER_2D;
<new GLenum> = <WebGLRenderingContext>.SAMPLER_CUBE;
<new GLenum> = <WebGL2RenderingContext>.SAMPLER_CUBE;
<new GLenum> = <WebGLRenderingContext>.VERTEX_ATTRIB_ARRAY_ENABLED;
<new GLenum> = <WebGL2RenderingContext>.VERTEX_ATTRIB_ARRAY_ENABLED;
<new GLenum> = <WebGLRenderingContext>.VERTEX_ATTRIB_ARRAY_SIZE;
<new GLenum> = <WebGL2RenderingContext>.VERTEX_ATTRIB_ARRAY_SIZE;
<new GLenum> = <WebGLRenderingContext>.VERTEX_ATTRIB_ARRAY_STRIDE;
<new GLenum> = <WebGL2RenderingContext>.VERTEX_ATTRIB_ARRAY_STRIDE;
<new GLenum> = <WebGLRenderingContext>.VERTEX_ATTRIB_ARRAY_TYPE;
<new GLenum> = <WebGL2RenderingContext>.VERTEX_ATTRIB_ARRAY_TYPE;
<new GLenum> = <WebGLRenderingContext>.VERTEX_ATTRIB_ARRAY_NORMALIZED;
<new GLenum> = <WebGL2RenderingContext>.VERTEX_ATTRIB_ARRAY_NORMALIZED;
<new GLenum> = <WebGLRenderingContext>.VERTEX_ATTRIB_ARRAY_POINTER;
<new GLenum> = <WebGL2RenderingContext>.VERTEX_ATTRIB_ARRAY_POINTER;
<new GLenum> = <WebGLRenderingContext>.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING;
<new GLenum> = <WebGL2RenderingContext>.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING;
<new GLenum> = <WebGLRenderingContext>.IMPLEMENTATION_COLOR_READ_TYPE;
<new GLenum> = <WebGL2RenderingContext>.IMPLEMENTATION_COLOR_READ_TYPE;
<new GLenum> = <WebGLRenderingContext>.IMPLEMENTATION_COLOR_READ_FORMAT;
<new GLenum> = <WebGL2RenderingContext>.IMPLEMENTATION_COLOR_READ_FORMAT;
<new GLenum> = <WebGLRenderingContext>.COMPILE_STATUS;
<new GLenum> = <WebGL2RenderingContext>.COMPILE_STATUS;
<new GLenum> = <WebGLRenderingContext>.LOW_FLOAT;
<new GLenum> = <WebGL2RenderingContext>.LOW_FLOAT;
<new GLenum> = <WebGLRenderingContext>.MEDIUM_FLOAT;
<new GLenum> = <WebGL2RenderingContext>.MEDIUM_FLOAT;
<new GLenum> = <WebGLRenderingContext>.HIGH_FLOAT;
<new GLenum> = <WebGL2RenderingContext>.HIGH_FLOAT;
<new GLenum> = <WebGLRenderingContext>.LOW_INT;
<new GLenum> = <WebGL2RenderingContext>.LOW_INT;
<new GLenum> = <WebGLRenderingContext>.MEDIUM_INT;
<new GLenum> = <WebGL2RenderingContext>.MEDIUM_INT;
<new GLenum> = <WebGLRenderingContext>.HIGH_INT;
<new GLenum> = <WebGL2RenderingContext>.HIGH_INT;
<new GLenum> = <WebGLRenderingContext>.FRAMEBUFFER;
<new GLenum> = <WebGL2RenderingContext>.FRAMEBUFFER;
<new GLenum> = <WebGLRenderingContext>.RENDERBUFFER;
<new GLenum> = <WebGL2RenderingContext>.RENDERBUFFER;
<new GLenum> = <WebGLRenderingContext>.RGBA4;
<new GLenum> = <WebGL2RenderingContext>.RGBA4;
<new GLenum> = <WebGLRenderingContext>.RGB5_A1;
<new GLenum> = <WebGL2RenderingContext>.RGB5_A1;
<new GLenum> = <WebGLRenderingContext>.RGB565;
<new GLenum> = <WebGL2RenderingContext>.RGB565;
<new GLenum> = <WebGLRenderingContext>.DEPTH_COMPONENT16;
<new GLenum> = <WebGL2RenderingContext>.DEPTH_COMPONENT16;
<new GLenum> = <WebGLRenderingContext>.STENCIL_INDEX8;
<new GLenum> = <WebGL2RenderingContext>.STENCIL_INDEX8;
<new GLenum> = <WebGLRenderingContext>.DEPTH_STENCIL;
<new GLenum> = <WebGL2RenderingContext>.DEPTH_STENCIL;
<new GLenum> = <WebGLRenderingContext>.RENDERBUFFER_WIDTH;
<new GLenum> = <WebGL2RenderingContext>.RENDERBUFFER_WIDTH;
<new GLenum> = <WebGLRenderingContext>.RENDERBUFFER_HEIGHT;
<new GLenum> = <WebGL2RenderingContext>.RENDERBUFFER_HEIGHT;
<new GLenum> = <WebGLRenderingContext>.RENDERBUFFER_INTERNAL_FORMAT;
<new GLenum> = <WebGL2RenderingContext>.RENDERBUFFER_INTERNAL_FORMAT;
<new GLenum> = <WebGLRenderingContext>.RENDERBUFFER_RED_SIZE;
<new GLenum> = <WebGL2RenderingContext>.RENDERBUFFER_RED_SIZE;
<new GLenum> = <WebGLRenderingContext>.RENDERBUFFER_GREEN_SIZE;
<new GLenum> = <WebGL2RenderingContext>.RENDERBUFFER_GREEN_SIZE;
<new GLenum> = <WebGLRenderingContext>.RENDERBUFFER_BLUE_SIZE;
<new GLenum> = <WebGL2RenderingContext>.RENDERBUFFER_BLUE_SIZE;
<new GLenum> = <WebGLRenderingContext>.RENDERBUFFER_ALPHA_SIZE;
<new GLenum> = <WebGL2RenderingContext>.RENDERBUFFER_ALPHA_SIZE;
<new GLenum> = <WebGLRenderingContext>.RENDERBUFFER_DEPTH_SIZE;
<new GLenum> = <WebGL2RenderingContext>.RENDERBUFFER_DEPTH_SIZE;
<new GLenum> = <WebGLRenderingContext>.RENDERBUFFER_STENCIL_SIZE;
<new GLenum> = <WebGL2RenderingContext>.RENDERBUFFER_STENCIL_SIZE;
<new GLenum> = <WebGLRenderingContext>.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE;
<new GLenum> = <WebGL2RenderingContext>.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE;
<new GLenum> = <WebGLRenderingContext>.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME;
<new GLenum> = <WebGL2RenderingContext>.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME;
<new GLenum> = <WebGLRenderingContext>.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL;
<new GLenum> = <WebGL2RenderingContext>.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL;
<new GLenum> = <WebGLRenderingContext>.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE;
<new GLenum> = <WebGL2RenderingContext>.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE;
<new GLenum> = <WebGLRenderingContext>.COLOR_ATTACHMENT0;
<new GLenum> = <WebGL2RenderingContext>.COLOR_ATTACHMENT0;
<new GLenum> = <WebGLRenderingContext>.DEPTH_ATTACHMENT;
<new GLenum> = <WebGL2RenderingContext>.DEPTH_ATTACHMENT;
<new GLenum> = <WebGLRenderingContext>.STENCIL_ATTACHMENT;
<new GLenum> = <WebGL2RenderingContext>.STENCIL_ATTACHMENT;
<new GLenum> = <WebGLRenderingContext>.DEPTH_STENCIL_ATTACHMENT;
<new GLenum> = <WebGL2RenderingContext>.DEPTH_STENCIL_ATTACHMENT;
<new GLenum> = <WebGLRenderingContext>.NONE;
<new GLenum> = <WebGL2RenderingContext>.NONE;
<new GLenum> = <WebGLRenderingContext>.FRAMEBUFFER_COMPLETE;
<new GLenum> = <WebGL2RenderingContext>.FRAMEBUFFER_COMPLETE;
<new GLenum> = <WebGLRenderingContext>.FRAMEBUFFER_INCOMPLETE_ATTACHMENT;
<new GLenum> = <WebGL2RenderingContext>.FRAMEBUFFER_INCOMPLETE_ATTACHMENT;
<new GLenum> = <WebGLRenderingContext>.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT;
<new GLenum> = <WebGL2RenderingContext>.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT;
<new GLenum> = <WebGLRenderingContext>.FRAMEBUFFER_INCOMPLETE_DIMENSIONS;
<new GLenum> = <WebGL2RenderingContext>.FRAMEBUFFER_INCOMPLETE_DIMENSIONS;
<new GLenum> = <WebGLRenderingContext>.FRAMEBUFFER_UNSUPPORTED;
<new GLenum> = <WebGL2RenderingContext>.FRAMEBUFFER_UNSUPPORTED;
<new GLenum> = <WebGLRenderingContext>.FRAMEBUFFER_BINDING;
<new GLenum> = <WebGL2RenderingContext>.FRAMEBUFFER_BINDING;
<new GLenum> = <WebGLRenderingContext>.RENDERBUFFER_BINDING;
<new GLenum> = <WebGL2RenderingContext>.RENDERBUFFER_BINDING;
<new GLenum> = <WebGLRenderingContext>.MAX_RENDERBUFFER_SIZE;
<new GLenum> = <WebGL2RenderingContext>.MAX_RENDERBUFFER_SIZE;
<new GLenum> = <WebGLRenderingContext>.INVALID_FRAMEBUFFER_OPERATION;
<new GLenum> = <WebGL2RenderingContext>.INVALID_FRAMEBUFFER_OPERATION;
<new GLenum> = <WebGLRenderingContext>.UNPACK_FLIP_Y_WEBGL;
<new GLenum> = <WebGL2RenderingContext>.UNPACK_FLIP_Y_WEBGL;
<new GLenum> = <WebGLRenderingContext>.UNPACK_PREMULTIPLY_ALPHA_WEBGL;
<new GLenum> = <WebGL2RenderingContext>.UNPACK_PREMULTIPLY_ALPHA_WEBGL;
<new GLenum> = <WebGLRenderingContext>.CONTEXT_LOST_WEBGL;
<new GLenum> = <WebGL2RenderingContext>.CONTEXT_LOST_WEBGL;
<new GLenum> = <WebGLRenderingContext>.UNPACK_COLORSPACE_CONVERSION_WEBGL;
<new GLenum> = <WebGL2RenderingContext>.UNPACK_COLORSPACE_CONVERSION_WEBGL;
<new GLenum> = <WebGLRenderingContext>.BROWSER_DEFAULT_WEBGL;
<new GLenum> = <WebGL2RenderingContext>.BROWSER_DEFAULT_WEBGL;
<new union_HTMLCanvasElement1OffscreenCanvas_> = <HTMLCanvasElement>;
<new union_HTMLCanvasElement1OffscreenCanvas_> = <OffscreenCanvas>;
<new union_HTMLCanvasElement1OffscreenCanvas_> = <WebGLRenderingContext>.canvas;
<new union_HTMLCanvasElement1OffscreenCanvas_> = <WebGL2RenderingContext>.canvas;
<new GLsizei> = <WebGLRenderingContext>.drawingBufferWidth;
<new GLsizei> = <WebGL2RenderingContext>.drawingBufferWidth;
<new GLsizei> = <WebGLRenderingContext>.drawingBufferHeight;
<new GLsizei> = <WebGL2RenderingContext>.drawingBufferHeight;
<new WebGLContextAttributes> = <WebGLRenderingContext>.getContextAttributes();
<new WebGLContextAttributes> = <WebGL2RenderingContext>.getContextAttributes();
<WebGLRenderingContext>.isContextLost();
<WebGL2RenderingContext>.isContextLost();
<new sequence_DOMString_> = <WebGLRenderingContext>.getSupportedExtensions();
<new sequence_DOMString_> = <WebGL2RenderingContext>.getSupportedExtensions();
<new object> = <WebGLRenderingContext>.getExtension(<DOMString>);
<new object> = <WebGL2RenderingContext>.getExtension(<DOMString>);
<new void> = <WebGLRenderingContext>.activeTexture(<GLenum>);
<new void> = <WebGL2RenderingContext>.activeTexture(<GLenum>);
<new void> = <WebGLRenderingContext>.attachShader(<WebGLProgram>,<WebGLShader>);
<new void> = <WebGL2RenderingContext>.attachShader(<WebGLProgram>,<WebGLShader>);
<new void> = <WebGLRenderingContext>.bindAttribLocation(<WebGLProgram>,<GLuint>,<DOMString>);
<new void> = <WebGL2RenderingContext>.bindAttribLocation(<WebGLProgram>,<GLuint>,<DOMString>);
<new void> = <WebGLRenderingContext>.bindBuffer(<GLenum>,<WebGLBuffer>);
<new void> = <WebGL2RenderingContext>.bindBuffer(<GLenum>,<WebGLBuffer>);
<new void> = <WebGLRenderingContext>.bindFramebuffer(<GLenum>,<WebGLFramebuffer>);
<new void> = <WebGL2RenderingContext>.bindFramebuffer(<GLenum>,<WebGLFramebuffer>);
<new void> = <WebGLRenderingContext>.bindRenderbuffer(<GLenum>,<WebGLRenderbuffer>);
<new void> = <WebGL2RenderingContext>.bindRenderbuffer(<GLenum>,<WebGLRenderbuffer>);
<new void> = <WebGLRenderingContext>.bindTexture(<GLenum>,<WebGLTexture>);
<new void> = <WebGL2RenderingContext>.bindTexture(<GLenum>,<WebGLTexture>);
<new void> = <WebGLRenderingContext>.blendColor(<GLfloat>,<GLfloat>,<GLfloat>,<GLfloat>);
<new void> = <WebGL2RenderingContext>.blendColor(<GLfloat>,<GLfloat>,<GLfloat>,<GLfloat>);
<new void> = <WebGLRenderingContext>.blendEquation(<GLenum>);
<new void> = <WebGL2RenderingContext>.blendEquation(<GLenum>);
<new void> = <WebGLRenderingContext>.blendEquationSeparate(<GLenum>,<GLenum>);
<new void> = <WebGL2RenderingContext>.blendEquationSeparate(<GLenum>,<GLenum>);
<new void> = <WebGLRenderingContext>.blendFunc(<GLenum>,<GLenum>);
<new void> = <WebGL2RenderingContext>.blendFunc(<GLenum>,<GLenum>);
<new void> = <WebGLRenderingContext>.blendFuncSeparate(<GLenum>,<GLenum>,<GLenum>,<GLenum>);
<new void> = <WebGL2RenderingContext>.blendFuncSeparate(<GLenum>,<GLenum>,<GLenum>,<GLenum>);
<new GLenum> = <WebGLRenderingContext>.checkFramebufferStatus(<GLenum>);
<new GLenum> = <WebGL2RenderingContext>.checkFramebufferStatus(<GLenum>);
<new void> = <WebGLRenderingContext>.clear(<GLbitfield>);
<new void> = <WebGL2RenderingContext>.clear(<GLbitfield>);
<new void> = <WebGLRenderingContext>.clearColor(<GLfloat>,<GLfloat>,<GLfloat>,<GLfloat>);
<new void> = <WebGL2RenderingContext>.clearColor(<GLfloat>,<GLfloat>,<GLfloat>,<GLfloat>);
<new void> = <WebGLRenderingContext>.clearDepth(<GLclampf>);
<new void> = <WebGL2RenderingContext>.clearDepth(<GLclampf>);
<new void> = <WebGLRenderingContext>.clearStencil(<GLint>);
<new void> = <WebGL2RenderingContext>.clearStencil(<GLint>);
<new void> = <WebGLRenderingContext>.colorMask(<GLboolean>,<GLboolean>,<GLboolean>,<GLboolean>);
<new void> = <WebGL2RenderingContext>.colorMask(<GLboolean>,<GLboolean>,<GLboolean>,<GLboolean>);
<new void> = <WebGLRenderingContext>.compileShader(<WebGLShader>);
<new void> = <WebGL2RenderingContext>.compileShader(<WebGLShader>);
<new void> = <WebGLRenderingContext>.copyTexImage2D(<GLenum>,<GLint>,<GLenum>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLint>);
<new void> = <WebGL2RenderingContext>.copyTexImage2D(<GLenum>,<GLint>,<GLenum>,<GLint>,<GLint>,<GLsizei>,<GLsizei>,<GLint>);
<new void> = <WebGLRenderingContext>.copyTexSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>);
<new void> = <WebGL2RenderingContext>.copyTexSubImage2D(<GLenum>,<GLint>,<GLint>,<GLint>,<GLint>,<GLint>,<GLsizei>,<GLsizei>);
<new WebGLBuffer> = <WebGLRenderingContext>.createBuffer();
<new WebGLBuffer> = <WebGL2RenderingContext>.createBuffer();
<new WebGLFramebuffer> = <WebGLRenderingContext>.createFramebuffer();
<new WebGLFramebuffer> = <WebGL2RenderingContext>.createFramebuffer();
<new WebGLProgram> = <WebGLRenderingContext>.createProgram();
<new WebGLProgram> = <WebGL2RenderingContext>.createProgram();
<new WebGLRenderbuffer> = <WebGLRenderingContext>.createRenderbuffer();
<new WebGLRenderbuffer> = <WebGL2RenderingContext>.createRenderbuffer();
<new WebGLShader> = <WebGLRenderingContext>.createShader(<GLenum>);
<new WebGLShader> = <WebGL2RenderingContext>.createShader(<GLenum>);
<new WebGLTexture> = <WebGLRenderingContext>.createTexture();
<new WebGLTexture> = <WebGL2RenderingContext>.createTexture();
<new void> = <WebGLRenderingContext>.cullFace(<GLenum>);
<new void> = <WebGL2RenderingContext>.cullFace(<GLenum>);
<new void> = <WebGLRenderingContext>.deleteBuffer(<WebGLBuffer>);
<new void> = <WebGL2RenderingContext>.deleteBuffer(<WebGLBuffer>);
<new void> = <WebGLRenderingContext>.deleteFramebuffer(<WebGLFramebuffer>);
<new void> = <WebGL2RenderingContext>.deleteFramebuffer(<WebGLFramebuffer>);
<new void> = <WebGLRenderingContext>.deleteProgram(<WebGLProgram>);
<new void> = <WebGL2RenderingContext>.deleteProgram(<WebGLProgram>);
<new void> = <WebGLRenderingContext>.deleteRenderbuffer(<WebGLRenderbuffer>);
<new void> = <WebGL2RenderingContext>.deleteRenderbuffer(<WebGLRenderbuffer>);
<new void> = <WebGLRenderingContext>.deleteShader(<WebGLShader>);
<new void> = <WebGL2RenderingContext>.deleteShader(<WebGLShader>);
<new void> = <WebGLRenderingContext>.deleteTexture(<WebGLTexture>);
<new void> = <WebGL2RenderingContext>.deleteTexture(<WebGLTexture>);
<new void> = <WebGLRenderingContext>.depthFunc(<GLenum>);
<new void> = <WebGL2RenderingContext>.depthFunc(<GLenum>);
<new void> = <WebGLRenderingContext>.depthMask(<GLboolean>);
<new void> = <WebGL2RenderingContext>.depthMask(<GLboolean>);
<new void> = <WebGLRenderingContext>.depthRange(<GLclampf>,<GLclampf>);
<new void> = <WebGL2RenderingContext>.depthRange(<GLclampf>,<GLclampf>);
<new void> = <WebGLRenderingContext>.detachShader(<WebGLProgram>,<WebGLShader>);
<new void> = <WebGL2RenderingContext>.detachShader(<WebGLProgram>,<WebGLShader>);
<new void> = <WebGLRenderingContext>.disable(<GLenum>);
<new void> = <WebGL2RenderingContext>.disable(<GLenum>);
<new void> = <WebGLRenderingContext>.disableVertexAttribArray(<GLuint>);
<new void> = <WebGL2RenderingContext>.disableVertexAttribArray(<GLuint>);
<new void> = <WebGLRenderingContext>.drawArrays(<GLenum>,<GLint>,<GLsizei>);
<new void> = <WebGL2RenderingContext>.drawArrays(<GLenum>,<GLint>,<GLsizei>);
<new void> = <WebGLRenderingContext>.drawElements(<GLenum>,<GLsizei>,<GLenum>,<GLintptr>);
<new void> = <WebGL2RenderingContext>.drawElements(<GLenum>,<GLsizei>,<GLenum>,<GLintptr>);
<new void> = <WebGLRenderingContext>.enable(<GLenum>);
<new void> = <WebGL2RenderingContext>.enable(<GLenum>);
<new void> = <WebGLRenderingContext>.enableVertexAttribArray(<GLuint>);
<new void> = <WebGL2RenderingContext>.enableVertexAttribArray(<GLuint>);
<new void> = <WebGLRenderingContext>.finish();
<new void> = <WebGL2RenderingContext>.finish();
<new void> = <WebGLRenderingContext>.flush();
<new void> = <WebGL2RenderingContext>.flush();
<new void> = <WebGLRenderingContext>.framebufferRenderbuffer(<GLenum>,<GLenum>,<GLenum>,<WebGLRenderbuffer>);
<new void> = <WebGL2RenderingContext>.framebufferRenderbuffer(<GLenum>,<GLenum>,<GLenum>,<WebGLRenderbuffer>);
<new void> = <WebGLRenderingContext>.framebufferTexture2D(<GLenum>,<GLenum>,<GLenum>,<WebGLTexture>,<GLint>);
<new void> = <WebGL2RenderingContext>.framebufferTexture2D(<GLenum>,<GLenum>,<GLenum>,<WebGLTexture>,<GLint>);
<new void> = <WebGLRenderingContext>.frontFace(<GLenum>);
<new void> = <WebGL2RenderingContext>.frontFace(<GLenum>);
<new void> = <WebGLRenderingContext>.generateMipmap(<GLenum>);
<new void> = <WebGL2RenderingContext>.generateMipmap(<GLenum>);
<new WebGLActiveInfo> = <WebGLRenderingContext>.getActiveAttrib(<WebGLProgram>,<GLuint>);
<new WebGLActiveInfo> = <WebGL2RenderingContext>.getActiveAttrib(<WebGLProgram>,<GLuint>);
<new WebGLActiveInfo> = <WebGLRenderingContext>.getActiveUniform(<WebGLProgram>,<GLuint>);
<new WebGLActiveInfo> = <WebGL2RenderingContext>.getActiveUniform(<WebGLProgram>,<GLuint>);
<new sequence_WebGLShader_> = [<WebGLShader>];
<new WebGLShader> = <sequence_WebGLShader_>[0];
<new sequence_WebGLShader_> = <WebGLRenderingContext>.getAttachedShaders(<WebGLProgram>);
<new sequence_WebGLShader_> = <WebGL2RenderingContext>.getAttachedShaders(<WebGLProgram>);
<new GLint> = <WebGLRenderingContext>.getAttribLocation(<WebGLProgram>,<DOMString>);
<new GLint> = <WebGL2RenderingContext>.getAttribLocation(<WebGLProgram>,<DOMString>);
<new any> = <WebGLRenderingContext>.getBufferParameter(<GLenum>,<GLenum>);
<new any> = <WebGL2RenderingContext>.getBufferParameter(<GLenum>,<GLenum>);
<new any> = <WebGLRenderingContext>.getParameter(<GLenum>);
<new any> = <WebGL2RenderingContext>.getParameter(<GLenum>);
<new GLenum> = <WebGLRenderingContext>.getError();
<new GLenum> = <WebGL2RenderingContext>.getError();
<new any> = <WebGLRenderingContext>.getFramebufferAttachmentParameter(<GLenum>,<GLenum>,<GLenum>);
<new any> = <WebGL2RenderingContext>.getFramebufferAttachmentParameter(<GLenum>,<GLenum>,<GLenum>);
<new any> = <WebGLRenderingContext>.getProgramParameter(<WebGLProgram>,<GLenum>);
<new any> = <WebGL2RenderingContext>.getProgramParameter(<WebGLProgram>,<GLenum>);
<new DOMString> = <WebGLRenderingContext>.getProgramInfoLog(<WebGLProgram>);
<new DOMString> = <WebGL2RenderingContext>.getProgramInfoLog(<WebGLProgram>);
<new any> = <WebGLRenderingContext>.getRenderbufferParameter(<GLenum>,<GLenum>);
<new any> = <WebGL2RenderingContext>.getRenderbufferParameter(<GLenum>,<GLenum>);
<new any> = <WebGLRenderingContext>.getShaderParameter(<WebGLShader>,<GLenum>);
<new any> = <WebGL2RenderingContext>.getShaderParameter(<WebGLShader>,<GLenum>);
<new WebGLShaderPrecisionFormat> = <WebGLRenderingContext>.getShaderPrecisionFormat(<GLenum>,<GLenum>);
<new WebGLShaderPrecisionFormat> = <WebGL2RenderingContext>.getShaderPrecisionFormat(<GLenum>,<GLenum>);
<new DOMString> = <WebGLRenderingContext>.getShaderInfoLog(<WebGLShader>);
<new DOMString> = <WebGL2RenderingContext>.getShaderInfoLog(<WebGLShader>);
<new DOMString> = <WebGLRenderingContext>.getShaderSource(<WebGLShader>);
<new DOMString> = <WebGL2RenderingContext>.getShaderSource(<WebGLShader>);
<new any> = <WebGLRenderingContext>.getTexParameter(<GLenum>,<GLenum>);
<new any> = <WebGL2RenderingContext>.getTexParameter(<GLenum>,<GLenum>);
<new any> = <WebGLRenderingContext>.getUniform(<WebGLProgram>,<WebGLUniformLocation>);
<new any> = <WebGL2RenderingContext>.getUniform(<WebGLProgram>,<WebGLUniformLocation>);
<new WebGLUniformLocation> = <WebGLRenderingContext>.getUniformLocation(<WebGLProgram>,<DOMString>);
<new WebGLUniformLocation> = <WebGL2RenderingContext>.getUniformLocation(<WebGLProgram>,<DOMString>);
<new any> = <WebGLRenderingContext>.getVertexAttrib(<GLuint>,<GLenum>);
<new any> = <WebGL2RenderingContext>.getVertexAttrib(<GLuint>,<GLenum>);
<new GLintptr> = <WebGLRenderingContext>.getVertexAttribOffset(<GLuint>,<GLenum>);
<new GLintptr> = <WebGL2RenderingContext>.getVertexAttribOffset(<GLuint>,<GLenum>);
<new void> = <WebGLRenderingContext>.hint(<GLenum>,<GLenum>);
<new void> = <WebGL2RenderingContext>.hint(<GLenum>,<GLenum>);
<new GLboolean> = <WebGLRenderingContext>.isBuffer(<WebGLBuffer>);
<new GLboolean> = <WebGL2RenderingContext>.isBuffer(<WebGLBuffer>);
<new GLboolean> = <WebGLRenderingContext>.isEnabled(<GLenum>);
<new GLboolean> = <WebGL2RenderingContext>.isEnabled(<GLenum>);
<new GLboolean> = <WebGLRenderingContext>.isFramebuffer(<WebGLFramebuffer>);
<new GLboolean> = <WebGL2RenderingContext>.isFramebuffer(<WebGLFramebuffer>);
<new GLboolean> = <WebGLRenderingContext>.isProgram(<WebGLProgram>);
<new GLboolean> = <WebGL2RenderingContext>.isProgram(<WebGLProgram>);
<new GLboolean> = <WebGLRenderingContext>.isRenderbuffer(<WebGLRenderbuffer>);
<new GLboolean> = <WebGL2RenderingContext>.isRenderbuffer(<WebGLRenderbuffer>);
<new GLboolean> = <WebGLRenderingContext>.isShader(<WebGLShader>);
<new GLboolean> = <WebGL2RenderingContext>.isShader(<WebGLShader>);
<new GLboolean> = <WebGLRenderingContext>.isTexture(<WebGLTexture>);
<new GLboolean> = <WebGL2RenderingContext>.isTexture(<WebGLTexture>);
<new void> = <WebGLRenderingContext>.lineWidth(<GLfloat>);
<new void> = <WebGL2RenderingContext>.lineWidth(<GLfloat>);
<new void> = <WebGLRenderingContext>.linkProgram(<WebGLProgram>);
<new void> = <WebGL2RenderingContext>.linkProgram(<WebGLProgram>);
<new void> = <WebGLRenderingContext>.pixelStorei(<GLenum>,<GLint>);
<new void> = <WebGL2RenderingContext>.pixelStorei(<GLenum>,<GLint>);
<new void> = <WebGLRenderingContext>.polygonOffset(<GLfloat>,<GLfloat>);
<new void> = <WebGL2RenderingContext>.polygonOffset(<GLfloat>,<GLfloat>);
<new void> = <WebGLRenderingContext>.renderbufferStorage(<GLenum>,<GLenum>,<GLsizei>,<GLsizei>);
<new void> = <WebGL2RenderingContext>.renderbufferStorage(<GLenum>,<GLenum>,<GLsizei>,<GLsizei>);
<new void> = <WebGLRenderingContext>.sampleCoverage(<GLclampf>,<GLboolean>);
<new void> = <WebGL2RenderingContext>.sampleCoverage(<GLclampf>,<GLboolean>);
<new void> = <WebGLRenderingContext>.scissor(<GLint>,<GLint>,<GLsizei>,<GLsizei>);
<new void> = <WebGL2RenderingContext>.scissor(<GLint>,<GLint>,<GLsizei>,<GLsizei>);
<new void> = <WebGLRenderingContext>.shaderSource(<WebGLShader>,<DOMString>);
<new void> = <WebGL2RenderingContext>.shaderSource(<WebGLShader>,<DOMString>);
<new void> = <WebGLRenderingContext>.stencilFunc(<GLenum>,<GLint>,<GLuint>);
<new void> = <WebGL2RenderingContext>.stencilFunc(<GLenum>,<GLint>,<GLuint>);
<new void> = <WebGLRenderingContext>.stencilFuncSeparate(<GLenum>,<GLenum>,<GLint>,<GLuint>);
<new void> = <WebGL2RenderingContext>.stencilFuncSeparate(<GLenum>,<GLenum>,<GLint>,<GLuint>);
<new void> = <WebGLRenderingContext>.stencilMask(<GLuint>);
<new void> = <WebGL2RenderingContext>.stencilMask(<GLuint>);
<new void> = <WebGLRenderingContext>.stencilMaskSeparate(<GLenum>,<GLuint>);
<new void> = <WebGL2RenderingContext>.stencilMaskSeparate(<GLenum>,<GLuint>);
<new void> = <WebGLRenderingContext>.stencilOp(<GLenum>,<GLenum>,<GLenum>);
<new void> = <WebGL2RenderingContext>.stencilOp(<GLenum>,<GLenum>,<GLenum>);
<new void> = <WebGLRenderingContext>.stencilOpSeparate(<GLenum>,<GLenum>,<GLenum>,<GLenum>);
<new void> = <WebGL2RenderingContext>.stencilOpSeparate(<GLenum>,<GLenum>,<GLenum>,<GLenum>);
<new void> = <WebGLRenderingContext>.texParameterf(<GLenum>,<GLenum>,<GLfloat>);
<new void> = <WebGL2RenderingContext>.texParameterf(<GLenum>,<GLenum>,<GLfloat>);
<new void> = <WebGLRenderingContext>.texParameteri(<GLenum>,<GLenum>,<GLint>);
<new void> = <WebGL2RenderingContext>.texParameteri(<GLenum>,<GLenum>,<GLint>);
<new void> = <WebGLRenderingContext>.uniform1f(<WebGLUniformLocation>,<GLfloat>);
<new void> = <WebGL2RenderingContext>.uniform1f(<WebGLUniformLocation>,<GLfloat>);
<new void> = <WebGLRenderingContext>.uniform2f(<WebGLUniformLocation>,<GLfloat>,<GLfloat>);
<new void> = <WebGL2RenderingContext>.uniform2f(<WebGLUniformLocation>,<GLfloat>,<GLfloat>);
<new void> = <WebGLRenderingContext>.uniform3f(<WebGLUniformLocation>,<GLfloat>,<GLfloat>,<GLfloat>);
<new void> = <WebGL2RenderingContext>.uniform3f(<WebGLUniformLocation>,<GLfloat>,<GLfloat>,<GLfloat>);
<new void> = <WebGLRenderingContext>.uniform4f(<WebGLUniformLocation>,<GLfloat>,<GLfloat>,<GLfloat>,<GLfloat>);
<new void> = <WebGL2RenderingContext>.uniform4f(<WebGLUniformLocation>,<GLfloat>,<GLfloat>,<GLfloat>,<GLfloat>);
<new void> = <WebGLRenderingContext>.uniform1i(<WebGLUniformLocation>,<GLint>);
<new void> = <WebGL2RenderingContext>.uniform1i(<WebGLUniformLocation>,<GLint>);
<new void> = <WebGLRenderingContext>.uniform2i(<WebGLUniformLocation>,<GLint>,<GLint>);
<new void> = <WebGL2RenderingContext>.uniform2i(<WebGLUniformLocation>,<GLint>,<GLint>);
<new void> = <WebGLRenderingContext>.uniform3i(<WebGLUniformLocation>,<GLint>,<GLint>,<GLint>);
<new void> = <WebGL2RenderingContext>.uniform3i(<WebGLUniformLocation>,<GLint>,<GLint>,<GLint>);
<new void> = <WebGLRenderingContext>.uniform4i(<WebGLUniformLocation>,<GLint>,<GLint>,<GLint>,<GLint>);
<new void> = <WebGL2RenderingContext>.uniform4i(<WebGLUniformLocation>,<GLint>,<GLint>,<GLint>,<GLint>);
<new void> = <WebGLRenderingContext>.useProgram(<WebGLProgram>);
<new void> = <WebGL2RenderingContext>.useProgram(<WebGLProgram>);
<new void> = <WebGLRenderingContext>.validateProgram(<WebGLProgram>);
<new void> = <WebGL2RenderingContext>.validateProgram(<WebGLProgram>);
<new void> = <WebGLRenderingContext>.vertexAttrib1f(<GLuint>,<GLfloat>);
<new void> = <WebGL2RenderingContext>.vertexAttrib1f(<GLuint>,<GLfloat>);
<new void> = <WebGLRenderingContext>.vertexAttrib1fv(<GLuint>,<Float32List>);
<new void> = <WebGL2RenderingContext>.vertexAttrib1fv(<GLuint>,<Float32List>);
<new void> = <WebGLRenderingContext>.vertexAttrib2f(<GLuint>,<GLfloat>,<GLfloat>);
<new void> = <WebGL2RenderingContext>.vertexAttrib2f(<GLuint>,<GLfloat>,<GLfloat>);
<new void> = <WebGLRenderingContext>.vertexAttrib2fv(<GLuint>,<Float32List>);
<new void> = <WebGL2RenderingContext>.vertexAttrib2fv(<GLuint>,<Float32List>);
<new void> = <WebGLRenderingContext>.vertexAttrib3f(<GLuint>,<GLfloat>,<GLfloat>,<GLfloat>);
<new void> = <WebGL2RenderingContext>.vertexAttrib3f(<GLuint>,<GLfloat>,<GLfloat>,<GLfloat>);
<new void> = <WebGLRenderingContext>.vertexAttrib3fv(<GLuint>,<Float32List>);
<new void> = <WebGL2RenderingContext>.vertexAttrib3fv(<GLuint>,<Float32List>);
<new void> = <WebGLRenderingContext>.vertexAttrib4f(<GLuint>,<GLfloat>,<GLfloat>,<GLfloat>,<GLfloat>);
<new void> = <WebGL2RenderingContext>.vertexAttrib4f(<GLuint>,<GLfloat>,<GLfloat>,<GLfloat>,<GLfloat>);
<new void> = <WebGLRenderingContext>.vertexAttrib4fv(<GLuint>,<Float32List>);
<new void> = <WebGL2RenderingContext>.vertexAttrib4fv(<GLuint>,<Float32List>);
<new void> = <WebGLRenderingContext>.vertexAttribPointer(<GLuint>,<GLint>,<GLenum>,<GLboolean>,<GLsizei>,<GLintptr>);
<new void> = <WebGL2RenderingContext>.vertexAttribPointer(<GLuint>,<GLint>,<GLenum>,<GLboolean>,<GLsizei>,<GLintptr>);
<new void> = <WebGLRenderingContext>.viewport(<GLint>,<GLint>,<GLsizei>,<GLsizei>);
<new void> = <WebGL2RenderingContext>.viewport(<GLint>,<GLint>,<GLsizei>,<GLsizei>);
<new Promise_void_> = <WebGLRenderingContext>.makeXRCompatible();
<new Promise_void_> = <WebGL2RenderingContext>.makeXRCompatible();
<new USVString> = <GPUShaderModule>.label;
<GPUShaderModule>.label = <USVString>;
<GPUShaderModule>.label = null;
<new USVString> = <GPURenderPipeline>.label;
<GPURenderPipeline>.label = <USVString>;
<GPURenderPipeline>.label = null;
<new USVString> = <GPUCommandBuffer>.label;
<GPUCommandBuffer>.label = <USVString>;
<GPUCommandBuffer>.label = null;
<new USVString> = <GPUCommandEncoder>.label;
<GPUCommandEncoder>.label = <USVString>;
<GPUCommandEncoder>.label = null;
<new USVString> = <GPUBindGroupLayout>.label;
<GPUBindGroupLayout>.label = <USVString>;
<GPUBindGroupLayout>.label = null;
<new USVString> = <GPUPipelineLayout>.label;
<GPUPipelineLayout>.label = <USVString>;
<GPUPipelineLayout>.label = null;
<new USVString> = <GPUComputePassEncoder>.label;
<GPUComputePassEncoder>.label = <USVString>;
<GPUComputePassEncoder>.label = null;
<new USVString> = <GPUBindGroup>.label;
<GPUBindGroup>.label = <USVString>;
<GPUBindGroup>.label = null;
<new USVString> = <GPUTexture>.label;
<GPUTexture>.label = <USVString>;
<GPUTexture>.label = null;
<new USVString> = <GPURenderPassEncoder>.label;
<GPURenderPassEncoder>.label = <USVString>;
<GPURenderPassEncoder>.label = null;
<new USVString> = <GPUQueue>.label;
<GPUQueue>.label = <USVString>;
<GPUQueue>.label = null;
<new USVString> = <GPUTextureView>.label;
<GPUTextureView>.label = <USVString>;
<GPUTextureView>.label = null;
<new USVString> = <GPURenderBundle>.label;
<GPURenderBundle>.label = <USVString>;
<GPURenderBundle>.label = null;
<new USVString> = <GPUBuffer>.label;
<GPUBuffer>.label = <USVString>;
<GPUBuffer>.label = null;
<new USVString> = <GPUSampler>.label;
<GPUSampler>.label = <USVString>;
<GPUSampler>.label = null;
<new USVString> = <GPUDevice>.label;
<GPUDevice>.label = <USVString>;
<GPUDevice>.label = null;
<new USVString> = <GPURenderBundleEncoder>.label;
<GPURenderBundleEncoder>.label = <USVString>;
<GPURenderBundleEncoder>.label = null;
<new USVString> = <GPUQuerySet>.label;
<GPUQuerySet>.label = <USVString>;
<GPUQuerySet>.label = null;
<new USVString> = <GPUComputePipeline>.label;
<GPUComputePipeline>.label = <USVString>;
<GPUComputePipeline>.label = null;
<new GPU> = <Navigator>.gpu;
<new GPUBindGroupLayout> = <GPURenderPipeline>.getBindGroupLayout(<unsigned long>);
<new GPUBindGroupLayout> = <GPUComputePipeline>.getBindGroupLayout(<unsigned long>);
<new sequence_GPUBufferDynamicOffset_> = [<GPUBufferDynamicOffset>];
<new GPUBufferDynamicOffset> = <sequence_GPUBufferDynamicOffset_>[0];
<new void> = <GPURenderBundleEncoder>.setBindGroup(<GPUIndex32>,<GPUBindGroup>);
<new void> = <GPURenderBundleEncoder>.setBindGroup(<GPUIndex32>,<GPUBindGroup>,<sequence_GPUBufferDynamicOffset_>);
<new void> = <GPUComputePassEncoder>.setBindGroup(<GPUIndex32>,<GPUBindGroup>);
<new void> = <GPUComputePassEncoder>.setBindGroup(<GPUIndex32>,<GPUBindGroup>,<sequence_GPUBufferDynamicOffset_>);
<new void> = <GPURenderPassEncoder>.setBindGroup(<GPUIndex32>,<GPUBindGroup>);
<new void> = <GPURenderPassEncoder>.setBindGroup(<GPUIndex32>,<GPUBindGroup>,<sequence_GPUBufferDynamicOffset_>);
<new void> = <GPURenderBundleEncoder>.setPipeline(<GPURenderPipeline>);
<new void> = <GPURenderPassEncoder>.setPipeline(<GPURenderPipeline>);
<new void> = <GPURenderBundleEncoder>.setIndexBuffer(<GPUBuffer>,<GPUIndexFormat>);
<new void> = <GPURenderBundleEncoder>.setIndexBuffer(<GPUBuffer>,<GPUIndexFormat>,<GPUSize64>);
<new void> = <GPURenderBundleEncoder>.setIndexBuffer(<GPUBuffer>,<GPUIndexFormat>,<GPUSize64>,<GPUSize64>);
<new void> = <GPURenderPassEncoder>.setIndexBuffer(<GPUBuffer>,<GPUIndexFormat>);
<new void> = <GPURenderPassEncoder>.setIndexBuffer(<GPUBuffer>,<GPUIndexFormat>,<GPUSize64>);
<new void> = <GPURenderPassEncoder>.setIndexBuffer(<GPUBuffer>,<GPUIndexFormat>,<GPUSize64>,<GPUSize64>);
<new void> = <GPURenderBundleEncoder>.setVertexBuffer(<GPUIndex32>,<GPUBuffer>);
<new void> = <GPURenderBundleEncoder>.setVertexBuffer(<GPUIndex32>,<GPUBuffer>,<GPUSize64>);
<new void> = <GPURenderBundleEncoder>.setVertexBuffer(<GPUIndex32>,<GPUBuffer>,<GPUSize64>,<GPUSize64>);
<new void> = <GPURenderPassEncoder>.setVertexBuffer(<GPUIndex32>,<GPUBuffer>);
<new void> = <GPURenderPassEncoder>.setVertexBuffer(<GPUIndex32>,<GPUBuffer>,<GPUSize64>);
<new void> = <GPURenderPassEncoder>.setVertexBuffer(<GPUIndex32>,<GPUBuffer>,<GPUSize64>,<GPUSize64>);
<new void> = <GPURenderBundleEncoder>.draw(<GPUSize32>);
<new void> = <GPURenderBundleEncoder>.draw(<GPUSize32>,<GPUSize32>);
<new void> = <GPURenderBundleEncoder>.draw(<GPUSize32>,<GPUSize32>,<GPUSize32>);
<new void> = <GPURenderBundleEncoder>.draw(<GPUSize32>,<GPUSize32>,<GPUSize32>,<GPUSize32>);
<new void> = <GPURenderPassEncoder>.draw(<GPUSize32>);
<new void> = <GPURenderPassEncoder>.draw(<GPUSize32>,<GPUSize32>);
<new void> = <GPURenderPassEncoder>.draw(<GPUSize32>,<GPUSize32>,<GPUSize32>);
<new void> = <GPURenderPassEncoder>.draw(<GPUSize32>,<GPUSize32>,<GPUSize32>,<GPUSize32>);
<new void> = <GPURenderBundleEncoder>.drawIndexed(<GPUSize32>);
<new void> = <GPURenderBundleEncoder>.drawIndexed(<GPUSize32>,<GPUSize32>);
<new void> = <GPURenderBundleEncoder>.drawIndexed(<GPUSize32>,<GPUSize32>,<GPUSize32>);
<new void> = <GPURenderBundleEncoder>.drawIndexed(<GPUSize32>,<GPUSize32>,<GPUSize32>,<GPUSignedOffset32>);
<new void> = <GPURenderBundleEncoder>.drawIndexed(<GPUSize32>,<GPUSize32>,<GPUSize32>,<GPUSignedOffset32>,<GPUSize32>);
<new void> = <GPURenderPassEncoder>.drawIndexed(<GPUSize32>);
<new void> = <GPURenderPassEncoder>.drawIndexed(<GPUSize32>,<GPUSize32>);
<new void> = <GPURenderPassEncoder>.drawIndexed(<GPUSize32>,<GPUSize32>,<GPUSize32>);
<new void> = <GPURenderPassEncoder>.drawIndexed(<GPUSize32>,<GPUSize32>,<GPUSize32>,<GPUSignedOffset32>);
<new void> = <GPURenderPassEncoder>.drawIndexed(<GPUSize32>,<GPUSize32>,<GPUSize32>,<GPUSignedOffset32>,<GPUSize32>);
<new void> = <GPURenderBundleEncoder>.drawIndirect(<GPUBuffer>,<GPUSize64>);
<new void> = <GPURenderPassEncoder>.drawIndirect(<GPUBuffer>,<GPUSize64>);
<new void> = <GPURenderBundleEncoder>.drawIndexedIndirect(<GPUBuffer>,<GPUSize64>);
<new void> = <GPURenderPassEncoder>.drawIndexedIndirect(<GPUBuffer>,<GPUSize64>);
<new Storage> = <Window>.sessionStorage;
<new Storage> = <Window>.localStorage;
<new USVString> = <WorkerGlobalScope>.origin;
<new USVString> = <Window>.origin;
<new boolean> = <WorkerGlobalScope>.crossOriginIsolated;
<new boolean> = <Window>.crossOriginIsolated;
<new void> = <WorkerGlobalScope>.reportError(<any>);
<new void> = <Window>.reportError(<any>);
<new DOMString> = <WorkerGlobalScope>.btoa(<DOMString>);
<new DOMString> = <Window>.btoa(<DOMString>);
<new DOMString> = <WorkerGlobalScope>.atob(<DOMString>);
<new DOMString> = <Window>.atob(<DOMString>);
<WorkerGlobalScope>.setTimeout(<Function>);
<WorkerGlobalScope>.setTimeout(<Function>,<long>);
<WorkerGlobalScope>.setTimeout(<Function>,<long>,<any>);
<Window>.setTimeout(<Function>);
<Window>.setTimeout(<Function>,<long>);
<Window>.setTimeout(<Function>,<long>,<any>);
<WorkerGlobalScope>.setTimeout(<DOMString>);
<WorkerGlobalScope>.setTimeout(<DOMString>,<long>);
<WorkerGlobalScope>.setTimeout(<DOMString>,<long>,<any>);
<Window>.setTimeout(<DOMString>);
<Window>.setTimeout(<DOMString>,<long>);
<Window>.setTimeout(<DOMString>,<long>,<any>);
<new void> = <WorkerGlobalScope>.clearTimeout();
<new void> = <WorkerGlobalScope>.clearTimeout(<long>);
<new void> = <Window>.clearTimeout();
<new void> = <Window>.clearTimeout(<long>);
<WorkerGlobalScope>.setInterval(<Function>);
<WorkerGlobalScope>.setInterval(<Function>,<long>);
<WorkerGlobalScope>.setInterval(<Function>,<long>,<any>);
<Window>.setInterval(<Function>);
<Window>.setInterval(<Function>,<long>);
<Window>.setInterval(<Function>,<long>,<any>);
<WorkerGlobalScope>.setInterval(<DOMString>);
<WorkerGlobalScope>.setInterval(<DOMString>,<long>);
<WorkerGlobalScope>.setInterval(<DOMString>,<long>,<any>);
<Window>.setInterval(<DOMString>);
<Window>.setInterval(<DOMString>,<long>);
<Window>.setInterval(<DOMString>,<long>,<any>);
<new void> = <WorkerGlobalScope>.clearInterval();
<new void> = <WorkerGlobalScope>.clearInterval(<long>);
<new void> = <Window>.clearInterval();
<new void> = <Window>.clearInterval(<long>);
<new void> = <WorkerGlobalScope>.queueMicrotask(<VoidFunction>);
<new void> = <Window>.queueMicrotask(<VoidFunction>);
<new Promise_ImageBitmap_> = new Promise(function(x){console.log("ok")});
<new Promise_ImageBitmap_> = <WorkerGlobalScope>.createImageBitmap(<ImageBitmapSource>);
<new Promise_ImageBitmap_> = <WorkerGlobalScope>.createImageBitmap(<ImageBitmapSource>,<ImageBitmapOptions>);
<new Promise_ImageBitmap_> = <Window>.createImageBitmap(<ImageBitmapSource>);
<new Promise_ImageBitmap_> = <Window>.createImageBitmap(<ImageBitmapSource>,<ImageBitmapOptions>);
<new Promise_ImageBitmap_> = <WorkerGlobalScope>.createImageBitmap(<ImageBitmapSource>,<long>,<long>,<long>,<long>);
<new Promise_ImageBitmap_> = <WorkerGlobalScope>.createImageBitmap(<ImageBitmapSource>,<long>,<long>,<long>,<long>,<ImageBitmapOptions>);
<new Promise_ImageBitmap_> = <Window>.createImageBitmap(<ImageBitmapSource>,<long>,<long>,<long>,<long>);
<new Promise_ImageBitmap_> = <Window>.createImageBitmap(<ImageBitmapSource>,<long>,<long>,<long>,<long>,<ImageBitmapOptions>);
<new any> = <WorkerGlobalScope>.structuredClone(<any>);
<new any> = <WorkerGlobalScope>.structuredClone(<any>,<StructuredSerializeOptions>);
<new any> = <Window>.structuredClone(<any>);
<new any> = <Window>.structuredClone(<any>,<StructuredSerializeOptions>);
<new Promise_Response_> = <WorkerGlobalScope>.fetch(<RequestInfo>);
<new Promise_Response_> = <WorkerGlobalScope>.fetch(<RequestInfo>,<RequestInit>);
<new Promise_Response_> = <Window>.fetch(<RequestInfo>);
<new Promise_Response_> = <Window>.fetch(<RequestInfo>,<RequestInit>);
<new boolean> = <WorkerGlobalScope>.isSecureContext;
<new boolean> = <Window>.isSecureContext;
<new IDBFactory> = <WorkerGlobalScope>.indexedDB;
<new IDBFactory> = <Window>.indexedDB;
<new CacheStorage> = <WorkerGlobalScope>.caches;
<new CacheStorage> = <Window>.caches;
<new XPathExpression> = <XPathEvaluator>.createExpression(<DOMString>);
<new XPathExpression> = <XPathEvaluator>.createExpression(<DOMString>,<XPathNSResolver>);
<new XPathExpression> = <Document>.createExpression(<DOMString>);
<new XPathExpression> = <Document>.createExpression(<DOMString>,<XPathNSResolver>);
<new Node> = <XPathEvaluator>.createNSResolver(<Node>);
<new Node> = <Document>.createNSResolver(<Node>);
<new XPathResult> = <XPathEvaluator>.evaluate(<DOMString>,<Node>);
<new XPathResult> = <XPathEvaluator>.evaluate(<DOMString>,<Node>,<XPathNSResolver>);
<new XPathResult> = <XPathEvaluator>.evaluate(<DOMString>,<Node>,<XPathNSResolver>,<unsigned short>);
<new XPathResult> = <XPathEvaluator>.evaluate(<DOMString>,<Node>,<XPathNSResolver>,<unsigned short>,<object>);
<new XPathResult> = <Document>.evaluate(<DOMString>,<Node>);
<new XPathResult> = <Document>.evaluate(<DOMString>,<Node>,<XPathNSResolver>);
<new XPathResult> = <Document>.evaluate(<DOMString>,<Node>,<XPathNSResolver>,<unsigned short>);
<new XPathResult> = <Document>.evaluate(<DOMString>,<Node>,<XPathNSResolver>,<unsigned short>,<object>);
<new AnimationPlayState> = "idle";
<new AnimationPlayState> = "running";
<new AnimationPlayState> = "paused";
<new AnimationPlayState> = "finished";
<new AnimationReplaceState> = "active";
<new AnimationReplaceState> = "removed";
<new AnimationReplaceState> = "persisted";
<new FillMode> = "none";
<new FillMode> = "forwards";
<new FillMode> = "backwards";
<new FillMode> = "both";
<new FillMode> = "auto";
<new PlaybackDirection> = "normal";
<new PlaybackDirection> = "reverse";
<new PlaybackDirection> = "alternate";
<new PlaybackDirection> = "alternate-reverse";
<new ChannelCountMode> = "max";
<new ChannelCountMode> = "clamped-max";
<new ChannelCountMode> = "explicit";
<new ChannelInterpretation> = "speakers";
<new ChannelInterpretation> = "discrete";
<new AutomationRate> = "a-rate";
<new AutomationRate> = "k-rate";
<new AudioContextState> = "suspended";
<new AudioContextState> = "running";
<new AudioContextState> = "closed";
<new CompositeOperation> = "replace";
<new CompositeOperation> = "add";
<new CompositeOperation> = "accumulate";
<new CompositeOperationOrAuto> = "replace";
<new CompositeOperationOrAuto> = "add";
<new CompositeOperationOrAuto> = "accumulate";
<new CompositeOperationOrAuto> = "auto";
<new BiquadFilterType> = "lowpass";
<new BiquadFilterType> = "highpass";
<new BiquadFilterType> = "bandpass";
<new BiquadFilterType> = "lowshelf";
<new BiquadFilterType> = "highshelf";
<new BiquadFilterType> = "peaking";
<new BiquadFilterType> = "notch";
<new BiquadFilterType> = "allpass";
<new EndingType> = "transparent";
<new EndingType> = "native";
<new CacheStorageNamespace> = "content";
<new CacheStorageNamespace> = "chrome";
<new CanvasWindingRule> = "nonzero";
<new CanvasWindingRule> = "evenodd";
<new CaretChangedReason> = "visibilitychange";
<new CaretChangedReason> = "updateposition";
<new CaretChangedReason> = "longpressonemptycontent";
<new CaretChangedReason> = "taponcaret";
<new CaretChangedReason> = "presscaret";
<new CaretChangedReason> = "releasecaret";
<new CaretChangedReason> = "scroll";
<new CheckerboardReason> = "severe";
<new CheckerboardReason> = "recent";
<new FrameType> = "auxiliary";
<new FrameType> = "top-level";
<new FrameType> = "nested";
<new FrameType> = "none";
<new ClientType> = "window";
<new ClientType> = "worker";
<new ClientType> = "sharedworker";
<new ClientType> = "serviceworker";
<new ClientType> = "all";
<new PresentationStyle> = "unspecified";
<new PresentationStyle> = "inline";
<new PresentationStyle> = "attachment";
<new ConsoleLogLevel> = "All";
<new ConsoleLogLevel> = "Debug";
<new ConsoleLogLevel> = "Log";
<new ConsoleLogLevel> = "Info";
<new ConsoleLogLevel> = "Clear";
<new ConsoleLogLevel> = "Trace";
<new ConsoleLogLevel> = "TimeLog";
<new ConsoleLogLevel> = "TimeEnd";
<new ConsoleLogLevel> = "Time";
<new ConsoleLogLevel> = "Group";
<new ConsoleLogLevel> = "GroupEnd";
<new ConsoleLogLevel> = "Profile";
<new ConsoleLogLevel> = "ProfileEnd";
<new ConsoleLogLevel> = "Dir";
<new ConsoleLogLevel> = "Dirxml";
<new ConsoleLogLevel> = "Warn";
<new ConsoleLogLevel> = "Error";
<new ConsoleLogLevel> = "Off";
<new ConsoleLevel> = "log";
<new ConsoleLevel> = "warning";
<new ConsoleLevel> = "error";
<new CSSStyleSheetParsingMode> = "author";
<new CSSStyleSheetParsingMode> = "user";
<new CSSStyleSheetParsingMode> = "agent";
<new DecoderDoctorNotificationType> = "cannot-play";
<new DecoderDoctorNotificationType> = "platform-decoder-not-found";
<new DecoderDoctorNotificationType> = "can-play-but-some-missing-decoders";
<new DecoderDoctorNotificationType> = "cannot-initialize-pulseaudio";
<new DecoderDoctorNotificationType> = "unsupported-libavcodec";
<new DecoderDoctorNotificationType> = "decode-error";
<new DecoderDoctorNotificationType> = "decode-warning";
<new DecoderDoctorReportType> = "mediawidevinenowmf";
<new DecoderDoctorReportType> = "mediawmfneeded";
<new DecoderDoctorReportType> = "mediaplatformdecodernotfound";
<new DecoderDoctorReportType> = "mediacannotplaynodecoders";
<new DecoderDoctorReportType> = "medianodecoders";
<new DecoderDoctorReportType> = "mediacannotinitializepulseaudio";
<new DecoderDoctorReportType> = "mediaunsupportedlibavcodec";
<new DecoderDoctorReportType> = "mediadecodeerror";
<new DecoderDoctorReportType> = "mediadecodewarning";
<new VisibilityState> = "hidden";
<new VisibilityState> = "visible";
<new DocumentAutoplayPolicy> = "allowed";
<new DocumentAutoplayPolicy> = "allowed-muted";
<new DocumentAutoplayPolicy> = "disallowed";
<new FlashClassification> = "unknown";
<new FlashClassification> = "allowed";
<new FlashClassification> = "denied";
<new WireframeRectType> = "image";
<new WireframeRectType> = "background";
<new WireframeRectType> = "text";
<new WireframeRectType> = "unknown";
<new SupportedType> = "text/html";
<new SupportedType> = "text/xml";
<new SupportedType> = "application/xml";
<new SupportedType> = "application/xhtml+xml";
<new SupportedType> = "image/svg+xml";
<new DOMRequestReadyState> = "pending";
<new DOMRequestReadyState> = "done";
<new ScrollLogicalPosition> = "start";
<new ScrollLogicalPosition> = "center";
<new ScrollLogicalPosition> = "end";
<new ScrollLogicalPosition> = "nearest";
<new FetchState> = "requesting";
<new FetchState> = "responding";
<new FetchState> = "aborted";
<new FetchState> = "errored";
<new FetchState> = "complete";
<new FileMode> = "readonly";
<new FileMode> = "readwrite";
<new FontFaceLoadStatus> = "unloaded";
<new FontFaceLoadStatus> = "loading";
<new FontFaceLoadStatus> = "loaded";
<new FontFaceLoadStatus> = "error";
<new FontFaceSetLoadStatus> = "loading";
<new FontFaceSetLoadStatus> = "loaded";
<new GamepadHand> = "";
<new GamepadHand> = "left";
<new GamepadHand> = "right";
<new GamepadMappingType> = "";
<new GamepadMappingType> = "standard";
<new GamepadMappingType> = "xr-standard";
<new GamepadHapticActuatorType> = "vibration";
<new GamepadLightIndicatorType> = "on-off";
<new GamepadLightIndicatorType> = "rgb";
<new CSSBoxType> = "margin";
<new CSSBoxType> = "border";
<new CSSBoxType> = "padding";
<new CSSBoxType> = "content";
<new GetUserMediaRequestType> = "getusermedia";
<new GetUserMediaRequestType> = "selectaudiooutput";
<new GetUserMediaRequestType> = "recording-device-stopped";
<new GridDeclaration> = "explicit";
<new GridDeclaration> = "implicit";
<new GridTrackState> = "static";
<new GridTrackState> = "repeat";
<new GridTrackState> = "removed";
<new HeadersGuardEnum> = "none";
<new HeadersGuardEnum> = "request";
<new HeadersGuardEnum> = "request-no-cors";
<new HeadersGuardEnum> = "response";
<new HeadersGuardEnum> = "immutable";
<new ScrollRestoration> = "auto";
<new ScrollRestoration> = "manual";
<new SelectionMode> = "select";
<new SelectionMode> = "start";
<new SelectionMode> = "end";
<new SelectionMode> = "preserve";
<new IDBCursorDirection> = "next";
<new IDBCursorDirection> = "nextunique";
<new IDBCursorDirection> = "prev";
<new IDBCursorDirection> = "prevunique";
<new IDBRequestReadyState> = "pending";
<new IDBRequestReadyState> = "done";
<new IDBTransactionMode> = "readonly";
<new IDBTransactionMode> = "readwrite";
<new IDBTransactionMode> = "readwriteflush";
<new IDBTransactionMode> = "cleanup";
<new IDBTransactionMode> = "versionchange";
<new ImageBitmapFormat> = "RGBA32";
<new ImageBitmapFormat> = "BGRA32";
<new ImageBitmapFormat> = "RGB24";
<new ImageBitmapFormat> = "BGR24";
<new ImageBitmapFormat> = "GRAY8";
<new ImageBitmapFormat> = "YUV444P";
<new ImageBitmapFormat> = "YUV422P";
<new ImageBitmapFormat> = "YUV420P";
<new ImageBitmapFormat> = "YUV420SP_NV12";
<new ImageBitmapFormat> = "YUV420SP_NV21";
<new ImageBitmapFormat> = "HSV";
<new ImageBitmapFormat> = "Lab";
<new ImageBitmapFormat> = "DEPTH";
<new ChannelPixelLayoutDataType> = "uint8";
<new ChannelPixelLayoutDataType> = "int8";
<new ChannelPixelLayoutDataType> = "uint16";
<new ChannelPixelLayoutDataType> = "int16";
<new ChannelPixelLayoutDataType> = "uint32";
<new ChannelPixelLayoutDataType> = "int32";
<new ChannelPixelLayoutDataType> = "float32";
<new ChannelPixelLayoutDataType> = "float64";
<new ImageOrientation> = "none";
<new ImageOrientation> = "flipY";
<new PremultiplyAlpha> = "none";
<new PremultiplyAlpha> = "premultiply";
<new PremultiplyAlpha> = "default";
<new IterationCompositeOperation> = "replace";
<new IterationCompositeOperation> = "accumulate";
<new LockMode> = "shared";
<new LockMode> = "exclusive";
<new MediaDecodingType> = "file";
<new MediaDecodingType> = "media-source";
<new MediaEncodingType> = "record";
<new MediaEncodingType> = "transmission";
<new MediaDeviceKind> = "audioinput";
<new MediaDeviceKind> = "audiooutput";
<new MediaDeviceKind> = "videoinput";
<new MediaKeyMessageType> = "license-request";
<new MediaKeyMessageType> = "license-renewal";
<new MediaKeyMessageType> = "license-release";
<new MediaKeyMessageType> = "individualization-request";
<new MediaKeySessionType> = "temporary";
<new MediaKeySessionType> = "persistent-license";
<new MediaKeySystemStatus> = "available";
<new MediaKeySystemStatus> = "api-disabled";
<new MediaKeySystemStatus> = "cdm-disabled";
<new MediaKeySystemStatus> = "cdm-not-supported";
<new MediaKeySystemStatus> = "cdm-not-installed";
<new MediaKeySystemStatus> = "cdm-created";
<new MediaKeyStatus> = "usable";
<new MediaKeyStatus> = "expired";
<new MediaKeyStatus> = "released";
<new MediaKeyStatus> = "output-restricted";
<new MediaKeyStatus> = "output-downscaled";
<new MediaKeyStatus> = "status-pending";
<new MediaKeyStatus> = "internal-error";
<new MediaKeysRequirement> = "required";
<new MediaKeysRequirement> = "optional";
<new MediaKeysRequirement> = "not-allowed";
<new RecordingState> = "inactive";
<new RecordingState> = "recording";
<new RecordingState> = "paused";
<new MediaSessionPlaybackState> = "none";
<new MediaSessionPlaybackState> = "paused";
<new MediaSessionPlaybackState> = "playing";
<new MediaSessionAction> = "play";
<new MediaSessionAction> = "pause";
<new MediaSessionAction> = "seekbackward";
<new MediaSessionAction> = "seekforward";
<new MediaSessionAction> = "previoustrack";
<new MediaSessionAction> = "nexttrack";
<new MediaSessionAction> = "skipad";
<new MediaSessionAction> = "seekto";
<new MediaSessionAction> = "stop";
<new MediaSourceReadyState> = "closed";
<new MediaSourceReadyState> = "open";
<new MediaSourceReadyState> = "ended";
<new MediaSourceEndOfStreamError> = "network";
<new MediaSourceEndOfStreamError> = "decode";
<new VideoFacingModeEnum> = "user";
<new VideoFacingModeEnum> = "environment";
<new VideoFacingModeEnum> = "left";
<new VideoFacingModeEnum> = "right";
<new MediaSourceEnum> = "camera";
<new MediaSourceEnum> = "screen";
<new MediaSourceEnum> = "application";
<new MediaSourceEnum> = "window";
<new MediaSourceEnum> = "browser";
<new MediaSourceEnum> = "microphone";
<new MediaSourceEnum> = "audioCapture";
<new MediaSourceEnum> = "other";
<new MediaStreamTrackState> = "live";
<new MediaStreamTrackState> = "ended";
<new MIDIPortType> = "input";
<new MIDIPortType> = "output";
<new MIDIPortDeviceState> = "disconnected";
<new MIDIPortDeviceState> = "connected";
<new MIDIPortConnectionState> = "open";
<new MIDIPortConnectionState> = "closed";
<new MIDIPortConnectionState> = "pending";
<new ConnectionType> = "cellular";
<new ConnectionType> = "bluetooth";
<new ConnectionType> = "ethernet";
<new ConnectionType> = "wifi";
<new ConnectionType> = "other";
<new ConnectionType> = "none";
<new ConnectionType> = "unknown";
<new NotificationPermission> = "default";
<new NotificationPermission> = "denied";
<new NotificationPermission> = "granted";
<new NotificationDirection> = "auto";
<new NotificationDirection> = "ltr";
<new NotificationDirection> = "rtl";
<new OscillatorType> = "sine";
<new OscillatorType> = "square";
<new OscillatorType> = "sawtooth";
<new OscillatorType> = "triangle";
<new OscillatorType> = "custom";
<new PanningModelType> = "equalpower";
<new PanningModelType> = "HRTF";
<new DistanceModelType> = "linear";
<new DistanceModelType> = "inverse";
<new DistanceModelType> = "exponential";
<new PaymentShippingType> = "shipping";
<new PaymentShippingType> = "delivery";
<new PaymentShippingType> = "pickup";
<new PaymentComplete> = "success";
<new PaymentComplete> = "fail";
<new PaymentComplete> = "unknown";
<new PCObserverStateType> = "None";
<new PCObserverStateType> = "IceConnectionState";
<new PCObserverStateType> = "IceGatheringState";
<new PCObserverStateType> = "SignalingState";
<new PCError> = "UnknownError";
<new PCError> = "InvalidAccessError";
<new PCError> = "InvalidStateError";
<new PCError> = "InvalidModificationError";
<new PCError> = "OperationError";
<new PCError> = "NotSupportedError";
<new PCError> = "SyntaxError";
<new PCError> = "NotReadableError";
<new PCError> = "TypeError";
<new PCError> = "RangeError";
<new PCError> = "InvalidCharacterError";
<new NavigationType> = "navigate";
<new NavigationType> = "reload";
<new NavigationType> = "back_forward";
<new NavigationType> = "prerender";
<new PermissionName> = "geolocation";
<new PermissionName> = "notifications";
<new PermissionName> = "push";
<new PermissionName> = "persistent-storage";
<new PermissionState> = "granted";
<new PermissionState> = "denied";
<new PermissionState> = "prompt";
<new ProfileTimelineMessagePortOperationType> = "serializeData";
<new ProfileTimelineMessagePortOperationType> = "deserializeData";
<new ProfileTimelineWorkerOperationType> = "serializeDataOffMainThread";
<new ProfileTimelineWorkerOperationType> = "serializeDataOnMainThread";
<new ProfileTimelineWorkerOperationType> = "deserializeDataOffMainThread";
<new ProfileTimelineWorkerOperationType> = "deserializeDataOnMainThread";
<new PushPermissionState> = "granted";
<new PushPermissionState> = "denied";
<new PushPermissionState> = "prompt";
<new PushEncryptionKeyName> = "p256dh";
<new PushEncryptionKeyName> = "auth";
<new ReadableStreamReaderMode> = "byob";
<new ReadableStreamType> = "bytes";
<new ReferrerPolicy> = "";
<new ReferrerPolicy> = "no-referrer";
<new ReferrerPolicy> = "no-referrer-when-downgrade";
<new ReferrerPolicy> = "origin";
<new ReferrerPolicy> = "origin-when-cross-origin";
<new ReferrerPolicy> = "unsafe-url";
<new ReferrerPolicy> = "same-origin";
<new ReferrerPolicy> = "strict-origin";
<new ReferrerPolicy> = "strict-origin-when-cross-origin";
<new RequestDestination> = "";
<new RequestDestination> = "audio";
<new RequestDestination> = "audioworklet";
<new RequestDestination> = "document";
<new RequestDestination> = "embed";
<new RequestDestination> = "font";
<new RequestDestination> = "frame";
<new RequestDestination> = "iframe";
<new RequestDestination> = "image";
<new RequestDestination> = "manifest";
<new RequestDestination> = "object";
<new RequestDestination> = "paintworklet";
<new RequestDestination> = "report";
<new RequestDestination> = "script";
<new RequestDestination> = "sharedworker";
<new RequestDestination> = "style";
<new RequestDestination> = "track";
<new RequestDestination> = "video";
<new RequestDestination> = "worker";
<new RequestDestination> = "xslt";
<new RequestMode> = "same-origin";
<new RequestMode> = "no-cors";
<new RequestMode> = "cors";
<new RequestMode> = "navigate";
<new RequestCredentials> = "omit";
<new RequestCredentials> = "same-origin";
<new RequestCredentials> = "include";
<new RequestCache> = "default";
<new RequestCache> = "no-store";
<new RequestCache> = "reload";
<new RequestCache> = "no-cache";
<new RequestCache> = "force-cache";
<new RequestCache> = "only-if-cached";
<new RequestRedirect> = "follow";
<new RequestRedirect> = "error";
<new RequestRedirect> = "manual";
<new ResizeObserverBoxOptions> = "border-box";
<new ResizeObserverBoxOptions> = "content-box";
<new ResizeObserverBoxOptions> = "device-pixel-content-box";
<new ResponseType> = "basic";
<new ResponseType> = "cors";
<new ResponseType> = "default";
<new ResponseType> = "error";
<new ResponseType> = "opaque";
<new ResponseType> = "opaqueredirect";
<new RTCIceCredentialType> = "password";
<new RTCIceTransportPolicy> = "relay";
<new RTCIceTransportPolicy> = "all";
<new RTCBundlePolicy> = "balanced";
<new RTCBundlePolicy> = "max-compat";
<new RTCBundlePolicy> = "max-bundle";
<new RTCDataChannelState> = "connecting";
<new RTCDataChannelState> = "open";
<new RTCDataChannelState> = "closing";
<new RTCDataChannelState> = "closed";
<new RTCDataChannelType> = "arraybuffer";
<new RTCDataChannelType> = "blob";
<new RTCDtlsTransportState> = "new";
<new RTCDtlsTransportState> = "connecting";
<new RTCDtlsTransportState> = "connected";
<new RTCDtlsTransportState> = "closed";
<new RTCDtlsTransportState> = "failed";
<new RTCSignalingState> = "stable";
<new RTCSignalingState> = "have-local-offer";
<new RTCSignalingState> = "have-remote-offer";
<new RTCSignalingState> = "have-local-pranswer";
<new RTCSignalingState> = "have-remote-pranswer";
<new RTCSignalingState> = "closed";
<new RTCIceGatheringState> = "new";
<new RTCIceGatheringState> = "gathering";
<new RTCIceGatheringState> = "complete";
<new RTCIceConnectionState> = "new";
<new RTCIceConnectionState> = "checking";
<new RTCIceConnectionState> = "connected";
<new RTCIceConnectionState> = "completed";
<new RTCIceConnectionState> = "failed";
<new RTCIceConnectionState> = "disconnected";
<new RTCIceConnectionState> = "closed";
<new mozPacketDumpType> = "rtp";
<new mozPacketDumpType> = "srtp";
<new mozPacketDumpType> = "rtcp";
<new mozPacketDumpType> = "srtcp";
<new RTCLifecycleEvent> = "initialized";
<new RTCLifecycleEvent> = "icegatheringstatechange";
<new RTCLifecycleEvent> = "iceconnectionstatechange";
<new RTCPriorityType> = "very-low";
<new RTCPriorityType> = "low";
<new RTCPriorityType> = "medium";
<new RTCPriorityType> = "high";
<new RTCDegradationPreference> = "maintain-framerate";
<new RTCDegradationPreference> = "maintain-resolution";
<new RTCDegradationPreference> = "balanced";
<new RTCRtpSourceEntryType> = "contributing";
<new RTCRtpSourceEntryType> = "synchronization";
<new RTCRtpTransceiverDirection> = "sendrecv";
<new RTCRtpTransceiverDirection> = "sendonly";
<new RTCRtpTransceiverDirection> = "recvonly";
<new RTCRtpTransceiverDirection> = "inactive";
<new RTCSdpType> = "offer";
<new RTCSdpType> = "pranswer";
<new RTCSdpType> = "answer";
<new RTCSdpType> = "rollback";
<new RTCStatsType> = "inbound-rtp";
<new RTCStatsType> = "outbound-rtp";
<new RTCStatsType> = "remote-inbound-rtp";
<new RTCStatsType> = "remote-outbound-rtp";
<new RTCStatsType> = "csrc";
<new RTCStatsType> = "data-channel";
<new RTCStatsType> = "session";
<new RTCStatsType> = "track";
<new RTCStatsType> = "transport";
<new RTCStatsType> = "candidate-pair";
<new RTCStatsType> = "local-candidate";
<new RTCStatsType> = "remote-candidate";
<new RTCStatsIceCandidatePairState> = "frozen";
<new RTCStatsIceCandidatePairState> = "waiting";
<new RTCStatsIceCandidatePairState> = "inprogress";
<new RTCStatsIceCandidatePairState> = "failed";
<new RTCStatsIceCandidatePairState> = "succeeded";
<new RTCStatsIceCandidatePairState> = "cancelled";
<new RTCIceCandidateType> = "host";
<new RTCIceCandidateType> = "srflx";
<new RTCIceCandidateType> = "prflx";
<new RTCIceCandidateType> = "relay";
<new ScreenColorGamut> = "srgb";
<new ScreenColorGamut> = "p3";
<new ScreenColorGamut> = "rec2020";
<new OrientationType> = "portrait-primary";
<new OrientationType> = "portrait-secondary";
<new OrientationType> = "landscape-primary";
<new OrientationType> = "landscape-secondary";
<new OrientationLockType> = "any";
<new OrientationLockType> = "natural";
<new OrientationLockType> = "landscape";
<new OrientationLockType> = "portrait";
<new OrientationLockType> = "portrait-primary";
<new OrientationLockType> = "portrait-secondary";
<new OrientationLockType> = "landscape-primary";
<new OrientationLockType> = "landscape-secondary";
<new ScrollState> = "started";
<new ScrollState> = "stopped";
<new SecurityPolicyViolationEventDisposition> = "enforce";
<new SecurityPolicyViolationEventDisposition> = "report";
<new ServiceWorkerState> = "parsed";
<new ServiceWorkerState> = "installing";
<new ServiceWorkerState> = "installed";
<new ServiceWorkerState> = "activating";
<new ServiceWorkerState> = "activated";
<new ServiceWorkerState> = "redundant";
<new ServiceWorkerUpdateViaCache> = "imports";
<new ServiceWorkerUpdateViaCache> = "all";
<new ServiceWorkerUpdateViaCache> = "none";
<new ShadowRootMode> = "open";
<new ShadowRootMode> = "closed";
<new SlotAssignmentMode> = "manual";
<new SlotAssignmentMode> = "named";
<new SocketReadyState> = "opening";
<new SocketReadyState> = "open";
<new SocketReadyState> = "closing";
<new SocketReadyState> = "closed";
<new SocketReadyState> = "halfclosed";
<new SourceBufferAppendMode> = "segments";
<new SourceBufferAppendMode> = "sequence";
<new SpeechRecognitionErrorCode> = "no-speech";
<new SpeechRecognitionErrorCode> = "aborted";
<new SpeechRecognitionErrorCode> = "audio-capture";
<new SpeechRecognitionErrorCode> = "network";
<new SpeechRecognitionErrorCode> = "not-allowed";
<new SpeechRecognitionErrorCode> = "service-not-allowed";
<new SpeechRecognitionErrorCode> = "bad-grammar";
<new SpeechRecognitionErrorCode> = "language-not-supported";
<new SpeechSynthesisErrorCode> = "canceled";
<new SpeechSynthesisErrorCode> = "interrupted";
<new SpeechSynthesisErrorCode> = "audio-busy";
<new SpeechSynthesisErrorCode> = "audio-hardware";
<new SpeechSynthesisErrorCode> = "network";
<new SpeechSynthesisErrorCode> = "synthesis-unavailable";
<new SpeechSynthesisErrorCode> = "synthesis-failed";
<new SpeechSynthesisErrorCode> = "language-unavailable";
<new SpeechSynthesisErrorCode> = "voice-unavailable";
<new SpeechSynthesisErrorCode> = "text-too-long";
<new SpeechSynthesisErrorCode> = "invalid-argument";
<new StorageType> = "persistent";
<new StorageType> = "temporary";
<new StorageType> = "default";
<new StreamFilterStatus> = "uninitialized";
<new StreamFilterStatus> = "transferringdata";
<new StreamFilterStatus> = "finishedtransferringdata";
<new StreamFilterStatus> = "suspended";
<new StreamFilterStatus> = "closed";
<new StreamFilterStatus> = "disconnected";
<new StreamFilterStatus> = "failed";
<new TCPSocketBinaryType> = "arraybuffer";
<new TCPSocketBinaryType> = "string";
<new TCPReadyState> = "connecting";
<new TCPReadyState> = "open";
<new TCPReadyState> = "closing";
<new TCPReadyState> = "closed";
<new StringType> = "literal";
<new StringType> = "stringbuffer";
<new StringType> = "inline";
<new StringType> = "other";
<new TextTrackKind> = "subtitles";
<new TextTrackKind> = "captions";
<new TextTrackKind> = "descriptions";
<new TextTrackKind> = "chapters";
<new TextTrackKind> = "metadata";
<new TextTrackMode> = "disabled";
<new TextTrackMode> = "hidden";
<new TextTrackMode> = "showing";
<new Transport> = "bt";
<new Transport> = "ble";
<new Transport> = "nfc";
<new Transport> = "usb";
<new VREye> = "left";
<new VREye> = "right";
<new VRDisplayEventReason> = "mounted";
<new VRDisplayEventReason> = "navigation";
<new VRDisplayEventReason> = "requested";
<new VRDisplayEventReason> = "unmounted";
<new AutoKeyword> = "auto";
<new LineAlignSetting> = "start";
<new LineAlignSetting> = "center";
<new LineAlignSetting> = "end";
<new PositionAlignSetting> = "line-left";
<new PositionAlignSetting> = "center";
<new PositionAlignSetting> = "line-right";
<new PositionAlignSetting> = "auto";
<new AlignSetting> = "start";
<new AlignSetting> = "center";
<new AlignSetting> = "end";
<new AlignSetting> = "left";
<new AlignSetting> = "right";
<new DirectionSetting> = "";
<new DirectionSetting> = "rl";
<new DirectionSetting> = "lr";
<new ScrollSetting> = "";
<new ScrollSetting> = "up";
<new OverSampleType> = "none";
<new OverSampleType> = "2x";
<new OverSampleType> = "4x";
<new AuthenticatorAttachment> = "platform";
<new AuthenticatorAttachment> = "cross-platform";
<new AttestationConveyancePreference> = "none";
<new AttestationConveyancePreference> = "indirect";
<new AttestationConveyancePreference> = "direct";
<new UserVerificationRequirement> = "required";
<new UserVerificationRequirement> = "preferred";
<new UserVerificationRequirement> = "discouraged";
<new PublicKeyCredentialType> = "public-key";
<new AuthenticatorTransport> = "usb";
<new AuthenticatorTransport> = "nfc";
<new AuthenticatorTransport> = "ble";
<new AuthenticatorTransport> = "internal";
<new WebGLPowerPreference> = "default";
<new WebGLPowerPreference> = "low-power";
<new WebGLPowerPreference> = "high-performance";
<new GPUPowerPreference> = "low-power";
<new GPUPowerPreference> = "high-performance";
<new GPUFeatureName> = "depth-clamping";
<new GPUFeatureName> = "depth24unorm-stencil8";
<new GPUFeatureName> = "depth32float-stencil8";
<new GPUFeatureName> = "pipeline-statistics-query";
<new GPUFeatureName> = "texture-compression-bc";
<new GPUFeatureName> = "timestamp-query";
<new GPUErrorFilter> = "out-of-memory";
<new GPUErrorFilter> = "validation";
<new GPUTextureDimension> = "1d";
<new GPUTextureDimension> = "2d";
<new GPUTextureDimension> = "3d";
<new GPUTextureFormat> = "r8unorm";
<new GPUTextureFormat> = "r8snorm";
<new GPUTextureFormat> = "r8uint";
<new GPUTextureFormat> = "r8sint";
<new GPUTextureFormat> = "r16uint";
<new GPUTextureFormat> = "r16sint";
<new GPUTextureFormat> = "r16float";
<new GPUTextureFormat> = "rg8unorm";
<new GPUTextureFormat> = "rg8snorm";
<new GPUTextureFormat> = "rg8uint";
<new GPUTextureFormat> = "rg8sint";
<new GPUTextureFormat> = "r32uint";
<new GPUTextureFormat> = "r32sint";
<new GPUTextureFormat> = "r32float";
<new GPUTextureFormat> = "rg16uint";
<new GPUTextureFormat> = "rg16sint";
<new GPUTextureFormat> = "rg16float";
<new GPUTextureFormat> = "rgba8unorm";
<new GPUTextureFormat> = "rgba8unorm-srgb";
<new GPUTextureFormat> = "rgba8snorm";
<new GPUTextureFormat> = "rgba8uint";
<new GPUTextureFormat> = "rgba8sint";
<new GPUTextureFormat> = "bgra8unorm";
<new GPUTextureFormat> = "bgra8unorm-srgb";
<new GPUTextureFormat> = "rgb10a2unorm";
<new GPUTextureFormat> = "rg11b10float";
<new GPUTextureFormat> = "rg32uint";
<new GPUTextureFormat> = "rg32sint";
<new GPUTextureFormat> = "rg32float";
<new GPUTextureFormat> = "rgba16uint";
<new GPUTextureFormat> = "rgba16sint";
<new GPUTextureFormat> = "rgba16float";
<new GPUTextureFormat> = "rgba32uint";
<new GPUTextureFormat> = "rgba32sint";
<new GPUTextureFormat> = "rgba32float";
<new GPUTextureFormat> = "depth24plus";
<new GPUTextureFormat> = "depth24plus-stencil8";
<new GPUTextureFormat> = "depth32float";
<new GPUTextureFormat> = "bc1-rgba-unorm";
<new GPUTextureFormat> = "bc1-rgba-unorm-srgb";
<new GPUTextureFormat> = "bc2-rgba-unorm";
<new GPUTextureFormat> = "bc2-rgba-unorm-srgb";
<new GPUTextureFormat> = "bc3-rgba-unorm";
<new GPUTextureFormat> = "bc3-rgba-unorm-srgb";
<new GPUTextureFormat> = "bc4-r-unorm";
<new GPUTextureFormat> = "bc4-r-snorm";
<new GPUTextureFormat> = "bc5-rg-unorm";
<new GPUTextureFormat> = "bc5-rg-snorm";
<new GPUTextureFormat> = "bc6h-rgb-ufloat";
<new GPUTextureFormat> = "bc6h-rgb-float";
<new GPUTextureFormat> = "bc7-rgba-unorm";
<new GPUTextureFormat> = "bc7-rgba-unorm-srgb";
<new GPUTextureViewDimension> = "1d";
<new GPUTextureViewDimension> = "2d";
<new GPUTextureViewDimension> = "2d-array";
<new GPUTextureViewDimension> = "cube";
<new GPUTextureViewDimension> = "cube-array";
<new GPUTextureViewDimension> = "3d";
<new GPUTextureAspect> = "all";
<new GPUTextureAspect> = "stencil-only";
<new GPUTextureAspect> = "depth-only";
<new GPUAddressMode> = "clamp-to-edge";
<new GPUAddressMode> = "repeat";
<new GPUAddressMode> = "mirror-repeat";
<new GPUFilterMode> = "nearest";
<new GPUFilterMode> = "linear";
<new GPUCompareFunction> = "never";
<new GPUCompareFunction> = "less";
<new GPUCompareFunction> = "equal";
<new GPUCompareFunction> = "less-equal";
<new GPUCompareFunction> = "greater";
<new GPUCompareFunction> = "not-equal";
<new GPUCompareFunction> = "greater-equal";
<new GPUCompareFunction> = "always";
<new GPUTextureComponentType> = "float";
<new GPUTextureComponentType> = "sint";
<new GPUTextureComponentType> = "uint";
<new GPUTextureComponentType> = "depth-comparison";
<new GPUBufferBindingType> = "uniform";
<new GPUBufferBindingType> = "storage";
<new GPUBufferBindingType> = "read-only-storage";
<new GPUSamplerBindingType> = "filtering";
<new GPUSamplerBindingType> = "non-filtering";
<new GPUSamplerBindingType> = "comparison";
<new GPUTextureSampleType> = "float";
<new GPUTextureSampleType> = "unfilterable-float";
<new GPUTextureSampleType> = "depth";
<new GPUTextureSampleType> = "sint";
<new GPUTextureSampleType> = "uint";
<new GPUStorageTextureAccess> = "write-only";
<new GPUCompilationMessageType> = "error";
<new GPUCompilationMessageType> = "warning";
<new GPUCompilationMessageType> = "info";
<new GPUIndexFormat> = "uint16";
<new GPUIndexFormat> = "uint32";
<new GPUVertexFormat> = "uint8x2";
<new GPUVertexFormat> = "uint8x4";
<new GPUVertexFormat> = "sint8x2";
<new GPUVertexFormat> = "sint8x4";
<new GPUVertexFormat> = "unorm8x2";
<new GPUVertexFormat> = "unorm8x4";
<new GPUVertexFormat> = "snorm8x2";
<new GPUVertexFormat> = "snorm8x4";
<new GPUVertexFormat> = "uint16x2";
<new GPUVertexFormat> = "uint16x4";
<new GPUVertexFormat> = "sint16x2";
<new GPUVertexFormat> = "sint16x4";
<new GPUVertexFormat> = "unorm16x2";
<new GPUVertexFormat> = "unorm16x4";
<new GPUVertexFormat> = "snorm16x2";
<new GPUVertexFormat> = "snorm16x4";
<new GPUVertexFormat> = "float16x2";
<new GPUVertexFormat> = "float16x4";
<new GPUVertexFormat> = "float32";
<new GPUVertexFormat> = "float32x2";
<new GPUVertexFormat> = "float32x3";
<new GPUVertexFormat> = "float32x4";
<new GPUVertexFormat> = "uint32";
<new GPUVertexFormat> = "uint32x2";
<new GPUVertexFormat> = "uint32x3";
<new GPUVertexFormat> = "uint32x4";
<new GPUVertexFormat> = "sint32";
<new GPUVertexFormat> = "sint32x2";
<new GPUVertexFormat> = "sint32x3";
<new GPUVertexFormat> = "sint32x4";
<new GPUVertexStepMode> = "vertex";
<new GPUVertexStepMode> = "instance";
<new GPUPrimitiveTopology> = "point-list";
<new GPUPrimitiveTopology> = "line-list";
<new GPUPrimitiveTopology> = "line-strip";
<new GPUPrimitiveTopology> = "triangle-list";
<new GPUPrimitiveTopology> = "triangle-strip";
<new GPUFrontFace> = "ccw";
<new GPUFrontFace> = "cw";
<new GPUCullMode> = "none";
<new GPUCullMode> = "front";
<new GPUCullMode> = "back";
<new GPUBlendFactor> = "zero";
<new GPUBlendFactor> = "one";
<new GPUBlendFactor> = "src";
<new GPUBlendFactor> = "one-minus-src";
<new GPUBlendFactor> = "src-alpha";
<new GPUBlendFactor> = "one-minus-src-alpha";
<new GPUBlendFactor> = "dst";
<new GPUBlendFactor> = "one-minus-dst";
<new GPUBlendFactor> = "dst-alpha";
<new GPUBlendFactor> = "one-minus-dst-alpha";
<new GPUBlendFactor> = "src-alpha-saturated";
<new GPUBlendFactor> = "constant";
<new GPUBlendFactor> = "one-minus-constant";
<new GPUBlendOperation> = "add";
<new GPUBlendOperation> = "subtract";
<new GPUBlendOperation> = "reverse-subtract";
<new GPUBlendOperation> = "min";
<new GPUBlendOperation> = "max";
<new GPUStencilOperation> = "keep";
<new GPUStencilOperation> = "zero";
<new GPUStencilOperation> = "replace";
<new GPUStencilOperation> = "invert";
<new GPUStencilOperation> = "increment-clamp";
<new GPUStencilOperation> = "decrement-clamp";
<new GPUStencilOperation> = "increment-wrap";
<new GPUStencilOperation> = "decrement-wrap";
<new GPULoadOp> = "load";
<new GPUStoreOp> = "store";
<new GPUStoreOp> = "discard";
<new GPUQueryType> = "occlusion";
<new GPUQueryType> = "pipeline-statistics";
<new GPUQueryType> = "timestamp";
<new GPUPipelineStatisticName> = "vertex-shader-invocations";
<new GPUPipelineStatisticName> = "clipper-invocations";
<new GPUPipelineStatisticName> = "clipper-primitives-out";
<new GPUPipelineStatisticName> = "fragment-shader-invocations";
<new GPUPipelineStatisticName> = "compute-shader-invocations";
<new GPUCanvasCompositingAlphaMode> = "opaque";
<new GPUCanvasCompositingAlphaMode> = "premultiplied";
<new BinaryType> = "blob";
<new BinaryType> = "arraybuffer";
<new XRSessionMode> = "inline";
<new XRSessionMode> = "immersive-vr";
<new XRSessionMode> = "immersive-ar";
<new XRVisibilityState> = "visible";
<new XRVisibilityState> = "visible-blurred";
<new XRVisibilityState> = "hidden";
<new XRReferenceSpaceType> = "viewer";
<new XRReferenceSpaceType> = "local";
<new XRReferenceSpaceType> = "local-floor";
<new XRReferenceSpaceType> = "bounded-floor";
<new XRReferenceSpaceType> = "unbounded";
<new XREye> = "none";
<new XREye> = "left";
<new XREye> = "right";
<new XRHandedness> = "none";
<new XRHandedness> = "left";
<new XRHandedness> = "right";
<new XRTargetRayMode> = "gaze";
<new XRTargetRayMode> = "tracked-pointer";
<new XRTargetRayMode> = "screen";
<new ScrollBehavior> = "auto";
<new ScrollBehavior> = "instant";
<new ScrollBehavior> = "smooth";
<new XMLHttpRequestResponseType> = "";
<new XMLHttpRequestResponseType> = "arraybuffer";
<new XMLHttpRequestResponseType> = "blob";
<new XMLHttpRequestResponseType> = "document";
<new XMLHttpRequestResponseType> = "json";
<new XMLHttpRequestResponseType> = "text";


freememory();
freememory();
freememory();


#ApplicationCache

#DOMParser
<new Document> = <DOMParser>.parseFromString(<DOMString>,<SupportedType>);
<new Document> = <DOMParser>.parseFromString(<htmlstring>,"text/html");

#XPathEvaluator
<new XPathExpression> = <XPathEvaluator>.createExpression("<xpath>");
<new XPathExpression> = <XPathEvaluator>.createExpression("<xpath>",<XPathNSResolver>);
<new XPathResult> = <XPathEvaluator>.evaluate("<xpath>",<Element>);
<new XPathResult> = <XPathEvaluator>.evaluate("<xpath>",<Element>,<XPathNSResolver>);
<new XPathResult> = <XPathEvaluator>.evaluate("<xpath>",<Element>,<XPathNSResolver>,<fuzzint>);
<new XPathResult> = <XPathEvaluator>.evaluate("<xpath>",<Element>,<XPathNSResolver>,<fuzzint>,<XPathResult>);
<new XPathResult> = <XPathEvaluator>.evaluate("<xpath>",document);
<new XPathResult> = <XPathEvaluator>.evaluate("<xpath>",document,null,XPathResult.ANY_TYPE,<XPathResult>);

#XPathResult

#XMLSerializer

#XSLTProcessor
<new DocumentFragment> = <XSLTProcessor>.transformToFragment(<Element>,<Document>);

#XPathNSResolver

#Document
<new XPathExpression> = <Document>.createExpression("<xpath>");
<new XPathExpression> = <Document>.createExpression("<xpath>",<XPathNSResolver>);
<new XPathResult> = <Document>.evaluate("<xpath>",<Element>);
<new XPathResult> = <Document>.evaluate("<xpath>",<Element>,<XPathNSResolver>);
<new XPathResult> = <Document>.evaluate("<xpath>",<Element>,<XPathNSResolver>,<fuzzint>);
<new XPathResult> = <Document>.evaluate("<xpath>",<Element>,<XPathNSResolver>,<fuzzint>,<XPathResult>);
<new XPathResult> = <Document>.evaluate("<xpath>",document);
<new XPathResult> = <Document>.evaluate("<xpath>",document,null,XPathResult.ANY_TYPE,<XPathResult>);

#Document

#XPathExpression
<new XPathResult> = <XPathExpression>.evaluate(<Element>,<fuzzint>);
<new XPathResult> = <XPathExpression>.evaluate(<Element>,<fuzzint>,<XPathResult>);

#AnimationEffectTiming

#AnimationTimeline

#Animation

#AnimationEffectReadOnly

#KeyframeEffectReadOnly

#AnimationEffectTimingReadOnly

#KeyframeEffect

#Element
<new Animation> = <Element>.animate(<sequence_Dictionary_>,<double>);
<new Animation> = <Element>.animate(<sequence_Dictionary_>,<KeyframeEffectOptions>);

#Document

#DocumentTimeline

#TimeRanges
<new double> = <TimeRanges>.start(<fuzzint>);
<new double> = <TimeRanges>.end(<fuzzint>);

#HTMLStyleElement
<HTMLStyleElement>.media = "<media_value>";
<HTMLStyleElement>.type = "<type_value>";

#HTMLAnchorElement
<HTMLAnchorElement>.target = "<target_value>";
<HTMLAnchorElement>.download = "<download_value>";
<HTMLAnchorElement>.ping = "<ping_value>";
<HTMLAnchorElement>.rel = "<rel_value>";
<HTMLAnchorElement>.hreflang = "<hreflang_value>";
<HTMLAnchorElement>.type = "<type_value>";
<HTMLAnchorElement>.referrerPolicy = "<referrerpolicy_value>";
<HTMLAnchorElement>.text = "<text_value>";
<HTMLAnchorElement>.coords = "<coords_value>";
<HTMLAnchorElement>.charset = "<charset_value>";
<HTMLAnchorElement>.name = "<name_value>";
<HTMLAnchorElement>.rev = "<rev_value>";
<HTMLAnchorElement>.shape = "<shape_value>";

#HTMLIFrameElement
<HTMLIFrameElement>.src = "<framesrc>";
<HTMLIFrameElement>.srcdoc = "<framesrc>";
<HTMLIFrameElement>.name = "<name_value>";
<HTMLIFrameElement>.width = "<width_value>";
<HTMLIFrameElement>.height = "<height_value>";
<HTMLIFrameElement>.referrerPolicy = "<referrerpolicy_value>";
<HTMLIFrameElement>.align = "<align_value>";
<HTMLIFrameElement>.scrolling = "<scrolling_value>";
<HTMLIFrameElement>.frameBorder = "<frameborder_value>";
<HTMLIFrameElement>.longDesc = "<longdesc_value>";
<HTMLIFrameElement>.marginHeight = "<marginheight_value>";
<HTMLIFrameElement>.marginWidth = "<marginheight_value>";

#HTMLTableElement
<HTMLTableElement>.caption = <HTMLTableCaptionElement>;
<new HTMLTableRowElement> = <HTMLTableElement>.insertRow(<fuzzint>);
<HTMLTableElement>.deleteRow(<fuzzint>);
<HTMLTableElement>.align = "<align_value>";
<HTMLTableElement>.border = "<border_value>";
<HTMLTableElement>.frame = "<frame_value>";
<HTMLTableElement>.rules = "<rules_value>";
<HTMLTableElement>.summary = "<summary_value>";
<HTMLTableElement>.width = "<width_value>";
<HTMLTableElement>.bgColor = "<bgcolor_value>";
<HTMLTableElement>.cellPadding = "<cellpadding_value>";
<HTMLTableElement>.cellSpacing = "<cellspacing_value>";

#HTMLHeadElement

#HTMLFrameElement
<HTMLFrameElement>.name = "<name_value>";
<HTMLFrameElement>.scrolling = "<scrolling_value>";
<HTMLFrameElement>.src = "<framesrc>";
<HTMLFrameElement>.frameBorder = "<frameborder_value>";
<HTMLFrameElement>.longDesc = "<longdesc_value>";
<HTMLFrameElement>.marginHeight = "<marginheight_value>";
<HTMLFrameElement>.marginWidth = "<marginwidth_value>";

#HTMLTableColElement
<HTMLTableColElement>.span = <fuzzint>;
<HTMLTableColElement>.align = "<align_value>";
<HTMLTableColElement>.vAlign = "<valign_value>";
<HTMLTableColElement>.width = "<width_value>";

#HTMLDialogElement

#HTMLTextAreaElement
<HTMLTextAreaElement>.cols = <fuzzint>;
<HTMLTextAreaElement>.dirName = "<dirname_value>";
<HTMLTextAreaElement>.inputMode = "<inputmode_value>";
<HTMLTextAreaElement>.maxLength = <fuzzint>;
<HTMLTextAreaElement>.minLength = <fuzzint>;
<HTMLTextAreaElement>.name = "<name_value>";
<HTMLTextAreaElement>.placeholder = "<placeholder_value>";
<HTMLTextAreaElement>.rows = <fuzzint>;
<HTMLTextAreaElement>.wrap = "<wrap_value>";
<HTMLTextAreaElement>.value = "<value_value>";
<HTMLTextAreaElement>.selectionStart = <fuzzint>;
<HTMLTextAreaElement>.selectionEnd = <fuzzint>;
<HTMLTextAreaElement>.setRangeText(<DOMString>,<fuzzint>,<fuzzint>);
<HTMLTextAreaElement>.setRangeText(<DOMString>,<fuzzint>,<fuzzint>,<SelectionMode>);
<HTMLTextAreaElement>.setSelectionRange(<fuzzint>);
<HTMLTextAreaElement>.setSelectionRange(<fuzzint>,<fuzzint>);
<HTMLTextAreaElement>.setSelectionRange(<fuzzint>,<fuzzint>,<DOMString>);

#HTMLButtonElement
<HTMLButtonElement>.formAction = "<formaction_value>";
<HTMLButtonElement>.formEnctype = "<formenctype_value>";
<HTMLButtonElement>.formMethod = "<formmethod_value>";
<HTMLButtonElement>.formTarget = "<formtarget_value>";
<HTMLButtonElement>.name = "<name_value>";
<HTMLButtonElement>.type = "<type_value>";
<HTMLButtonElement>.value = "<value_value>";

#HTMLOListElement
<HTMLOListElement>.start = <fuzzint>;
<HTMLOListElement>.type = "<type_value>";

#HTMLProgressElement

#HTMLQuoteElement
<HTMLQuoteElement>.cite = "<cite_value>";

#HTMLFormElement
<HTMLFormElement>.autocomplete = "<autocomplete_value>";
<HTMLFormElement>.enctype = "<enctype_value>";
<HTMLFormElement>.encoding = "<encoding_value>";
<HTMLFormElement>.method = "<method_value>";
<HTMLFormElement>.name = "<name_value>";
<HTMLFormElement>.target = "<target_value>";

#ValidityState

#HTMLHeadingElement
<HTMLHeadingElement>.align = "<align_value>";

#HTMLAudioElement

#HTMLLegendElement
<HTMLLegendElement>.align = "<align_value>";

#HTMLElement
<Element>.title = "<title_value>";
<Element>.lang = "<lang_value>";
<Element>.dir = "<dir_value>";
<Element>.tabIndex = <fuzzint>;
<Element>.accessKey = "<accesskey_value>";
<Element>.contextMenu = <HTMLMenuElement>;
<Element>.contentEditable = "<contenteditable_value>";

#HTMLSlotElement
<HTMLSlotElement>.name = "<name_value>";
<new NodeList> = <HTMLSlotElement>.assignedNodes(<AssignedNodesOptions>);

#HTMLPreElement
<HTMLPreElement>.width = <fuzzint>;

#HTMLKeygenElement
<HTMLKeygenElement>.keytype = "<keytype_value>";
<HTMLKeygenElement>.name = "<name_value>";

#HTMLSourceElement
<HTMLSourceElement>.src = "<src_value>";
<HTMLSourceElement>.type = "<type_value>";
<HTMLSourceElement>.srcset = "<srcset_value>";
<HTMLSourceElement>.sizes = "<sizes_value>";
<HTMLSourceElement>.media = "<media_value>";

#HTMLMetaElement
<HTMLMetaElement>.name = "<name_value>";
<HTMLMetaElement>.content = "<content_value>";
<HTMLMetaElement>.scheme = "<scheme_value>";

#HTMLBaseElement
<HTMLBaseElement>.href = "<href_value>";
<HTMLBaseElement>.target = "<target_value>";

#HTMLTableRowElement
<new Element> = <HTMLTableRowElement>.insertCell(<fuzzint>);
<HTMLTableRowElement>.deleteCell(<fuzzint>);
<HTMLTableRowElement>.align = "<align_value>";
<HTMLTableRowElement>.vAlign = "<valign_value>";
<HTMLTableRowElement>.bgColor = "<bgcolor_value>";

#HTMLTableCaptionElement
<HTMLTableCaptionElement>.align = "<align_value>";

#HTMLFrameSetElement
<HTMLFrameSetElement>.cols = "<cols_value>";
<HTMLFrameSetElement>.rows = "<rows_value>";

#HTMLMediaElement
<HTMLMediaElement>.src = "<audiosrc>";
<HTMLMediaElement>.src = "<videosrc>";
<HTMLMediaElement>.crossOrigin = "<crossorigin_value>";
<HTMLMediaElement>.preload = "<preload_value>";

#HTMLModElement
<HTMLModElement>.cite = "<cite_value>";
<HTMLModElement>.dateTime = "<datetime_value>";

#HTMLParagraphElement
<HTMLParagraphElement>.align = "<align_value>";

#HTMLObjectElement
<HTMLObjectElement>.data = "<data_value>";
<HTMLObjectElement>.type = "<type_value>";
<HTMLObjectElement>.name = "<name_value>";
<HTMLObjectElement>.useMap = "<usemap_value>";
<HTMLObjectElement>.width = "<width_value>";
<HTMLObjectElement>.height = "<height_value>";
<HTMLObjectElement>.align = "<align_value>";
<HTMLObjectElement>.archive = "<archive_value>";
<HTMLObjectElement>.code = "<code_value>";
<HTMLObjectElement>.hspace = <fuzzint>;
<HTMLObjectElement>.standby = "<standby_value>";
<HTMLObjectElement>.vspace = <fuzzint>;
<HTMLObjectElement>.codeBase = "<codebase_value>";
<HTMLObjectElement>.codeType = "<codetype_value>";
<HTMLObjectElement>.border = "<border_value>";

#HTMLSelectElement
<HTMLSelectElement>.name = "<name_value>";
<HTMLSelectElement>.size = <fuzzint>;
<HTMLSelectElement>.length = <fuzzint>;
<HTMLSelectElement>.add(<HTMLOptionElement>);
<HTMLSelectElement>.add(<HTMLOptionElement>,<Element>);
<HTMLSelectElement>.add(<HTMLOptionElement>);
<HTMLSelectElement>.add(<HTMLOptionElement>,<fuzzint>);
<HTMLSelectElement>.add(<HTMLOptGroupElement>);
<HTMLSelectElement>.add(<HTMLOptGroupElement>,<Element>);
<HTMLSelectElement>.add(<HTMLOptGroupElement>);
<HTMLSelectElement>.add(<HTMLOptGroupElement>,<fuzzint>);
<HTMLSelectElement>.remove(<fuzzint>);
<HTMLSelectElement>[<fuzzint>] = <HTMLOptionElement>;
<HTMLSelectElement>.selectedIndex = <fuzzint>;
<HTMLSelectElement>.value = "<value_value>";

#HTMLDirectoryElement

#HTMLParamElement
<HTMLParamElement>.name = "<name_value>";
<HTMLParamElement>.value = "<value_value>";
<HTMLParamElement>.type = "<type_value>";
<HTMLParamElement>.valueType = "<valuetype_value>";

#HTMLPictureElement

#HTMLAllCollection

#HTMLDataListElement

#HTMLHRElement
<HTMLHRElement>.align = "<align_value>";
<HTMLHRElement>.color = "<color_value>";
<HTMLHRElement>.size = "<size_value>";
<HTMLHRElement>.width = "<width_value>";

#HTMLBodyElement
<HTMLBodyElement>.text = "<text_value>";
<HTMLBodyElement>.link = "<link_value>";
<HTMLBodyElement>.vLink = "<vlink_value>";
<HTMLBodyElement>.aLink = "<alink_value>";
<HTMLBodyElement>.bgColor = "<bgcolor_value>";
<HTMLBodyElement>.background = "<background_value>";

#HTMLLinkElement
<HTMLLinkElement>.href = "<href_value>";
<HTMLLinkElement>.crossOrigin = "<crossorigin_value>";
<HTMLLinkElement>.rel = "<rel_value>";
<HTMLLinkElement>.media = "<media_value>";
<HTMLLinkElement>.hreflang = "<hreflang_value>";
<HTMLLinkElement>.type = "<type_value>";
<HTMLLinkElement>.as = "<as_value>";
<HTMLLinkElement>.charset = "<charset_value>";
<HTMLLinkElement>.rev = "<rev_value>";
<HTMLLinkElement>.target = "<target_value>";
<HTMLLinkElement>.scope = <USVString>;

#HTMLCanvasElement
<HTMLCanvasElement>.width = <fuzzint>;
<HTMLCanvasElement>.height = <fuzzint>;
<HTMLCanvasElement>.toBlob(<BlobCallback>);
<HTMLCanvasElement>.toBlob(<BlobCallback>,<DOMString>);
<HTMLCanvasElement>.toBlob(<BlobCallback>,<DOMString>,<any>);

#HTMLDListElement

#HTMLScriptElement
<HTMLScriptElement>.src = "<src_value>";
<HTMLScriptElement>.type = "<type_value>";
<HTMLScriptElement>.charset = "<charset_value>";
<HTMLScriptElement>.crossOrigin = "<crossorigin_value>";
<HTMLScriptElement>.text = "<text_value>";
<HTMLScriptElement>.nonce = "<nonce_value>";

#HTMLOutputElement
<HTMLOutputElement>.name = "<name_value>";
<HTMLOutputElement>.value = "<value_value>";

#HTMLTrackElement
<HTMLTrackElement>.kind = "<kind_value>";
<HTMLTrackElement>.src = "<src_value>";
<HTMLTrackElement>.srclang = "<srclang_value>";
<HTMLTrackElement>.label = "<label_value>";

#HTMLUListElement
<HTMLUListElement>.type = "<type_value>";

#HTMLSpanElement

#HTMLAreaElement
<HTMLAreaElement>.alt = "<alt_value>";
<HTMLAreaElement>.coords = "<coords_value>";
<HTMLAreaElement>.download = "<download_value>";
<HTMLAreaElement>.shape = "<shape_value>";
<HTMLAreaElement>.target = "<target_value>";
<HTMLAreaElement>.ping = "<ping_value>";
<HTMLAreaElement>.rel = "<rel_value>";
<HTMLAreaElement>.referrerPolicy = "<referrerpolicy_value>";

#HTMLOptionsCollection
<HTMLOptionsCollection>.length = <fuzzint>;
<HTMLOptionsCollection>[<fuzzint>] = <HTMLOptionElement>;
<HTMLOptionsCollection>.add(<HTMLOptionElement>);
<HTMLOptionsCollection>.add(<HTMLOptionElement>,<Element>);
<HTMLOptionsCollection>.add(<HTMLOptionElement>);
<HTMLOptionsCollection>.add(<HTMLOptionElement>,<fuzzint>);
<HTMLOptionsCollection>.add(<HTMLOptGroupElement>);
<HTMLOptionsCollection>.add(<HTMLOptGroupElement>,<Element>);
<HTMLOptionsCollection>.add(<HTMLOptGroupElement>);
<HTMLOptionsCollection>.add(<HTMLOptGroupElement>,<fuzzint>);
<HTMLOptionsCollection>.selectedIndex = <fuzzint>;

#HTMLBRElement
<HTMLBRElement>.clear = "<clear_value>";

#HTMLDivElement
<HTMLDivElement>.align = "<align_value>";

#HTMLUnknownElement

#HTMLLabelElement

#HTMLHyperlinkElementUtils
<HTMLHyperlinkElementUtils>.href = <USVString>;
<HTMLHyperlinkElementUtils>.protocol = <USVString>;
<HTMLHyperlinkElementUtils>.username = <USVString>;
<HTMLHyperlinkElementUtils>.password = <USVString>;
<HTMLHyperlinkElementUtils>.host = <USVString>;
<HTMLHyperlinkElementUtils>.hostname = <USVString>;
<HTMLHyperlinkElementUtils>.port = <USVString>;
<HTMLHyperlinkElementUtils>.pathname = <USVString>;
<HTMLHyperlinkElementUtils>.search = <USVString>;
<HTMLHyperlinkElementUtils>.hash = <USVString>;

#HTMLMapElement
<HTMLMapElement>.name = "<name_value>";

#FormData
<FormData>.append(<USVString>,<Blob>);
<FormData>.append(<USVString>,<Blob>,<USVString>);
<FormData>.append(<USVString>,<USVString>);
<FormData>.delete(<USVString>);
<new FormDataEntryValue> = <FormData>.get(<USVString>);
<new sequence_FormDataEntryValue_> = <FormData>.getAll(<USVString>);
<new boolean> = <FormData>.has(<USVString>);
<FormData>.set(<USVString>,<Blob>);
<FormData>.set(<USVString>,<Blob>,<USVString>);
<FormData>.set(<USVString>,<USVString>);

#MediaError

#HTMLVideoElement
<HTMLVideoElement>.width = <fuzzint>;
<HTMLVideoElement>.height = <fuzzint>;
<HTMLVideoElement>.poster = "<poster_value>";

#HTMLTableSectionElement
<new Element> = <HTMLTableSectionElement>.insertRow(<fuzzint>);
<HTMLTableSectionElement>.align = "<align_value>";
<HTMLTableSectionElement>.vAlign = "<valign_value>";

#HTMLDetailsElement

#HTMLFieldSetElement
<HTMLFieldSetElement>.name = "<name_value>";

#HTMLTableCellElement
<HTMLTableCellElement>.colSpan = <fuzzint>;
<HTMLTableCellElement>.rowSpan = <fuzzint>;
<HTMLTableCellElement>.headers = "<headers_value>";
<HTMLTableCellElement>.align = "<align_value>";
<HTMLTableCellElement>.axis = "<axis_value>";
<HTMLTableCellElement>.height = "<height_value>";
<HTMLTableCellElement>.width = "<width_value>";
<HTMLTableCellElement>.vAlign = "<valign_value>";
<HTMLTableCellElement>.bgColor = "<bgcolor_value>";
<HTMLTableCellElement>.abbr = "<abbr_value>";
<HTMLTableCellElement>.scope = "<scope_value>";

#HTMLFontElement
<HTMLFontElement>.color = "<color_value>";
<HTMLFontElement>.face = "<face_value>";
<HTMLFontElement>.size = "<size_value>";

#HTMLOptionElement
<HTMLOptionElement>.label = "<label_value>";
<HTMLOptionElement>.value = "<value_value>";
<HTMLOptionElement>.text = "<text_value>";

#HTMLMenuElement
<HTMLMenuElement>.type = "<type_value>";
<HTMLMenuElement>.label = "<label_value>";

#HTMLShadowElement

#HTMLMeterElement

#HTMLEmbedElement
<HTMLEmbedElement>.src = "<src_value>";
<HTMLEmbedElement>.type = "<type_value>";
<HTMLEmbedElement>.width = "<width_value>";
<HTMLEmbedElement>.height = "<height_value>";
<HTMLEmbedElement>.align = "<align_value>";
<HTMLEmbedElement>.name = "<name_value>";

#HTMLFormControlsCollection

#HTMLTitleElement
<HTMLTitleElement>.text = "<text_value>";

#HTMLInputElement
<HTMLInputElement>.accept = "<accept_value>";
<HTMLInputElement>.alt = "<alt_value>";
<HTMLInputElement>.autocomplete = "<autocomplete_value>";
<HTMLInputElement>.dirName = "<dirname_value>";
<HTMLInputElement>.formAction = "<formaction_value>";
<HTMLInputElement>.formEnctype = "<formenctype_value>";
<HTMLInputElement>.formMethod = "<formmethod_value>";
<HTMLInputElement>.formTarget = "<formtarget_value>";
<HTMLInputElement>.height = <fuzzint>;
<HTMLInputElement>.inputMode = "<inputmode_value>";
<HTMLInputElement>.max = "<max_value>";
<HTMLInputElement>.maxLength = <fuzzint>;
<HTMLInputElement>.min = "<min_value>";
<HTMLInputElement>.minLength = <fuzzint>;
<HTMLInputElement>.name = "<name_value>";
<HTMLInputElement>.pattern = "<pattern_value>";
<HTMLInputElement>.placeholder = "<placeholder_value>";
<HTMLInputElement>.size = <fuzzint>;
<HTMLInputElement>.src = "<src_value>";
<HTMLInputElement>.step = "<step_value>";
<HTMLInputElement>.type = "<type_value>";
<HTMLInputElement>.value = "<value_value>";
<HTMLInputElement>.width = <fuzzint>;
<HTMLInputElement>.stepUp(<fuzzint>);
<HTMLInputElement>.stepDown(<fuzzint>);
<HTMLInputElement>.selectionStart = <fuzzint>;
<HTMLInputElement>.selectionEnd = <fuzzint>;
<HTMLInputElement>.setRangeText(<DOMString>,<fuzzint>,<fuzzint>);
<HTMLInputElement>.setRangeText(<DOMString>,<fuzzint>,<fuzzint>,<SelectionMode>);
<HTMLInputElement>.setSelectionRange(<fuzzint>);
<HTMLInputElement>.setSelectionRange(<fuzzint>,<fuzzint>);
<HTMLInputElement>.setSelectionRange(<fuzzint>,<fuzzint>,<DOMString>);
<HTMLInputElement>.align = "<align_value>";
<HTMLInputElement>.useMap = "<usemap_value>";

#HTMLMenuItemElement
<HTMLMenuItemElement>.type = "<type_value>";
<HTMLMenuItemElement>.label = "<label_value>";
<HTMLMenuItemElement>.icon = "<icon_value>";
<HTMLMenuItemElement>.radiogroup = "<radiogroup_value>";

#HTMLCollection

#HTMLDataElement
<HTMLDataElement>.value = "<value_value>";

#HTMLTimeElement
<HTMLTimeElement>.dateTime = "<datetime_value>";

#HTMLMarqueeElement
<HTMLMarqueeElement>.behavior = "<behavior_value>";
<HTMLMarqueeElement>.bgColor = "<bgcolor_value>";
<HTMLMarqueeElement>.direction = "<direction_value>";
<HTMLMarqueeElement>.height = "<height_value>";
<HTMLMarqueeElement>.hspace = <fuzzint>;
<HTMLMarqueeElement>.loop = <fuzzint>;
<HTMLMarqueeElement>.scrollAmount = <fuzzint>;
<HTMLMarqueeElement>.scrollDelay = <fuzzint>;
<HTMLMarqueeElement>.vspace = <fuzzint>;
<HTMLMarqueeElement>.width = "<width_value>";

#HTMLHtmlElement
<HTMLHtmlElement>.version = "<version_value>";

#HTMLTemplateElement

#HTMLLIElement
<HTMLLIElement>.value = <fuzzint>;
<HTMLLIElement>.type = "<type_value>";

#HTMLImageElement
<HTMLImageElement>.alt = "<alt_value>";
<HTMLImageElement>.src = "<imgsrc>";
<HTMLImageElement>.srcset = "<srcset_value>";
<HTMLImageElement>.sizes = "<sizes_value>";
<HTMLImageElement>.crossOrigin = "<crossorigin_value>";
<HTMLImageElement>.useMap = "<usemap_value>";
<HTMLImageElement>.width = <fuzzint>;
<HTMLImageElement>.height = <fuzzint>;
<HTMLImageElement>.referrerPolicy = "<referrerpolicy_value>";
<HTMLImageElement>.name = "<name_value>";
<HTMLImageElement>.lowsrc = "<lowsrc_value>";
<HTMLImageElement>.align = "<align_value>";
<HTMLImageElement>.hspace = <fuzzint>;
<HTMLImageElement>.vspace = <fuzzint>;
<HTMLImageElement>.longDesc = "<longdesc_value>";
<HTMLImageElement>.border = "<border_value>";

#HTMLOptGroupElement
<HTMLOptGroupElement>.label = "<label_value>";

#HTMLContentElement
<HTMLContentElement>.select = "<select_value>";

#VideoTrackList

#TextTrack

#TextTrackCueList

#TextTrackList

#TextTrackCue

#AudioTrack

#AudioTrackList

#TrackEvent

#VideoTrack

#VTTCue

#VTTRegionList

#VTTRegion
<VTTRegion>.height = <fuzzint>;

#DataTransfer
<DataTransfer>.setDragImage(<Element>,<fuzzint>,<fuzzint>);

#DataTransferItemList

#DataTransferItem
<DataTransferItem>.getAsString(<StringCallback>);

#ResourceProgressEvent

#TextEvent

#ClipboardEvent

#ProgressEvent

#WheelEvent

#HashChangeEvent

#MouseEvent
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<fuzzint>);
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<fuzzint>,<fuzzint>);
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<fuzzint>,<fuzzint>,<fuzzint>);
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<fuzzint>,<fuzzint>,<fuzzint>,<fuzzint>);
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<fuzzint>,<fuzzint>,<fuzzint>,<fuzzint>,<fuzzint>);
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<fuzzint>,<fuzzint>,<fuzzint>,<fuzzint>,<fuzzint>,<boolean>);
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<fuzzint>,<fuzzint>,<fuzzint>,<fuzzint>,<fuzzint>,<boolean>,<boolean>);
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<fuzzint>,<fuzzint>,<fuzzint>,<fuzzint>,<fuzzint>,<boolean>,<boolean>,<boolean>);
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<fuzzint>,<fuzzint>,<fuzzint>,<fuzzint>,<fuzzint>,<boolean>,<boolean>,<boolean>,<boolean>);
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<fuzzint>,<fuzzint>,<fuzzint>,<fuzzint>,<fuzzint>,<boolean>,<boolean>,<boolean>,<boolean>,<fuzzint>);
<MouseEvent>.initMouseEvent(<DOMString>,<boolean>,<boolean>,<Window>,<fuzzint>,<fuzzint>,<fuzzint>,<fuzzint>,<fuzzint>,<boolean>,<boolean>,<boolean>,<boolean>,<fuzzint>,<EventTarget>);

#TransitionEvent

#AnimationPlaybackEvent

#PopStateEvent

#DragEvent

#Event

#UIEvent
<UIEvent>.initUIEvent(<DOMString>,<boolean>,<boolean>,<Window>,<fuzzint>);

#PointerEvent

#PromiseRejectionEvent

#FocusEvent

#CompositionEvent

#InputEvent

#PageTransitionEvent

#SecurityPolicyViolationEvent

#TouchEvent

#Navigator

#MessageEvent

#MutationEvent
<MutationEvent>.initMutationEvent(<DOMString>,<boolean>,<boolean>,<Element>,<DOMString>,<DOMString>,<DOMString>,<fuzzint>);

#AnimationEvent

#RelatedEvent

#ErrorEvent

#EventTarget
<EventTarget>.addEventListener("DOMAttrModified", <EventListener>);
<EventTarget>.addEventListener("DOMAttributeNameChanged", <EventListener>);
<EventTarget>.addEventListener("DOMCharacterDataModified", <EventListener>);
<EventTarget>.addEventListener("DOMElementNameChanged", <EventListener>);
<EventTarget>.addEventListener("DOMNodeInserted", <EventListener>);
<EventTarget>.addEventListener("DOMNodeInsertedIntoDocument", <EventListener>);
<EventTarget>.addEventListener("DOMNodeRemoved", <EventListener>);
<EventTarget>.addEventListener("DOMNodeRemovedFromDocument", <EventListener>);
<EventTarget>.addEventListener("DOMSubtreeModified", <EventListener>);
<EventTarget>.addEventListener("DOMSubtreeModified", <EventListener>);
<EventTarget>.addEventListener("DOMSubtreeModified", <EventListener>);
<EventTarget>.addEventListener(<string_event>,<EventListener>);
<EventTarget>.addEventListener(<string_event>,<EventListener>,<AddEventListenerOptions>);
<EventTarget>.addEventListener(<string_event>,<EventListener>,<boolean>);
<EventTarget>.removeEventListener(<string_event>,<EventListener>);
<EventTarget>.removeEventListener(<string_event>,<EventListener>,<EventListenerOptions>);
<EventTarget>.removeEventListener(<string_event>,<EventListener>,<boolean>);
<new boolean> = <EventTarget>.dispatchEvent(<Event>);

#KeyboardEvent
<KeyboardEvent>.initKeyboardEvent(<DOMString>,<boolean>,<boolean>,<Window>,<DOMString>,<fuzzint>);
<KeyboardEvent>.initKeyboardEvent(<DOMString>,<boolean>,<boolean>,<Window>,<DOMString>,<fuzzint>,<boolean>);
<KeyboardEvent>.initKeyboardEvent(<DOMString>,<boolean>,<boolean>,<Window>,<DOMString>,<fuzzint>,<boolean>,<boolean>);
<KeyboardEvent>.initKeyboardEvent(<DOMString>,<boolean>,<boolean>,<Window>,<DOMString>,<fuzzint>,<boolean>,<boolean>,<boolean>);
<KeyboardEvent>.initKeyboardEvent(<DOMString>,<boolean>,<boolean>,<Window>,<DOMString>,<fuzzint>,<boolean>,<boolean>,<boolean>,<boolean>);

#CustomEvent

#ApplicationCacheErrorEvent

#BeforeUnloadEvent

#InputDeviceCapabilities

#Selection   #Problem
<new Range> = <Selection>.getRangeAt(<fuzzint>);
<Selection>.collapse(<Element>,<fuzzint>);
<Selection>.setPosition(<Element>,<fuzzint>);
<Selection>.extend(<Element>,<fuzzint>);
<Selection>.setBaseAndExtent(<Element>,<fuzzint>,<Element>,<fuzzint>);
<Selection>.modify("<selectionalter>");
<Selection>.modify("<selectionalter>","<selectiondirection>");
<Selection>.modify("<selectionalter>","<selectiondirection>","<selectiongranularity>");

#FontFaceSet

#CSS
<CSS>.registerProperty(<PropertyDescriptor>);

#CSSSupportsRule
<new long> = <CSSSupportsRule>.insertRule(<DOMString>,<fuzzint>);
<CSSSupportsRule>.deleteRule(<fuzzint>);

#CSSKeyframesRule

#FontFace

#CSSViewportRule

#CSSImportRule

#CSSMediaRule

#Document

#StyleMedia

#CSSStyleRule

#CSS

#CSSFontFaceRule

#CSSPageRule

#CSSStyleDeclaration
<new DOMString> = <CSSStyleDeclaration>.getPropertyValue(<string_cssproperty>);
<new DOMString> = <CSSStyleDeclaration>.getPropertyPriority(<string_cssproperty>);

#<CSSStyleDeclaration>.setProperty(<DOMString>,<DOMString>);

#<CSSStyleDeclaration>.setProperty(<DOMString>,<DOMString>,<DOMString>);
<CSSStyleDeclaration>.cssFloat = "<cssproperty_float>";
<CSSStyleDeclaration>[<string_cssproperty>] = <string_cssvalue>;

#CSSKeyframeRule

#StyleSheetList

#CSSRuleList

#MediaQueryListEvent

#CSSNamespaceRule

#StyleSheet

#MediaList

#MediaQueryList
<MediaQueryList>.addListener(<EventListener>);
<MediaQueryList>.removeListener(<EventListener>);

#CSSRule

#CSSStyleSheet
<new long> = <CSSStyleSheet>.insertRule(<DOMString>,<fuzzint>);
<new long> = <CSSStyleSheet>.addRule(<DOMString>,<DOMString>,<fuzzint>);

#CSSGroupingRule
<new long> = <CSSGroupingRule>.insertRule(<DOMString>,<fuzzint>);
<CSSGroupingRule>.deleteRule(<fuzzint>);

#FontFaceSetLoadEvent

#Attr
<Attr>.value = <string_attrvalue>;
<Attr>.nodeValue = <string_attrvalue>;
<Attr>.textContent = <string_attrvalue>;

#ClientRectList

#StaticRange
<StaticRange>.startOffset = <fuzzint>;
<StaticRange>.endOffset = <fuzzint>;
<StaticRange>.setStart(<Element>,<fuzzint>);
<StaticRange>.setEnd(<Element>,<fuzzint>);

#DOMImplementation

#ClientRect

#Comment

#Node
<new Element> = <Element>.getRootNode(<GetRootNodeOptions>);

#XMLDocument

#DOMTokenList

#URLSearchParams
<URLSearchParams>.append(<USVString>,<USVString>);
<URLSearchParams>.delete(<USVString>);
<new USVString> = <URLSearchParams>.get(<USVString>);
<new sequence_USVString_> = <URLSearchParams>.getAll(<USVString>);
<new boolean> = <URLSearchParams>.has(<USVString>);
<URLSearchParams>.set(<USVString>,<USVString>);

#NodeFilter

#ChildNode

#MessagePort
<MessagePort>.postMessage(<any>,<sequence_Transferable_>);

#DocumentOrShadowRoot
<new Element> = <DocumentOrShadowRoot>.elementFromPoint(<fuzzint>,<fuzzint>);
<new sequence_Element_> = <DocumentOrShadowRoot>.elementsFromPoint(<fuzzint>,<fuzzint>);

#DocumentType

#ParentNode
<new Element> = <Element>.querySelector("<selector>");
<new NodeList> = <Element>.querySelectorAll("<selector>");

#Text
<new Text> = <Text>.splitText(<fuzzint>);

#Document
<new HTMLCollection> = <Document>.getElementsByTagName(<string_tag>);
<new HTMLCollection> = <Document>.getElementsByTagNameNS("http://www.w3.org/1999/xhtml",<string_tag>);
<new HTMLCollection> = <Document>.getElementsByClassName("<class>");
<new Element> = <Document>.createElement(<string_tag>);
<new Element> = <Document>.createElementNS("http://www.w3.org/1999/xhtml",<string_tag>);
<new Attr> = <Document>.createAttribute(<string_attr>);
<new Attr> = <Document>.createAttributeNS("http://www.w3.org/1999/xhtml",<string_attr>);
<new NodeIterator> = <Document>.createNodeIterator(<Element>,<fuzzint>);
<new NodeIterator> = <Document>.createNodeIterator(<Element>,<fuzzint>,<NodeFilter>);
<new TreeWalker> = <Document>.createTreeWalker(<Element>,<fuzzint>);
<new TreeWalker> = <Document>.createTreeWalker(<Element>,<fuzzint>,<NodeFilter>);

#<new Location> = <Document>.location;

#<Document>.body = <Element>;

#<Document>.open();

#<Document>.close();

#<Document>.write(<DOMString>);

#<Document>.writeln(<DOMString>);
<new boolean> = <Document>.execCommand("backColor", false, "<color>");
<new boolean> = <Document>.execCommand("bold", false);
<new boolean> = <Document>.execCommand("contentReadOnly", false, <boolean>);

#<new boolean> = <Document>.execCommand("copy", false);
<new boolean> = <Document>.execCommand("createLink", false, "<hash>foo");

#<new boolean> = <Document>.execCommand("cut", false);
<new boolean> = <Document>.execCommand("decreaseFontSize", false);
<new boolean> = <Document>.execCommand("delete", false);
<new boolean> = <Document>.execCommand("enableInlineTableEditing", false);
<new boolean> = <Document>.execCommand("enableObjectResizing", false);
<new boolean> = <Document>.execCommand("fontName", false, "<face_value>");
<new boolean> = <Document>.execCommand("fontSize", false, <int min=1 max=7>);
<new boolean> = <Document>.execCommand("foreColor", false, "<color>");
<new boolean> = <Document>.execCommand("formatBlock", false);
<new boolean> = <Document>.execCommand("forwardDelete", false);
<new boolean> = <Document>.execCommand("heading", false, "H<int min=1 max=6>");
<new boolean> = <Document>.execCommand("hiliteColor", false, "<color>");
<new boolean> = <Document>.execCommand("increaseFontSize", false);
<new boolean> = <Document>.execCommand("indent", false);
<new boolean> = <Document>.execCommand("insertBrOnReturn", false);
<new boolean> = <Document>.execCommand("insertHorizontalRule", false);
<new boolean> = <Document>.execCommand("insertHTML", false, <htmlstring>);
<new boolean> = <Document>.execCommand("insertImage", false, "<hash>foo");
<new boolean> = <Document>.execCommand("insertOrderedList", false);
<new boolean> = <Document>.execCommand("insertUnorderedList", false);

#<new boolean> = <Document>.execCommand("insertParagraph", false);
<new boolean> = <Document>.execCommand("insertText", false, <DOMString>);
<new boolean> = <Document>.execCommand("italic", false);
<new boolean> = <Document>.execCommand("justifyCenter", false);
<new boolean> = <Document>.execCommand("justifyFull", false);
<new boolean> = <Document>.execCommand("justifyLeft", false);
<new boolean> = <Document>.execCommand("justifyRight", false);
<new boolean> = <Document>.execCommand("outdent", false);

#<new boolean> = <Document>.execCommand("paste", false);
<new boolean> = <Document>.execCommand("redo", false);
<new boolean> = <Document>.execCommand("removeFormat", false);
<new boolean> = <Document>.execCommand("selectAll", false);
<new boolean> = <Document>.execCommand("selectAll", false);
<new boolean> = <Document>.execCommand("selectAll", false);
<new boolean> = <Document>.execCommand("selectAll", false);
<new boolean> = <Document>.execCommand("selectAll", false);
<new boolean> = <Document>.execCommand("strikeThrough", false);
<new boolean> = <Document>.execCommand("subscript", false);
<new boolean> = <Document>.execCommand("superscript", false);
<new boolean> = <Document>.execCommand("underline", false);
<new boolean> = <Document>.execCommand("undo", false);
<new boolean> = <Document>.execCommand("unlink", false);
<new boolean> = <Document>.execCommand("useCSS", false, <boolean>);
<new boolean> = <Document>.execCommand("styleWithCSS", false, <boolean>);
<new Touch> = <Document>.createTouch(<Window>,<EventTarget>,<fuzzint>);
<new Touch> = <Document>.createTouch(<Window>,<EventTarget>,<fuzzint>,<double>);
<new Touch> = <Document>.createTouch(<Window>,<EventTarget>,<fuzzint>,<double>,<double>);
<new Touch> = <Document>.createTouch(<Window>,<EventTarget>,<fuzzint>,<double>,<double>,<double>);
<new Touch> = <Document>.createTouch(<Window>,<EventTarget>,<fuzzint>,<double>,<double>,<double>,<double>);
<new Touch> = <Document>.createTouch(<Window>,<EventTarget>,<fuzzint>,<double>,<double>,<double>,<double>,<double>);
<new Touch> = <Document>.createTouch(<Window>,<EventTarget>,<fuzzint>,<double>,<double>,<double>,<double>,<double>,<double>);
<new Touch> = <Document>.createTouch(<Window>,<EventTarget>,<fuzzint>,<double>,<double>,<double>,<double>,<double>,<double>,<float>);
<new Touch> = <Document>.createTouch(<Window>,<EventTarget>,<fuzzint>,<double>,<double>,<double>,<double>,<double>,<double>,<float>,<float>);
<new CustomElementConstructor> = <Document>.registerElement(<DOMString>,<ElementRegistrationOptions>);
<new Element> = <Document>.createElement(<string_tag>,<DOMString>);
<new Element> = <Document>.createElementNS("http://www.w3.org/1999/xhtml",<string_tag>,<DOMString>);

#HTMLDocument
<Document>.bgColor = "<bgcolor_value>";

#NonElementParentNode
<new Element> = <Document>.getElementById("<elementid>");

#NamedNodeMap

#CDATASection

#GlobalEventHandlers

#NodeList

#MutationObserver
<MutationObserver>.observe(<Element>,<MutationObserverInit>);

#TouchList

#DOMStringMap

#MutationRecord

#CharacterData
<new DOMString> = <CharacterData>.substringData(<fuzzint>,<fuzzint>);
<CharacterData>.insertData(<fuzzint>,<DOMString>);
<CharacterData>.deleteData(<fuzzint>,<fuzzint>);
<CharacterData>.replaceData(<fuzzint>,<fuzzint>,<DOMString>);

#Range
<Range>.setStart(<Element>,<fuzzint>);
<Range>.setEnd(<Element>,<fuzzint>);
<new short> = <Range>.compareBoundaryPoints(<fuzzint>,<Range>);
<new boolean> = <Range>.isPointInRange(<Element>,<fuzzint>);
<new short> = <Range>.comparePoint(<Element>,<fuzzint>);

#Element

#URL
<URL>.href = <USVString>;
<URL>.protocol = <USVString>;
<URL>.username = <USVString>;
<URL>.password = <USVString>;
<URL>.host = <USVString>;
<URL>.hostname = <USVString>;
<URL>.port = <USVString>;
<URL>.pathname = <USVString>;
<URL>.search = <USVString>;
<URL>.hash = <USVString>;

#ProcessingInstruction

#DOMStringList

#Touch

#Document

#DocumentFragment

#NonDocumentTypeChildNode

#DOMRect

#DOMRectReadOnly

#Element
<Element>.setPointerCapture(<fuzzint>);
<Element>.releasePointerCapture(<fuzzint>);
<new boolean> = <Element>.hasPointerCapture(<fuzzint>);
<new DOMString> = <Element>.getAttribute(<string_attr>);
<new DOMString> = <Element>.getAttributeNS("http://www.w3.org/1999/xhtml",<string_attr>);

#<Element>.setAttribute(<DOMString>,<DOMString>);

#<Element>.setAttributeNS(<DOMString>,<DOMString>,<DOMString>);
<new boolean> = <Element>.hasAttribute(<string_attr>);
<new boolean> = <Element>.hasAttributeNS("http://www.w3.org/1999/xhtml",<string_attr>);
<new Attr> = <Element>.getAttributeNode(<string_attr>);
<new Attr> = <Element>.getAttributeNodeNS("http://www.w3.org/1999/xhtml",<string_attr>);
<new HTMLCollection> = <Element>.getElementsByTagName(<string_tag>);
<new HTMLCollection> = <Element>.getElementsByTagNameNS("http://www.w3.org/1999/xhtml",<string_tag>);
<new HTMLCollection> = <Element>.getElementsByClassName("<class>");
<new Element> = <Element>.insertAdjacentElement(<string_where>,<Element>);
<Element>.insertAdjacentText(<string_where>,<DOMString>);
<Element>.innerHTML = <htmlstring>;
<Element>.outerHTML = <htmlstring>;
<Element>.insertAdjacentHTML(<string_where>,<htmlstring>);
<new ShadowRoot> = <Element>.attachShadow(<ShadowRootInit>);
<Element>.scroll(<ScrollToOptions>);
<Element>.scrollTo(<ScrollToOptions>);
<Element>.scrollBy(<ScrollToOptions>);
<Element>.setApplyScroll(<ScrollStateCallback>,<NativeScrollBehavior>);
<Element>.setDistributeScroll(<ScrollStateCallback>,<NativeScrollBehavior>);

#NodeIterator

#TreeWalker

#MessageChannel

#CustomElementRegistry
<CustomElementRegistry>.define(<DOMString>,<Function>,<ElementRegistrationOptions>);

#ShadowRoot
<ShadowRoot>.innerHTML = <htmlstring>;

#NavigatorLanguage

#BarProp

#NavigatorStorageUtils

#Screen

#WindowBase64

#WindowEventHandlers

#NavigatorCPU

#NavigatorID

#Window

#<new Location> = <Window>.location;

#<Window>.close();

#<new Window> = <Window>.open(<DOMString>,<DOMString>);

#<new Window> = <Window>.open(<DOMString>,<DOMString>,<DOMString>);

#<Window>.alert();

#<Window>.alert(<DOMString>);

#<new boolean> = <Window>.confirm();

#<new boolean> = <Window>.confirm(<DOMString>);

#<new DOMString> = <Window>.prompt();

#<new DOMString> = <Window>.prompt(<DOMString>);

#<new DOMString> = <Window>.prompt(<DOMString>,<DOMString>);

#<Window>.print();
<new long> = <Window>.requestAnimationFrame(<FrameRequestCallback>);
<Window>.cancelAnimationFrame(<fuzzint>);
<new long> = <Window>.requestIdleCallback(<IdleRequestCallback>);
<new long> = <Window>.requestIdleCallback(<IdleRequestCallback>,<IdleRequestOptions>);
<Window>.cancelIdleCallback(<fuzzint>);
<Window>.postMessage(<any>,<DOMString>,<sequence_Transferable_>);
<Window>.moveTo(<fuzzint>,<fuzzint>);
<Window>.moveBy(<fuzzint>,<fuzzint>);
<Window>.resizeTo(<fuzzint>,<fuzzint>);
<Window>.resizeBy(<fuzzint>,<fuzzint>);
<Window>.scroll(<ScrollToOptions>);
<Window>.scrollTo(<ScrollToOptions>);
<Window>.scrollBy(<ScrollToOptions>);
<Window>.event = <Event>;
<new long> = <Window>.webkitRequestAnimationFrame(<FrameRequestCallback>);
<Window>.webkitCancelAnimationFrame(<fuzzint>);
<Window>.webkitCancelRequestAnimationFrame(<fuzzint>);

#History

#<History>.go();

#<History>.go(<fuzzint>);

#<History>.back();

#<History>.forward();

#VisualViewport

#Location

#<Location>.assign(<DOMString>);

#<Location>.replace(<DOMString>);

#<Location>.reload();

#<new DOMStringList> = <Location>.ancestorOrigins;

#<new DOMString> = <Location>.href;

#<Location>.href = <DOMString>;

#<new DOMString> = <Location>.toString();

#<new DOMString> = <Location>.origin;

#<new DOMString> = <Location>.protocol;

#<Location>.protocol = <DOMString>;

#<new DOMString> = <Location>.host;

#<Location>.host = <DOMString>;

#<new DOMString> = <Location>.hostname;

#<Location>.hostname = <DOMString>;

#<new DOMString> = <Location>.port;

#<Location>.port = <DOMString>;

#<new DOMString> = <Location>.pathname;

#<Location>.pathname = <DOMString>;

#<new DOMString> = <Location>.search;

#<Location>.search = <DOMString>;

#<new DOMString> = <Location>.hash;

#<Location>.hash = <DOMString>;

#<new any> = <Location>.valueOf();

#Navigator
<Navigator>.sendBeacon(<url_string>, <DOMString>)

#External

#NavigatorOnLine

#Attribute setters with correct arguments
<Element>.setAttribute("abbr", "<abbr_value>");
<Element>.setAttribute("accept", "<accept_value>");
<Element>.setAttribute("accept-charset", "<accept-charset_value>");
<Element>.setAttribute("accepts-touch", "<accepts-touch_value>");
<Element>.setAttribute("accesskey", "<accesskey_value>");
<Element>.setAttribute("accumulate", "<accumulate_value>");
<Element>.setAttribute("additive", "<additive_value>");
<Element>.setAttribute("align", "<align_value>");
<Element>.setAttribute("alink", "<alink_value>");
<Element>.setAttribute("allowfullscreen", "<allowfullscreen_value>");
<Element>.setAttribute("alt", "<alt_value>");
<Element>.setAttribute("archive", "<archive_value>");
<Element>.setAttribute("aria-activedescendant", "<aria-activedescendant_value>");
<Element>.setAttribute("aria-autocomplete", "<aria-autocomplete_value>");
<Element>.setAttribute("aria-atomic", "<aria-atomic_value>");
<Element>.setAttribute("aria-busy", "<aria-busy_value>");
<Element>.setAttribute("aria-checked", "<aria-checked_value>");
<Element>.setAttribute("aria-controls", "<aria-controls_value>");
<Element>.setAttribute("aria-describedby", "<aria-describedby_value>");
<Element>.setAttribute("aria-disabled", "<aria-disabled_value>");
<Element>.setAttribute("aria-dropeffect", "<aria-dropeffect_value>");
<Element>.setAttribute("aria-expanded", "<aria-expanded_value>");
<Element>.setAttribute("aria-flowto", "<aria-flowto_value>");
<Element>.setAttribute("aria-grabbed", "<aria-grabbed_value>");
<Element>.setAttribute("aria-haspopup", "<aria-haspopup_value>");
<Element>.setAttribute("aria-help", "<aria-help_value>");
<Element>.setAttribute("aria-hidden", "<aria-hidden_value>");
<Element>.setAttribute("aria-invalid", "<aria-invalid_value>");
<Element>.setAttribute("aria-label", "<aria-label_value>");
<Element>.setAttribute("aria-labeledby", "<aria-labeledby_value>");
<Element>.setAttribute("aria-labelledby", "<aria-labelledby_value>");
<Element>.setAttribute("aria-level", "<aria-level_value>");
<Element>.setAttribute("aria-multiline", "<aria-live_value>");
<Element>.setAttribute("aria-multiline", "<aria-multiline_value>");
<Element>.setAttribute("aria-multiselectable", "<aria-multiselectable_value>");
<Element>.setAttribute("aria-name", "<aria-name_value>");
<Element>.setAttribute("aria-orientation", "<aria-orientation_value>");
<Element>.setAttribute("aria-owns", "<aria-owns_value>");
<Element>.setAttribute("aria-posinset", "<aria-posinset_value>");
<Element>.setAttribute("aria-pressed", "<aria-pressed_value>");
<Element>.setAttribute("aria-readonly", "<aria-readonly_value>");
<Element>.setAttribute("aria-relevant", "<aria-relevant_value>");
<Element>.setAttribute("aria-required", "<aria-required_value>");
<Element>.setAttribute("aria-selected", "<aria-selected_value>");
<Element>.setAttribute("aria-setsize", "<aria-setsize_value>");
<Element>.setAttribute("aria-sort", "<aria-sort_value>");
<Element>.setAttribute("aria-valuemax", "<aria-valuemax_value>");
<Element>.setAttribute("aria-valuemin", "<aria-valuemin_value>");
<Element>.setAttribute("aria-valuenow", "<aria-valuenow_value>");
<Element>.setAttribute("aria-valuetext", "<aria-valuetext_value>");
<Element>.setAttribute("as", "<as_value>");
<Element>.setAttribute("async", "<async_value>");
<Element>.setAttribute("autocomplete", "<autocomplete_value>");
<Element>.setAttribute("autofocus", "<autofocus_value>");
<Element>.setAttribute("autoload", "<autoload_value>");
<Element>.setAttribute("autoplay", "<autoplay_value>");
<Element>.setAttribute("axis", "<axis_value>");
<Element>.setAttribute("azimuth", "<azimuth_value>");
<Element>.setAttribute("background", "<background_value>");
<Element>.setAttribute("background-color", "<background-color_value>");
<Element>.setAttribute("basefrequency", "<basefrequency_value>");
<Element>.setAttribute("baseprofile", "<baseprofile_value>");
<Element>.setAttribute("behavior", "<behavior_value>");
<Element>.setAttribute("bgcolor", "<bgcolor_value>");
<Element>.setAttribute("bgproperties", "<bgproperties_value>");
<Element>.setAttribute("border", "<border_value>");
<Element>.setAttribute("bordercolor", "<bordercolor_value>");
<Element>.setAttribute("buffered-rendering", "<buffered-rendering_value>");
<Element>.setAttribute("can-process-drag", "<can-process-drag_value>");
<Element>.setAttribute("case", "<case_value>");
<Element>.setAttribute("case", "<capture_value>");
<Element>.setAttribute("cellpadding", "<cellpadding_value>");
<Element>.setAttribute("cellspacing", "<cellspacing_value>");
<Element>.setAttribute("challenge", "<challenge_value>");
<Element>.setAttribute("char", "<char_value>");
<Element>.setAttribute("charoff", "<charoff_value>");
<Element>.setAttribute("charset", "<charset_value>");
<Element>.setAttribute("checked", "<checked_value>");
<Element>.setAttribute("cite", "<cite_value>");
<Element>.setAttribute("class", "<class_value>");
<Element>.setAttribute("classid", "<classid_value>");
<Element>.setAttribute("clear", "<clear_value>");
<Element>.setAttribute("code", "<code_value>");
<Element>.setAttribute("codebase", "<codebase_value>");
<Element>.setAttribute("codetype", "<codetype_value>");
<Element>.setAttribute("color", "<color_value>");
<Element>.setAttribute("cols", "<cols_value>");
<Element>.setAttribute("colspan", "<colspan_value>");
<Element>.setAttribute("compact", "<compact_value>");
<Element>.setAttribute("content", "<content_value>");
<Element>.setAttribute("contenteditable", "<contenteditable_value>");
<Element>.setAttribute("contextmenu", "<contextmenu_value>");
<Element>.setAttribute("controls", "<controls_value>");
<Element>.setAttribute("coords", "<coords_value>");
<Element>.setAttribute("crossorigin", "<crossorigin_value>");
<Element>.setAttribute("data", "<data_value>");
<Element>.setAttribute("datetime", "<datetime_value>");
<Element>.setAttribute("declare", "<declare_value>");
<Element>.setAttribute("default", "<default_value>");
<Element>.setAttribute("defer", "<defer_value>");
<Element>.setAttribute("desc", "<desc_value>");
<Element>.setAttribute("description", "<description_value>");
<Element>.setAttribute("dir", "<dir_value>");
<Element>.setAttribute("direction", "<direction_value>");
<Element>.setAttribute("dirname", "<dirname_value>");
<Element>.setAttribute("disabled", "<disabled_value>");
<Element>.setAttribute("display", "<display_value>");
<Element>.setAttribute("disposition", "<disposition_value>");
<Element>.setAttribute("download", "<download_value>");
<Element>.setAttribute("draggable", "<draggable_value>");
<Element>.setAttribute("encoding", "<encoding_value>");
<Element>.setAttribute("enctype", "<enctype_value>");
<Element>.setAttribute("expanded", "<expanded_value>");
<Element>.setAttribute("face", "<face_value>");
<Element>.setAttribute("focus", "<focus_value>");
<Element>.setAttribute("focused", "<focused_value>");
<Element>.setAttribute("for", "<for_value>");
<Element>.setAttribute("form", "<form_value>");
<Element>.setAttribute("formaction", "<formaction_value>");
<Element>.setAttribute("formenctype", "<formenctype_value>");
<Element>.setAttribute("formmethod", "<formmethod_value>");
<Element>.setAttribute("formnovalidate", "<formnovalidate_value>");
<Element>.setAttribute("formtarget", "<formtarget_value>");
<Element>.setAttribute("frame", "<frame_value>");
<Element>.setAttribute("frameborder", "<frameborder_value>");
<Element>.setAttribute("framemargin", "<framemargin_value>");
<Element>.setAttribute("framespacing", "<framespacing_value>");
<Element>.setAttribute("headers", "<headers_value>");
<Element>.setAttribute("height", "<height_value>");
<Element>.setAttribute("hidden", "<hidden_value>");
<Element>.setAttribute("high", "<high_value>");
<Element>.setAttribute("href", "<href_value>");
<Element>.setAttribute("hreflang", "<hreflang_value>");
<Element>.setAttribute("hspace", "<hspace_value>");
<Element>.setAttribute("http-equiv", "<http-equiv_value>");
<Element>.setAttribute("icon", "<icon_value>");
<Element>.setAttribute("incremental", "<incremental_value>");
<Element>.setAttribute("indeterminate", "<indeterminate_value>");
<Element>.setAttribute("inner", "<inner_value>");
<Element>.setAttribute("inputmode", "<inputmode_value>");
<Element>.setAttribute("is", "<is_value>");
<Element>.setAttribute("ismap", "<ismap_value>");
<Element>.setAttribute("item", "<item_value>");
<Element>.setAttribute("itemid", "<itemid_value>");
<Element>.setAttribute("itemprop", "<itemprop_value>");
<Element>.setAttribute("itemref", "<itemref_value>");
<Element>.setAttribute("itemscope", "<itemscope_value>");
<Element>.setAttribute("itemtype", "<itemtype_value>");
<Element>.setAttribute("keytype", "<keytype_value>");
<Element>.setAttribute("kind", "<kind_value>");
<Element>.setAttribute("label", "<label_value>");
<Element>.setAttribute("lang", "<lang_value>");
<Element>.setAttribute("language", "<language_value>");
<Element>.setAttribute("layout", "<layout_value>");
<Element>.setAttribute("left", "<left_value>");
<Element>.setAttribute("leftmargin", "<leftmargin_value>");
<Element>.setAttribute("link", "<link_value>");
<Element>.setAttribute("list", "<list_value>");
<Element>.setAttribute("longdesc", "<longdesc_value>");
<Element>.setAttribute("loop", "<loop_value>");
<Element>.setAttribute("loopend", "<loopend_value>");
<Element>.setAttribute("loopstart", "<loopstart_value>");
<Element>.setAttribute("low", "<low_value>");
<Element>.setAttribute("lowsrc", "<lowsrc_value>");
<Element>.setAttribute("manifest", "<manifest_value>");
<Element>.setAttribute("margin", "<margin_value>");
<Element>.setAttribute("marginheight", "<marginheight_value>");
<Element>.setAttribute("marginwidth", "<marginwidth_value>");
<Element>.setAttribute("max", "<max_value>");
<Element>.setAttribute("maxlength", "<maxlength_value>");
<Element>.setAttribute("mayscript", "<mayscript_value>");
<Element>.setAttribute("media", "<media_value>");
<Element>.setAttribute("menu", "<menu_value>");
<Element>.setAttribute("method", "<method_value>");
<Element>.setAttribute("min", "<min_value>");
<Element>.setAttribute("minlength", "<minlength_value>");
<Element>.setAttribute("mode", "<mode_value>");
<Element>.setAttribute("multiple", "<multiple_value>");
<Element>.setAttribute("muted", "<muted_value>");
<Element>.setAttribute("name", "<name_value>");
<Element>.setAttribute("nohref", "<nohref_value>");
<Element>.setAttribute("nonce", "<nonce_value>");
<Element>.setAttribute("noresize", "<noresize_value>");
<Element>.setAttribute("noshade", "<noshade_value>");
<Element>.setAttribute("novalidate", "<novalidate_value>");
<Element>.setAttribute("nowrap", "<nowrap_value>");
<Element>.setAttribute("open", "<open_value>");
<Element>.setAttribute("optimum", "<optimum_value>");
<Element>.setAttribute("pattern", "<pattern_value>");
<Element>.setAttribute("ping", "<ping_value>");
<Element>.setAttribute("placeholder", "<placeholder_value>");
<Element>.setAttribute("playcount", "<playcount_value>");
<Element>.setAttribute("pluginspage", "<pluginspage_value>");
<Element>.setAttribute("poster", "<poster_value>");
<Element>.setAttribute("preload", "<preload_value>");
<Element>.setAttribute("profile", "<profile_value>");
<Element>.setAttribute("prompt", "<prompt_value>");
<Element>.setAttribute("quality", "<quality_value>");
<Element>.setAttribute("radiogroup", "<radiogroup_value>");
<Element>.setAttribute("readonly", "<readonly_value>");
<Element>.setAttribute("ref", "<ref_value>");
<Element>.setAttribute("referrerpolicy", "<referrerpolicy_value>");
<Element>.setAttribute("rel", "<rel_value>");
<Element>.setAttribute("required", "<required_value>");
<Element>.setAttribute("results", "<results_value>");
<Element>.setAttribute("rev", "<rev_value>");
<Element>.setAttribute("reversed", "<reversed_value>");
<Element>.setAttribute("right", "<right_value>");
<Element>.setAttribute("rightmargin", "<rightmargin_value>");
<Element>.setAttribute("role", "<role_value>");
<Element>.setAttribute("row", "<row_value>");
<Element>.setAttribute("rows", "<rows_value>");
<Element>.setAttribute("rowspan", "<rowspan_value>");
<Element>.setAttribute("rules", "<rules_value>");
<Element>.setAttribute("sandbox", "<sandbox_value>");
<Element>.setAttribute("scheme", "<scheme_value>");
<Element>.setAttribute("scope", "<scope_value>");
<Element>.setAttribute("scoped", "<scoped_value>");
<Element>.setAttribute("scrollamount", "<scrollamount_value>");
<Element>.setAttribute("scrolldelay", "<scrolldelay_value>");
<Element>.setAttribute("scrolling", "<scrolling_value>");
<Element>.setAttribute("seamless", "<seamless_value>");
<Element>.setAttribute("seed", "<seed_value>");
<Element>.setAttribute("select", "<select_value>");
<Element>.setAttribute("selected", "<selected_value>");
<Element>.setAttribute("shape", "<shape_value>");
<Element>.setAttribute("shouldfocus", "<shouldfocus_value>");
<Element>.setAttribute("size", "<size_value>");
<Element>.setAttribute("sizes", "<sizes_value>");
<Element>.setAttribute("slope", "<slope_value>");
<Element>.setAttribute("slot", "<slot_value>");
<Element>.setAttribute("span", "<span_value>");
<Element>.setAttribute("spellcheck", "<spellcheck_value>");
<Element>.setAttribute("src", "<src_value>");
<Element>.setAttribute("srcdoc", "<srcdoc_value>");
<Element>.setAttribute("srcset", "<srcset_value>");
<Element>.setAttribute("srclang", "<srclang_value>");
<Element>.setAttribute("standby", "<standby_value>");
<Element>.setAttribute("start", "<start_value>");
<Element>.setAttribute("startoffset", "<startoffset_value>");
<Element>.setAttribute("startval", "<startval_value>");
<Element>.setAttribute("step", "<step_value>");
<Element>.setAttribute("summary", "<summary_value>");
<Element>.setAttribute("tabindex", "<tabindex_value>");
<Element>.setAttribute("target", "<target_value>");
<Element>.setAttribute("text", "<text_value>");
<Element>.setAttribute("title", "<title_value>");
<Element>.setAttribute("topmargin", "<topmargin_value>");
<Element>.setAttribute("translate", "<translate_value>");
<Element>.setAttribute("truespeed", "<truespeed_value>");
<Element>.setAttribute("type", "<type_value>");
<Element>.setAttribute("usemap", "<usemap_value>");
<Element>.setAttribute("valign", "<valign_value>");
<Element>.setAttribute("value", "<value_value>");
<Element>.setAttribute("valuetype", "<valuetype_value>");
<Element>.setAttribute("version", "<version_value>");
<Element>.setAttribute("vlink", "<vlink_value>");
<Element>.setAttribute("vspace", "<vspace_value>");
<Element>.setAttribute("width", "<width_value>");
<Element>.setAttribute("wrap", "<wrap_value>");
<Element>.setAttribute("onabort", "<eventhandlerstr>");
<Element>.setAttribute("onautocomplete", "<eventhandlerstr>");
<Element>.setAttribute("onautocompleteerror", "<eventhandlerstr>");
<Element>.setAttribute("onafterscriptexecute", "<eventhandlerstr>");
<Element>.setAttribute("onanimationend", "<eventhandlerstr>");
<Element>.setAttribute("onanimationiteration", "<eventhandlerstr>");
<Element>.setAttribute("onanimationstart", "<eventhandlerstr>");
<Element>.setAttribute("onbeforecopy", "<eventhandlerstr>");
<Element>.setAttribute("onbeforecut", "<eventhandlerstr>");
<Element>.setAttribute("onbeforeload", "<eventhandlerstr>");
<Element>.setAttribute("onbeforepaste", "<eventhandlerstr>");
<Element>.setAttribute("onbeforescriptexecute", "<eventhandlerstr>");
<Element>.setAttribute("onbeforeunload", "<eventhandlerstr>");
<Element>.setAttribute("onbegin", "<eventhandlerstr>");
<Element>.setAttribute("onblur", "<eventhandlerstr>");
<Element>.setAttribute("oncanplay", "<eventhandlerstr>");
<Element>.setAttribute("oncanplaythrough", "<eventhandlerstr>");
<Element>.setAttribute("onchange", "<eventhandlerstr>");
<Element>.setAttribute("onclick", "<eventhandlerstr>");
<Element>.setAttribute("oncontextmenu", "<eventhandlerstr>");
<Element>.setAttribute("oncopy", "<eventhandlerstr>");
<Element>.setAttribute("oncut", "<eventhandlerstr>");
<Element>.setAttribute("ondblclick", "<eventhandlerstr>");
<Element>.setAttribute("ondrag", "<eventhandlerstr>");
<Element>.setAttribute("ondragend", "<eventhandlerstr>");
<Element>.setAttribute("ondragenter", "<eventhandlerstr>");
<Element>.setAttribute("ondragleave", "<eventhandlerstr>");
<Element>.setAttribute("ondragover", "<eventhandlerstr>");
<Element>.setAttribute("ondragstart", "<eventhandlerstr>");
<Element>.setAttribute("ondrop", "<eventhandlerstr>");
<Element>.setAttribute("ondurationchange", "<eventhandlerstr>");
<Element>.setAttribute("onend", "<eventhandlerstr>");
<Element>.setAttribute("onemptied", "<eventhandlerstr>");
<Element>.setAttribute("onended", "<eventhandlerstr>");
<Element>.setAttribute("onerror", "<eventhandlerstr>");
<Element>.setAttribute("onfocus", "<eventhandlerstr>");
<Element>.setAttribute("onfocusin", "<eventhandlerstr>");
<Element>.setAttribute("onfocusout", "<eventhandlerstr>");
<Element>.setAttribute("onhashchange", "<eventhandlerstr>");
<Element>.setAttribute("oninput", "<eventhandlerstr>");
<Element>.setAttribute("oninvalid", "<eventhandlerstr>");
<Element>.setAttribute("onkeydown", "<eventhandlerstr>");
<Element>.setAttribute("onkeypress", "<eventhandlerstr>");
<Element>.setAttribute("onkeyup", "<eventhandlerstr>");
<Element>.setAttribute("onload", "<eventhandlerstr>");
<Element>.setAttribute("onloadeddata", "<eventhandlerstr>");
<Element>.setAttribute("onloadedmetadata", "<eventhandlerstr>");
<Element>.setAttribute("onloadstart", "<eventhandlerstr>");
<Element>.setAttribute("onmessage", "<eventhandlerstr>");
<Element>.setAttribute("onmousedown", "<eventhandlerstr>");
<Element>.setAttribute("onmouseenter", "<eventhandlerstr>");
<Element>.setAttribute("onmouseleave", "<eventhandlerstr>");
<Element>.setAttribute("onmousemove", "<eventhandlerstr>");
<Element>.setAttribute("onmouseout", "<eventhandlerstr>");
<Element>.setAttribute("onmouseover", "<eventhandlerstr>");
<Element>.setAttribute("onmouseup", "<eventhandlerstr>");
<Element>.setAttribute("onmousewheel", "<eventhandlerstr>");
<Element>.setAttribute("onoffline", "<eventhandlerstr>");
<Element>.setAttribute("ononline", "<eventhandlerstr>");
<Element>.setAttribute("onorientationchange", "<eventhandlerstr>");
<Element>.setAttribute("onpagehide", "<eventhandlerstr>");
<Element>.setAttribute("onpageshow", "<eventhandlerstr>");
<Element>.setAttribute("onpaste", "<eventhandlerstr>");
<Element>.setAttribute("onpause", "<eventhandlerstr>");
<Element>.setAttribute("onplay", "<eventhandlerstr>");
<Element>.setAttribute("onplaying", "<eventhandlerstr>");
<Element>.setAttribute("onpopstate", "<eventhandlerstr>");
<Element>.setAttribute("onprogress", "<eventhandlerstr>");
<Element>.setAttribute("onratechange", "<eventhandlerstr>");
<Element>.setAttribute("onreset", "<eventhandlerstr>");
<Element>.setAttribute("onresize", "<eventhandlerstr>");
<Element>.setAttribute("onscroll", "<eventhandlerstr>");
<Element>.setAttribute("onsearch", "<eventhandlerstr>");
<Element>.setAttribute("onseeked", "<eventhandlerstr>");
<Element>.setAttribute("onseeking", "<eventhandlerstr>");
<Element>.setAttribute("onselect", "<eventhandlerstr>");
<Element>.setAttribute("onselectionchange", "<eventhandlerstr>");
<Element>.setAttribute("onselectstart", "<eventhandlerstr>");
<Element>.setAttribute("onstalled", "<eventhandlerstr>");
<Element>.setAttribute("onstorage", "<eventhandlerstr>");
<Element>.setAttribute("onsubmit", "<eventhandlerstr>");
<Element>.setAttribute("onsuspend", "<eventhandlerstr>");
<Element>.setAttribute("ontimeupdate", "<eventhandlerstr>");
<Element>.setAttribute("ontoggle", "<eventhandlerstr>");
<Element>.setAttribute("ontouchcancel", "<eventhandlerstr>");
<Element>.setAttribute("ontouchend", "<eventhandlerstr>");
<Element>.setAttribute("ontouchmove", "<eventhandlerstr>");
<Element>.setAttribute("ontouchstart", "<eventhandlerstr>");
<Element>.setAttribute("ontransitionend", "<eventhandlerstr>");
<Element>.setAttribute("onunload", "<eventhandlerstr>");
<Element>.setAttribute("onvolumechange", "<eventhandlerstr>");
<Element>.setAttribute("onwaiting", "<eventhandlerstr>");
<Element>.setAttribute("onwebkitanimationend", "<eventhandlerstr>");
<Element>.setAttribute("onwebkitanimationiteration", "<eventhandlerstr>");
<Element>.setAttribute("onwebkitanimationstart", "<eventhandlerstr>");
<Element>.setAttribute("onwebkitfullscreenchange", "<eventhandlerstr>");
<Element>.setAttribute("onwebkitfullscreenerror", "<eventhandlerstr>");
<Element>.setAttribute("onwebkitkeyadded", "<eventhandlerstr>");
<Element>.setAttribute("onwebkitkeyerror", "<eventhandlerstr>");
<Element>.setAttribute("onwebkitkeymessage", "<eventhandlerstr>");
<Element>.setAttribute("onwebkitneedkey", "<eventhandlerstr>");
<Element>.setAttribute("onwebkitsourceclose", "<eventhandlerstr>");
<Element>.setAttribute("onwebkitsourceended", "<eventhandlerstr>");
<Element>.setAttribute("onwebkitsourceopen", "<eventhandlerstr>");
<Element>.setAttribute("onwebkitspeechchange", "<eventhandlerstr>");
<Element>.setAttribute("onwebkittransitionend", "<eventhandlerstr>");
<Element>.setAttribute("onwheel", "<eventhandlerstr>");
<CSSStyleDeclaration>.setProperty("-ms-flex-align", "<cssproperty_-ms-flex-align>");
<CSSStyleDeclaration>.setProperty("-ms-font-feature-settings", "<cssproperty_-ms-font-feature-settings>");
<CSSStyleDeclaration>.setProperty("-ms-text-combine-horizontal", "<cssproperty_-ms-text-combine-horizontal>");
<CSSStyleDeclaration>.setProperty("-ms-user-select", "<cssproperty_-ms-user-select>");
<CSSStyleDeclaration>.setProperty("-webkit-align-content", "<cssproperty_-webkit-align-content>");
<CSSStyleDeclaration>.setProperty("-webkit-align-items", "<cssproperty_-webkit-align-items>");
<CSSStyleDeclaration>.setProperty("-webkit-align-self", "<cssproperty_-webkit-align-self>");
<CSSStyleDeclaration>.setProperty("-webkit-animation", "<cssproperty_-webkit-animation>");
<CSSStyleDeclaration>.setProperty("-webkit-animation-delay", "<cssproperty_-webkit-animation-delay>");
<CSSStyleDeclaration>.setProperty("-webkit-animation-direction", "<cssproperty_-webkit-animation-direction>");
<CSSStyleDeclaration>.setProperty("-webkit-animation-duration", "<cssproperty_-webkit-animation-duration>");
<CSSStyleDeclaration>.setProperty("-webkit-animation-fill-mode", "<cssproperty_-webkit-animation-fill-mode>");
<CSSStyleDeclaration>.setProperty("-webkit-animation-iteration-count", "<cssproperty_-webkit-animation-iteration-count>");
<CSSStyleDeclaration>.setProperty("-webkit-animation-name", "<cssproperty_-webkit-animation-name>");
<CSSStyleDeclaration>.setProperty("-webkit-animation-play-state", "<cssproperty_-webkit-animation-play-state>");
<CSSStyleDeclaration>.setProperty("-webkit-animation-timing-function", "<cssproperty_-webkit-animation-timing-function>");
<CSSStyleDeclaration>.setProperty("-webkit-app-region", "<cssproperty_-webkit-app-region>");
<CSSStyleDeclaration>.setProperty("-webkit-appearance", "<cssproperty_-webkit-appearance>");
<CSSStyleDeclaration>.setProperty("-webkit-backface-visibility", "<cssproperty_-webkit-backface-visibility>");
<CSSStyleDeclaration>.setProperty("-webkit-background-clip", "<cssproperty_-webkit-background-clip>");
<CSSStyleDeclaration>.setProperty("-webkit-background-origin", "<cssproperty_-webkit-background-origin>");
<CSSStyleDeclaration>.setProperty("-webkit-background-size", "<cssproperty_-webkit-background-size>");
<CSSStyleDeclaration>.setProperty("-webkit-border-after", "<cssproperty_-webkit-border-after>");
<CSSStyleDeclaration>.setProperty("-webkit-border-after-color", "<cssproperty_-webkit-border-after-color>");
<CSSStyleDeclaration>.setProperty("-webkit-border-after-width", "<cssproperty_-webkit-border-after-width>");
<CSSStyleDeclaration>.setProperty("-webkit-border-before", "<cssproperty_-webkit-border-before>");
<CSSStyleDeclaration>.setProperty("-webkit-border-before-color", "<cssproperty_-webkit-border-before-color>");
<CSSStyleDeclaration>.setProperty("-webkit-border-before-style", "<cssproperty_-webkit-border-before-style>");
<CSSStyleDeclaration>.setProperty("-webkit-border-before-width", "<cssproperty_-webkit-border-before-width>");
<CSSStyleDeclaration>.setProperty("-webkit-border-bottom-left-radius", "<cssproperty_-webkit-border-bottom-left-radius>");
<CSSStyleDeclaration>.setProperty("-webkit-border-bottom-right-radius", "<cssproperty_-webkit-border-bottom-right-radius>");
<CSSStyleDeclaration>.setProperty("-webkit-border-end", "<cssproperty_-webkit-border-end>");
<CSSStyleDeclaration>.setProperty("-webkit-border-end-color", "<cssproperty_-webkit-border-end-color>");
<CSSStyleDeclaration>.setProperty("-webkit-border-end-width", "<cssproperty_-webkit-border-end-width>");
<CSSStyleDeclaration>.setProperty("-webkit-border-image", "<cssproperty_-webkit-border-image>");
<CSSStyleDeclaration>.setProperty("-webkit-border-radius", "<cssproperty_-webkit-border-radius>");
<CSSStyleDeclaration>.setProperty("-webkit-border-start", "<cssproperty_-webkit-border-start>");
<CSSStyleDeclaration>.setProperty("-webkit-border-start-color", "<cssproperty_-webkit-border-start-color>");
<CSSStyleDeclaration>.setProperty("-webkit-border-start-width", "<cssproperty_-webkit-border-start-width>");
<CSSStyleDeclaration>.setProperty("-webkit-border-top-left-radius", "<cssproperty_-webkit-border-top-left-radius>");
<CSSStyleDeclaration>.setProperty("-webkit-border-top-right-radius", "<cssproperty_-webkit-border-top-right-radius>");
<CSSStyleDeclaration>.setProperty("-webkit-border-vertical-spacing", "<cssproperty_-webkit-border-vertical-spacing>");
<CSSStyleDeclaration>.setProperty("-webkit-box-align", "<cssproperty_-webkit-box-align>");
<CSSStyleDeclaration>.setProperty("-webkit-box-decoration-break", "<cssproperty_-webkit-box-decoration-break>");
<CSSStyleDeclaration>.setProperty("-webkit-box-direction", "<cssproperty_-webkit-box-direction>");
<CSSStyleDeclaration>.setProperty("-webkit-box-flex", "<cssproperty_-webkit-box-flex>");
<CSSStyleDeclaration>.setProperty("-webkit-box-flex-group", "<cssproperty_-webkit-box-flex-group>");
<CSSStyleDeclaration>.setProperty("-webkit-box-lines", "<cssproperty_-webkit-box-lines>");
<CSSStyleDeclaration>.setProperty("-webkit-box-ordinal-group", "<cssproperty_-webkit-box-ordinal-group>");
<CSSStyleDeclaration>.setProperty("-webkit-box-orient", "<cssproperty_-webkit-box-orient>");
<CSSStyleDeclaration>.setProperty("-webkit-box-pack", "<cssproperty_-webkit-box-pack>");
<CSSStyleDeclaration>.setProperty("-webkit-box-reflect", "<cssproperty_-webkit-box-reflect>");
<CSSStyleDeclaration>.setProperty("-webkit-box-shadow", "<cssproperty_-webkit-box-shadow>");
<CSSStyleDeclaration>.setProperty("-webkit-box-sizing", "<cssproperty_-webkit-box-sizing>");
<CSSStyleDeclaration>.setProperty("-webkit-clip-path", "<cssproperty_-webkit-clip-path>");
<CSSStyleDeclaration>.setProperty("-webkit-color-correction", "<cssproperty_-webkit-color-correction>");
<CSSStyleDeclaration>.setProperty("-webkit-column-break-after", "<cssproperty_-webkit-column-break-after>");
<CSSStyleDeclaration>.setProperty("-webkit-column-break-before", "<cssproperty_-webkit-column-break-before>");
<CSSStyleDeclaration>.setProperty("-webkit-column-break-inside", "<cssproperty_-webkit-column-break-inside>");
<CSSStyleDeclaration>.setProperty("-webkit-column-count", "<cssproperty_-webkit-column-count>");
<CSSStyleDeclaration>.setProperty("-webkit-column-fill", "<cssproperty_-webkit-column-fill>");
<CSSStyleDeclaration>.setProperty("-webkit-column-gap", "<cssproperty_-webkit-column-gap>");
<CSSStyleDeclaration>.setProperty("-webkit-column-rule", "<cssproperty_-webkit-column-rule>");
<CSSStyleDeclaration>.setProperty("-webkit-column-rule-color", "<cssproperty_-webkit-column-rule-color>");
<CSSStyleDeclaration>.setProperty("-webkit-column-rule-style", "<cssproperty_-webkit-column-rule-style>");
<CSSStyleDeclaration>.setProperty("-webkit-column-rule-width", "<cssproperty_-webkit-column-rule-width>");
<CSSStyleDeclaration>.setProperty("-webkit-column-span", "<cssproperty_-webkit-column-span>");
<CSSStyleDeclaration>.setProperty("-webkit-column-width", "<cssproperty_-webkit-column-width>");
<CSSStyleDeclaration>.setProperty("-webkit-columns", "<cssproperty_-webkit-columns>");
<CSSStyleDeclaration>.setProperty("-webkit-direction", "<cssproperty_-webkit-direction>");
<CSSStyleDeclaration>.setProperty("-webkit-filter", "<cssproperty_-webkit-filter>");
<CSSStyleDeclaration>.setProperty("-webkit-flex", "<cssproperty_-webkit-flex>");
<CSSStyleDeclaration>.setProperty("-webkit-flex-direction", "<cssproperty_-webkit-flex-direction>");
<CSSStyleDeclaration>.setProperty("-webkit-flex-wrap", "<cssproperty_-webkit-flex-wrap>");
<CSSStyleDeclaration>.setProperty("-webkit-flow-from", "<cssproperty_-webkit-flow-from>");
<CSSStyleDeclaration>.setProperty("-webkit-flow-into", "<cssproperty_-webkit-flow-into>");
<CSSStyleDeclaration>.setProperty("-webkit-font-feature-settings", "<cssproperty_-webkit-font-feature-settings>");
<CSSStyleDeclaration>.setProperty("-webkit-font-smoothing", "<cssproperty_-webkit-font-smoothing>");
<CSSStyleDeclaration>.setProperty("-webkit-highlight", "<cssproperty_-webkit-highlight>");
<CSSStyleDeclaration>.setProperty("-webkit-hyphenate-character", "<cssproperty_-webkit-hyphenate-character>");
<CSSStyleDeclaration>.setProperty("-webkit-hyphens", "<cssproperty_-webkit-hyphens>");
<CSSStyleDeclaration>.setProperty("-webkit-justify-content", "<cssproperty_-webkit-justify-content>");
<CSSStyleDeclaration>.setProperty("-webkit-line-break", "<cssproperty_-webkit-line-break>");
<CSSStyleDeclaration>.setProperty("-webkit-line-clamp", "<cssproperty_-webkit-line-clamp>");
<CSSStyleDeclaration>.setProperty("-webkit-locale", "<cssproperty_-webkit-locale>");
<CSSStyleDeclaration>.setProperty("-webkit-logical-height", "<cssproperty_-webkit-logical-height>");
<CSSStyleDeclaration>.setProperty("-webkit-logical-width", "<cssproperty_-webkit-logical-width>");
<CSSStyleDeclaration>.setProperty("-webkit-margin-after", "<cssproperty_-webkit-margin-after>");
<CSSStyleDeclaration>.setProperty("-webkit-margin-after-collapse", "<cssproperty_-webkit-margin-after-collapse>");
<CSSStyleDeclaration>.setProperty("-webkit-margin-before", "<cssproperty_-webkit-margin-before>");
<CSSStyleDeclaration>.setProperty("-webkit-margin-before-collapse", "<cssproperty_-webkit-margin-before-collapse>");
<CSSStyleDeclaration>.setProperty("-webkit-margin-bottom-collapse", "<cssproperty_-webkit-margin-bottom-collapse>");
<CSSStyleDeclaration>.setProperty("-webkit-margin-collapse", "<cssproperty_-webkit-margin-collapse>");
<CSSStyleDeclaration>.setProperty("-webkit-margin-end", "<cssproperty_-webkit-margin-end>");
<CSSStyleDeclaration>.setProperty("-webkit-margin-start", "<cssproperty_-webkit-margin-start>");
<CSSStyleDeclaration>.setProperty("-webkit-margin-top-collapse", "<cssproperty_-webkit-margin-top-collapse>");
<CSSStyleDeclaration>.setProperty("-webkit-marquee-speed", "<cssproperty_-webkit-marquee-speed>");
<CSSStyleDeclaration>.setProperty("-webkit-mask", "<cssproperty_-webkit-mask>");
<CSSStyleDeclaration>.setProperty("-webkit-mask-box-image", "<cssproperty_-webkit-mask-box-image>");
<CSSStyleDeclaration>.setProperty("-webkit-mask-box-image-outset", "<cssproperty_-webkit-mask-box-image-outset>");
<CSSStyleDeclaration>.setProperty("-webkit-mask-box-image-repeat", "<cssproperty_-webkit-mask-box-image-repeat>");
<CSSStyleDeclaration>.setProperty("-webkit-mask-box-image-slice", "<cssproperty_-webkit-mask-box-image-slice>");
<CSSStyleDeclaration>.setProperty("-webkit-mask-box-image-source", "<cssproperty_-webkit-mask-box-image-source>");
<CSSStyleDeclaration>.setProperty("-webkit-mask-box-image-width", "<cssproperty_-webkit-mask-box-image-width>");
<CSSStyleDeclaration>.setProperty("-webkit-mask-clip", "<cssproperty_-webkit-mask-clip>");
<CSSStyleDeclaration>.setProperty("-webkit-mask-composite", "<cssproperty_-webkit-mask-composite>");
<CSSStyleDeclaration>.setProperty("-webkit-mask-image", "<cssproperty_-webkit-mask-image>");
<CSSStyleDeclaration>.setProperty("-webkit-mask-origin", "<cssproperty_-webkit-mask-origin>");
<CSSStyleDeclaration>.setProperty("-webkit-mask-position", "<cssproperty_-webkit-mask-position>");
<CSSStyleDeclaration>.setProperty("-webkit-mask-repeat", "<cssproperty_-webkit-mask-repeat>");
<CSSStyleDeclaration>.setProperty("-webkit-mask-repeat-y", "<cssproperty_-webkit-mask-repeat-y>");
<CSSStyleDeclaration>.setProperty("-webkit-mask-size", "<cssproperty_-webkit-mask-size>");
<CSSStyleDeclaration>.setProperty("-webkit-min-logical-height", "<cssproperty_-webkit-min-logical-height>");
<CSSStyleDeclaration>.setProperty("-webkit-nbsp-mode", "<cssproperty_-webkit-nbsp-mode>");
<CSSStyleDeclaration>.setProperty("-webkit-opacity", "<cssproperty_-webkit-opacity>");
<CSSStyleDeclaration>.setProperty("-webkit-overflow-scrolling", "<cssproperty_-webkit-overflow-scrolling>");
<CSSStyleDeclaration>.setProperty("-webkit-padding-after", "<cssproperty_-webkit-padding-after>");
<CSSStyleDeclaration>.setProperty("-webkit-padding-before", "<cssproperty_-webkit-padding-before>");
<CSSStyleDeclaration>.setProperty("-webkit-padding-end", "<cssproperty_-webkit-padding-end>");
<CSSStyleDeclaration>.setProperty("-webkit-padding-start", "<cssproperty_-webkit-padding-start>");
<CSSStyleDeclaration>.setProperty("-webkit-perspective", "<cssproperty_-webkit-perspective>");
<CSSStyleDeclaration>.setProperty("-webkit-perspective-origin", "<cssproperty_-webkit-perspective-origin>");
<CSSStyleDeclaration>.setProperty("-webkit-perspective-origin-x", "<cssproperty_-webkit-perspective-origin-x>");
<CSSStyleDeclaration>.setProperty("-webkit-perspective-origin-y", "<cssproperty_-webkit-perspective-origin-y>");
<CSSStyleDeclaration>.setProperty("-webkit-print-color-adjust", "<cssproperty_-webkit-print-color-adjust>");
<CSSStyleDeclaration>.setProperty("-webkit-rtl-ordering", "<cssproperty_-webkit-rtl-ordering>");
<CSSStyleDeclaration>.setProperty("-webkit-ruby-position", "<cssproperty_-webkit-ruby-position>");
<CSSStyleDeclaration>.setProperty("-webkit-shape-margin", "<cssproperty_-webkit-shape-margin>");
<CSSStyleDeclaration>.setProperty("-webkit-shape-outside", "<cssproperty_-webkit-shape-outside>");
<CSSStyleDeclaration>.setProperty("-webkit-tap-highlight-color", "<cssproperty_-webkit-tap-highlight-color>");
<CSSStyleDeclaration>.setProperty("-webkit-text-combine", "<cssproperty_-webkit-text-combine>");
<CSSStyleDeclaration>.setProperty("-webkit-text-decorations-in-effect", "<cssproperty_-webkit-text-decorations-in-effect>");
<CSSStyleDeclaration>.setProperty("-webkit-text-emphasis", "<cssproperty_-webkit-text-emphasis>");
<CSSStyleDeclaration>.setProperty("-webkit-text-emphasis-color", "<cssproperty_-webkit-text-emphasis-color>");
<CSSStyleDeclaration>.setProperty("-webkit-text-emphasis-position", "<cssproperty_-webkit-text-emphasis-position>");
<CSSStyleDeclaration>.setProperty("-webkit-text-emphasis-style", "<cssproperty_-webkit-text-emphasis-style>");
<CSSStyleDeclaration>.setProperty("-webkit-text-fill-color", "<cssproperty_-webkit-text-fill-color>");
<CSSStyleDeclaration>.setProperty("-webkit-text-orientation", "<cssproperty_-webkit-text-orientation>");
<CSSStyleDeclaration>.setProperty("-webkit-text-security", "<cssproperty_-webkit-text-security>");
<CSSStyleDeclaration>.setProperty("-webkit-text-stroke", "<cssproperty_-webkit-text-stroke>");
<CSSStyleDeclaration>.setProperty("-webkit-text-stroke-color", "<cssproperty_-webkit-text-stroke-color>");
<CSSStyleDeclaration>.setProperty("-webkit-text-stroke-width", "<cssproperty_-webkit-text-stroke-width>");
<CSSStyleDeclaration>.setProperty("-webkit-transform", "<cssproperty_-webkit-transform>");
<CSSStyleDeclaration>.setProperty("-webkit-transform-origin", "<cssproperty_-webkit-transform-origin>");
<CSSStyleDeclaration>.setProperty("-webkit-transform-style", "<cssproperty_-webkit-transform-style>");
<CSSStyleDeclaration>.setProperty("-webkit-transition", "<cssproperty_-webkit-transition>");
<CSSStyleDeclaration>.setProperty("-webkit-transition-delay", "<cssproperty_-webkit-transition-delay>");
<CSSStyleDeclaration>.setProperty("-webkit-transition-duration", "<cssproperty_-webkit-transition-duration>");
<CSSStyleDeclaration>.setProperty("-webkit-transition-property", "<cssproperty_-webkit-transition-property>");
<CSSStyleDeclaration>.setProperty("-webkit-transition-timing-function", "<cssproperty_-webkit-transition-timing-function>");
<CSSStyleDeclaration>.setProperty("-webkit-user-drag", "<cssproperty_-webkit-user-drag>");
<CSSStyleDeclaration>.setProperty("-webkit-user-modify", "<cssproperty_-webkit-user-modify>");
<CSSStyleDeclaration>.setProperty("-webkit-user-select", "<cssproperty_-webkit-user-select>");
<CSSStyleDeclaration>.setProperty("-webkit-wrap-flow", "<cssproperty_-webkit-wrap-flow>");
<CSSStyleDeclaration>.setProperty("-webkit-writing-mode", "<cssproperty_-webkit-writing-mode>");
<CSSStyleDeclaration>.setProperty("align-content", "<cssproperty_align-content>");
<CSSStyleDeclaration>.setProperty("align-items", "<cssproperty_align-items>");
<CSSStyleDeclaration>.setProperty("align-self", "<cssproperty_align-self>");
<CSSStyleDeclaration>.setProperty("alignx", "<cssproperty_alignx>");
<CSSStyleDeclaration>.setProperty("animation", "<cssproperty_animation>");
<CSSStyleDeclaration>.setProperty("animation-delay", "<cssproperty_animation-delay>");
<CSSStyleDeclaration>.setProperty("animation-direction", "<cssproperty_animation-direction>");
<CSSStyleDeclaration>.setProperty("animation-duration", "<cssproperty_animation-duration>");
<CSSStyleDeclaration>.setProperty("animation-fill-mode", "<cssproperty_animation-fill-mode>");
<CSSStyleDeclaration>.setProperty("animation-iteration-count", "<cssproperty_animation-iteration-count>");
<CSSStyleDeclaration>.setProperty("animation-name", "<cssproperty_animation-name>");
<CSSStyleDeclaration>.setProperty("animation-play-state", "<cssproperty_animation-play-state>");
<CSSStyleDeclaration>.setProperty("animation-timing-function", "<cssproperty_animation-timing-function>");
<CSSStyleDeclaration>.setProperty("backdrop-filter", "<cssproperty_backdrop-filter>");
<CSSStyleDeclaration>.setProperty("backface-visibility", "<cssproperty_backface-visibility>");
<CSSStyleDeclaration>.setProperty("background", "<cssproperty_background>");
<CSSStyleDeclaration>.setProperty("background-attachment", "<cssproperty_background-attachment>");
<CSSStyleDeclaration>.setProperty("background-blend-mode", "<cssproperty_background-blend-mode>");
<CSSStyleDeclaration>.setProperty("background-clip", "<cssproperty_background-clip>");
<CSSStyleDeclaration>.setProperty("background-color", "<cssproperty_background-color>");
<CSSStyleDeclaration>.setProperty("background-image", "<cssproperty_background-image>");
<CSSStyleDeclaration>.setProperty("background-origin", "<cssproperty_background-origin>");
<CSSStyleDeclaration>.setProperty("background-position", "<cssproperty_background-position>");
<CSSStyleDeclaration>.setProperty("background-position-x", "<cssproperty_background-position-x>");
<CSSStyleDeclaration>.setProperty("background-repeat", "<cssproperty_background-repeat>");
<CSSStyleDeclaration>.setProperty("background-repeat-x", "<cssproperty_background-repeat-x>");
<CSSStyleDeclaration>.setProperty("background-repeat-y", "<cssproperty_background-repeat-y>");
<CSSStyleDeclaration>.setProperty("background-size", "<cssproperty_background-size>");
<CSSStyleDeclaration>.setProperty("baseline-shift", "<cssproperty_baseline-shift>");
<CSSStyleDeclaration>.setProperty("border", "<cssproperty_border>");
<CSSStyleDeclaration>.setProperty("border-bottom", "<cssproperty_border-bottom>");
<CSSStyleDeclaration>.setProperty("border-bottom-color", "<cssproperty_border-bottom-color>");
<CSSStyleDeclaration>.setProperty("border-bottom-left-radius", "<cssproperty_border-bottom-left-radius>");
<CSSStyleDeclaration>.setProperty("border-bottom-right-radius", "<cssproperty_border-bottom-right-radius>");
<CSSStyleDeclaration>.setProperty("border-bottom-style", "<cssproperty_border-bottom-style>");
<CSSStyleDeclaration>.setProperty("border-bottom-width", "<cssproperty_border-bottom-width>");
<CSSStyleDeclaration>.setProperty("border-collapse", "<cssproperty_border-collapse>");
<CSSStyleDeclaration>.setProperty("border-color", "<cssproperty_border-color>");
<CSSStyleDeclaration>.setProperty("border-image", "<cssproperty_border-image>");
<CSSStyleDeclaration>.setProperty("border-image-outset", "<cssproperty_border-image-outset>");
<CSSStyleDeclaration>.setProperty("border-image-repeat", "<cssproperty_border-image-repeat>");
<CSSStyleDeclaration>.setProperty("border-image-slice", "<cssproperty_border-image-slice>");
<CSSStyleDeclaration>.setProperty("border-image-source", "<cssproperty_border-image-source>");
<CSSStyleDeclaration>.setProperty("border-image-width", "<cssproperty_border-image-width>");
<CSSStyleDeclaration>.setProperty("border-left", "<cssproperty_border-left>");
<CSSStyleDeclaration>.setProperty("border-left-color", "<cssproperty_border-left-color>");
<CSSStyleDeclaration>.setProperty("border-left-style", "<cssproperty_border-left-style>");
<CSSStyleDeclaration>.setProperty("border-left-width", "<cssproperty_border-left-width>");
<CSSStyleDeclaration>.setProperty("border-radius", "<cssproperty_border-radius>");
<CSSStyleDeclaration>.setProperty("border-right", "<cssproperty_border-right>");
<CSSStyleDeclaration>.setProperty("border-right-color", "<cssproperty_border-right-color>");
<CSSStyleDeclaration>.setProperty("border-right-style", "<cssproperty_border-right-style>");
<CSSStyleDeclaration>.setProperty("border-right-width", "<cssproperty_border-right-width>");
<CSSStyleDeclaration>.setProperty("border-size", "<cssproperty_border-size>");
<CSSStyleDeclaration>.setProperty("border-spacing", "<cssproperty_border-spacing>");
<CSSStyleDeclaration>.setProperty("border-style", "<cssproperty_border-style>");
<CSSStyleDeclaration>.setProperty("border-top", "<cssproperty_border-top>");
<CSSStyleDeclaration>.setProperty("border-top-color", "<cssproperty_border-top-color>");
<CSSStyleDeclaration>.setProperty("border-top-left-radius", "<cssproperty_border-top-left-radius>");
<CSSStyleDeclaration>.setProperty("border-top-right-radius", "<cssproperty_border-top-right-radius>");
<CSSStyleDeclaration>.setProperty("border-top-style", "<cssproperty_border-top-style>");
<CSSStyleDeclaration>.setProperty("border-top-width", "<cssproperty_border-top-width>");
<CSSStyleDeclaration>.setProperty("border-width", "<cssproperty_border-width>");
<CSSStyleDeclaration>.setProperty("bottom", "<cssproperty_bottom>");
<CSSStyleDeclaration>.setProperty("box-align", "<cssproperty_box-align>");
<CSSStyleDeclaration>.setProperty("box-decoration-break", "<cssproperty_box-decoration-break>");
<CSSStyleDeclaration>.setProperty("box-direction", "<cssproperty_box-direction>");
<CSSStyleDeclaration>.setProperty("box-flex", "<cssproperty_box-flex>");
<CSSStyleDeclaration>.setProperty("box-flex-group", "<cssproperty_box-flex-group>");
<CSSStyleDeclaration>.setProperty("box-ordinal-group", "<cssproperty_box-ordinal-group>");
<CSSStyleDeclaration>.setProperty("box-orient", "<cssproperty_box-orient>");
<CSSStyleDeclaration>.setProperty("box-pack", "<cssproperty_box-pack>");
<CSSStyleDeclaration>.setProperty("box-reflect", "<cssproperty_box-reflect>");
<CSSStyleDeclaration>.setProperty("box-shadow", "<cssproperty_box-shadow>");
<CSSStyleDeclaration>.setProperty("box-sizing", "<cssproperty_box-sizing>");
<CSSStyleDeclaration>.setProperty("break-after", "<cssproperty_break-after>");
<CSSStyleDeclaration>.setProperty("break-before", "<cssproperty_break-before>");
<CSSStyleDeclaration>.setProperty("break-inside", "<cssproperty_break-inside>");
<CSSStyleDeclaration>.setProperty("caption-side", "<cssproperty_caption-side>");
<CSSStyleDeclaration>.setProperty("cellpadding", "<cssproperty_cellpadding>");
<CSSStyleDeclaration>.setProperty("cellspacing", "<cssproperty_cellspacing>");
<CSSStyleDeclaration>.setProperty("clear", "<cssproperty_clear>");
<CSSStyleDeclaration>.setProperty("clip", "<cssproperty_clip>");
<CSSStyleDeclaration>.setProperty("clip-path", "<cssproperty_clip-path>");
<CSSStyleDeclaration>.setProperty("color", "<cssproperty_color>");
<CSSStyleDeclaration>.setProperty("color-interpolation-filters", "<cssproperty_color-interpolation-filters>");
<CSSStyleDeclaration>.setProperty("color-profile", "<cssproperty_color-profile>");
<CSSStyleDeclaration>.setProperty("column-break-after", "<cssproperty_column-break-after>");
<CSSStyleDeclaration>.setProperty("column-break-before", "<cssproperty_column-break-before>");
<CSSStyleDeclaration>.setProperty("column-count", "<cssproperty_column-count>");
<CSSStyleDeclaration>.setProperty("column-fill", "<cssproperty_column-fill>");
<CSSStyleDeclaration>.setProperty("column-gap", "<cssproperty_column-gap>");
<CSSStyleDeclaration>.setProperty("column-rule", "<cssproperty_column-rule>");
<CSSStyleDeclaration>.setProperty("column-rule-style", "<cssproperty_column-rule-style>");
<CSSStyleDeclaration>.setProperty("column-span", "<cssproperty_column-span>");
<CSSStyleDeclaration>.setProperty("column-width", "<cssproperty_column-width>");
<CSSStyleDeclaration>.setProperty("columns", "<cssproperty_columns>");
<CSSStyleDeclaration>.setProperty("contain", "<cssproperty_contain>");
<CSSStyleDeclaration>.setProperty("content", "<cssproperty_content>");
<CSSStyleDeclaration>.setProperty("counter-increment", "<cssproperty_counter-increment>");
<CSSStyleDeclaration>.setProperty("counter-reset", "<cssproperty_counter-reset>");
<CSSStyleDeclaration>.setProperty("css-float", "<cssproperty_css-float>");
<CSSStyleDeclaration>.setProperty("cursor", "<cssproperty_cursor>");
<CSSStyleDeclaration>.setProperty("cx", "<cssproperty_cx>");
<CSSStyleDeclaration>.setProperty("cy", "<cssproperty_cy>");
<CSSStyleDeclaration>.setProperty("direction", "<cssproperty_direction>");
<CSSStyleDeclaration>.setProperty("display", "<cssproperty_display>");
<CSSStyleDeclaration>.setProperty("dominant-baseline", "<cssproperty_dominant-baseline>");
<CSSStyleDeclaration>.setProperty("empty-cells", "<cssproperty_empty-cells>");
<CSSStyleDeclaration>.setProperty("fill", "<cssproperty_fill>");
<CSSStyleDeclaration>.setProperty("fill-opacity", "<cssproperty_fill-opacity>");
<CSSStyleDeclaration>.setProperty("fill-rule", "<cssproperty_fill-rule>");
<CSSStyleDeclaration>.setProperty("filter", "<cssproperty_filter>");
<CSSStyleDeclaration>.setProperty("flex", "<cssproperty_flex>");
<CSSStyleDeclaration>.setProperty("flex-basis", "<cssproperty_flex-basis>");
<CSSStyleDeclaration>.setProperty("flex-direction", "<cssproperty_flex-direction>");
<CSSStyleDeclaration>.setProperty("flex-flow", "<cssproperty_flex-flow>");
<CSSStyleDeclaration>.setProperty("flex-grow", "<cssproperty_flex-grow>");
<CSSStyleDeclaration>.setProperty("flex-shrink", "<cssproperty_flex-shrink>");
<CSSStyleDeclaration>.setProperty("flex-wrap", "<cssproperty_flex-wrap>");
<CSSStyleDeclaration>.setProperty("float", "<cssproperty_float>");
<CSSStyleDeclaration>.setProperty("flood-color", "<cssproperty_flood-color>");
<CSSStyleDeclaration>.setProperty("flood-opacity", "<cssproperty_flood-opacity>");
<CSSStyleDeclaration>.setProperty("font", "<cssproperty_font>");
<CSSStyleDeclaration>.setProperty("font-face", "<cssproperty_font-face>");
<CSSStyleDeclaration>.setProperty("font-family", "<cssproperty_font-family>");
<CSSStyleDeclaration>.setProperty("font-feature-settings", "<cssproperty_font-feature-settings>");
<CSSStyleDeclaration>.setProperty("font-kerning", "<cssproperty_font-kerning>");
<CSSStyleDeclaration>.setProperty("font-size", "<cssproperty_font-size>");
<CSSStyleDeclaration>.setProperty("font-size-adjust", "<cssproperty_font-size-adjust>");
<CSSStyleDeclaration>.setProperty("font-stretch", "<cssproperty_font-stretch>");
<CSSStyleDeclaration>.setProperty("font-style", "<cssproperty_font-style>");
<CSSStyleDeclaration>.setProperty("font-variant", "<cssproperty_font-variant>");
<CSSStyleDeclaration>.setProperty("font-variant-caps", "<cssproperty_font-variant-caps>");
<CSSStyleDeclaration>.setProperty("font-variant-ligatures", "<cssproperty_font-variant-ligatures>");
<CSSStyleDeclaration>.setProperty("font-vendor", "<cssproperty_font-vendor>");
<CSSStyleDeclaration>.setProperty("font-weight", "<cssproperty_font-weight>");
<CSSStyleDeclaration>.setProperty("grid", "<cssproperty_grid>");
<CSSStyleDeclaration>.setProperty("grid-area", "<cssproperty_grid-area>");
<CSSStyleDeclaration>.setProperty("grid-auto-columns", "<cssproperty_grid-auto-columns>");
<CSSStyleDeclaration>.setProperty("grid-auto-flow", "<cssproperty_grid-auto-flow>");
<CSSStyleDeclaration>.setProperty("grid-auto-rows", "<cssproperty_grid-auto-rows>");
<CSSStyleDeclaration>.setProperty("grid-column", "<cssproperty_grid-column>");
<CSSStyleDeclaration>.setProperty("grid-column-end", "<cssproperty_grid-column-end>");
<CSSStyleDeclaration>.setProperty("grid-column-gap", "<cssproperty_grid-column-gap>");
<CSSStyleDeclaration>.setProperty("grid-column-start", "<cssproperty_grid-column-start>");
<CSSStyleDeclaration>.setProperty("grid-gap", "<cssproperty_grid-gap>");
<CSSStyleDeclaration>.setProperty("grid-row", "<cssproperty_grid-row>");
<CSSStyleDeclaration>.setProperty("grid-row-end", "<cssproperty_grid-row-end>");
<CSSStyleDeclaration>.setProperty("grid-row-gap", "<cssproperty_grid-row-gap>");
<CSSStyleDeclaration>.setProperty("grid-row-start", "<cssproperty_grid-row-start>");
<CSSStyleDeclaration>.setProperty("grid-template", "<cssproperty_grid-template>");
<CSSStyleDeclaration>.setProperty("grid-template-areas", "<cssproperty_grid-template-areas>");
<CSSStyleDeclaration>.setProperty("grid-template-columns", "<cssproperty_grid-template-columns>");
<CSSStyleDeclaration>.setProperty("grid-template-rows", "<cssproperty_grid-template-rows>");
<CSSStyleDeclaration>.setProperty("height", "<cssproperty_height>");
<CSSStyleDeclaration>.setProperty("hyphens", "<cssproperty_hyphens>");
<CSSStyleDeclaration>.setProperty("image-orientation", "<cssproperty_image-orientation>");
<CSSStyleDeclaration>.setProperty("image-rendering", "<cssproperty_image-rendering>");
<CSSStyleDeclaration>.setProperty("isolation", "<cssproperty_isolation>");
<CSSStyleDeclaration>.setProperty("justify-content", "<cssproperty_justify-content>");
<CSSStyleDeclaration>.setProperty("justify-items", "<cssproperty_justify-items>");
<CSSStyleDeclaration>.setProperty("justify-self", "<cssproperty_justify-self>");
<CSSStyleDeclaration>.setProperty("kerning", "<cssproperty_kerning>");
<CSSStyleDeclaration>.setProperty("left", "<cssproperty_left>");
<CSSStyleDeclaration>.setProperty("letter-spacing", "<cssproperty_letter-spacing>");
<CSSStyleDeclaration>.setProperty("lighting-color", "<cssproperty_lighting-color>");
<CSSStyleDeclaration>.setProperty("line-break", "<cssproperty_line-break>");
<CSSStyleDeclaration>.setProperty("line-height", "<cssproperty_line-height>");
<CSSStyleDeclaration>.setProperty("list-style", "<cssproperty_list-style>");
<CSSStyleDeclaration>.setProperty("list-style-image", "<cssproperty_list-style-image>");
<CSSStyleDeclaration>.setProperty("list-style-position", "<cssproperty_list-style-position>");
<CSSStyleDeclaration>.setProperty("list-style-type", "<cssproperty_list-style-type>");
<CSSStyleDeclaration>.setProperty("margin", "<cssproperty_margin>");
<CSSStyleDeclaration>.setProperty("margin-bottom", "<cssproperty_margin-bottom>");
<CSSStyleDeclaration>.setProperty("margin-left", "<cssproperty_margin-left>");
<CSSStyleDeclaration>.setProperty("margin-right", "<cssproperty_margin-right>");
<CSSStyleDeclaration>.setProperty("margin-top", "<cssproperty_margin-top>");
<CSSStyleDeclaration>.setProperty("marker", "<cssproperty_marker>");
<CSSStyleDeclaration>.setProperty("marker-mid", "<cssproperty_marker-mid>");
<CSSStyleDeclaration>.setProperty("mask-source-type", "<cssproperty_mask-source-type>");
<CSSStyleDeclaration>.setProperty("max-height", "<cssproperty_max-height>");
<CSSStyleDeclaration>.setProperty("max-width", "<cssproperty_max-width>");
<CSSStyleDeclaration>.setProperty("max-zoom", "<cssproperty_max-zoom>");
<CSSStyleDeclaration>.setProperty("min-height", "<cssproperty_min-height>");
<CSSStyleDeclaration>.setProperty("min-width", "<cssproperty_min-width>");
<CSSStyleDeclaration>.setProperty("min-zoom", "<cssproperty_min-zoom>");
<CSSStyleDeclaration>.setProperty("mix-blend-mode", "<cssproperty_mix-blend-mode>");
<CSSStyleDeclaration>.setProperty("motion", "<cssproperty_motion>");
<CSSStyleDeclaration>.setProperty("motion-offset", "<cssproperty_motion-offset>");
<CSSStyleDeclaration>.setProperty("motion-path", "<cssproperty_motion-path>");
<CSSStyleDeclaration>.setProperty("motion-rotation", "<cssproperty_motion-rotation>");
<CSSStyleDeclaration>.setProperty("mso-background-source", "<cssproperty_mso-background-source>");
<CSSStyleDeclaration>.setProperty("mso-bidi-font-size", "<cssproperty_mso-bidi-font-size>");
<CSSStyleDeclaration>.setProperty("mso-border-alt", "<cssproperty_mso-border-alt>");
<CSSStyleDeclaration>.setProperty("mso-border-left-alt", "<cssproperty_mso-border-left-alt>");
<CSSStyleDeclaration>.setProperty("mso-border-top-alt", "<cssproperty_mso-border-top-alt>");
<CSSStyleDeclaration>.setProperty("mso-data-placement", "<cssproperty_mso-data-placement>");
<CSSStyleDeclaration>.setProperty("mso-displayed-decimal-separator", "<cssproperty_mso-displayed-decimal-separator>");
<CSSStyleDeclaration>.setProperty("mso-displayed-thousand-separator", "<cssproperty_mso-displayed-thousand-separator>");
<CSSStyleDeclaration>.setProperty("mso-fareast-font-family", "<cssproperty_mso-fareast-font-family>");
<CSSStyleDeclaration>.setProperty("mso-font-charset", "<cssproperty_mso-font-charset>");
<CSSStyleDeclaration>.setProperty("mso-font-kerning", "<cssproperty_mso-font-kerning>");
<CSSStyleDeclaration>.setProperty("mso-generic-font-family", "<cssproperty_mso-generic-font-family>");
<CSSStyleDeclaration>.setProperty("mso-height-source", "<cssproperty_mso-height-source>");
<CSSStyleDeclaration>.setProperty("mso-ignore", "<cssproperty_mso-ignore>");
<CSSStyleDeclaration>.setProperty("mso-number-format", "<cssproperty_mso-number-format>");
<CSSStyleDeclaration>.setProperty("mso-outline-level", "<cssproperty_mso-outline-level>");
<CSSStyleDeclaration>.setProperty("mso-padding-alt", "<cssproperty_mso-padding-alt>");
<CSSStyleDeclaration>.setProperty("mso-pagination", "<cssproperty_mso-pagination>");
<CSSStyleDeclaration>.setProperty("mso-pattern", "<cssproperty_mso-pattern>");
<CSSStyleDeclaration>.setProperty("mso-protection", "<cssproperty_mso-protection>");
<CSSStyleDeclaration>.setProperty("mso-rotate", "<cssproperty_mso-rotate>");
<CSSStyleDeclaration>.setProperty("mso-style-id", "<cssproperty_mso-style-id>");
<CSSStyleDeclaration>.setProperty("mso-style-name", "<cssproperty_mso-style-name>");
<CSSStyleDeclaration>.setProperty("mso-style-next", "<cssproperty_mso-style-next>");
<CSSStyleDeclaration>.setProperty("mso-style-parent", "<cssproperty_mso-style-parent>");
<CSSStyleDeclaration>.setProperty("mso-width-alt", "<cssproperty_mso-width-alt>");
<CSSStyleDeclaration>.setProperty("mso-width-source", "<cssproperty_mso-width-source>");
<CSSStyleDeclaration>.setProperty("object-fit", "<cssproperty_object-fit>");
<CSSStyleDeclaration>.setProperty("object-position", "<cssproperty_object-position>");
<CSSStyleDeclaration>.setProperty("offset", "<cssproperty_offset>");
<CSSStyleDeclaration>.setProperty("offset-anchor", "<cssproperty_offset-anchor>");
<CSSStyleDeclaration>.setProperty("offset-distance", "<cssproperty_offset-distance>");
<CSSStyleDeclaration>.setProperty("offset-path", "<cssproperty_offset-path>");
<CSSStyleDeclaration>.setProperty("offset-position", "<cssproperty_offset-position>");
<CSSStyleDeclaration>.setProperty("offset-rotation", "<cssproperty_offset-rotation>");
<CSSStyleDeclaration>.setProperty("opacity", "<cssproperty_opacity>");
<CSSStyleDeclaration>.setProperty("order", "<cssproperty_order>");
<CSSStyleDeclaration>.setProperty("orientation", "<cssproperty_orientation>");
<CSSStyleDeclaration>.setProperty("orphans", "<cssproperty_orphans>");
<CSSStyleDeclaration>.setProperty("outline", "<cssproperty_outline>");
<CSSStyleDeclaration>.setProperty("outline-bottom", "<cssproperty_outline-bottom>");
<CSSStyleDeclaration>.setProperty("outline-color", "<cssproperty_outline-color>");
<CSSStyleDeclaration>.setProperty("outline-offset", "<cssproperty_outline-offset>");
<CSSStyleDeclaration>.setProperty("outline-style", "<cssproperty_outline-style>");
<CSSStyleDeclaration>.setProperty("outline-width", "<cssproperty_outline-width>");
<CSSStyleDeclaration>.setProperty("overflow", "<cssproperty_overflow>");
<CSSStyleDeclaration>.setProperty("overflow-anchor", "<cssproperty_overflow-anchor>");
<CSSStyleDeclaration>.setProperty("overflow-wrap", "<cssproperty_overflow-wrap>");
<CSSStyleDeclaration>.setProperty("overflow-x", "<cssproperty_overflow-x>");
<CSSStyleDeclaration>.setProperty("overflow-y", "<cssproperty_overflow-y>");
<CSSStyleDeclaration>.setProperty("padding", "<cssproperty_padding>");
<CSSStyleDeclaration>.setProperty("padding-bottom", "<cssproperty_padding-bottom>");
<CSSStyleDeclaration>.setProperty("padding-left", "<cssproperty_padding-left>");
<CSSStyleDeclaration>.setProperty("padding-right", "<cssproperty_padding-right>");
<CSSStyleDeclaration>.setProperty("padding-top", "<cssproperty_padding-top>");
<CSSStyleDeclaration>.setProperty("page", "<cssproperty_page>");
<CSSStyleDeclaration>.setProperty("page-break-after", "<cssproperty_page-break-after>");
<CSSStyleDeclaration>.setProperty("page-break-before", "<cssproperty_page-break-before>");
<CSSStyleDeclaration>.setProperty("page-break-inside", "<cssproperty_page-break-inside>");
<CSSStyleDeclaration>.setProperty("perspective", "<cssproperty_perspective>");
<CSSStyleDeclaration>.setProperty("perspective-origin", "<cssproperty_perspective-origin>");
<CSSStyleDeclaration>.setProperty("pointer-events", "<cssproperty_pointer-events>");
<CSSStyleDeclaration>.setProperty("position", "<cssproperty_position>");
<CSSStyleDeclaration>.setProperty("prince-hyphens", "<cssproperty_prince-hyphens>");
<CSSStyleDeclaration>.setProperty("quotes", "<cssproperty_quotes>");
<CSSStyleDeclaration>.setProperty("resize", "<cssproperty_resize>");
<CSSStyleDeclaration>.setProperty("right", "<cssproperty_right>");
<CSSStyleDeclaration>.setProperty("rotate", "<cssproperty_rotate>");
<CSSStyleDeclaration>.setProperty("rotation", "<cssproperty_rotation>");
<CSSStyleDeclaration>.setProperty("rotation-code", "<cssproperty_rotation-code>");
<CSSStyleDeclaration>.setProperty("rx", "<cssproperty_rx>");
<CSSStyleDeclaration>.setProperty("ry", "<cssproperty_ry>");
<CSSStyleDeclaration>.setProperty("scale", "<cssproperty_scale>");
<CSSStyleDeclaration>.setProperty("scroll-behavior", "<cssproperty_scroll-behavior>");
<CSSStyleDeclaration>.setProperty("scroll-snap-coordinate", "<cssproperty_scroll-snap-coordinate>");
<CSSStyleDeclaration>.setProperty("scroll-snap-destination", "<cssproperty_scroll-snap-destination>");
<CSSStyleDeclaration>.setProperty("scroll-snap-points-x", "<cssproperty_scroll-snap-points-x>");
<CSSStyleDeclaration>.setProperty("scroll-snap-points-y", "<cssproperty_scroll-snap-points-y>");
<CSSStyleDeclaration>.setProperty("scroll-snap-type", "<cssproperty_scroll-snap-type>");
<CSSStyleDeclaration>.setProperty("shape-image-threshold", "<cssproperty_shape-image-threshold>");
<CSSStyleDeclaration>.setProperty("shape-inside", "<cssproperty_shape-inside>");
<CSSStyleDeclaration>.setProperty("shape-margin", "<cssproperty_shape-margin>");
<CSSStyleDeclaration>.setProperty("shape-outside", "<cssproperty_shape-outside>");
<CSSStyleDeclaration>.setProperty("snap-height", "<cssproperty_snap-height>");
<CSSStyleDeclaration>.setProperty("src", "<cssproperty_src>");
<CSSStyleDeclaration>.setProperty("stop-color", "<cssproperty_stop-color>");
<CSSStyleDeclaration>.setProperty("stop-opacity", "<cssproperty_stop-opacity>");
<CSSStyleDeclaration>.setProperty("stroke", "<cssproperty_stroke>");
<CSSStyleDeclaration>.setProperty("stroke-dasharray", "<cssproperty_stroke-dasharray>");
<CSSStyleDeclaration>.setProperty("stroke-dashoffset", "<cssproperty_stroke-dashoffset>");
<CSSStyleDeclaration>.setProperty("stroke-linecap", "<cssproperty_stroke-linecap>");
<CSSStyleDeclaration>.setProperty("stroke-linejoin", "<cssproperty_stroke-linejoin>");
<CSSStyleDeclaration>.setProperty("stroke-miterlimit", "<cssproperty_stroke-miterlimit>");
<CSSStyleDeclaration>.setProperty("stroke-opacity", "<cssproperty_stroke-opacity>");
<CSSStyleDeclaration>.setProperty("stroke-width", "<cssproperty_stroke-width>");
<CSSStyleDeclaration>.setProperty("tab-size", "<cssproperty_tab-size>");
<CSSStyleDeclaration>.setProperty("table-layout", "<cssproperty_table-layout>");
<CSSStyleDeclaration>.setProperty("text-align", "<cssproperty_text-align>");
<CSSStyleDeclaration>.setProperty("text-align-last", "<cssproperty_text-align-last>");
<CSSStyleDeclaration>.setProperty("text-anchor", "<cssproperty_text-anchor>");
<CSSStyleDeclaration>.setProperty("text-combine-upright", "<cssproperty_text-combine-upright>");
<CSSStyleDeclaration>.setProperty("text-decoration", "<cssproperty_text-decoration>");
<CSSStyleDeclaration>.setProperty("text-decoration-color", "<cssproperty_text-decoration-color>");
<CSSStyleDeclaration>.setProperty("text-decoration-line", "<cssproperty_text-decoration-line>");
<CSSStyleDeclaration>.setProperty("text-decoration-style", "<cssproperty_text-decoration-style>");
<CSSStyleDeclaration>.setProperty("text-decoration-upright", "<cssproperty_text-decoration-upright>");
<CSSStyleDeclaration>.setProperty("text-indent", "<cssproperty_text-indent>");
<CSSStyleDeclaration>.setProperty("text-justify", "<cssproperty_text-justify>");
<CSSStyleDeclaration>.setProperty("text-orientation", "<cssproperty_text-orientation>");
<CSSStyleDeclaration>.setProperty("text-overflow", "<cssproperty_text-overflow>");
<CSSStyleDeclaration>.setProperty("text-rendering", "<cssproperty_text-rendering>");
<CSSStyleDeclaration>.setProperty("text-shadow", "<cssproperty_text-shadow>");
<CSSStyleDeclaration>.setProperty("text-transform", "<cssproperty_text-transform>");
<CSSStyleDeclaration>.setProperty("text-underline", "<cssproperty_text-underline>");
<CSSStyleDeclaration>.setProperty("text-underline-position", "<cssproperty_text-underline-position>");
<CSSStyleDeclaration>.setProperty("top", "<cssproperty_top>");
<CSSStyleDeclaration>.setProperty("touch-action", "<cssproperty_touch-action>");
<CSSStyleDeclaration>.setProperty("transform", "<cssproperty_transform>");
<CSSStyleDeclaration>.setProperty("transform-origin", "<cssproperty_transform-origin>");
<CSSStyleDeclaration>.setProperty("transform-style", "<cssproperty_transform-style>");
<CSSStyleDeclaration>.setProperty("transition", "<cssproperty_transition>");
<CSSStyleDeclaration>.setProperty("transition-delay", "<cssproperty_transition-delay>");
<CSSStyleDeclaration>.setProperty("transition-duration", "<cssproperty_transition-duration>");
<CSSStyleDeclaration>.setProperty("transition-properties", "<cssproperty_transition-properties>");
<CSSStyleDeclaration>.setProperty("transition-property", "<cssproperty_transition-property>");
<CSSStyleDeclaration>.setProperty("transition-timing-function", "<cssproperty_transition-timing-function>");
<CSSStyleDeclaration>.setProperty("translate", "<cssproperty_translate>");
<CSSStyleDeclaration>.setProperty("unicode-bidi", "<cssproperty_unicode-bidi>");
<CSSStyleDeclaration>.setProperty("user-select", "<cssproperty_user-select>");
<CSSStyleDeclaration>.setProperty("user-zoom", "<cssproperty_user-zoom>");
<CSSStyleDeclaration>.setProperty("vector-effect", "<cssproperty_vector-effect>");
<CSSStyleDeclaration>.setProperty("vertical-align", "<cssproperty_vertical-align>");
<CSSStyleDeclaration>.setProperty("visibility", "<cssproperty_visibility>");
<CSSStyleDeclaration>.setProperty("weight", "<cssproperty_weight>");
<CSSStyleDeclaration>.setProperty("white", "<cssproperty_white>");
<CSSStyleDeclaration>.setProperty("white-space", "<cssproperty_white-space>");
<CSSStyleDeclaration>.setProperty("whitespace", "<cssproperty_whitespace>");
<CSSStyleDeclaration>.setProperty("widows", "<cssproperty_widows>");
<CSSStyleDeclaration>.setProperty("width", "<cssproperty_width>");
<CSSStyleDeclaration>.setProperty("will-change", "<cssproperty_will-change>");
<CSSStyleDeclaration>.setProperty("word-break", "<cssproperty_word-break>");
<CSSStyleDeclaration>.setProperty("word-space", "<cssproperty_word-space>");
<CSSStyleDeclaration>.setProperty("word-spacing", "<cssproperty_word-spacing>");
<CSSStyleDeclaration>.setProperty("word-wrap", "<cssproperty_word-wrap>");
<CSSStyleDeclaration>.setProperty("writing-mode", "<cssproperty_writing-mode>");
<CSSStyleDeclaration>.setProperty("z-index", "<cssproperty_z-index>");
<CSSStyleDeclaration>.setProperty("zoom", "<cssproperty_zoom>");
<CSSStyleDeclaration>.setProperty("<cssvar>", <string_cssvalue>);
<CSSStyleDeclaration>.setProperty(<string_cssproperty>, "var(<cssvar>)");

################################################

#SVG

################################################

#NodeList

#Node
<new SVGElement> = <SVGElement>.getRootNode(<GetRootNodeOptions>);
<new boolean> = <SVGElement>.isEqualNode(<SVGElement>);
<new boolean> = <SVGElement>.isSameNode(<SVGElement>);
<new short> = <SVGElement>.compareDocumentPosition(<SVGElement>);
<new boolean> = <SVGElement>.contains(<SVGElement>);
<new SVGElement> = <SVGElement id=1>.insertBefore(<SVGElement>,<SVGElement id=1>.childNodes[<int min=0 max=100>%<SVGElement id=1>.childNodes.length]);
<new SVGElement> = <SVGElement>.appendChild(<SVGElement>);
<new SVGElement> = <SVGElement id=1>.replaceChild(<SVGElement>,<SVGElement id=1>.childNodes[<int min=0 max=100>%<SVGElement id=1>.childNodes.length]);

#ChildNode
<SVGElement>.before(<SVGElement>);
<SVGElement>.after(<SVGElement>);
<SVGElement>.replaceWith(<SVGElement>);

#ParentNode
<SVGElement>.prepend(<SVGElement>);
<SVGElement>.append(<SVGElement>);
<new SVGElement> = <SVGElement>.querySelector("<selector>");
<new SVGNodeList> = <SVGElement>.querySelectorAll("<selector>");

#NonDocumentTypeChildNode

#Element
<SVGElement>.setPointerCapture(<fuzzint>);
<SVGElement>.releasePointerCapture(<fuzzint>);
<new boolean> = <SVGElement>.hasPointerCapture(<fuzzint>);
<new DOMString> = <SVGElement>.getAttribute(<string_attr>);
<new DOMString> = <SVGElement>.getAttributeNS("http://www.w3.org/2000/svg",<string_attr>);

#<SVGElement>.setAttribute(<DOMString>,<DOMString>);

#<SVGElement>.setAttributeNS(<DOMString>,<DOMString>,<DOMString>);
<new boolean> = <SVGElement>.hasAttribute(<string_attr>);
<new boolean> = <SVGElement>.hasAttributeNS("http://www.w3.org/2000/svg",<string_attr>);
<new Attr> = <SVGElement>.getAttributeNode(<string_attr>);
<new Attr> = <SVGElement>.getAttributeNodeNS("http://www.w3.org/2000/svg",<string_attr>);
<new HTMLCollection> = <SVGElement>.getElementsByTagName(<string_tag>);
<new HTMLCollection> = <SVGElement>.getElementsByTagNameNS("http://www.w3.org/2000/svg",<string_tag>);
<new HTMLCollection> = <SVGElement>.getElementsByClassName("<class>");
<new SVGElement> = <SVGElement>.insertAdjacentElement(<string_where>,<SVGElement>);
<SVGElement>.insertAdjacentText(<string_where>,<DOMString>);
<SVGElement>.innerHTML = <htmlstring>;
<SVGElement>.outerHTML = <htmlstring>;
<SVGElement>.insertAdjacentHTML(<string_where>,<htmlstring>);
<new ShadowRoot> = <SVGElement>.attachShadow(<ShadowRootInit>);
<SVGElement>.scroll(<ScrollToOptions>);
<SVGElement>.scrollTo(<ScrollToOptions>);
<SVGElement>.scrollBy(<ScrollToOptions>);
<SVGElement>.setApplyScroll(<ScrollStateCallback>,<NativeScrollBehavior>);
<SVGElement>.setDistributeScroll(<ScrollStateCallback>,<NativeScrollBehavior>);

#SVGTextContentElement
<new float> = <SVGTextContentElement>.getSubStringLength(<fuzzint>,<fuzzint>);
<new SVGPoint> = <SVGTextContentElement>.getStartPositionOfChar(<fuzzint>);
<new SVGPoint> = <SVGTextContentElement>.getEndPositionOfChar(<fuzzint>);
<new SVGRect> = <SVGTextContentElement>.getExtentOfChar(<fuzzint>);
<new float> = <SVGTextContentElement>.getRotationOfChar(<fuzzint>);
<SVGTextContentElement>.selectSubString(<fuzzint>,<fuzzint>);

#SVGViewElement

#SVGAnimatedLengthList

#SVGFEColorMatrixElement

#SVGDescElement

#SVGDiscardElement

#SVGNumber

#SVGAnimateElement

#SVGAnimatedInteger
<SVGAnimatedInteger>.baseVal = <fuzzint>;

#SVGAnimateMotionElement

#SVGRadialGradientElement

#SVGFEComponentTransferElement

#SVGTransformList
<new SVGTransform> = <SVGTransformList>.getItem(<fuzzint>);
<new SVGTransform> = <SVGTransformList>.insertItemBefore(<SVGTransform>,<fuzzint>);
<new SVGTransform> = <SVGTransformList>.replaceItem(<SVGTransform>,<fuzzint>);
<new SVGTransform> = <SVGTransformList>.removeItem(<fuzzint>);

#SVGFEDisplacementMapElement

#SVGGradientElement

#SVGNumberList
<new SVGNumber> = <SVGNumberList>.getItem(<fuzzint>);
<new SVGNumber> = <SVGNumberList>.insertItemBefore(<SVGNumber>,<fuzzint>);
<new SVGNumber> = <SVGNumberList>.replaceItem(<SVGNumber>,<fuzzint>);
<new SVGNumber> = <SVGNumberList>.removeItem(<fuzzint>);

#SVGFEFuncGElement

#SVGMatrix

#SVGFESpotLightElement

#SVGPatternElement

#SVGLinearGradientElement

#SVGRectElement

#SVGAnimatedRect

#SVGAnimateTransformElement

#SVGElement
<SVGElement>.tabIndex = <fuzzint>;

#SVGGraphicsElement

#SVGSVGElement
<new long> = <SVGSVGElement>.suspendRedraw(<fuzzint>);
<SVGSVGElement>.unsuspendRedraw(<fuzzint>);
<new NodeList> = <SVGSVGElement>.getIntersectionList(<SVGRect>,<SVGElement>);
<new NodeList> = <SVGSVGElement>.getEnclosureList(<SVGRect>,<SVGElement>);
<new boolean> = <SVGSVGElement>.checkIntersection(<SVGElement>,<SVGRect>);
<new boolean> = <SVGSVGElement>.checkEnclosure(<SVGElement>,<SVGRect>);

#SVGTextPathElement

#SVGFETileElement

#SVGFEPointLightElement

#SVGAnimatedNumber
<SVGAnimatedNumber>.baseVal = <fuzzint>;

#SVGForeignObjectElement

#SVGFECompositeElement

#SVGFEDropShadowElement

#SVGSetElement

#SVGRect
<SVGRect>.x = <fuzzint>;
<SVGRect>.y = <fuzzint>;
<SVGRect>.width = <fuzzint>;
<SVGRect>.height = <fuzzint>;

#SVGAngle
<SVGAngle>.newValueSpecifiedUnits(<fuzzint>,<float>);
<SVGAngle>.convertToSpecifiedUnits(<fuzzint>);

#SVGPreserveAspectRatio
<SVGPreserveAspectRatio>.align = <fuzzint>;
<SVGPreserveAspectRatio>.meetOrSlice = <fuzzint>;

#SVGFilterElement

#SVGURIReference

#SVGClipPathElement

#SVGImageElement

#SVGAnimatedTransformList

#SVGFEGaussianBlurElement

#SVGTextPositioningElement

#SVGFEFloodElement

#SVGMaskElement

#SVGMetadataElement

#SVGTitleElement

#SVGFEFuncAElement

#SVGFEDistantLightElement

#SVGAnimatedNumberList

#SVGFEFuncRElement

#SVGAnimatedAngle

#SVGViewSpec

#SVGAElement

#SVGAnimatedLength

#SVGFEMorphologyElement

#SVGLength
<SVGLength>.value = <fuzzint>;
<SVGLength>.valueInSpecifiedUnits = <fuzzint>;
<SVGLength>.newValueSpecifiedUnits(<fuzzint>,<fuzzint>);
<SVGLength>.convertToSpecifiedUnits(<fuzzint>);

#SVGMarkerElement

#SVGDefsElement

#SVGAnimationElement

#SVGFitToViewBox

#SVGPoint
<SVGPoint>.x = <fuzzint>;
<SVGPoint>.y = <fuzzint>;

#SVGUseElement

#SVGPolygonElement

#SVGSymbolElement

#SVGAnimatedPreserveAspectRatio

#SVGTextElement

#SVGFEMergeElement

#SVGFEImageElement

#SVGStringList
<new DOMString> = <SVGStringList>.getItem(<fuzzint>);
<new DOMString> = <SVGStringList>.insertItemBefore(<DOMString>,<fuzzint>);
<new DOMString> = <SVGStringList>.replaceItem(<DOMString>,<fuzzint>);
<new DOMString> = <SVGStringList>.removeItem(<fuzzint>);

#SVGLineElement

#SVGFEDiffuseLightingElement

#SVGPointList
<new SVGPoint> = <SVGPointList>.getItem(<fuzzint>);
<new SVGPoint> = <SVGPointList>.insertItemBefore(<SVGPoint>,<fuzzint>);
<new SVGPoint> = <SVGPointList>.replaceItem(<SVGPoint>,<fuzzint>);
<new SVGPoint> = <SVGPointList>.removeItem(<fuzzint>);

#SVGUnitTypes

#SVGPolylineElement

#SVGAnimatedBoolean

#SVGComponentTransferFunctionElement

#SVGFESpecularLightingElement

#SVGGeometryElement

#SVGFEConvolveMatrixElement

#SVGFilterPrimitiveStandardAttributes

#SVGEllipseElement

#SVGFEOffsetElement

#SVGTransform
<SVGTransform>.setTranslate(<fuzzint>,<fuzzint>);
<SVGTransform>.setScale(<fuzzint>,<fuzzint>);

#SVGFEBlendElement

#SVGStopElement

#SVGLengthList
<new SVGLength> = <SVGLengthList>.getItem(<fuzzint>);
<new SVGLength> = <SVGLengthList>.insertItemBefore(<SVGLength>,<fuzzint>);
<new SVGLength> = <SVGLengthList>.replaceItem(<SVGLength>,<fuzzint>);
<new SVGLength> = <SVGLengthList>.removeItem(<fuzzint>);

#SVGFEFuncBElement

#SVGAnimatedEnumeration
<SVGAnimatedEnumeration>.baseVal = <fuzzint>;

#SVGFEMergeNodeElement

#SVGCircleElement

#SVGScriptElement

#SVGMPathElement

#SVGGElement

#SVGCursorElement

#SVGPathElement
<new SVGPoint> = <SVGPathElement>.getPointAtLength(<fuzzint>);
<new long> = <SVGPathElement>.getPathSegAtLength(<fuzzint>);

#SVGTSpanElement

#SVGAnimatedString

#SVGFETurbulenceElement

#SVGSwitchElement

#SVGStyleElement
<SVGElement>.setAttribute("accumulate", "<svgattr_accumulate_value>");
<SVGElement>.setAttribute("additive", "<svgattr_additive_value>");
<SVGElement>.setAttribute("alignment-baseline", "<svgattr_alignment-baseline_value>");
<SVGElement>.setAttribute("alphabetic", "<svgattr_alphabetic_value>");
<SVGElement>.setAttribute("alt", "<svgattr_alt_value>");
<SVGElement>.setAttribute("amplitude", "<svgattr_amplitude_value>");
<SVGElement>.setAttribute("arabic-form", "<svgattr_arabic-form_value>");
<SVGElement>.setAttribute("aria-label", "<svgattr_aria-label_value>");
<SVGElement>.setAttribute("ascent", "<svgattr_ascent_value>");
<SVGElement>.setAttribute("attributeName", "<svgattr_attributeName_value>");
<SVGElement>.setAttribute("attributeType", "<svgattr_attributeType_value>");
<SVGElement>.setAttribute("azimuth", "<svgattr_azimuth_value>");
<SVGElement>.setAttribute("baseFrequency", "<svgattr_baseFrequency_value>");
<SVGElement>.setAttribute("baseProfile", "<svgattr_baseProfile_value>");
<SVGElement>.setAttribute("baseline-shift", "<svgattr_baseline-shift_value>");
<SVGElement>.setAttribute("bbox", "<svgattr_bbox_value>");
<SVGElement>.setAttribute("begin", "<svgattr_begin_value>");
<SVGElement>.setAttribute("by", "<svgattr_by_value>");
<SVGElement>.setAttribute("calcMode", "<svgattr_calcMode_value>");
<SVGElement>.setAttribute("cap-height", "<svgattr_cap-height_value>");
<SVGElement>.setAttribute("class", "<svgattr_class_value>");
<SVGElement>.setAttribute("click", "<svgattr_click_value>");
<SVGElement>.setAttribute("clip", "<svgattr_clip_value>");
<SVGElement>.setAttribute("clip-path", svg_url_clippath);
<SVGElement>.setAttribute("clip-rule", "<svgattr_clip-rule_value>");
<SVGElement>.setAttribute("clipPathUnits", "<svgattr_clipPathUnits_value>");
<SVGElement>.setAttribute("color", "<svgattr_color_value>");
<SVGElement>.setAttribute("color-interpolation", "<svgattr_color-interpolation_value>");
<SVGElement>.setAttribute("color-interpolation-filters", "<svgattr_color-interpolation-filters_value>");
<SVGElement>.setAttribute("color-profile", "<svgattr_color-profile_value>");
<SVGElement>.setAttribute("contentScriptType", "<svgattr_contentScriptType_value>");
<SVGElement>.setAttribute("contentStyleType", "<svgattr_contentStyleType_value>");
<SVGElement>.setAttribute("cursor", "<svgattr_cursor_value>");
<SVGElement>.setAttribute("cx", "<svgattr_cx_value>");
<SVGElement>.setAttribute("cy", "<svgattr_cy_value>");
<SVGElement>.setAttribute("d", "<svgattr_d_value>");
<SVGElement>.setAttribute("descent", "<svgattr_descent_value>");
<SVGElement>.setAttribute("diffuseConstant", "<svgattr_diffuseConstant_value>");
<SVGElement>.setAttribute("direction", "<svgattr_direction_value>");
<SVGElement>.setAttribute("display", "<svgattr_display_value>");
<SVGElement>.setAttribute("divisor", "<svgattr_divisor_value>");
<SVGElement>.setAttribute("dominant-baseline", "<svgattr_dominant-baseline_value>");
<SVGElement>.setAttribute("dur", "<svgattr_dur_value>");
<SVGElement>.setAttribute("dx", "<svgattr_dx_value>");
<SVGElement>.setAttribute("dy", "<svgattr_dy_value>");
<SVGElement>.setAttribute("edgeMode", "<svgattr_edgeMode_value>");
<SVGElement>.setAttribute("elevation", "<svgattr_elevation_value>");
<SVGElement>.setAttribute("enable-background", "<svgattr_enable-background_value>");
<SVGElement>.setAttribute("end", "<svgattr_end_value>");
<SVGElement>.setAttribute("exponent", "<svgattr_exponent_value>");
<SVGElement>.setAttribute("externalResourcesRequired", "<svgattr_externalResourcesRequired_value>");
<SVGElement>.setAttribute("fill", <svg_url_fill>);
<SVGElement>.setAttribute("fill", "<svgattr_fill_value>");
<SVGElement>.setAttribute("fill-opacity", "<svgattr_fill-opacity_value>");
<SVGElement>.setAttribute("fill-rule", "<svgattr_fill-rule_value>");
<SVGElement>.setAttribute("filter", <svg_url_filter>);
<SVGElement>.setAttribute("filterPrimitiveUnits", "<svgattr_filterPrimitiveUnits_value>");
<SVGElement>.setAttribute("filterRes", "<svgattr_filterRes_value>");
<SVGElement>.setAttribute("filterUnits", "<svgattr_filterUnits_value>");
<SVGElement>.setAttribute("flood-color", "<svgattr_flood-color_value>");
<SVGElement>.setAttribute("flood-opacity", "<svgattr_flood-opacity_value>");
<SVGElement>.setAttribute("font-family", "<svgattr_font-family_value>");
<SVGElement>.setAttribute("font-rendering", "<svgattr_font-rendering_value>");
<SVGElement>.setAttribute("font-size", "<svgattr_font-size_value>");
<SVGElement>.setAttribute("font-stretch", "<svgattr_font-stretch_value>");
<SVGElement>.setAttribute("font-style", "<svgattr_font-style_value>");
<SVGElement>.setAttribute("font-variant", "<svgattr_font-variant_value>");
<SVGElement>.setAttribute("font-weight", "<svgattr_font-weight_value>");
<SVGElement>.setAttribute("fr", "<svgattr_fr_value>");
<SVGElement>.setAttribute("from", "<svgattr_from_value>");
<SVGElement>.setAttribute("fx", "<svgattr_fx_value>");
<SVGElement>.setAttribute("fy", "<svgattr_fy_value>");
<SVGElement>.setAttribute("g1", "<svgattr_g1_value>");
<SVGElement>.setAttribute("g2", "<svgattr_g2_value>");
<SVGElement>.setAttribute("glyph-name", "<svgattr_glyph-name_value>");
<SVGElement>.setAttribute("glyph-orientation-horizontal", "<svgattr_glyph-orientation-horizontal_value>");
<SVGElement>.setAttribute("glyph-orientation-vertical", "<svgattr_glyph-orientation-vertical_value>");
<SVGElement>.setAttribute("glyphRef", "<svgattr_glyphRef_value>");
<SVGElement>.setAttribute("gradientTransform", "<svgattr_gradientTransform_value>");
<SVGElement>.setAttribute("gradientUnits", "<svgattr_gradientUnits_value>");
<SVGElement>.setAttribute("hanging", "<svgattr_hanging_value>");
<SVGElement>.setAttribute("height", "<svgattr_height_value>");
<SVGElement>.setAttribute("horiz-adv-x", "<svgattr_horiz-adv-x_value>");
<SVGElement>.setAttribute("horiz-origin-x", "<svgattr_horiz-origin-x_value>");
<SVGElement>.setAttribute("href", "<svgattr_href_value>");
<SVGElement>.setAttribute("id", "<svgelementid>");
<SVGElement>.setAttribute("ideographic", "<svgattr_ideographic_value>");
<SVGElement>.setAttribute("in", "<svgattr_in_value>");
<SVGElement>.setAttribute("in2", "<svgattr_in2_value>");
<SVGElement>.setAttribute("intercept", "<svgattr_intercept_value>");
<SVGElement>.setAttribute("k", "<svgattr_k_value>");
<SVGElement>.setAttribute("k1", "<svgattr_k1_value>");
<SVGElement>.setAttribute("k2", "<svgattr_k2_value>");
<SVGElement>.setAttribute("k3", "<svgattr_k3_value>");
<SVGElement>.setAttribute("k4", "<svgattr_k4_value>");
<SVGElement>.setAttribute("kernelMatrix", "<svgattr_kernelMatrix_value>");
<SVGElement>.setAttribute("kernelUnitLength", "<svgattr_kernelUnitLength_value>");
<SVGElement>.setAttribute("keyPoints", "<svgattr_keyPoints_value>");
<SVGElement>.setAttribute("keySplines", "<svgattr_keySplines_value>");
<SVGElement>.setAttribute("keyTimes", "<svgattr_keyTimes_value>");
<SVGElement>.setAttribute("lang", "<svgattr_lang_value>");
<SVGElement>.setAttribute("lengthAdjust", "<svgattr_lengthAdjust_value>");
<SVGElement>.setAttribute("letter-spacing", "<svgattr_letter-spacing_value>");
<SVGElement>.setAttribute("lighting-color", "<svgattr_lighting-color_value>");
<SVGElement>.setAttribute("limitingConeAngle", "<svgattr_limitingConeAngle_value>");
<SVGElement>.setAttribute("line-width", "<svgattr_line-width_value>");
<SVGElement>.setAttribute("marker-end", <svg_url_marker>);
<SVGElement>.setAttribute("marker-mid", <svg_url_marker>);
<SVGElement>.setAttribute("marker-start", <svg_url_marker>);
<SVGElement>.setAttribute("markerHeight", "<svgattr_markerHeight_value>");
<SVGElement>.setAttribute("markerUnits", "<svgattr_markerUnits_value>");
<SVGElement>.setAttribute("markerWidth", "<svgattr_markerWidth_value>");
<SVGElement>.setAttribute("mask", <svg_url_mask>);
<SVGElement>.setAttribute("mask-type", "<svgattr_mask-type_value>");
<SVGElement>.setAttribute("maskContentUnits", "<svgattr_maskContentUnits_value>");
<SVGElement>.setAttribute("maskUnits", "<svgattr_maskUnits_value>");
<SVGElement>.setAttribute("mathematical", "<svgattr_mathematical_value>");
<SVGElement>.setAttribute("max", "<svgattr_max_value>");
<SVGElement>.setAttribute("min", "<svgattr_min_value>");
<SVGElement>.setAttribute("mode", "<svgattr_mode_value>");
<SVGElement>.setAttribute("name", "<svgattr_name_value>");
<SVGElement>.setAttribute("numOctaves", "<svgattr_numOctaves_value>");
<SVGElement>.setAttribute("offset", "<svgattr_offset_value>");
<SVGElement>.setAttribute("onactivate", "<svgattr_onactivate_value>");
<SVGElement>.setAttribute("onbegin", "<svgattr_onbegin_value>");
<SVGElement>.setAttribute("onclick", "<svgattr_onclick_value>");
<SVGElement>.setAttribute("onend", "<svgattr_onend_value>");
<SVGElement>.setAttribute("onerror", "<svgattr_onerror_value>");
<SVGElement>.setAttribute("onfocusin", "<svgattr_onfocusin_value>");
<SVGElement>.setAttribute("onfocusout", "<svgattr_onfocusout_value>");
<SVGElement>.setAttribute("onload", "<svgattr_onload_value>");
<SVGElement>.setAttribute("onmousedown", "<svgattr_onmousedown_value>");
<SVGElement>.setAttribute("onmousemove", "<svgattr_onmousemove_value>");
<SVGElement>.setAttribute("onmouseout", "<svgattr_onmouseout_value>");
<SVGElement>.setAttribute("onmouseover", "<svgattr_onmouseover_value>");
<SVGElement>.setAttribute("onmouseup", "<svgattr_onmouseup_value>");
<SVGElement>.setAttribute("onrepeat", "<svgattr_onrepeat_value>");
<SVGElement>.setAttribute("opacity", "<svgattr_opacity_value>");
<SVGElement>.setAttribute("operator", "<svgattr_operator_value>");
<SVGElement>.setAttribute("order", "<svgattr_order_value>");
<SVGElement>.setAttribute("orient", "<svgattr_orient_value>");
<SVGElement>.setAttribute("overflow", "<svgattr_overflow_value>");
<SVGElement>.setAttribute("panose-1", "<svgattr_panose-1_value>");
<SVGElement>.setAttribute("path", "<svgattr_path_value>");
<SVGElement>.setAttribute("pathLength", "<svgattr_pathLength_value>");
<SVGElement>.setAttribute("patternContentUnits", "<svgattr_patternContentUnits_value>");
<SVGElement>.setAttribute("patternTransform", "<svgattr_patternTransform_value>");
<SVGElement>.setAttribute("patternUnits", "<svgattr_patternUnits_value>");
<SVGElement>.setAttribute("pointer-events", "<svgattr_pointer-events_value>");
<SVGElement>.setAttribute("points", "<svgattr_points_value>");
<SVGElement>.setAttribute("pointsAtX", "<svgattr_pointsAtX_value>");
<SVGElement>.setAttribute("pointsAtY", "<svgattr_pointsAtY_value>");
<SVGElement>.setAttribute("pointsAtZ", "<svgattr_pointsAtZ_value>");
<SVGElement>.setAttribute("preserveAlpha", "<svgattr_preserveAlpha_value>");
<SVGElement>.setAttribute("preserveAspectRatio", "<svgattr_preserveAspectRatio_value>");
<SVGElement>.setAttribute("primitiveUnits", "<svgattr_primitiveUnits_value>");
<SVGElement>.setAttribute("r", "<svgattr_r_value>");
<SVGElement>.setAttribute("radius", "<svgattr_radius_value>");
<SVGElement>.setAttribute("refX", "<svgattr_refX_value>");
<SVGElement>.setAttribute("refY", "<svgattr_refY_value>");
<SVGElement>.setAttribute("repeatCount", "<svgattr_repeatCount_value>");
<SVGElement>.setAttribute("repeatDur", "<svgattr_repeatDur_value>");
<SVGElement>.setAttribute("requiredExtensions", "<svgattr_requiredExtensions_value>");
<SVGElement>.setAttribute("requiredFeatures", "<svgattr_requiredFeatures_value>");
<SVGElement>.setAttribute("restart", "<svgattr_restart_value>");
<SVGElement>.setAttribute("result", "<svgattr_result_value>");
<SVGElement>.setAttribute("role", "<svgattr_role_value>");
<SVGElement>.setAttribute("rotate", "<svgattr_rotate_value>");
<SVGElement>.setAttribute("rx", "<svgattr_rx_value>");
<SVGElement>.setAttribute("ry", "<svgattr_ry_value>");
<SVGElement>.setAttribute("scale", "<svgattr_scale_value>");
<SVGElement>.setAttribute("seed", "<svgattr_seed_value>");
<SVGElement>.setAttribute("shape-rendering", "<svgattr_shape-rendering_value>");
<SVGElement>.setAttribute("slope", "<svgattr_slope_value>");
<SVGElement>.setAttribute("specularConstant", "<svgattr_specularConstant_value>");
<SVGElement>.setAttribute("specularExponent", "<svgattr_specularExponent_value>");
<SVGElement>.setAttribute("spreadMethod", "<svgattr_spreadMethod_value>");
<SVGElement>.setAttribute("startOffset", "<svgattr_startOffset_value>");
<SVGElement>.setAttribute("stdDeviation", "<svgattr_stdDeviation_value>");
<SVGElement>.setAttribute("stitchTiles", "<svgattr_stitchTiles_value>");
<SVGElement>.setAttribute("stop-color", "<svgattr_stop-color_value>");
<SVGElement>.setAttribute("stop-offset", "<svgattr_stop-offset_value>");
<SVGElement>.setAttribute("stop-opacity", "<svgattr_stop-opacity_value>");
<SVGElement>.setAttribute("stroke", <svg_url_fill>);
<SVGElement>.setAttribute("stroke", "<svgattr_stroke_value>");
<SVGElement>.setAttribute("stroke-dasharray", "<svgattr_stroke-dasharray_value>");
<SVGElement>.setAttribute("stroke-dashoffset", "<svgattr_stroke-dashoffset_value>");
<SVGElement>.setAttribute("stroke-join", "<svgattr_stroke-join_value>");
<SVGElement>.setAttribute("stroke-linecap", "<svgattr_stroke-linecap_value>");
<SVGElement>.setAttribute("stroke-linejoin", "<svgattr_stroke-linejoin_value>");
<SVGElement>.setAttribute("stroke-miterlimit", "<svgattr_stroke-miterlimit_value>");
<SVGElement>.setAttribute("stroke-opacity", "<svgattr_stroke-opacity_value>");
<SVGElement>.setAttribute("stroke-width", "<svgattr_stroke-width_value>");
<SVGElement>.setAttribute("style", "<svgattr_style_value>");
<SVGElement>.setAttribute("surfaceScale", "<svgattr_surfaceScale_value>");
<SVGElement>.setAttribute("systemLanguage", "<svgattr_systemLanguage_value>");
<SVGElement>.setAttribute("tabindex", "<svgattr_tabindex_value>");
<SVGElement>.setAttribute("tableValues", "<svgattr_tableValues_value>");
<SVGElement>.setAttribute("target", "<svgattr_target_value>");
<SVGElement>.setAttribute("targetX", "<svgattr_targetX_value>");
<SVGElement>.setAttribute("targetY", "<svgattr_targetY_value>");
<SVGElement>.setAttribute("text-anchor", "<svgattr_text-anchor_value>");
<SVGElement>.setAttribute("text-decoration", "<svgattr_text-decoration_value>");
<SVGElement>.setAttribute("text-rendering", "<svgattr_text-rendering_value>");
<SVGElement>.setAttribute("textLength", "<svgattr_textLength_value>");
<SVGElement>.setAttribute("to", "<svgattr_to_value>");
<SVGElement>.setAttribute("transform", "<svgattr_transform_value>");
<SVGElement>.setAttribute("type", "<svgattr_type_value>");
<SVGElement>.setAttribute("underline-position", "<svgattr_underline-position_value>");
<SVGElement>.setAttribute("underline-thickness", "<svgattr_underline-thickness_value>");
<SVGElement>.setAttribute("unicode", "<svgattr_unicode_value>");
<SVGElement>.setAttribute("unicode-bidi", "<svgattr_unicode-bidi_value>");
<SVGElement>.setAttribute("unicode-range", "<svgattr_unicode-range_value>");
<SVGElement>.setAttribute("units-per-em", "<svgattr_units-per-em_value>");
<SVGElement>.setAttribute("values", "<svgattr_values_value>");
<SVGElement>.setAttribute("vector-effect", "<svgattr_vector-effect_value>");
<SVGElement>.setAttribute("version", "<svgattr_version_value>");
<SVGElement>.setAttribute("vert-origin-y", "<svgattr_vert-origin-y_value>");
<SVGElement>.setAttribute("viewBox", "<svgattr_viewBox_value>");
<SVGElement>.setAttribute("viewTarget", "<svgattr_viewTarget_value>");
<SVGElement>.setAttribute("viewbox", "<svgattr_viewbox_value>");
<SVGElement>.setAttribute("visibility", "<svgattr_visibility_value>");
<SVGElement>.setAttribute("width", "<svgattr_width_value>");
<SVGElement>.setAttribute("word-spacing", "<svgattr_word-spacing_value>");
<SVGElement>.setAttribute("writing-mode", "<svgattr_writing-mode_value>");
<SVGElement>.setAttribute("x", "<svgattr_x_value>");
<SVGElement>.setAttribute("x-height", "<svgattr_x-height_value>");
<SVGElement>.setAttribute("x1", "<svgattr_x1_value>");
<SVGElement>.setAttribute("x2", "<svgattr_x2_value>");
<SVGElement>.setAttribute("xChannelSelector", "<svgattr_xChannelSelector_value>");
<SVGElement>.setAttribute("y", "<svgattr_y_value>");
<SVGElement>.setAttribute("y1", "<svgattr_y1_value>");
<SVGElement>.setAttribute("y2", "<svgattr_y2_value>");
<SVGElement>.setAttribute("yChannelSelector", "<svgattr_yChannelSelector_value>");
<SVGElement>.setAttribute("z", "<svgattr_z_value>");
<SVGElement>.setAttribute("zoomAndPan", "<svgattr_zoomAndPan_value>");
<SVGElement>.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:actuate", "<svgattr_xlink_actuate_value>");
<SVGElement>.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", "<svgattr_xlink_href_value>");
<SVGElement>.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:show", "<svgattr_xlink_show_value>");
<SVGElement>.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:title", "<svgattr_xlink_title_value>");
<SVGElement>.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:type", "<svgattr_xlink_type_value>");
<SVGElement>.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:id", "<svgattr_xml_id_value>");
<SVGElement>.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:lang", "<svgattr_xml_lang_value>");
<SVGElement>.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space", "<svgattr_xml_space_value>");
<new svg_href_path> = "<hash>" + <SVGPathElement>.id;
<new svg_url_clippath> = "url(<hash>" + <SVGClipPathElement>.id + ")";
<new svg_url_filter> = "url(<hash>" + <SVGFilterElement>.id + ")";
<new svg_url_marker> = "url(<hash>" + <SVGMarkerElement>.id + ")";
<new svg_url_mask> = "url(<hash>" + <SVGMaskElement>.id + ")";
<new svg_url_fill> = "url(<hash>" + <SVGLinearGradientElement>.id + ")";
<new svg_url_fill> = "url(<hash>" + <SVGPatternElement>.id + ")";
<new svg_url_fill> = "url(<hash>" + <SVGRadialGradientElement>.id + ")";
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
document.all[<int min=0 max=100>%document.all.length].appendChild(<Element>);
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;
<new CSSStyleDeclaration> = <Element>.style;

!end lines